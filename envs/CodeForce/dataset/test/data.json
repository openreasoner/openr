[{"input": "Everybody seems to think that the Martians are green, but it turns out they are metallic pink and fat. Ajs has two bags of distinct nonnegative integers. The bags are disjoint, and the union of the sets of numbers in the bags is \\{0,1,\u2026,M-1\\}, for some positive integer M. Ajs draws a number from the first bag and a number from the second bag, and then sums them modulo M.\n\nWhat are the residues modulo M that Ajs cannot obtain with this action?\n\nInput\n\nThe first line contains two positive integer N (1 \u2264 N \u2264 200 000) and M (N+1 \u2264 M \u2264 10^{9}), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains N nonnegative integers a_1,a_2,\u2026,a_N (0 \u2264 a_1<a_2< \u2026< a_N<M), the contents of the first bag.\n\nOutput\n\nIn the first line, output the cardinality K of the set of residues modulo M which Ajs cannot obtain.\n\nIn the second line of the output, print K space-separated integers greater or equal than zero and less than M, which represent the residues Ajs cannot obtain. The outputs should be sorted in increasing order of magnitude. If K=0, do not output the second line.\n\n", "output": "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())) + [0]*500000\n    ans_S = 0\n    a[n] = a[0] + m\n    s = [0]*600600\n    for i in range(n):\n        s[i] = a[i + 1] - a[i]\n    s[n] = -1\n    for i in range(n):\n        s[2*n - i] = s[i]\n    for i in range(2*n + 1, 3*n + 1):\n        s[i] = s[i - n]\n    l, r = 0, 0\n    z = [0]*600600\n    for i in range(1, 3*n + 1):\n        if i < r:\n            z[i] = z[i - l]\n        while i + z[i] <= 3*n and (s[i + z[i]] == s[z[i]]):\n            z[i] += 1\n        if i + z[i] > r:\n            l = i\n            r = i + z[i]\n    ans = []\n    for i in range(n + 1, 2*n + 1):\n        if z[i] < n:\n            continue\n        ans_S += 1\n        ans.append((a[0] + a[2*n - i + 1]) % m)\n    ans.sort()\n    print(ans_S)\n    print(*ans)\n    return\n\nif __name__==\"__main__\":\n    main()", "public_tests": {"input": ["4 1000000000\n5 25 125 625\n", "2 4\n1 3\n", "2 5\n3 4\n"], "output": ["0\n", "2\n0 2 \n", "1\n2 \n"]}, "private_tests": {"input": ["4 20\n5 6 7 16\n", "9 10\n1 2 3 4 5 6 7 8 9\n", "3 100000011\n678 500678 1000678\n", "14 34\n1 2 4 7 10 12 13 18 19 21 24 27 29 30\n", "36 81\n4 5 7 8 13 14 16 17 22 23 25 26 31 32 34 35 40 41 43 44 49 50 52 53 58 59 61 62 67 68 70 71 76 77 79 80\n", "1 2\n1\n"], "output": ["1\n12 \n", "1\n0 \n", "1\n1001356 \n", "2\n14 31 \n", "9\n3 12 21 30 39 48 57 66 75 \n", "1\n0\n"]}, "index": 8000}, {"input": "Ivan has number b. He is sorting through the numbers a from 1 to 10^{18}, and for every a writes ([a,    b])/(a) on blackboard. Here [a,    b] stands for least common multiple of a and b. Ivan is very lazy, that's why this task bored him soon. But he is interested in how many different numbers he would write on the board if he would finish the task. Help him to find the quantity of different numbers he would write on the board.\n\nInput\n\nThe only line contains one integer \u2014 b (1 \u2264 b \u2264 10^{10}).\n\nOutput\n\nPrint one number \u2014 answer for the problem.\n\n", "output": "b=int(input())\nc=int(b**.5)\nprint(2*sum(b%i==0for i in range(1,c+1))-(c*c==b))", "public_tests": {"input": ["1\n", "2\n"], "output": ["1\n", "2\n"]}, "private_tests": {"input": ["244078129\n", "2793510720\n", "16\n", "179\n", "1048576\n", "5\n", "1102701600\n", "4324320\n", "2000000014\n", "8872504640\n", "963837006\n", "8\n", "2327925600\n", "58697100\n", "51\n", "2095133040\n", "196729490\n", "6508183\n", "603979776\n", "6\n", "1073676287\n", "2147483647\n", "9133684560\n", "169\n", "6983776800\n", "433494437\n", "45\n", "5760838\n", "3491888400\n", "4000000028\n", "10\n", "1396755360\n", "48932\n", "985944960\n", "2162160\n", "9749081567\n", "2971215073\n", "3\n", "5587021440\n", "13693680\n", "10000000000\n", "999393068\n", "999152231\n", "898781184\n", "2205403200\n", "9886593024\n", "4655851200\n", "1024\n", "7169516929\n", "14\n"], "output": ["9\n", "1792\n", "5\n", "2\n", "21\n", "2\n", "1440\n", "384\n", "4\n", "56\n", "32\n", "4\n", "1728\n", "324\n", "4\n", "1600\n", "8\n", "4\n", "81\n", "4\n", "2\n", "2\n", "1920\n", "3\n", "2304\n", "2\n", "6\n", "24\n", "1920\n", "6\n", "4\n", "1536\n", "12\n", "1280\n", "320\n", "4\n", "2\n", "2\n", "2048\n", "480\n", "121\n", "24\n", "16\n", "364\n", "1680\n", "728\n", "2016\n", "11\n", "3\n", "4\n"]}, "index": 8001}, {"input": "You are given a string s=s_1s_2... s_n of length n, which only contains digits 1, 2, ..., 9.\n\nA substring s[l ... r] of s is a string s_l s_{l + 1} s_{l + 2} \u2026 s_r. A substring s[l ... r] of s is called even if the number represented by it is even. \n\nFind the number of even substrings of s. Note, that even if some substrings are equal as strings, but have different l and r, they are counted as different substrings.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 65000) \u2014 the length of the string s.\n\nThe second line contains a string s of length n. The string s consists only of digits 1, 2, ..., 9.\n\nOutput\n\nPrint the number of even substrings of s.\n\n", "output": "I=input\nI()\nprint(sum([i+1 for i,c in enumerate(I()) if int(c)%2<1]))", "public_tests": {"input": ["4\n1234\n", "4\n2244\n"], "output": ["6\n", "10\n"]}, "private_tests": {"input": ["3\n112\n", "3\n121\n", "3\n122\n", "39\n263254663359864483324578786753512345165\n", "3\n211\n", "3\n111\n", "2\n81\n", "3\n222\n", "3\n212\n", "2\n13\n", "10\n9572683145\n", "1\n3\n", "3\n221\n", "2\n18\n", "2\n68\n", "1\n6\n"], "output": ["3\n", "2\n", "5\n", "327\n", "1\n", "0\n", "1\n", "6\n", "4\n", "0\n", "24\n", "0\n", "3\n", "2\n", "3\n", "1\n"]}, "index": 8002}, {"input": "You are given a long decimal number a consisting of n digits from 1 to 9. You also have a function f that maps every digit from 1 to 9 to some (possibly the same) digit from 1 to 9.\n\nYou can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in a, and replace each digit x from this segment with f(x). For example, if a = 1337, f(1) = 1, f(3) = 5, f(7) = 3, and you choose the segment consisting of three rightmost digits, you get 1553 as the result.\n\nWhat is the maximum possible number you can obtain applying this operation no more than once?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of digits in a.\n\nThe second line contains a string of n characters, denoting the number a. Each character is a decimal digit from 1 to 9.\n\nThe third line contains exactly 9 integers f(1), f(2), ..., f(9) (1 \u2264 f(i) \u2264 9).\n\nOutput\n\nPrint the maximum number you can get after applying the operation described in the statement no more than once.\n\n", "output": "input();t=[*map(int,input())];f=0,*input().split();c=0;a=0\nfor b in t:\n n=int(f[b])\n if n>b or n==b and c:c=1;t[a]=n\n elif c:break\n a+=1\nprint(*t,sep='')", "public_tests": {"input": ["2\n33\n1 1 1 1 1 1 1 1 1\n", "4\n1337\n1 2 5 4 6 6 3 1 9\n", "5\n11111\n9 8 7 6 5 4 3 2 1\n"], "output": ["33", "1557", "99999"]}, "private_tests": {"input": ["18\n263583239493593927\n7 7 3 7 7 6 9 7 6\n", "3\n649\n1 5 2 9 7 8 8 3 1\n", "3\n985\n3 5 3 8 8 6 4 4 3\n", "19\n2612437771227631192\n6 7 3 6 8 7 9 9 9\n", "1\n3\n2 8 4 5 4 1 7 2 3\n", "1\n6\n4 8 2 6 8 8 8 8 3\n", "3\n931\n4 7 8 6 2 4 3 1 2\n", "4\n1234\n1 1 4 5 1 1 1 1 1\n", "4\n3411\n2 9 5 8 1 9 9 1 1\n", "3\n934\n5 9 6 8 6 2 2 9 6\n", "5\n63192\n1 7 4 6 9 3 6 2 2\n", "2\n51\n1 2 5 4 6 6 3 1 9\n", "6\n463364\n9 7 7 4 9 7 3 3 6\n", "6\n135642\n7 9 3 8 4 8 2 3 8\n", "2\n36\n1 4 7 5 3 2 7 8 7\n", "2\n51\n1 2 3 4 5 6 7 8 9\n", "4\n4841\n6 4 7 1 7 1 3 9 7\n", "6\n853377\n3 5 7 3 9 5 8 1 5\n", "5\n96563\n6 7 4 8 5 5 4 7 4\n", "5\n73491\n9 9 2 1 4 2 1 8 7\n", "3\n738\n3 7 4 9 4 6 7 3 3\n", "1\n2\n1 4 4 8 8 8 7 3 2\n", "1\n6\n2 6 3 9 8 4 7 3 2\n", "5\n89126\n9 3 7 6 7 8 9 8 3\n", "6\n848821\n2 3 9 4 9 6 5 3 5\n", "5\n77372\n1 4 7 7 9 1 9 9 7\n", "5\n11636\n9 2 2 1 3 8 1 7 5\n", "2\n42\n2 3 8 5 6 5 3 1 8\n", "4\n3985\n2 8 1 1 9 2 2 8 3\n", "5\n28491\n1 6 5 5 8 9 6 9 4\n", "1\n9\n2 3 4 5 6 7 8 9 1\n", "3\n235\n4 7 3 2 6 8 8 7 5\n", "4\n7362\n2 6 4 6 5 7 5 5 8\n", "8\n72231447\n7 9 4 5 1 2 7 6 5\n", "9\n145553875\n9 2 5 3 8 6 3 1 5\n", "4\n3511\n2 9 9 9 7 7 2 7 1\n", "2\n98\n7 5 5 4 8 3 1 9 4\n", "5\n14824\n6 3 4 5 4 7 9 9 7\n", "11\n15968722286\n8 6 8 3 5 7 3 8 4\n", "1\n4\n9 7 4 6 5 6 2 9 3\n", "5\n21558\n6 9 4 9 6 6 5 9 7\n", "4\n4444\n2 1 4 3 6 5 8 9 7\n", "11\n42828727593\n8 8 7 5 6 5 4 8 9\n", "3\n149\n1 2 3 8 8 6 6 9 4\n", "3\n743\n4 4 4 8 5 8 6 6 5\n", "3\n469\n5 6 8 9 2 6 7 1 5\n", "11\n19727914253\n2 9 4 6 4 5 1 7 6\n", "6\n422354\n8 4 3 6 7 9 7 6 8\n", "8\n71222655\n8 4 8 9 7 6 6 4 8\n", "4\n6785\n6 9 7 3 8 2 9 4 3\n", "3\n536\n7 7 8 9 7 5 6 5 6\n", "20\n58832646452639258958\n9 2 2 1 1 4 8 6 6\n", "6\n912349\n1 1 4 5 1 1 1 1 1\n", "1\n3\n8 7 8 7 8 5 8 2 2\n", "7\n6545161\n7 2 3 5 9 6 8 1 3\n", "11\n95933442388\n4 8 4 6 3 7 5 8 5\n", "9\n193787726\n5 5 8 9 4 5 2 9 1\n", "1\n5\n1 2 3 4 5 6 7 8 9\n", "1\n6\n4 2 1 6 8 9 5 2 3\n", "19\n4752348644348366742\n6 7 9 7 5 7 9 9 5\n", "2\n33\n4 5 5 8 7 7 5 4 4\n", "2\n87\n6 2 9 2 4 3 9 6 4\n", "1\n3\n4 9 9 6 8 4 5 5 5\n", "4\n5422\n3 4 1 8 6 5 1 7 2\n", "2\n35\n1 8 7 2 1 8 8 6 2\n", "7\n3243631\n6 3 6 5 2 9 2 2 2\n", "10\n2422346641\n4 2 8 7 4 7 1 9 7\n", "16\n3245311794575433\n3 5 3 4 3 4 2 7 5\n", "3\n512\n3 3 7 7 2 4 7 9 4\n", "2\n47\n9 1 2 3 7 3 8 6 1\n", "5\n97533\n2 8 4 8 9 2 2 8 2\n", "4\n1733\n1 2 5 4 6 6 3 1 9\n", "5\n13362\n5 3 6 5 8 7 8 8 3\n", "3\n613\n6 4 4 5 7 5 4 3 4\n", "1\n1\n9 6 4 3 4 6 8 9 6\n", "8\n25711736\n9 3 1 1 3 2 8 8 1\n", "4\n3753\n5 8 3 2 6 5 7 4 3\n", "1\n2\n9 7 6 2 2 6 2 4 4\n", "3\n814\n5 7 1 7 4 3 9 4 4\n", "2\n22\n8 5 2 7 9 3 8 8 1\n", "11\n69351528788\n2 3 8 2 9 3 9 8 5\n", "15\n164563457334873\n4 3 3 3 6 6 8 8 5\n", "5\n14241\n4 8 1 9 7 8 7 3 5\n", "3\n167\n3 1 6 6 7 8 5 6 3\n", "3\n149\n2 4 4 5 5 9 8 2 2\n", "15\n338725139492819\n6 2 4 9 2 9 3 8 9\n"], "output": ["763783239493593927", "899", "988", "7767639996779736697", "4", "8", "984", "1245", "5822", "968", "64192", "61", "477774", "735642", "76", "51", "4941", "897788", "96564", "73499", "748", "4", "6", "89938", "848832", "99794", "99836", "53", "3989", "69591", "9", "736", "7476", "79947557", "945553875", "9722", "99", "65935", "85968722286", "6", "96669", "4444", "58888727593", "189", "784", "969", "29727914253", "644376", "78444677", "6985", "786", "58832646452639258958", "912459", "8", "6959767", "95944668488", "593787726", "5", "9", "7957979777979977977", "55", "89", "9", "6844", "75", "6356966", "2722877774", "3545311794575433", "533", "48", "97944", "1755", "56673", "664", "9", "35711736", "3763", "7", "857", "55", "69892938988", "464563457334873", "49894", "387", "259", "448725139492819"]}, "index": 8003}, {"input": "There are famous Russian nesting dolls named matryoshkas sold in one of the souvenir stores nearby, and you'd like to buy several of them. The store has n different matryoshkas. Any matryoshka is a figure of volume out_i with an empty space inside of volume in_i (of course, out_i > in_i).\n\nYou don't have much free space inside your bag, but, fortunately, you know that matryoshkas can be nested one inside another. Formally, let's call a set of matryoshkas nested if we can rearrange dolls in such a way, that the first doll can be nested inside the second one, the second doll \u2014 inside the third one and so on. Matryoshka i can be nested inside matryoshka j if out_i \u2264 in_j. So only the last doll will take space inside your bag.\n\nLet's call extra space of a nested set of dolls as a total volume of empty space inside this structure. Obviously, it's equal to in_{i_1} + (in_{i_2} - out_{i_1}) + (in_{i_3} - out_{i_2}) + ... + (in_{i_k} - out_{i_{k-1}}), where i_1, i_2, ..., i_k are the indices of the chosen dolls in the order they are nested in each other.\n\nFinally, let's call a nested subset of the given sequence as big enough if there isn't any doll from the sequence that can be added to the nested subset without breaking its nested property.\n\nYou want to buy many matryoshkas, so you should choose a big enough nested subset to buy it. But you will be disappointed if too much space in your bag will be wasted, so you want to choose a big enough subset so that its extra space is minimum possible among all big enough subsets. Now you wonder, how many different nested subsets meet these conditions (they are big enough, and there is no big enough subset such that its extra space is less than the extra space of the chosen subset). Two subsets are considered different if there exists at least one index i such that one of the subsets contains the i-th doll, and another subset doesn't.\n\nSince the answer can be large, print it modulo 10^9 + 7.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of matryoshkas.\n\nThe next n lines contain a description of each doll: two integers out_i and in_i (1 \u2264 in_i < out_i \u2264 10^9) \u2014 the outer and inners volumes of the i-th matryoshka.\n\nOutput\n\nPrint one integer \u2014 the number of big enough nested subsets such that extra space of each of these subsets is minimum possible. Since the answer can be large, print it modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n7\n4 1\n4 2\n4 2\n2 1\n5 4\n6 4\n3 2\n\n\nOutput\n\n\n6\n\nNote\n\nThere are 6 big enough nested subsets with minimum possible extra space in the example: \n\n  * \\{1, 5\\}: we can't add any other matryoshka and keep it nested; it's extra space is 1; \n  * \\{1, 6\\}; \n  * \\{2, 4, 5\\}; \n  * \\{2, 4, 6\\}; \n  * \\{3, 4, 5\\}; \n  * \\{3, 4, 6\\}. \n\n\n\nThere are no more \"good\" subsets because, for example, subset \\{6, 7\\} is not big enough (we can add the 4-th matryoshka to it) or subset \\{4, 6, 7\\} has extra space equal to 2", "output": "from bisect import bisect_left as lb\n\nMOD = 10 ** 9 + 7\n\nn = int(input())\na = [tuple(map(int, input().split())) for _ in range(n)]\na = sorted((in_, out) for out, in_ in a)\n\ndp_suf = [None] * n\n\nfor i in range(n - 1, -1, -1):\n    in_, out = a[i]\n    j = lb(a, (out, 0))\n    if j == n:\n        empty, count = in_, 1\n    else:\n        empty, count = dp_suf[j]\n        empty -= out - in_\n    if i < n - 1:\n        if empty > dp_suf[i + 1][0]:\n            empty, count = dp_suf[i + 1]\n        elif empty == dp_suf[i + 1][0]:\n            count += dp_suf[i + 1][1]\n    dp_suf[i] = empty, count % MOD\n\nprint(dp_suf[0][1])", "public_tests": {"input": ["7\n4 1\n4 2\n4 2\n2 1\n5 4\n6 4\n3 2\n"], "output": ["6"]}, "private_tests": {"input": ["1\n1000000000 999999999\n", "4\n3 2\n10 2\n4 3\n5 4\n", "10\n7 6\n15 14\n6 5\n8 7\n9 8\n17 16\n9 8\n2 1\n3 2\n5 4\n", "10\n19 17\n14 11\n16 15\n19 18\n12 9\n5 3\n18 16\n13 12\n13 11\n3 2\n", "10\n12 11\n14 13\n17 16\n3 2\n13 12\n4 3\n16 15\n16 15\n10 9\n12 11\n", "20\n41 31\n51 42\n41 31\n51 42\n9 3\n41 31\n16 12\n31 23\n41 31\n20 16\n18 14\n31 23\n18 14\n30 22\n8 2\n9 3\n51 42\n31 23\n51 42\n8 2\n", "20\n30 21\n30 21\n19 13\n51 41\n40 32\n9 7\n39 31\n40 32\n21 15\n17 11\n41 33\n20 14\n30 21\n6 4\n11 9\n51 41\n51 41\n51 41\n11 9\n31 22\n", "15\n51 43\n11 2\n29 22\n20 11\n28 21\n21 12\n35 31\n49 41\n36 32\n29 22\n10 1\n10 1\n50 42\n36 32\n20 11\n", "15\n51 44\n21 14\n51 44\n27 21\n28 22\n39 31\n40 32\n50 43\n40 32\n27 21\n11 1\n20 13\n21 14\n11 1\n11 1\n", "10\n4 2\n18 16\n8 7\n18 17\n18 16\n5 4\n3 2\n18 17\n11 9\n5 4\n", "20\n51 47\n46 42\n25 22\n41 31\n11 2\n27 24\n18 13\n49 45\n16 11\n19 14\n10 1\n30 27\n10 1\n41 31\n16 11\n10 1\n41 31\n41 31\n31 28\n49 45\n", "10\n3 2\n12 11\n13 12\n9 7\n20 18\n15 14\n10 8\n19 18\n15 14\n4 3\n", "10\n3 2\n15 14\n9 8\n13 12\n5 4\n18 17\n3 2\n3 2\n15 14\n12 11\n", "10\n15 12\n13 10\n9 6\n11 8\n9 6\n11 8\n14 12\n7 6\n15 14\n9 8\n", "10\n13 11\n5 4\n19 17\n4 3\n7 5\n7 5\n20 19\n17 16\n14 13\n13 11\n", "1\n2 1\n", "15\n38 33\n38 33\n21 11\n51 41\n30 21\n9 1\n21 11\n31 22\n10 2\n51 41\n51 41\n21 11\n38 33\n30 21\n11 3\n", "10\n17 15\n5 4\n18 16\n13 12\n19 17\n3 1\n12 10\n5 3\n18 16\n11 10\n", "10\n19 17\n15 14\n10 7\n15 14\n5 2\n13 10\n20 18\n13 10\n6 4\n16 15\n"], "output": ["1", "2", "2", "1", "4", "256", "512", "81", "81", "4", "256", "8", "6", "6", "4", "1", "243", "1", "4"]}, "index": 8004}, {"input": "You have two strings a and b of equal even length n consisting of characters 0 and 1.\n\nWe're in the endgame now. To finally make the universe perfectly balanced, you need to make strings a and b equal.\n\nIn one step, you can choose any prefix of a of even length and reverse it. Formally, if a = a_1 a_2 \u2026 a_n, you can choose a positive even integer p \u2264 n and set a to a_p a_{p-1} \u2026 a_1 a_{p+1} a_{p+2} \u2026 a_n.\n\nFind a way to make a equal to b using at most n + 1 reversals of the above kind, or determine that such a way doesn't exist. The number of reversals doesn't have to be minimized.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 2000), denoting the number of test cases.\n\nEach test case consists of two lines. The first line contains a string a of length n, and the second line contains a string b of the same length (2 \u2264 n \u2264 4000; n mod 2 = 0). Both strings consist of characters 0 and 1.\n\nThe sum of n over all t test cases doesn't exceed 4000.\n\nOutput\n\nFor each test case, if it's impossible to make a equal to b in at most n + 1 reversals, output a single integer -1.\n\nOtherwise, output an integer k (0 \u2264 k \u2264 n + 1), denoting the number of reversals in your sequence of steps, followed by k even integers p_1, p_2, \u2026, p_k (2 \u2264 p_i \u2264 n; p_i mod 2 = 0), denoting the lengths of prefixes of a to be reversed, in chronological order.\n\nNote that k doesn't have to be minimized. If there are many solutions, output any of them.\n\nExample\n\nInput\n\n\n4\n0100011011\n1101011000\n10101010\n10101010\n0011\n1001\n100011\n110010\n\n\nOutput\n\n\n3\n6 4 10\n0\n\n-1\n7\n2 6 2 6 2 2 6\n\nNote\n\nIn the first test case, string a changes as follows: \n\n  * after the first reversal: 1000101011; \n  * after the second reversal: 0001101011; \n  * after the third reversal: 1101011000.", "output": "import os\nimport sys\nfrom io import BytesIO, IOBase\n# region fastio\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef solve_case():\n    a = [int(x) for x in input()]\n    b = [int(x) for x in input()]\n    n = len(a)\n    \n    a_rev = []\n    b_rev = []\n    \n    def rev_a(x):\n        if not x:\n            return\n        nonlocal a\n        a = a[:x][::-1] + a[x:]\n        a_rev.append(x)\n\n    def rev_b(x):\n        if not x:\n            return\n        nonlocal b\n        b = b[:x][::-1] + b[x:]\n        b_rev.append(x)\n\n    def answer():\n        #cleaning up\n        nonlocal a_rev\n        nonlocal b_rev\n        b_rev.reverse()\n        a_rev += b_rev\n        while True:\n            final = []\n            i = 0\n            repl = False\n            while i < len(a_rev):\n                if i < len(a_rev) - 1 and a_rev[i] == a_rev[i + 1]:\n                    repl = True\n                    i += 2\n                else:\n                    final.append(a_rev[i])\n                    i += 1\n            a_rev = final\n            if not repl:\n                break\n        print(len(a_rev))\n        print(*a_rev)\n    \n    a_occ = [[0, 0], [0, 0]]\n    b_occ = [[0, 0], [0, 0]]\n    \n    for i in range(0, n, 2):\n        a_occ[a[i]][a[i + 1]] += 1\n\n    for i in range(0, n, 2):\n        b_occ[b[i]][b[i + 1]] += 1\n    \n    if a_occ[0][0] != b_occ[0][0] or a_occ[1][1] != b_occ[1][1]:\n        print(-1)\n        return\n    \n    balanced = a_occ[0][1] == b_occ[1][0]\n    if not balanced:\n        zero, one = 0, 0\n        for i in range(0, n, 2):\n            if a[i] + a[i + 1] == 1:\n                zero, one = zero + a[i], one + a[i + 1]\n                if zero + (a_occ[0][1] - one) == b_occ[1][0]:\n                    balanced = True\n                    rev_a(i + 2)\n                    break\n    \n    if not balanced:\n        zero, one = 0, 0\n        for i in range(0, n, 2):\n            if b[i] + b[i + 1] == 1:\n                zero, one = zero + b[i], one + b[i + 1]\n                if zero + (b_occ[0][1] - one) == a_occ[1][0]:\n                    balanced = True\n                    rev_b(i + 2)\n                    break\n \n    for i in range(0, n, 2):\n        for j in range(i, n, 2):\n            if a[j] == b[n - i - 1] and a[j + 1] == b[n - i - 2]:\n                rev_a(j)\n                rev_a(j + 2)\n                break\n    \n    answer()\n\ndef main():\n    for _ in range(int(input())):\n        solve_case()\n            \nmain()", "public_tests": {"input": ["4\n0100011011\n1101011000\n10101010\n10101010\n0011\n1001\n100011\n110010\n"], "output": ["11\n2 2 4 4 6 4 6 6 8 8 10 \n8\n8 2 2 4 4 6 6 8 \n-1\n6\n2 2 2 4 4 6 \n"]}, "private_tests": {"input": ["4\n0100011011\n1101011000\n10101010\n10101010\n0011\n1001\n100011\n110010\n"], "output": ["11\n2 2 4 4 6 4 6 6 8 8 10 \n8\n8 2 2 4 4 6 6 8 \n-1\n6\n2 2 2 4 4 6 \n"]}, "index": 8005}, {"input": "You have a coins of value n and b coins of value 1. You always pay in exact change, so you want to know if there exist such x and y that if you take x (0 \u2264 x \u2264 a) coins of value n and y (0 \u2264 y \u2264 b) coins of value 1, then the total value of taken coins will be S.\n\nYou have to answer q independent test cases.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 10^4) \u2014 the number of test cases. Then q test cases follow.\n\nThe only line of the test case contains four integers a, b, n and S (1 \u2264 a, b, n, S \u2264 10^9) \u2014 the number of coins of value n, the number of coins of value 1, the value n and the required total value.\n\nOutput\n\nFor the i-th test case print the answer on it \u2014 YES (without quotes) if there exist such x and y that if you take x coins of value n and y coins of value 1, then the total value of taken coins will be S, and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n\nExample\n\nInput\n\n\n4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n\n\nOutput\n\n\nYES\nNO\nNO\nYE", "output": "for _ in[0]*int(input()):a,b,n,s=map(int,input().split());print('YNEOS'[min(s//n,a)*n+b<s::2])", "public_tests": {"input": ["4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n"], "output": ["YES\nNO\nNO\nYES\n"]}, "private_tests": {"input": ["1\n16 2 3 55\n", "1\n87 63 54 9\n", "6\n1 1000000000 1 1000000000\n1 1000000000 1 1000000000\n1 1000000000 1 1000000000\n1 1000000000 1 1000000000\n1 1000000000 1 1000000000\n1 1000000000 1 1000000000\n", "1\n2104 2104 1 2104\n", "1\n500 1000 600 131\n", "1\n2104 2104 2104 2104\n"], "output": ["NO\n", "YES\n", "YES\nYES\nYES\nYES\nYES\nYES\n", "YES\n", "YES\n", "YES\n"]}, "index": 8006}, {"input": "Mr. Scrooge, a very busy man, decided to count the time he wastes on all sorts of useless stuff to evaluate the lost profit. He has already counted the time he wastes sleeping and eating. And now Mr. Scrooge wants to count the time he has wasted signing papers.\n\nMr. Scrooge's signature can be represented as a polyline A1A2... An. Scrooge signs like that: first it places a pen at the point A1, then draws a segment from point A1 to point A2, then he draws a segment from point A2 to point A3 and so on to point An, where he stops signing and takes the pen off the paper. At that the resulting line can intersect with itself and partially repeat itself but Scrooge pays no attention to it and never changes his signing style. As Scrooge makes the signature, he never takes the pen off the paper and his writing speed is constant \u2014 50 millimeters per second.\n\nScrooge signed exactly k papers throughout his life and all those signatures look the same.\n\nFind the total time Scrooge wasted signing the papers.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 1000). Each of the following n lines contains the coordinates of the polyline's endpoints. The i-th one contains coordinates of the point Ai \u2014 integers xi and yi, separated by a space.\n\nAll points Ai are different. The absolute value of all coordinates does not exceed 20. The coordinates are measured in millimeters.\n\nOutput\n\nPrint one real number \u2014 the total time Scrooges wastes on signing the papers in seconds. The absolute or relative error should not exceed 10 - 6.\n\n", "output": "I=lambda:map(int,input().split())\nn,k=I()\na=[[*map(int,input().split())]for _ in[0]*n]\nr=0\nfor u,v in zip(a,a[1:]):\n  r+=((u[0]-v[0])**2+(u[1]-v[1])**2)**0.5\nprint(r*k/50)", "public_tests": {"input": ["2 1\n0 0\n10 0\n", "6 10\n5 0\n4 0\n6 0\n3 0\n7 0\n2 0\n", "5 10\n3 1\n-5 6\n-2 -1\n3 2\n10 0\n"], "output": ["0.200000000\n", "3.000000000\n", "6.032163204\n"]}, "private_tests": {"input": ["48 447\n14 9\n9 -17\n-17 11\n-14 14\n19 -8\n-14 -17\n-7 10\n-6 -11\n-9 -19\n19 10\n-4 2\n-5 16\n20 9\n-10 20\n-7 -17\n14 -16\n-2 -10\n-18 -17\n14 12\n-6 -19\n5 -18\n-3 2\n-3 10\n-5 5\n13 -12\n10 -18\n10 -12\n-2 4\n7 -15\n-5 -5\n11 14\n11 10\n-6 -9\n13 -4\n13 9\n6 12\n-13 17\n-9 -12\n14 -19\n10 12\n-15 8\n-1 -11\n19 8\n11 20\n-9 -3\n16 1\n-14 19\n8 -4\n", "2 1\n-20 -10\n-10 -6\n", "57 373\n18 3\n-4 -1\n18 5\n-7 -15\n-6 -10\n-19 1\n20 15\n15 4\n-1 -2\n13 -14\n0 12\n10 3\n-16 -17\n-14 -9\n-11 -10\n17 19\n-2 6\n-12 -15\n10 20\n16 7\n9 -1\n4 13\n8 -2\n-1 -16\n-3 8\n14 11\n-12 3\n-5 -6\n3 4\n5 7\n-9 9\n11 4\n-19 10\n-7 4\n-20 -12\n10 16\n13 11\n13 -11\n7 -1\n17 18\n-19 7\n14 13\n5 -1\n-7 6\n-1 -6\n6 20\n-16 2\n4 17\n16 -11\n-4 -20\n19 -18\n17 16\n-14 -8\n3 2\n-6 -16\n10 -10\n-13 -11\n", "30 1000\n4 -13\n14 13\n-14 -16\n-9 18\n17 11\n2 -8\n2 15\n8 -1\n-9 13\n8 -12\n-2 20\n11 -12\n19 8\n9 -15\n-20 -5\n-18 20\n-13 14\n-12 -17\n-4 3\n13 -12\n11 -10\n18 7\n-6 11\n10 13\n10 3\n6 -14\n-1 10\n14 -15\n2 11\n-8 10\n", "29 848\n11 -10\n-19 1\n18 18\n19 -19\n0 -5\n16 10\n-20 -14\n7 15\n6 8\n-15 -16\n9 3\n16 -20\n-12 12\n18 -1\n-11 14\n18 10\n11 -20\n-20 -16\n-1 11\n13 10\n-6 13\n-7 -10\n-11 -10\n-10 3\n15 -13\n-4 11\n-13 -11\n-11 -17\n11 -5\n", "13 445\n-15 16\n-8 -14\n8 7\n4 15\n8 -13\n15 -11\n-12 -4\n2 -13\n-5 0\n-20 -14\n-8 -7\n-10 -18\n18 -5\n", "61 764\n-9 15\n11 -8\n-6 -7\n-13 -19\n16 -16\n-5 -1\n20 -19\n-14 -1\n-11 4\n7 -2\n-3 2\n-14 -17\n15 18\n20 15\n-13 -2\n15 8\n3 13\n19 -10\n2 -6\n15 -3\n-12 11\n4 -16\n-14 20\n0 2\n11 -7\n-6 -11\n16 7\n8 -3\n16 -10\n-3 9\n9 5\n4 -1\n-17 9\n14 -4\n8 6\n-19 12\n10 -17\n-5 7\n7 -3\n5 3\n6 -14\n9 9\n-16 -19\n11 -16\n-17 15\n8 5\n16 -19\n-7 10\n14 -15\n15 19\n-20 -16\n6 -2\n-4 6\n7 -15\n1 -8\n20 -17\n3 7\n10 12\n10 -11\n-19 10\n0 -11\n", "5 566\n-11 8\n2 -7\n7 0\n-7 -9\n-7 5\n", "2 13\n13 -10\n-3 -2\n", "60 662\n15 17\n-2 -19\n-4 -17\n10 0\n15 10\n-8 -14\n14 9\n-15 20\n6 5\n-9 0\n-13 20\n13 -2\n10 9\n7 5\n4 18\n-10 1\n6 -15\n15 -16\n6 13\n4 -6\n2 5\n18 19\n8 3\n-7 14\n-12 -20\n14 19\n-15 0\n-2 -12\n9 18\n14 4\n2 -20\n3 0\n20 9\n-5 11\n-11 1\n2 -19\n-14 -4\n18 6\n16 16\n15 3\n-1 -5\n9 20\n12 -8\n-1 10\n-4 -9\n3 6\n3 -12\n14 -10\n-8 10\n-18 6\n14 -2\n-14 -12\n-10 -7\n10 -6\n14 1\n6 14\n15 19\n4 14\n3 -14\n-9 -13\n", "25 258\n-5 -3\n-18 -14\n12 3\n6 11\n4 2\n-19 -3\n19 -7\n-15 19\n-19 -12\n-11 -10\n-5 17\n10 15\n-4 1\n-3 -20\n6 16\n18 -19\n11 -19\n-17 10\n-17 17\n-2 -17\n-3 -9\n18 13\n14 8\n-2 -5\n-11 4\n", "10 95\n-20 -5\n2 -8\n14 13\n10 3\n17 11\n13 -12\n-6 11\n14 -15\n-13 14\n19 8\n", "2 466\n10 16\n-6 -3\n", "2 21\n13 8\n14 10\n", "3 384\n-4 -19\n-17 -2\n3 4\n", "2 75\n-3 12\n1 12\n", "2 1000\n-17 -14\n-14 -8\n", "7 495\n-10 -13\n-9 -5\n4 9\n8 13\n-4 2\n2 10\n-18 15\n", "36 3\n-11 20\n-11 13\n-17 9\n15 9\n-6 9\n-1 11\n12 -11\n16 -10\n-20 7\n-18 6\n-15 -2\n20 -20\n16 4\n-20 -8\n-12 -15\n-13 -6\n-9 -4\n0 -10\n8 -1\n1 4\n5 8\n8 -15\n16 -12\n19 1\n0 -4\n13 -4\n17 -13\n-7 11\n14 9\n-14 -9\n5 -8\n11 -8\n-17 -5\n1 -3\n-16 -17\n2 -3\n", "18 388\n11 -8\n13 10\n18 -17\n-15 3\n-13 -15\n20 -7\n1 -10\n-13 -12\n-12 -15\n-17 -8\n1 -2\n3 -20\n-8 -9\n15 -13\n-19 -6\n17 3\n-17 2\n6 6\n", "2 999\n6 16\n-17 -14\n", "50 284\n-17 -13\n7 12\n-13 0\n13 1\n14 6\n14 -9\n-5 -1\n0 -10\n12 -3\n-14 6\n-8 10\n-16 17\n0 -1\n4 -9\n2 6\n1 8\n-8 -14\n3 9\n1 -15\n-4 -19\n-7 -20\n18 10\n3 -11\n10 16\n2 -6\n-9 19\n-3 -1\n20 9\n-12 -5\n-10 -2\n16 -7\n-16 -18\n-2 17\n2 8\n7 -15\n4 1\n6 -17\n19 9\n-10 -20\n5 2\n10 -2\n3 7\n20 0\n8 -14\n-16 -1\n-20 7\n20 -19\n17 18\n-11 -18\n-16 14\n", "10 958\n7 13\n20 19\n12 -7\n10 -10\n-13 -15\n-10 -7\n20 -5\n-11 19\n-7 3\n-4 18\n"], "output": ["9495.010556306\n", "0.215406592\n", "8929.162822862\n", "13629.282573522\n", "12766.080247922\n", "2113.552527680\n", "22153.369189802\n", "668.956254495\n", "4.651021393\n", "16314.207721932\n", "2797.756635934\n", "429.309294877\n", "231.503997374\n", "0.939148551\n", "324.722285390\n", "6.000000000\n", "134.164078650\n", "789.212495576\n", "36.467924851\n", "2999.497312668\n", "755.286284531\n", "6087.366930474\n", "3415.618464093\n"]}, "index": 8007}, {"input": "You are given an array a of length n and array b of length m both consisting of only integers 0 and 1. Consider a matrix c of size n \u00d7 m formed by following rule: c_{i, j} = a_i \u22c5 b_j (i.e. a_i multiplied by b_j). It's easy to see that c consists of only zeroes and ones too.\n\nHow many subrectangles of size (area) k consisting only of ones are there in c?\n\nA subrectangle is an intersection of a consecutive (subsequent) segment of rows and a consecutive (subsequent) segment of columns. I.e. consider four integers x_1, x_2, y_1, y_2 (1 \u2264 x_1 \u2264 x_2 \u2264 n, 1 \u2264 y_1 \u2264 y_2 \u2264 m) a subrectangle c[x_1 ... x_2][y_1 ... y_2] is an intersection of the rows x_1, x_1+1, x_1+2, ..., x_2 and the columns y_1, y_1+1, y_1+2, ..., y_2.\n\nThe size (area) of a subrectangle is the total number of cells in it.\n\nInput\n\nThe first line contains three integers n, m and k (1 \u2264 n, m \u2264 40 000, 1 \u2264 k \u2264 n \u22c5 m), length of array a, length of array b and required size of subrectangles.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 1), elements of a.\n\nThe third line contains m integers b_1, b_2, \u2026, b_m (0 \u2264 b_i \u2264 1), elements of b.\n\nOutput\n\nOutput single integer \u2014 the number of subrectangles of c with size (area) k consisting only of ones.\n\n", "output": "n,m,k=map(int,input().split())\na=[ len(i) for i in input().replace(' ','').split('0') if len(i)>0 ]\nb=[ len(i) for i in input().replace(' ','').split('0') if len(i)>0 ]\nd=[(i,k//i) for i in range(1,int(k**0.5)+1) if k%i==0]\nd+=[ (j,i) for i,j in d if i!=j ]\nc=0\nfor x,y in d:\n    c+=sum(i-x+1 for i in a if x<=i)*sum(j-y+1 for j in b if y<=j)\nprint(c)", "public_tests": {"input": ["3 5 4\n1 1 1\n1 1 1 1 1\n", "3 3 2\n1 0 1\n1 1 1\n"], "output": ["14\n", "4\n"]}, "private_tests": {"input": ["50 50 6\n1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 0 1\n1 1 0 1 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0\n", "1 1 1\n1\n1\n"], "output": ["2153\n", "1\n"]}, "index": 8008}, {"input": "You are given two integers x and y. You can perform two types of operations: \n\n  1. Pay a dollars and increase or decrease any of these integers by 1. For example, if x = 0 and y = 7 there are four possible outcomes after this operation: \n    * x = 0, y = 6; \n    * x = 0, y = 8; \n    * x = -1, y = 7; \n    * x = 1, y = 7. \n\n  2. Pay b dollars and increase or decrease both integers by 1. For example, if x = 0 and y = 7 there are two possible outcomes after this operation: \n    * x = -1, y = 6; \n    * x = 1, y = 8. \n\n\n\nYour goal is to make both given integers equal zero simultaneously, i.e. x = y = 0. There are no other requirements. In particular, it is possible to move from x=1, y=0 to x=y=0.\n\nCalculate the minimum amount of dollars you have to spend on it.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of testcases.\n\nThe first line of each test case contains two integers x and y (0 \u2264 x, y \u2264 10^9).\n\nThe second line of each test case contains two integers a and b (1 \u2264 a, b \u2264 10^9).\n\nOutput\n\nFor each test case print one integer \u2014 the minimum amount of dollars you have to spend.\n\nExample\n\nInput\n\n\n2\n1 3\n391 555\n0 0\n9 4\n\n\nOutput\n\n\n1337\n0\n\nNote\n\nIn the first test case you can perform the following sequence of operations: first, second, first. This way you spend 391 + 555 + 391 = 1337 dollars.\n\nIn the second test case both integers are equal to zero initially, so you dont' have to spend money", "output": "R=lambda:map(int,input().split())\nt,=R()\nexec(t*'x,y=sorted(R());a,b=R();print(min(a,b-a)*x+a*y);')", "public_tests": {"input": ["2\n1 3\n391 555\n0 0\n9 4\n"], "output": ["1337\n0\n"]}, "private_tests": {"input": ["1\n129 8437\n5 3\n", "3\n1 3\n391 555\n129 8437\n9 4\n321 654\n3 4\n", "2\n1 3\n391 555\n129 8437\n9 4\n", "1\n321 654\n3 4\n", "1\n150 140\n1 1\n"], "output": ["41927\n", "1337\n75288\n2283\n", "1337\n75288\n", "2283\n", "150\n"]}, "index": 8009}, {"input": "Ehab loves number theory, but for some reason he hates the number x. Given an array a, find the length of its longest subarray such that the sum of its elements isn't divisible by x, or determine that such subarray doesn't exist.\n\nAn array a is a subarray of an array b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 5) \u2014 the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains 2 integers n and x (1 \u2264 n \u2264 10^5, 1 \u2264 x \u2264 10^4) \u2014 the number of elements in the array a and the number that Ehab hates.\n\nThe second line contains n space-separated integers a_1, a_2, \u2026, a_{n} (0 \u2264 a_i \u2264 10^4) \u2014 the elements of the array a.\n\nOutput\n\nFor each testcase, print the length of the longest subarray whose sum isn't divisible by x. If there's no such subarray, print -1.\n\nExample\n\nInput\n\n\n3\n3 3\n1 2 3\n3 4\n1 2 3\n2 2\n0 6\n\n\nOutput\n\n\n2\n3\n-1\n\nNote\n\nIn the first test case, the subarray [2,3] has sum of elements 5, which isn't divisible by 3.\n\nIn the second test case, the sum of elements of the whole array is 6, which isn't divisible by 4.\n\nIn the third test case, all subarrays have an even sum, so the answer is -1", "output": "for i in[*open(0)][2::2]:print(len({*i.split()}))\n", "public_tests": {"input": ["3\n3 3\n1 2 3\n3 4\n1 2 3\n2 2\n0 6\n"], "output": ["2\n3\n-1\n"]}, "private_tests": {"input": ["2\n2\n1 1\n1\n1\n", "2\n4\n1 3 3 3\n3\n1 2 3\n", "1\n5\n1 3 4 5 2\n", "2\n5\n1 2 3 4 5\n4\n2 3 4 5\n", "2\n3\n3 2 1\n6\n3 1 4 1 5 9\n", "1\n3\n1 1 274005660\n", "2\n5\n5 5 5 5 5\n3\n1 2 5\n", "4\n7\n6 6 8 8 6 6 6\n1\n2\n5\n4 5 9 8 7\n7\n1 2 7 1 6 10 2\n", "2\n3\n1 1 1\n2\n1 1\n", "1\n5 2\n2 3 1 2 1\n", "1\n69 69\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "1\n3 2\n1 2 3\n", "1\n6 3\n1 2 1 2 1 2\n", "5\n1 3\n9\n1 4\n7\n1 1\n0\n5 10000\n10000 5000 5000 10000 0\n8 2\n0 1 0 1 0 1 0 1\n", "1\n10 2\n1 1 1 1 1 1 1 1 1 1\n"], "output": ["1\n1\n", "2\n3\n", "5\n", "5\n4\n", "3\n5\n", "2\n", "1\n3\n", "2\n1\n5\n5\n", "1\n1\n", "5\n", "68\n", "2\n", "5\n", "-1\n1\n-1\n3\n7\n", "9\n"]}, "index": 8010}, {"input": "The only difference between easy and hard versions is on constraints. In this version constraints are higher. You can make hacks only if all versions of the problem are solved.\n\nKoa the Koala is at the beach!\n\nThe beach consists (from left to right) of a shore, n+1 meters of sea and an island at n+1 meters from the shore.\n\nShe measured the depth of the sea at 1, 2, ..., n meters from the shore and saved them in array d. d_i denotes the depth of the sea at i meters from the shore for 1 \u2264 i \u2264 n.\n\nLike any beach this one has tide, the intensity of the tide is measured by parameter k and affects all depths from the beginning at time t=0 in the following way:\n\n  * For a total of k seconds, each second, tide increases all depths by 1.\n\n  * Then, for a total of k seconds, each second, tide decreases all depths by 1.\n\n  * This process repeats again and again (ie. depths increase for k seconds then decrease for k seconds and so on ...).\n\nFormally, let's define 0-indexed array p = [0, 1, 2, \u2026, k - 2, k - 1, k, k - 1, k - 2, \u2026, 2, 1] of length 2k. At time t (0 \u2264 t) depth at i meters from the shore equals d_i + p[t mod 2k] (t mod 2k denotes the remainder of the division of t by 2k). Note that the changes occur instantaneously after each second, see the notes for better understanding. \n\n\n\n\nAt time t=0 Koa is standing at the shore and wants to get to the island. Suppose that at some time t (0 \u2264 t) she is at x (0 \u2264 x \u2264 n) meters from the shore:\n\n  * In one second Koa can swim 1 meter further from the shore (x changes to x+1) or not swim at all (x stays the same), in both cases t changes to t+1.\n\n  * As Koa is a bad swimmer, the depth of the sea at the point where she is can't exceed l at integer points of time (or she will drown). More formally, if Koa is at x (1 \u2264 x \u2264 n) meters from the shore at the moment t (for some integer t\u2265 0), the depth of the sea at this point \u2014 d_x + p[t mod 2k] \u2014 can't exceed l. In other words, d_x + p[t mod 2k] \u2264 l must hold always.\n\n  * Once Koa reaches the island at n+1 meters from the shore, she stops and can rest.\n\nNote that while Koa swims tide doesn't have effect on her (ie. she can't drown while swimming). Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide (they are solid ground and she won't drown there). \n\n\n\n\nKoa wants to know whether she can go from the shore to the island. Help her!\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains three integers n, k and l (1 \u2264 n \u2264 3 \u22c5 10^5; 1 \u2264 k \u2264 10^9; 1 \u2264 l \u2264 10^9) \u2014 the number of meters of sea Koa measured and parameters k and l.\n\nThe second line of each test case contains n integers d_1, d_2, \u2026, d_n (0 \u2264 d_i \u2264 10^9) \u2014 the depths of each meter of sea Koa measured.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case:\n\nPrint Yes if Koa can get from the shore to the island, and No otherwise.\n\nYou may print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n7\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4\n4 4 3 0 2 4 2\n5 2 3\n1 2 3 2 2\n\n\nOutput\n\n\nYes\nNo\nYes\nYes\nYes\nNo\nNo\n\nNote\n\nIn the following s denotes the shore, i denotes the island, x denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at 1, 2, ..., n meters from the shore.\n\nIn test case 1 we have n = 2, k = 1, l = 1, p = [ 0, 1 ].\n\nKoa wants to go from shore (at x = 0) to the island (at x = 3). Let's describe a possible solution:\n\n  * Initially at t = 0 the beach looks like this: [\\underline{s}, 1, 0, i]. \n  * At t = 0 if Koa would decide to swim to x = 1, beach would look like: [s, \\underline{2}, 1, i] at t = 1, since 2 > 1 she would drown. So Koa waits 1 second instead and beach looks like [\\underline{s}, 2, 1, i] at t = 1. \n  * At t = 1 Koa swims to x = 1, beach looks like [s, \\underline{1}, 0, i] at t = 2. Koa doesn't drown because 1 \u2264 1. \n  * At t = 2 Koa swims to x = 2, beach looks like [s, 2, \\underline{1}, i] at t = 3. Koa doesn't drown because 1 \u2264 1. \n  * At t = 3 Koa swims to x = 3, beach looks like [s, 1, 0, \\underline{i}] at t = 4. \n  * At t = 4 Koa is at x = 3 and she made it! \n\n\n\nWe can show that in test case 2 Koa can't get to the island", "output": "f=lambda:map(int,input().split())\nt,=f()\nfor _ in[0]*t:\n    n,k,l=f();s=[*f()];a=0;z=k-1\n    for i in s:\n        if i+k<=l:z=k-1\n        elif z>=0and l>=i:z=min(z,l-i)-1\n        elif l<i or abs(z)>l-i:a=1\n        else:z-=1\n    print('YNeos'[a::2])", "public_tests": {"input": ["7\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4\n4 4 3 0 2 4 2\n5 2 3\n1 2 3 2 2\n"], "output": ["Yes\nNo\nYes\nYes\nYes\nNo\nNo\n"]}, "private_tests": {"input": ["10\n1 1 1\n1\n1 1 1\n0\n1 1 1\n2\n1 1 1\n3\n1 1 1\n4\n2 2 2\n2 3\n2 1 2\n1 1\n2 1 2\n0 0\n14 3 9\n1 3 2 3 3 2 4 2 1 3 6 7 10 1\n7 1 1\n1 1 1 1 1 1 1\n", "1\n100 5 4\n0 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 2 0 0 0\n"], "output": ["Yes\nYes\nNo\nNo\nNo\nNo\nYes\nYes\nNo\nNo\n", "No\n"]}, "index": 8011}, {"input": "Alice and Bob are playing a fun game of tree tag.\n\nThe game is played on a tree of n vertices numbered from 1 to n. Recall that a tree on n vertices is an undirected, connected graph with n-1 edges.\n\nInitially, Alice is located at vertex a, and Bob at vertex b. They take turns alternately, and Alice makes the first move. In a move, Alice can jump to a vertex with distance at most da from the current vertex. And in a move, Bob can jump to a vertex with distance at most db from the current vertex. The distance between two vertices is defined as the number of edges on the unique simple path between them. In particular, either player is allowed to stay at the same vertex in a move. Note that when performing a move, a player only occupies the starting and ending vertices of their move, not the vertices between them.\n\nIf after at most 10^{100} moves, Alice and Bob occupy the same vertex, then Alice is declared the winner. Otherwise, Bob wins.\n\nDetermine the winner if both players play optimally.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains five integers n,a,b,da,db (2\u2264 n\u2264 10^5, 1\u2264 a,b\u2264 n, a\u2260 b, 1\u2264 da,db\u2264 n-1) \u2014 the number of vertices, Alice's vertex, Bob's vertex, Alice's maximum jumping distance, and Bob's maximum jumping distance, respectively.\n\nThe following n-1 lines describe the edges of the tree. The i-th of these lines contains two integers u, v (1\u2264 u, v\u2264 n, u\u2260 v), denoting an edge between vertices u and v. It is guaranteed that these edges form a tree structure.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, output a single line containing the winner of the game: \"Alice\" or \"Bob\".\n\nExample\n\nInput\n\n\n4\n4 3 2 1 2\n1 2\n1 3\n1 4\n6 6 1 2 5\n1 2\n6 5\n2 3\n3 4\n4 5\n9 3 9 2 5\n1 2\n1 6\n1 9\n1 3\n9 5\n7 9\n4 8\n4 3\n11 8 11 3 3\n1 2\n11 9\n4 9\n6 5\n2 10\n3 2\n5 9\n8 3\n7 4\n7 10\n\n\nOutput\n\n\nAlice\nBob\nAlice\nAlice\n\nNote\n\nIn the first test case, Alice can win by moving to vertex 1. Then wherever Bob moves next, Alice will be able to move to the same vertex on the next move.\n\n<image>\n\nIn the second test case, Bob has the following strategy to win. Wherever Alice moves, Bob will always move to whichever of the two vertices 1 or 6 is farthest from Alice.\n\n<image", "output": "from collections import deque\ndef dist(G, n, s):\n    D = [None] * n;Q = deque();Q.append(s);D[s] = 0\n    while Q:\n        f = Q.popleft()\n        for t in G[f]:\n            if D[t] is None:D[t] = D[f] + 1;Q.append(t)\n    return D\nfor ti in range(int(input())):\n    n, a, b, da, db = map(int, input().split());a -= 1;b -= 1;G = [[] for _ in range(n)]\n    for _ in range(n-1):u, v = map(int, input().split());G[u-1].append(v-1);G[v-1].append(u-1)\n    Da = dist(G, n, a);me = max(enumerate(Da), key=lambda x: x[1])[0]\n    print(\"Alice\") if Da[b] <= da or db <= 2 * da or max(dist(G, n, me)) <= 2 * da else print(\"Bob\") ", "public_tests": {"input": ["4\n4 3 2 1 2\n1 2\n1 3\n1 4\n6 6 1 2 5\n1 2\n6 5\n2 3\n3 4\n4 5\n9 3 9 2 5\n1 2\n1 6\n1 9\n1 3\n9 5\n7 9\n4 8\n4 3\n11 8 11 3 3\n1 2\n11 9\n4 9\n6 5\n2 10\n3 2\n5 9\n8 3\n7 4\n7 10\n"], "output": ["Alice\nBob\nAlice\nAlice\n"]}, "private_tests": {"input": ["1\n5 5 4 3 4\n1 2\n4 1\n5 1\n5 3\n", "1\n9 1 5 3 7\n1 2\n2 3\n3 4\n4 5\n3 6\n7 8\n8 9\n6 7\n", "10\n10 9 10 6 6\n6 1\n7 6\n4 2\n4 10\n5 1\n9 5\n6 8\n3 4\n4 5\n2 1 2 1 1\n2 1\n9 7 4 2 3\n5 1\n2 4\n4 8\n8 6\n8 9\n7 8\n1 8\n1 3\n11 2 11 6 8\n1 10\n6 11\n8 2\n11 3\n1 7\n11 4\n5 8\n11 7\n1 9\n1 8\n5 3 2 1 2\n3 1\n2 1\n4 5\n1 5\n2 1 2 1 1\n2 1\n2 2 1 1 1\n2 1\n2 2 1 1 1\n1 2\n2 2 1 1 1\n2 1\n5 4 5 4 2\n2 1\n1 5\n3 1\n4 1\n"], "output": ["Alice\n", "Alice\n", "Alice\nAlice\nAlice\nAlice\nAlice\nAlice\nAlice\nAlice\nAlice\nAlice\n"]}, "index": 8012}, {"input": "You are given a string s consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\".\n\nLet the number of question marks in the string s be k. Let's replace each question mark with one of the letters \"a\", \"b\" and \"c\". Here we can obtain all 3^{k} possible strings consisting only of letters \"a\", \"b\" and \"c\". For example, if s = \"ac?b?c\" then we can obtain the following strings: [\"acabac\", \"acabbc\", \"acabcc\", \"acbbac\", \"acbbbc\", \"acbbcc\", \"accbac\", \"accbbc\", \"accbcc\"].\n\nYour task is to count the total number of subsequences \"abc\" in all resulting strings. Since the answer can be very large, print it modulo 10^{9} + 7.\n\nA subsequence of the string t is such a sequence that can be derived from the string t after removing some (possibly, zero) number of letters without changing the order of remaining letters. For example, the string \"baacbc\" contains two subsequences \"abc\" \u2014 a subsequence consisting of letters at positions (2, 5, 6) and a subsequence consisting of letters at positions (3, 5, 6).\n\nInput\n\nThe first line of the input contains one integer n (3 \u2264 n \u2264 200 000) \u2014 the length of s.\n\nThe second line of the input contains the string s of length n consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks\"?\".\n\nOutput\n\nPrint the total number of subsequences \"abc\" in all strings you can obtain if you replace all question marks with letters \"a\", \"b\" and \"c\", modulo 10^{9} + 7.\n\n", "output": "input();o=a=b=0;v=1;M=10**9+7\nfor c in input():\n if c=='a':a+=v\n elif c=='b':b+=a\n elif c=='c':o+=b\n else:a,b,o,v=(3*a+v)%M,(3*b+a)%M,(3*o+b)%M,(3*v)%M\nprint(o%M)", "public_tests": {"input": ["9\ncccbbbaaa\n", "7\n???????\n", "5\na???c\n", "6\nac?b?c\n"], "output": ["0\n", "2835\n", "46\n", "24\n"]}, "private_tests": {"input": ["3\nabc\n", "200\n???c????????ba?????c?b???c???a??a?b??bb?c???cccc?ac?????c??????b??c?aa?cb?ca?a??cc?b???a?c???c??bbb?cacbbac?ccc?a?aca??b??a??c?c?a??????b??a????baa?a?a?????a????bb??b?????ac?b?aacb??c????????a?c??????\n", "100\naccbaccabccbbbbabacabaaccacbcbcababbbcbcbcccabcbbc?caaabcabcaaccbccabaaaaccacabbaabcbbccbbababaacbca\n", "100\ncabcaabababcacaabaaccbaabcabcbaccbbcaabbbbacabbbcacbabaaabcaccbbacbabccabaabbaccaaacaabbabcaacaacccc\n", "100\n??b?a?a???aca?c?a?ca??????ac?b???aabb?c?ac??cbca???a?b????baa?ca??b???cbc??c??ab?ac???c?bcbb?c??abac\n", "300\ncc?aabbb?ba?cbcb??b??ababcabcb???b?bcb?ac??a?acc?cba?aa?a???bc?????ca??ac???cb??caaca???aabbc?cb?bb?a?bbb?a?cbbaccbcaab?a???baab?ac?ab??a?b?ac?acbcbb?cc??bbbcc?c??cab?cac?c???accb???c?cc?bb???b?bca?bbaccca??b?c?bb?b?a??ccb?c?abbc?aaa???bca?ccb?bb?c?b???c???bcac??ca?ba?a?cbabbb??b?aaaba??b??a?bbcbbcb\n", "3\n???\n", "100\ncbcbacbbba?aacaccabbabcbcbbccaccabcbbcbabc?bbbcabaabaabbccabbcabacbbcbacacccbaabcbcbaccababbbbccbaca\n"], "output": ["1\n", "821576000\n", "14634\n", "7687\n", "331264319\n", "944418931\n", "1\n", "53175\n"]}, "index": 8013}, {"input": "You are given a weighted undirected connected graph consisting of n vertices and m edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.\n\nLet's define the weight of the path consisting of k edges with indices e_1, e_2, ..., e_k as \u2211_{i=1}^{k}{w_{e_i}} - max_{i=1}^{k}{w_{e_i}} + min_{i=1}^{k}{w_{e_i}}, where w_i \u2014 weight of the i-th edge in the graph.\n\nYour task is to find the minimum weight of the path from the 1-st vertex to the i-th vertex for each i (2 \u2264 i \u2264 n).\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 2 \u22c5 10^5; 1 \u2264 m \u2264 2 \u22c5 10^5) \u2014 the number of vertices and the number of edges in the graph.\n\nFollowing m lines contains three integers v_i, u_i, w_i (1 \u2264 v_i, u_i \u2264 n; 1 \u2264 w_i \u2264 10^9; v_i \u2260 u_i) \u2014 endpoints of the i-th edge and its weight respectively.\n\nOutput\n\nPrint n-1 integers \u2014 the minimum weight of the path from 1-st vertex to the i-th vertex for each i (2 \u2264 i \u2264 n).\n\n", "output": "import io\nimport os\n\n# import __pypy__\n\n\ndef dijkstra(*args):\n    # return dijkstraHeap(*args)\n    # return dijkstraHeapComparatorWrong(*args)\n    return dijkstraHeapComparator(*args)\n    # return dijkstraSegTree(*args)\n    # return dijkstraSortedList(*args)\n\n\ndef dijkstraHeap(source, N, getAdj):\n    # Heap of (dist, node)\n\n    # Use float for dist because max dist for this problem doesn't fit in 32-bit\n    # Then node has to be a float too, because `(float, int)` will use `W_SpecialisedTupleObject_oo` but we want `W_SpecialisedTupleObject_ff`\n\n    from heapq import heappop, heappush\n\n    inf = float(\"inf\")\n    dist = [inf] * N\n    dist[source] = 0.0\n    queue = [(0.0, float(source))]\n    # print(__pypy__.internal_repr(queue[0])) # W_SpecialisedTupleObject_ff\n    # print(__pypy__.strategy(dist)) # FloatListStrategy\n    while queue:\n        d, u = heappop(queue)\n        u = int(u)\n        if dist[u] == d:\n            for v, w in getAdj(u):\n                cost = d + w\n                if cost < dist[v]:\n                    dist[v] = cost\n                    heappush(queue, (cost, float(v)))\n    return dist\n\n\ndef dijkstraHeapComparatorWrong(source, N, getAdj):\n    # Heap of nodes, sorted with a comparator\n    # This implementation is actually incorrect but kept for reference since it performs well when using a SPFA-like heuristic\n    # Note: normal SPFA will TLE since there's a uphack for it in testcase #62\n\n    inf = float(\"inf\")\n    dist = [inf] * N\n    dist[source] = 0.0\n    inQueue = [0] * N\n    inQueue[source] = 1\n    queue = [source]\n    # print(__pypy__.strategy(queue)) # IntegerListStrategy\n\n    def cmp_lt(u, v):\n        return dist[u] < dist[v]\n\n    heappush, heappop, _ = import_heapq(cmp_lt)\n\n    while queue:\n        u = heappop(queue)\n        d = dist[u]\n        inQueue[u] = 0\n        for v, w in getAdj(u):\n            cost = d + w\n            if cost < dist[v]:\n                dist[v] = cost\n                if not inQueue[v]:\n                    heappush(queue, v)\n                    inQueue[v] = 1\n                else:\n                    # If v is already in the queue, we were suppose to bubble it to fix heap invariant\n                    pass\n    return dist\n\n\ndef dijkstraHeapComparator(source, N, getAdj):\n    # Same above, except correctly re-bubbling the key after updates\n\n    inf = float(\"inf\")\n    dist = [inf] * N\n    dist[source] = 0.0\n\n    def cmp_lt(u, v):\n        return dist[u] < dist[v]\n\n    heappush, heappop, _siftdown = import_heapq(cmp_lt)\n\n    class ListWrapper:\n        # Exactly like a regular list except with fast .index(x) meant to be used with heapq\n        # Not general purpose and relies on the exact heapq implementation for correctness (swaps only, added via append, deleted via pop)\n\n        def __init__(self, maxN):\n            self.arr = []\n            self.loc = [-1] * maxN\n\n        def append(self, x):\n            arr = self.arr\n            arr.append(x)\n            self.loc[x] = len(arr) - 1\n\n        def pop(self):\n            ret = self.arr.pop()\n            self.loc[ret] = -1\n            return ret\n\n        def index(self, x):\n            return self.loc[x]\n\n        def __setitem__(self, i, x):\n            self.arr[i] = x\n            self.loc[x] = i\n\n        def __getitem__(self, i):\n            return self.arr[i]\n\n        def __len__(self):\n            return len(self.arr)\n\n    queue = ListWrapper(N)\n    queue.append(source)\n    # print(__pypy__.strategy(queue.arr)) # IntegerListStrategy\n\n    while queue:\n        u = heappop(queue)\n        d = dist[u]\n        for v, w in getAdj(u):\n            cost = d + w\n            if cost < dist[v]:\n                dist[v] = cost\n                heapIndex = queue.index(v)\n                if heapIndex == -1:\n                    heappush(queue, v)\n                else:\n                    _siftdown(queue, 0, heapIndex)\n    return dist\n\n\ndef dijkstraSegTree(start, n, getAdj):\n    # From pajenegod: https://github.com/cheran-senthil/PyRival/pull/55\n    # Modifications:\n    #   Use floats instead of ints for inf/_min\n    #   Fix typo: m -> self.m\n    #   Fix python 3 compatibility: __getitem__\n    #   Cache self.data\n    #   Remove parent pointers\n\n    if False:\n        inf = -1\n\n        def _min(a, b):\n            return a if b == inf or inf != a < b else b\n\n    else:\n        inf = float(\"inf\")\n        _min = min\n\n    class DistanceKeeper:\n        def __init__(self, n):\n            m = 1\n            while m < n:\n                m *= 2\n            self.m = m\n            self.data = 2 * m * [inf]\n            self.dist = n * [inf]\n\n        def __getitem__(self, x):\n            return self.dist[x]\n\n        def __setitem__(self, ind, x):\n            data = self.data\n            self.dist[ind] = x\n            ind += self.m\n            data[ind] = x\n            ind >>= 1\n            while ind:\n                data[ind] = _min(data[2 * ind], data[2 * ind + 1])\n                ind >>= 1\n\n        def trav(self):\n            m = self.m\n            data = self.data\n            dist = self.dist\n            while data[1] != inf:\n                x = data[1]\n\n                ind = 1\n                while ind < m:\n                    ind = 2 * ind + (data[2 * ind] != x)\n                ind -= m\n\n                self[ind] = inf\n                dist[ind] = x\n                yield ind\n\n    # P = [-1] * n\n    D = DistanceKeeper(n)\n    D[start] = 0.0\n\n    for node in D.trav():\n        for nei, weight in getAdj(node):\n            new_dist = D[node] + weight\n            if D[nei] == inf or new_dist < D[nei]:\n                D[nei] = new_dist\n                # P[nei] = node\n    # print(__pypy__.strategy(D.dist))\n    # print(__pypy__.strategy(D.data))\n    return D.dist\n\n\ndef dijkstraSortedList(source, N, getAdj):\n    # Just for completeness\n\n    # COPY AND PASTE from https://github.com/cheran-senthil/PyRival/blob/master/pyrival/data_structures/SortedList.py\n    class SortedList:\n        def __init__(self, iterable=[], _load=200):\n            \"\"\"Initialize sorted list instance.\"\"\"\n            values = sorted(iterable)\n            self._len = _len = len(values)\n            self._load = _load\n            self._lists = _lists = [\n                values[i : i + _load] for i in range(0, _len, _load)\n            ]\n            self._list_lens = [len(_list) for _list in _lists]\n            self._mins = [_list[0] for _list in _lists]\n            self._fen_tree = []\n            self._rebuild = True\n\n        def _fen_build(self):\n            \"\"\"Build a fenwick tree instance.\"\"\"\n            self._fen_tree[:] = self._list_lens\n            _fen_tree = self._fen_tree\n            for i in range(len(_fen_tree)):\n                if i | i + 1 < len(_fen_tree):\n                    _fen_tree[i | i + 1] += _fen_tree[i]\n            self._rebuild = False\n\n        def _fen_update(self, index, value):\n            \"\"\"Update `fen_tree[index] += value`.\"\"\"\n            if not self._rebuild:\n                _fen_tree = self._fen_tree\n                while index < len(_fen_tree):\n                    _fen_tree[index] += value\n                    index |= index + 1\n\n        def _fen_query(self, end):\n            \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n            if self._rebuild:\n                self._fen_build()\n\n            _fen_tree = self._fen_tree\n            x = 0\n            while end:\n                x += _fen_tree[end - 1]\n                end &= end - 1\n            return x\n\n        def _fen_findkth(self, k):\n            \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n            _list_lens = self._list_lens\n            if k < _list_lens[0]:\n                return 0, k\n            if k >= self._len - _list_lens[-1]:\n                return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n            if self._rebuild:\n                self._fen_build()\n\n            _fen_tree = self._fen_tree\n            idx = -1\n            for d in reversed(range(len(_fen_tree).bit_length())):\n                right_idx = idx + (1 << d)\n                if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                    idx = right_idx\n                    k -= _fen_tree[idx]\n            return idx + 1, k\n\n        def _delete(self, pos, idx):\n            \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n            _lists = self._lists\n            _mins = self._mins\n            _list_lens = self._list_lens\n\n            self._len -= 1\n            self._fen_update(pos, -1)\n            del _lists[pos][idx]\n            _list_lens[pos] -= 1\n\n            if _list_lens[pos]:\n                _mins[pos] = _lists[pos][0]\n            else:\n                del _lists[pos]\n                del _list_lens[pos]\n                del _mins[pos]\n                self._rebuild = True\n\n        def _loc_left(self, value):\n            \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n            if not self._len:\n                return 0, 0\n\n            _lists = self._lists\n            _mins = self._mins\n\n            lo, pos = -1, len(_lists) - 1\n            while lo + 1 < pos:\n                mi = (lo + pos) >> 1\n                if value <= _mins[mi]:\n                    pos = mi\n                else:\n                    lo = mi\n\n            if pos and value <= _lists[pos - 1][-1]:\n                pos -= 1\n\n            _list = _lists[pos]\n            lo, idx = -1, len(_list)\n            while lo + 1 < idx:\n                mi = (lo + idx) >> 1\n                if value <= _list[mi]:\n                    idx = mi\n                else:\n                    lo = mi\n\n            return pos, idx\n\n        def _loc_right(self, value):\n            \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n            if not self._len:\n                return 0, 0\n\n            _lists = self._lists\n            _mins = self._mins\n\n            pos, hi = 0, len(_lists)\n            while pos + 1 < hi:\n                mi = (pos + hi) >> 1\n                if value < _mins[mi]:\n                    hi = mi\n                else:\n                    pos = mi\n\n            _list = _lists[pos]\n            lo, idx = -1, len(_list)\n            while lo + 1 < idx:\n                mi = (lo + idx) >> 1\n                if value < _list[mi]:\n                    idx = mi\n                else:\n                    lo = mi\n\n            return pos, idx\n\n        def add(self, value):\n            \"\"\"Add `value` to sorted list.\"\"\"\n            _load = self._load\n            _lists = self._lists\n            _mins = self._mins\n            _list_lens = self._list_lens\n\n            self._len += 1\n            if _lists:\n                pos, idx = self._loc_right(value)\n                self._fen_update(pos, 1)\n                _list = _lists[pos]\n                _list.insert(idx, value)\n                _list_lens[pos] += 1\n                _mins[pos] = _list[0]\n                if _load + _load < len(_list):\n                    _lists.insert(pos + 1, _list[_load:])\n                    _list_lens.insert(pos + 1, len(_list) - _load)\n                    _mins.insert(pos + 1, _list[_load])\n                    _list_lens[pos] = _load\n                    del _list[_load:]\n                    self._rebuild = True\n            else:\n                _lists.append([value])\n                _mins.append(value)\n                _list_lens.append(1)\n                self._rebuild = True\n\n        def discard(self, value):\n            \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n            _lists = self._lists\n            if _lists:\n                pos, idx = self._loc_right(value)\n                if idx and _lists[pos][idx - 1] == value:\n                    self._delete(pos, idx - 1)\n\n        def remove(self, value):\n            \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n            _len = self._len\n            self.discard(value)\n            if _len == self._len:\n                raise ValueError(\"{0!r} not in list\".format(value))\n\n        def pop(self, index=-1):\n            \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n            pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n            value = self._lists[pos][idx]\n            self._delete(pos, idx)\n            return value\n\n        def bisect_left(self, value):\n            \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n            pos, idx = self._loc_left(value)\n            return self._fen_query(pos) + idx\n\n        def bisect_right(self, value):\n            \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n            pos, idx = self._loc_right(value)\n            return self._fen_query(pos) + idx\n\n        def count(self, value):\n            \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n            return self.bisect_right(value) - self.bisect_left(value)\n\n        def __len__(self):\n            \"\"\"Return the size of the sorted list.\"\"\"\n            return self._len\n\n        def __getitem__(self, index):\n            \"\"\"Lookup value at `index` in sorted list.\"\"\"\n            pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n            return self._lists[pos][idx]\n\n        def __delitem__(self, index):\n            \"\"\"Remove value at `index` from sorted list.\"\"\"\n            pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n            self._delete(pos, idx)\n\n        def __contains__(self, value):\n            \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n            _lists = self._lists\n            if _lists:\n                pos, idx = self._loc_left(value)\n                return idx < len(_lists[pos]) and _lists[pos][idx] == value\n            return False\n\n        def __iter__(self):\n            \"\"\"Return an iterator over the sorted list.\"\"\"\n            return (value for _list in self._lists for value in _list)\n\n        def __reversed__(self):\n            \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n            return (\n                value for _list in reversed(self._lists) for value in reversed(_list)\n            )\n\n        def __repr__(self):\n            \"\"\"Return string representation of sorted list.\"\"\"\n            return \"SortedList({0})\".format(list(self))\n\n    # END COPY AND PASTE #####################################\n\n    inf = float(\"inf\")\n    dist = [inf] * N\n    dist[source] = 0.0\n    queue = SortedList([(0.0, float(source))])\n    while queue:\n        negD, u = queue.pop(-1)\n        d = -negD\n        u = int(u)\n        for v, w in getAdj(u):\n            prevCost = dist[v]\n            cost = d + w\n            if cost < prevCost:\n                if prevCost != inf:\n                    queue.discard((-prevCost, float(v)))\n                dist[v] = cost\n                queue.add((-cost, float(v)))\n    return dist\n\n\ndef import_heapq(cmp_lt):\n    # Python 2 has a heapq.cmp_lt but python 3 removed it\n    # Add it back for pypy3 submissions\n\n    import sys\n\n    if sys.version_info < (3,):\n        # Python 2\n        import heapq\n        from heapq import heappush, heappop, _siftdown\n\n        heapq.cmp_lt = cmp_lt\n    else:\n        # Python 3\n        # COPY AND PASTE python 2.7 heapq from https://github.com/python/cpython/blob/2.7/Lib/heapq.py\n\n        def heappush(heap, item):\n            \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n            heap.append(item)\n            _siftdown(heap, 0, len(heap) - 1)\n\n        def heappop(heap):\n            \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n            lastelt = heap.pop()  # raises appropriate IndexError if heap is empty\n            if heap:\n                returnitem = heap[0]\n                heap[0] = lastelt\n                _siftup(heap, 0)\n                return returnitem\n            return lastelt\n\n        def _siftdown(heap, startpos, pos):\n            newitem = heap[pos]\n            # Follow the path to the root, moving parents down until finding a place\n            # newitem fits.\n            while pos > startpos:\n                parentpos = (pos - 1) >> 1\n                parent = heap[parentpos]\n                if cmp_lt(newitem, parent):\n                    heap[pos] = parent\n                    pos = parentpos\n                    continue\n                break\n            heap[pos] = newitem\n\n        def _siftup(heap, pos):\n            endpos = len(heap)\n            startpos = pos\n            newitem = heap[pos]\n            # Bubble up the smaller child until hitting a leaf.\n            childpos = 2 * pos + 1  # leftmost child position\n            while childpos < endpos:\n                # Set childpos to index of smaller child.\n                rightpos = childpos + 1\n                if rightpos < endpos and not cmp_lt(heap[childpos], heap[rightpos]):\n                    childpos = rightpos\n                # Move the smaller child up.\n                heap[pos] = heap[childpos]\n                pos = childpos\n                childpos = 2 * pos + 1\n            # The leaf at pos is empty now.  Put newitem there, and bubble it up\n            # to its final resting place (by sifting its parents down).\n            heap[pos] = newitem\n            _siftdown(heap, startpos, pos)\n\n        # END COPY AND PASTE ###############################\n    return heappush, heappop, _siftdown\n\n\nif __name__ == \"__main__\":\n    input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n    N, M = [int(x) for x in input().split()]\n    graph = [[] for i in range(N)]\n    for i in range(M):\n        u, v, w = [int(x) for x in input().split()]\n        u -= 1\n        v -= 1\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    # Want shortest path except one edge is worth 0 and one edge is worth 2x\n    # Track this with 2 bits of extra state\n    def getAdj(node):\n        u = node >> 2\n        state = node & 3\n        for v, w in graph[u]:\n            vBase = v << 2\n            # Regular edge\n            yield vBase | state, w\n            if not state & 1:\n                # Take max edge, worth 0\n                yield vBase | state | 1, 0\n            if not state & 2:\n                # Take min edge, worth double\n                yield vBase | state | 2, 2 * w\n            if not state & 3:\n                # Take both min and max edge, worth normal\n                yield vBase | state | 3, w\n\n    dist = dijkstra(0, 4 * N, getAdj)\n    print(\" \".join(str(int(dist[(u << 2) | 3])) for u in range(1, N)))\n", "public_tests": {"input": ["7 10\n7 5 5\n2 3 3\n4 7 1\n5 3 6\n2 7 6\n6 2 6\n3 7 6\n4 2 1\n3 1 4\n1 7 4\n", "5 4\n5 3 4\n2 1 1\n3 2 2\n2 4 2\n", "6 8\n3 1 1\n3 6 2\n5 4 2\n4 2 2\n6 1 1\n5 2 1\n3 2 3\n1 5 4\n"], "output": ["\n3 4 2 7 7 3 \n", "\n1 2 2 4 \n", "\n2 1 4 3 1 \n"]}, "private_tests": {"input": ["13 37\n3 9 6\n8 7 1\n7 4 10\n10 2 8\n13 1 8\n9 8 1\n8 1 1\n5 1 8\n4 13 5\n5 12 1\n2 9 8\n3 8 5\n1 10 10\n11 12 3\n11 8 3\n11 4 10\n7 1 2\n3 1 3\n10 13 10\n6 8 6\n8 5 1\n6 12 7\n5 7 4\n10 12 1\n9 7 6\n2 1 9\n7 11 2\n8 13 2\n5 13 9\n3 11 6\n10 9 10\n3 7 5\n12 4 3\n11 10 4\n1 11 2\n2 5 4\n3 12 4\n", "10 30\n4 6 77\n3 10 16\n1 9 30\n8 6 53\n2 3 18\n2 8 88\n7 6 93\n3 6 96\n1 3 81\n3 4 67\n6 9 6\n4 9 67\n8 9 44\n1 10 97\n5 10 41\n3 9 78\n8 3 19\n6 1 3\n2 1 1\n9 2 78\n2 4 30\n10 7 86\n7 5 39\n3 5 40\n7 4 93\n10 6 87\n4 10 53\n2 10 96\n1 4 24\n3 7 58\n"], "output": ["3 2 3 2 2 2 1 2 3 2 2 2 \n", "1 2 2 20 3 6 2 2 2 \n"]}, "index": 8014}, {"input": "You like numbers, don't you? Nastia has a lot of numbers and she wants to share them with you! Isn't it amazing?\n\nLet a_i be how many numbers i (1 \u2264 i \u2264 k) you have.\n\nAn n \u00d7 n matrix is called beautiful if it contains all the numbers you have, and for each 2 \u00d7 2 submatrix of the original matrix is satisfied: \n\n  1. The number of occupied cells doesn't exceed 3; \n  2. The numbers on each diagonal are distinct. \n\n\n\nMake a beautiful matrix of minimum size.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains 2 integers m and k (1 \u2264 m, k \u2264 10^5) \u2014 how many numbers Nastia gave you and the length of the array a, respectively.\n\nThe second line of each test case contains k integers a_1, a_2, \u2026, a_{k} (0 \u2264 a_i \u2264 m, a_1 + a_2 + \u2026 + a_{k} = m), where a_i is how many numbers i you have.\n\nIt's guaranteed that the sum of m and k in one test doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each t test case print a single integer n \u2014 the size of the beautiful matrix.\n\nIn the next n lines print n integers b_{i, j} (0 \u2264 b_{i, j} \u2264 k; if position is empty, print b_{i, j} = 0) \u2014 the beautiful matrix b you made up. \n\nExample\n\nInput\n\n\n2\n3 4\n2 0 0 1\n15 4\n2 4 8 1\n\n\nOutput\n\n\n2\n4 1\n0 1\n5\n3 0 0 2 2\n3 2 3 3 0\n0 1 0 4 0\n3 0 0 0 0\n2 1 3 3 3\n\nNote\n\nNote that 0 in this problem represents a blank, not a number.\n\n", "output": "def cheak(x):\n    return x**2-(x//2)**2>=m and x*(x//2+(1 if x%2!=0 else 0))>=mx\nfor test in range(int(input())):\n    m,k=(int(i) for i in input().split())\n    a=[int(i) for i in input().split()]\n    mx=max(a)\n    z=0;y=m*4\n    while z!=y:\n        x=(z+y)//2\n        if cheak(x):\n            y=x\n        else:\n            z=x+1\n    else:\n        x=z\n    a=sorted(list(map(list,zip(a,range(1,len(a)+1)))))\n    def get():\n        i=len(a)\n        while i!=0:\n            i-=1\n            while a[i][0]>0:\n                a[i][0]-=1\n                yield a[i][1] \n        yield 0\n    mt=[[0 for i in range(x)] for j in range(x)]\n    t=1\n    it=get()\n    for i in range(0,x,2):\n        if t==0:break\n        for j in range(1,x,2):\n            t=next(it)\n            if t:mt[i][j]=t\n            else:break\n    for i in range(0,x,2):\n        if t==0:break\n        for j in range(0,x,2):\n            t=next(it)\n            if t:mt[i][j]=t\n            else:break\n    for i in range(1,x,2):\n        if t==0:break\n        for j in range(0,x,2):\n            t=next(it)\n            if t:mt[i][j]=t\n            else:break\n    print(len(mt))\n    for i in mt:\n        print(*i)", "public_tests": {"input": ["2\n3 4\n2 0 0 1\n15 4\n2 4 8 1\n"], "output": ["\n2\n4 1\n0 1\n5\n3 0 0 2 2\n3 2 3 3 0\n0 1 0 4 0\n3 0 0 0 0\n2 1 3 3 3"]}, "private_tests": {"input": ["1\n9 3\n1 0 8\n", "1\n12 3\n9 2 1\n", "2\n3 4\n2 0 0 1\n15 4\n2 4 8 1\n"], "output": ["4\n3 3 3 3 \n0 0 0 0 \n3 3 3 3 \n0 0 1 0 \n", "5\n0 1 0 1 0 \n0 0 0 0 0 \n0 1 0 1 0 \n3 0 2 0 2 \n1 1 1 1 1 \n", "2\n1 1 \n4 0 \n5\n0 3 0 3 0 \n1 0 1 0 2 \n0 3 0 3 0 \n2 0 2 0 2 \n4 3 3 3 3 \n"]}, "index": 8015}, {"input": "You are given a string s of length n. Each character is either one of the first k lowercase Latin letters or a question mark.\n\nYou are asked to replace every question mark with one of the first k lowercase Latin letters in such a way that the following value is maximized.\n\nLet f_i be the maximum length substring of string s, which consists entirely of the i-th Latin letter. A substring of a string is a contiguous subsequence of that string. If the i-th letter doesn't appear in a string, then f_i is equal to 0.\n\nThe value of a string s is the minimum value among f_i for all i from 1 to k.\n\nWhat is the maximum value the string can have?\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 2 \u22c5 10^5; 1 \u2264 k \u2264 17) \u2014 the length of the string and the number of first Latin letters used.\n\nThe second line contains a string s, consisting of n characters. Each character is either one of the first k lowercase Latin letters or a question mark.\n\nOutput\n\nPrint a single integer \u2014 the maximum value of the string after every question mark is replaced with one of the first k lowercase Latin letters.\n\n", "output": "import sys;input = sys.stdin.readline;n, k = map(int, input().split());s = input()[:-1];left, right = 0, n\nwhile left < right:\n    mid = right - (right - left) // 2;A = [[0] * (n + 2) for _ in range(k)]\n    for c in range(k):\n        A[c][n] = A[c][n + 1] = n + 1;L = 0\n        for i in range(n - 1, -1, -1):L = (L + 1 if s[i] == '?' or ord(s[i]) - ord('a') == c else 0);A[c][i] = i + mid if L >= mid else A[c][i + 1]\n    dp = [n + 1] * (1 << k);dp[0] = 0\n    for mask in range(1 << k):\n        for i in range(k):\n            if mask >> k & 1: continue\n            t = mask | 1 << i;dp[t] = min(dp[t], A[i][dp[mask]])\n    if dp[-1] <= n: left = mid\n    else: right = mid - 1\nprint(left)", "public_tests": {"input": ["2 3\n??\n", "10 2\na??ab????b\n", "9 4\n?????????\n", "4 4\ncabd\n", "15 3\n??b?babbc??b?aa\n"], "output": ["0\n", "4\n", "2\n", "1\n", "3\n"]}, "private_tests": {"input": ["8 2\naa??ba??\n", "466 10\nhga??dfdgae??j?f???h?jdd?????dhgc???????bj?j????b?be?b?jedd??g?cg????bj?b?h?heg?cb?e??hgf???fcd?g??hf?a????ie???if?deibf?j?g??cea?????????f?i?geh??h??gb?c?a?a?iei???caa?cieehd?b????cf??ei????ebjb?gijcf??fg?eg?agjba?eb????hh????aa??d????gg?e?b?g?bba???d??ea??b??c????babc?d???je??bb??f???df??de?h?aai???dghgc??g?ch?ae????bdd????e??dh??hibgi?icc?ia?fb???gc???a??c??j?f??a?ci?b?b??????gf?b???ii??????hi????bc????bihjc?fbdeib???jd?c??d?be?c?f?eha?a?djhf????g?f?dcijb??ch\n", "2 2\nb?\n", "20 4\ncdddcbbbbbbaaccccaaa\n", "64 3\na?bbabba?a?b??b?bb?????bbb??baabbbb?a?aabaaab?ab?a?aaab?a?b??a?b\n", "1 1\n?\n", "100 10\ngcja?i??a???cca??jff?bb?c???i??aeee??j????h?i?f??f??b?cc?g???????c??ad?b??g?f??bff?ag?ia??de?abde?ee\n", "6 2\nbaaabb\n", "6 2\nbb????\n", "1 1\na\n", "9 4\nd?a?b?cdd\n", "100 10\nh?a???dhdh??hhcg?h???hg?gbi?aca?e??ah?f?e?cg??????bd?jiha?hde?fddg??c??ji?a??j??aaii???h?ciije?h??b?\n", "100 10\naj?e?ch?g?fedje?hehfi?ha?bg?jab??aecac??ig?dfbahb?i?j?b?hc???af?b????d?e?djgaff??hgje??ja?b??aajc?g?\n", "8 3\nb?abbc?b\n", "20 4\ndaaa?cd???ccc?c?bbbc\n", "10 3\n?ccaaa?bba\n", "22 15\nimdhjcn?dbn?abnhkmnfal\n", "100 17\nffff?jjjccccllll?nn?npopnoooold?gb?ofaddddjeeeeppppmmmmkk?kbb?bdqpka?iiiiblhhh?ggggff?aaaanakddaqqqq\n", "100 17\nqaffffehnnnnklacmmmmfcnfiiiippppeeeeciaaaakjfllllpoqgdhhhhdlmccccajjjjaiddddqooooqqqqqnkbbbbkkkkgggg\n"], "output": ["3\n", "7\n", "1\n", "3\n", "5\n", "1\n", "4\n", "2\n", "3\n", "1\n", "2\n", "3\n", "3\n", "2\n", "4\n", "3\n", "0\n", "4\n", "4\n"]}, "index": 8016}, {"input": "The Smart Beaver from ABBYY decided to have a day off. But doing nothing the whole day turned out to be too boring, and he decided to play a game with pebbles. Initially, the Beaver has n pebbles. He arranges them in a equal rows, each row has b pebbles (a > 1). Note that the Beaver must use all the pebbles he has, i. e. n = a\u00b7b.\n\n<image> 10 pebbles are arranged in two rows, each row has 5 pebbles \n\nOnce the Smart Beaver has arranged the pebbles, he takes back any of the resulting rows (that is, b pebbles) and discards all other pebbles. Then he arranges all his pebbles again (possibly choosing other values of a and b) and takes back one row, and so on. The game continues until at some point the Beaver ends up with exactly one pebble. \n\nThe game process can be represented as a finite sequence of integers c1, ..., ck, where: \n\n  * c1 = n\n  * ci + 1 is the number of pebbles that the Beaver ends up with after the i-th move, that is, the number of pebbles in a row after some arrangement of ci pebbles (1 \u2264 i < k). Note that ci > ci + 1. \n  * ck = 1\n\n\n\nThe result of the game is the sum of numbers ci. You are given n. Find the maximum possible result of the game.\n\nInput\n\nThe single line of the input contains a single integer n \u2014 the initial number of pebbles the Smart Beaver has.\n\nThe input limitations for getting 30 points are: \n\n  * 2 \u2264 n \u2264 50\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 2 \u2264 n \u2264 109\n\nOutput\n\nPrint a single number \u2014 the maximum possible result of the game.\n\n", "output": "n=int(input())\nd=2\nr=1\nwhile d*d<=n:\n  while n%d<1:r+=n;n//=d\n  d+=1\nif n>1:r+=n\nprint(r)", "public_tests": {"input": ["10\n", "8\n"], "output": ["16\n", "15\n"]}, "private_tests": {"input": ["999161856\n", "999999937\n", "9\n", "999936000\n", "18\n", "33\n", "999999948\n", "13\n", "14\n", "5\n", "48\n", "50\n", "1000\n", "999999000\n", "39\n", "999989760\n", "998244352\n", "1011\n", "222953472\n", "35\n", "49\n", "999997440\n", "1000000000\n", "536870912\n", "32\n", "873453946\n", "999996270\n", "999068070\n", "42\n", "36\n", "34\n", "13458\n", "999999488\n", "46\n", "999999999\n", "999751680\n", "223092870\n", "999002449\n", "37\n", "4\n", "999567360\n", "997785600\n", "6\n", "2\n", "134534550\n", "20\n", "3\n", "456345677\n", "111111111\n"], "output": ["1998319610\n", "999999938\n", "13\n", "1999743134\n", "31\n", "45\n", "1833697140\n", "14\n", "22\n", "6\n", "94\n", "81\n", "1906\n", "1936337207\n", "53\n", "1998828039\n", "1996488603\n", "1349\n", "445906091\n", "43\n", "57\n", "1999958573\n", "1998535156\n", "1073741823\n", "63\n", "1310217629\n", "1705144136\n", "1703641013\n", "71\n", "67\n", "52\n", "22431\n", "1999537224\n", "70\n", "1494160827\n", "1999495564\n", "380424693\n", "999034057\n", "38\n", "7\n", "1999005091\n", "1995562298\n", "10\n", "3\n", "229605633\n", "36\n", "4\n", "456345678\n", "160827495\n"]}, "index": 8017}, {"input": "The Little Elephant enjoys recursive functions.\n\nThis time he enjoys the sorting function. Let a is a permutation of an integers from 1 to n, inclusive, and ai denotes the i-th element of the permutation. The Little Elephant's recursive function f(x), that sorts the first x permutation's elements, works as follows:\n\n  * If x = 1, exit the function. \n  * Otherwise, call f(x - 1), and then make swap(ax - 1, ax) (swap the x-th and (x - 1)-th elements of a). \n\n\n\nThe Little Elephant's teacher believes that this function does not work correctly. But that-be do not get an F, the Little Elephant wants to show the performance of its function. Help him, find a permutation of numbers from 1 to n, such that after performing the Little Elephant's function (that is call f(n)), the permutation will be sorted in ascending order.\n\nInput\n\nA single line contains integer n (1 \u2264 n \u2264 1000) \u2014 the size of permutation.\n\nOutput\n\nIn a single line print n distinct integers from 1 to n \u2014 the required permutation. Numbers in a line should be separated by spaces.\n\nIt is guaranteed that the answer exists.\n\n", "output": "N=int(input())\nprint(N,*range(1,N))", "public_tests": {"input": ["1\n", "2\n"], "output": ["1\n", "2 1\n"]}, "private_tests": {"input": ["1000\n", "683\n", "998\n", "195\n", "811\n", "419\n", "6\n", "67\n", "875\n", "25\n", "999\n", "101\n", "7\n", "971\n", "683\n", "875\n", "4\n", "5\n", "971\n", "291\n", "101\n", "24\n", "998\n", "779\n", "779\n", "3\n", "907\n", "99\n", "21\n", "997\n", "23\n", "291\n", "900\n", "195\n", "1000\n", "997\n", "900\n", "811\n", "907\n", "99\n", "419\n", "999\n", "22\n"], "output": ["1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999\n", "683 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682\nn", "195 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194\nn", "419 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418\n", "6 1 2 3 4 5\n", "67 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\nn", "25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n", "999 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998\n", "101 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n", "7 1 2 3 4 5 6\nn", "683 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682\nn", "4 1 2 3\n", "5 1 2 3 4\nn", "291 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290\n", "101 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n", "24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\nnnn", "3 1 2\nn", "99 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98\n", "21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\nn", "23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n", "291 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290\n", "900 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899\n", "195 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194\n", "1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999\nnnnn", "99 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98\n", "419 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418\nn", "22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n"]}, "index": 8018}, {"input": "Vasya is an active Internet user. One day he came across an Internet resource he liked, so he wrote its address in the notebook. We know that the address of the written resource has format:\n\n<protocol>://<domain>.ru[/<context>]\n\nwhere:\n\n  * <protocol> can equal either \"http\" (without the quotes) or \"ftp\" (without the quotes), \n  * <domain> is a non-empty string, consisting of lowercase English letters, \n  * the /<context> part may not be present. If it is present, then <context> is a non-empty string, consisting of lowercase English letters. \n\n\n\nIf string <context> isn't present in the address, then the additional character \"/\" isn't written. Thus, the address has either two characters \"/\" (the ones that go before the domain), or three (an extra one in front of the context).\n\nWhen the boy came home, he found out that the address he wrote in his notebook had no punctuation marks. Vasya must have been in a lot of hurry and didn't write characters \":\", \"/\", \".\".\n\nHelp Vasya to restore the possible address of the recorded Internet resource.\n\nInput\n\nThe first line contains a non-empty string that Vasya wrote out in his notebook. This line consists of lowercase English letters only. \n\nIt is guaranteed that the given string contains at most 50 letters. It is guaranteed that the given string can be obtained from some correct Internet resource address, described above.\n\nOutput\n\nPrint a single line \u2014 the address of the Internet resource that Vasya liked. If there are several addresses that meet the problem limitations, you are allowed to print any of them.\n\n", "output": "s=input()\nt=3+(s[0]>'f')\np=s.find('ru',t+1)\nprint(s[:t]+'://'+s[t:p]+'.ru'+(' /'[p+2<len(s)])+s[p+2:])", "public_tests": {"input": ["httpsunrux\n", "ftphttprururu\n"], "output": ["http://sun.ru/x\n", "ftp://http.ru/ruru\n"]}, "private_tests": {"input": ["httpuurrruurruuruuruuurrrurururuurruuuuuuruurr\n", "httpfttpftpfttftpftpftppfrurururu\n", "ftptpruuhttpuhttphuhtuhtrurrutphttuhtuht\n", "ftprftprupruftptprurururftprrftpftprurftprrftprup\n", "httpftphttptphttphrururuhpftphtpftphtpftphtptpft\n", "httpaaaaaaarurururu\n", "ftpprurururu\n", "ftphhphruhhpruhhpuhhpuruhhphruhhruhhpuhhru\n", "ftparua\n", "ftpprutpfrutrutptpfrutpfrutfrutrfrutpfrutprutruruu\n", "httpzru\n", "httprrur\n", "httpabuaruauabbaruru\n", "ftprru\n", "httpsjkazaaghasjkasjkabruru\n", "ftpzaaghasjkaaghasjkabaagruru\n", "httpuururrururruruurururrrrrurrurrurruruuruuu\n", "ftparurururu\n", "httpppppru\n", "ftpftphtpphhhhtppphhtpptpphtru\n", "httpruhhphhhpuhruruhhpruhhphruhhru\n", "httpftprftprutprururftruruftptp\n", "ftpabaruru\n", "ftprrurururrurururuurrururruuru\n", "ftpruurruurururururuuruuur\n", "httprutpfrutrutpfrutprururufruttpp\n", "ftpprururuftphtpphtp\n", "httpruhttttpruhttprupruhttpruhtturuhttphtruuru\n"], "output": ["http://uurr.ru/urruuruuruuurrrurururuurruuuuuuruurr\n", "http://fttpftpfttftpftpftppf.ru/rururu\n", "ftp://tp.ru/uhttpuhttphuhtuhtrurrutphttuhtuht\n", "ftp://rftp.ru/pruftptprurururftprrftpftprurftprrftprup\n", "http://ftphttptphttph.ru/ruruhpftphtpftphtpftphtptpft\n", "http://aaaaaaa.ru/rururu\n", "ftp://p.ru/rururu\n", "ftp://hhph.ru/hhpruhhpuhhpuruhhphruhhruhhpuhhru\n", "ftp://a.ru/a\n", "ftp://p.ru/tpfrutrutptpfrutpfrutfrutrfrutpfrutprutruruu\n", "http://z.ru", "http://r.ru/r\n", "http://abua.ru/auabbaruru\n", "ftp://r.ru", "http://sjkazaaghasjkasjkab.ru/ru\n", "ftp://zaaghasjkaaghasjkabaag.ru/ru\n", "http://uu.ru/rrururruruurururrrrrurrurrurruruuruuu\n", "ftp://a.ru/rururu\n", "http://pppp.ru", "ftp://ftphtpphhhhtppphhtpptppht.ru", "http://ruhhphhhpuh.ru/ruhhpruhhphruhhru\n", "http://ftprftp.ru/tprururftruruftptp\n", "ftp://aba.ru/ru\n", "ftp://r.ru/rururrurururuurrururruuru\n", "ftp://ruur.ru/urururururuuruuur\n", "http://rutpf.ru/trutpfrutprururufruttpp\n", "ftp://p.ru/ruruftphtpphtp\n", "http://ruhttttp.ru/httprupruhttpruhtturuhttphtruuru\n"]}, "index": 8019}, {"input": "You are given the following concurrent program. There are N processes and the i-th process has the following pseudocode: \n    \n    \n    repeat ni times  \n        yi := y  \n        y := yi\u2009+\u20091  \n    end repeat  \n    \n\nHere y is a shared variable. Everything else is local for the process. All actions on a given row are atomic, i.e. when the process starts executing a row it is never interrupted. Beyond that all interleavings are possible, i.e. every process that has yet work to do can be granted the rights to execute its next row. In the beginning y = 0. You will be given an integer W and ni, for i = 1, ... , N. Determine if it is possible that after all processes terminate, y = W, and if it is possible output an arbitrary schedule that will produce this final value.\n\nInput\n\nIn the first line of the input you will be given two space separated integers N (1 \u2264 N \u2264 100) and W ( - 109 \u2264 W \u2264 109). In the second line there are N space separated integers ni (1 \u2264 ni \u2264 1000).\n\nOutput\n\nOn the first line of the output write Yes if it is possible that at the end y = W, or No otherwise. If the answer is No then there is no second line, but if the answer is Yes, then on the second line output a space separated list of integers representing some schedule that leads to the desired result. For more information see note.\n\n", "output": "import sys\nfrom array import array  # noqa: F401\n\n\ndef input():\n    return sys.stdin.buffer.readline().decode('utf-8')\n\n\nn, w = map(int, input().split())\na = [0] + list(map(int, input().split()))\ntotal = sum(a)\n\n\ndef ng():\n    print('No')\n    exit()\n\n\ndef ok(a):\n    print('Yes')\n    print(*a)\n    exit()\n\n\nif w < 1 or total < w:\n    ng()\n\nif n == 1:\n    if w == a[1]:\n        ok([1] * (a[1] * 2))\n    else:\n        ng()\n\nif w == 1:\n    if min(a[1:]) > 1:\n        ng()\n\n    min_i = a.index(1)\n    ans = []\n    for i in range(1, n + 1):\n        if i == min_i:\n            continue\n        ans += [i] * (a[i] * 2)\n\n    ok([min_i] + ans + [min_i])\n\n\nans1, ans2, ans3 = [], [], []\nw -= 2\nif w:\n    for i in range(1, 3):\n        x = min(a[i] - 1, w)\n        w -= x\n        a[i] -= x\n        ans3 += [i] * (2 * x)\n    for i in range(3, n + 1):\n        x = min(a[i], w)\n        w -= x\n        a[i] -= x\n        ans3 += [i] * (2 * x)\n\nans1 = [2] * ((a[2] - 1) * 2)\nfor i in range(3, n + 1):\n    ans1 += [i] * (a[i] * 2)\nans1 = [1] + ans1 + [1]\na[1] -= 1\n\nans2 = [2] + [1] * (a[1] * 2) + [2]\n\nif w == 0:\n    ok(ans1 + ans2 + ans3)\nelse:\n    ng()\n", "public_tests": {"input": ["1 10\n11\n", "2 3\n4 4\n", "3 6\n1 2 3\n"], "output": ["No\n", "Yes\n1 2 2 2 2 2 2 1 2 1 1 1 1 2 1 1\n", "Yes\n1 1 2 2 2 2 3 3 3 3 3 3\n"]}, "private_tests": {"input": ["5 1\n2 3 4 5 6\n", "95 -200797120\n832 159 171 230 750 361 800 516 567 380 405 527 58 86 68 172 923 920 248 854 804 557 246 61 106 190 67 552 310 645 120 154 244 308 355 832 432 314 824 774 988 513 228 361 390 863 586 732 798 630 798 210 894 978 686 668 674 103 793 600 110 493 775 327 487 441 912 537 641 521 2 783 760 275 482 773 523 210 755 242 346 694 796 685 224 800 915 310 123 543 767 166 552 377 900\n", "100 7249\n210 148 6 42 13 63 88 19 1 50 17 10 49 71 88 19 21 175 142 120 74 89 64 294 3 1 4 7 44 115 66 18 290 71 3 116 38 95 26 105 85 65 76 54 84 26 21 44 93 286 24 50 10 69 101 10 44 33 45 74 58 202 25 54 192 6 185 15 67 76 61 29 33 148 56 151 173 46 115 82 48 224 172 68 96 66 134 40 2 162 69 36 257 18 64 104 48 37 8 313\n", "5 2\n5 6 7 3 1000\n", "22 158310108\n587 89 657 106 60 165 873 383 648 787 899 792 602 548 605 81 722 565 170 930 145 320\n", "5 1\n5 6 1000 200 1\n", "100 264896921\n873 930 997 985 837 928 946 987 914 964 928 952 798 942 994 919 543 964 744 777 892 882 980 867 919 981 989 907 800 972 990 960 913 890 941 899 969 934 1000 922 982 742 778 981 948 888 932 834 878 917 901 966 989 913 954 926 857 942 878 908 937 979 986 967 988 882 970 990 845 995 908 931 987 954 767 981 980 922 874 952 918 858 908 820 940 873 976 996 940 865 985 971 863 874 929 989 875 769 789 708\n", "5 1\n5 6 7 1 1000\n", "1 1001\n1000\n", "5 2\n5 6 7 3 1000\n", "3 30\n2 3 50\n", "55 -156937950\n160 154 287 571 944 846 380 952 85 867 69 81 308 85 65 832 847 667 121 198 61 678 231 539 254 939 403 622 151 342 79 439 764 123 402 279 579 361 570 256 293 814 978 447 664 97 275 922 655 752 335 735 971 774 545\n", "5 2\n50 100 200 100 200\n", "63 -925572098\n49 622 472 163 178 5 627 168 690 327 160 437 279 140 659 457 284 940 146 64 927 499 687 917 949 573 213 435 586 302 904 337 741 448 477 632 343 738 272 506 500 690 13 312 58 791 246 31 854 805 626 465 263 261 295 180 74 768 343 929 372 977 693\n", "100 -981226339\n904 940 949 741 854 977 985 985 818 848 972 937 861 880 769 908 999 985 706 949 945 940 900 928 870 921 710 944 958 980 646 939 899 690 959 949 853 898 749 918 912 976 906 868 973 900 965 824 988 995 823 978 985 979 870 909 926 894 978 998 966 973 941 810 937 832 975 880 721 970 941 711 961 846 926 1000 887 968 978 984 964 986 960 985 912 962 954 987 890 928 903 987 977 987 992 814 957 929 988 901\n", "100 -374833246\n952 847 939 978 971 901 980 943 963 999 831 992 949 995 995 932 993 979 950 985 987 961 980 979 948 997 991 997 750 906 999 974 902 945 905 981 885 909 975 934 909 615 934 948 928 832 982 990 995 782 652 955 947 950 965 956 871 892 836 961 988 987 985 993 946 966 989 857 953 970 996 922 794 943 944 970 911 904 955 778 968 910 987 836 977 957 1000 997 866 968 856 890 993 990 993 998 999 940 950 929\n", "85 458744977\n604 888 704 191 61 926 3 60 563 97 614 759 293 112 38 969 390 980 133 807 670 589 783 728 602 256 808 353 44 498 168 564 928 462 940 455 285 226 921 881 572 928 671 703 361 944 937 477 931 603 981 776 793 842 420 439 986 364 431 426 977 615 467 963 756 430 59 866 519 409 25 980 738 515 449 179 252 220 882 88 65 742 122 69 943\n", "100 338\n118 26 134 55 135 221 39 49 175 39 98 23 124 38 411 224 107 124 100 38 90 146 205 89 10 30 6 173 102 210 15 45 90 86 36 231 171 152 62 109 55 13 237 2 16 126 27 80 235 10 80 171 119 6 19 112 42 80 14 8 57 11 17 71 117 41 119 326 11 14 151 15 5 17 138 50 1 81 165 46 39 44 65 72 53 34 18 12 166 169 222 28 11 27 17 28 252 76 67 111\n", "63 -813670952\n622 472 163 178 5 627 168 690 327 160 437 279 140 659 457 284 940 146 64 927 499 687 917 949 573 213 435 586 302 904 337 741 448 477 632 343 738 272 506 500 690 13 312 58 791 246 31 854 805 626 465 263 261 295 180 74 768 343 929 372 977 693 435\n", "3 -1\n1 2 3\n", "2 5\n100 200\n", "5 1\n5 6 7 1 1000\n", "2 5\n100 200\n", "26 -772620876\n715 772 518 600 827 766 757 844 606 637 875 51 322 705 92 344 304 355 757 941 453 767 328 997 906 623\n", "1 1000\n1000\n", "52 773993035\n31 823 74 78 177 245 496 491 126 665 445 470 588 575 226 569 265 525 534 539 402 231 694 837 345 875 77 331 914 419 168 360 530 112 441 161 461 331 325 28 282 328 740 434 797 684 525 695 330 709 916 235\n", "94 268739153\n298 660 716 963 692 257 397 974 92 191 154 519 838 828 957 687 776 636 997 101 800 579 181 691 256 95 531 333 347 803 682 252 655 297 892 833 31 239 895 45 235 394 394 909 486 400 621 443 348 471 59 791 934 195 861 356 876 741 763 431 781 639 193 291 230 171 45 288 181 187 657 273 200 924 481 476 335 156 114 253 659 346 276 692 313 828 582 677 95 507 685 310 154 252\n", "100 1\n2 3 1 1 1 1 2 1 1 2 1 3 2 3 2 1 1 1 1 1 3 3 1 1 2 1 5 1 3 1 6 1 1 2 1 1 2 1 1 2 2 1 1 2 3 2 1 1 3 1 3 1 1 2 3 1 1 3 2 1 2 3 1 12 4 1 1 1 1 2 2 1 3 1 1 1 2 9 2 2 2 4 1 1 1 2 1 3 1 1 1 6 1 2 3 1 1 2 1 1\n", "100 152\n1 1 1 1 1 4 1 1 3 1 1 2 1 1 2 2 4 2 3 3 2 1 2 2 3 1 1 1 1 1 2 1 3 2 3 1 2 1 1 1 1 1 1 2 1 5 1 1 1 2 2 1 2 1 1 2 1 2 1 1 1 1 2 4 2 1 1 1 1 2 3 1 2 4 1 1 2 2 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 4 1 4 3 1\n", "100 152\n1 1 1 1 1 4 1 1 3 1 1 2 1 1 2 2 4 2 3 3 2 1 2 2 3 1 1 1 1 1 2 1 3 2 3 1 2 1 1 1 1 1 1 2 1 5 1 1 1 2 2 1 2 1 1 2 1 2 1 1 1 1 2 4 2 1 1 1 1 2 3 1 2 4 1 1 2 2 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 4 1 4 3 1\n", "100 1\n2 3 1 1 1 1 2 1 1 2 1 3 2 3 2 1 1 1 1 1 3 3 1 1 2 1 5 1 3 1 6 1 1 2 1 1 2 1 1 2 2 1 1 2 3 2 1 1 3 1 3 1 1 2 3 1 1 3 2 1 2 3 1 12 4 1 1 1 1 2 2 1 3 1 1 1 2 9 2 2 2 4 1 1 1 2 1 3 1 1 1 6 1 2 3 1 1 2 1 1\n", "5 1\n5 6 1000 200 1\n", "1 1000\n1000\n", "100 641835292\n943 945 992 905 990 920 973 962 975 748 759 947 919 720 915 897 976 997 825 901 970 944 940 947 988 915 922 970 957 848 926 697 969 910 886 917 904 680 970 969 990 993 988 905 933 942 948 990 956 990 990 888 827 677 963 973 923 999 963 914 895 998 816 935 845 952 937 992 977 983 960 778 996 922 929 876 843 898 709 998 965 946 967 680 902 988 789 763 991 789 993 975 942 911 950 996 915 947 991 902\n", "1 999\n1000\n", "94 -978764317\n154 298 660 716 963 692 257 397 974 92 191 154 519 838 828 957 687 776 636 997 101 800 579 181 691 256 95 531 333 347 803 682 252 655 297 892 833 31 239 895 45 235 394 394 909 486 400 621 443 348 471 59 791 934 195 861 356 876 741 763 431 781 639 193 291 230 171 45 288 181 187 657 273 200 924 481 476 335 156 114 253 659 346 276 692 313 828 582 677 95 507 685 310 154\n", "3 5\n3 1 4\n", "93 95784839\n477 436 149 554 528 671 67 630 382 805 329 781 980 237 589 743 451 633 24 139 45 396 911 950 925 970 123 862 355 401 134 857 613 2 886 951 585 748 303 17 750 957 912 780 427 110 215 510 87 418 144 556 688 538 704 405 391 648 41 927 752 422 854 708 447 371 782 904 934 489 373 882 787 774 366 836 430 460 557 337 808 975 248 867 808 179 742 206 231 648 600 852 419\n", "100 1552\n30 39 30 48 4 21 5 4 5 23 9 97 85 25 17 6 21 28 2 38 3 7 4 5 52 80 28 9 12 83 6 32 5 11 13 44 19 8 29 10 73 94 21 4 92 8 13 23 21 45 14 12 8 22 104 29 57 28 47 12 69 5 7 21 56 46 32 15 37 72 8 4 32 24 20 131 62 6 18 177 14 69 26 60 20 23 64 14 5 1 10 46 13 60 5 12 112 67 6 5\n", "2 12\n5 6\n", "100 -751771616\n978 980 808 940 981 986 980 964 990 856 817 999 955 884 894 927 977 949 957 782 923 999 879 997 948 961 965 976 895 795 962 939 975 925 826 982 955 938 932 795 907 981 916 999 981 932 908 764 941 734 855 928 990 933 975 890 977 839 870 967 981 715 913 899 1000 981 813 840 858 900 951 918 867 1000 971 935 865 761 969 959 889 879 970 935 992 984 873 985 920 716 702 990 952 986 814 988 933 939 964 930\n", "5 2\n50 100 200 100 200\n", "82 -757807687\n124 205 491 49 294 325 120 599 253 895 639 500 573 955 199 705 160 838 547 795 11 141 598 378 45 191 482 62 455 575 256 485 695 99 978 986 167 196 677 653 562 90 434 43 495 883 186 250 605 559 561 275 847 235 444 141 481 88 693 882 600 128 245 616 113 429 105 406 743 38 149 120 24 126 924 842 577 714 866 949 189 871\n", "100 2105125\n844 941 997 951 966 959 958 974 978 965 920 986 995 953 950 947 954 1000 915 829 908 926 875 992 993 952 729 993 925 984 988 832 809 974 949 902 927 912 981 713 962 969 938 835 920 984 993 920 994 1000 909 974 958 958 721 985 756 918 888 968 961 890 996 792 989 740 872 999 955 994 810 990 995 938 984 796 956 912 996 858 884 993 983 762 767 783 866 744 984 995 929 901 999 987 866 810 953 807 974 932\n", "12 -142124761\n569 939 259 21 59 405 743 707 732 125 184 178\n", "2 3\n4 4\n", "5 1\n5 6 7 2 1000\n", "93 -457372818\n142 356 889 134 943 85 250 276 169 557 354 114 616 520 632 945 827 253 158 673 536 410 239 458 649 241 267 518 479 458 992 462 905 787 366 808 49 603 623 778 427 452 706 569 755 990 555 586 130 656 624 505 85 681 818 920 514 524 606 79 415 691 919 554 769 771 218 752 750 861 286 647 63 748 110 973 382 818 276 962 456 205 195 849 838 7 249 365 94 787 367 96 673\n"], "output": ["No\n", "No\n", "Yes\nn", "Yes\n1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 1 2 1 1 1 1 1 1 1 1 2\n", "No\n", "Yes\n5 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5\n", "No\n", "Yes\n4 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4\n", "No\n", "Yes\n1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 1 2 1 1 1 1 1 1 1 1 2\n", "Yes\n1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n", "No\n", "Yes\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2\n", "No\n", "No\n", "No\n", "No\n", "Yes\n77 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 27 27 27 27 27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 35 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 44 44 44 44 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 54 54 54 54 54 54 54 54 54 54 54 54 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 56 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 57 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 59 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 73 73 73 73 73 73 73 73 73 73 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 76 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 84 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 87 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 89 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 95 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 77 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 97 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 98 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "No\n", "No\n", "Yes\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1\n", "Yes\n4 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4\n", "Yes\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1\n", "No\n", "Yes\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "No\n", "No\n", "Yes\n3 1 1 1 1 2 2 2 2 2 2 4 4 5 5 6 6 7 7 7 7 8 8 9 9 10 10 10 10 11 11 12 12 12 12 12 12 13 13 13 13 14 14 14 14 14 14 15 15 15 15 16 16 17 17 18 18 19 19 20 20 21 21 21 21 21 21 22 22 22 22 22 22 23 23 24 24 25 25 25 25 26 26 27 27 27 27 27 27 27 27 27 27 28 28 29 29 29 29 29 29 30 30 31 31 31 31 31 31 31 31 31 31 31 31 32 32 33 33 34 34 34 34 35 35 36 36 37 37 37 37 38 38 39 39 40 40 40 40 41 41 41 41 42 42 43 43 44 44 44 44 45 45 45 45 45 45 46 46 46 46 47 47 48 48 49 49 49 49 49 49 50 50 51 51 51 51 51 51 52 52 53 53 54 54 54 54 55 55 55 55 55 55 56 56 57 57 58 58 58 58 58 58 59 59 59 59 60 60 61 61 61 61 62 62 62 62 62 62 63 63 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 65 65 65 65 65 65 65 65 66 66 67 67 68 68 69 69 70 70 70 70 71 71 71 71 72 72 73 73 73 73 73 73 74 74 75 75 76 76 77 77 77 77 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 79 79 79 79 80 80 80 80 81 81 81 81 82 82 82 82 82 82 82 82 83 83 84 84 85 85 86 86 86 86 87 87 88 88 88 88 88 88 89 89 90 90 91 91 92 92 92 92 92 92 92 92 92 92 92 92 93 93 94 94 94 94 95 95 95 95 95 95 96 96 97 97 98 98 98 98 99 99 100 100 3\n", "Yes\n1 2 2 3 3 4 4 5 5 6 6 6 6 6 6 6 6 7 7 8 8 1 9 9 9 9 9 9 10 10 11 11 12 12 12 12 13 13 14 14 15 15 15 15 16 16 16 16 17 17 17 17 17 17 17 17 18 18 18 18 19 19 19 19 19 19 20 20 20 20 20 20 21 21 21 21 22 22 23 23 23 23 24 24 24 24 25 25 25 25 25 25 26 26 27 27 28 28 29 29 30 30 31 31 31 31 32 32 33 33 33 33 33 33 34 34 34 34 35 35 35 35 35 35 36 36 37 37 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 44 44 45 45 46 46 46 46 46 46 46 46 46 46 47 47 48 48 49 49 50 50 50 50 51 51 51 51 52 52 53 53 53 53 54 54 55 55 56 56 56 56 57 57 58 58 58 58 59 59 60 60 61 61 62 62 63 63 63 63 64 64 64 64 64 64 64 64 65 65 65 65 66 66 67 67 68 68 69 69 70 70 70 70 71 71 71 71 71 71 72 72 73 73 73 73 74 74 74 74 74 74 74 74 75 75 76 76 77 77 77 77 78 78 78 78 79 79 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 96 96 96 96 96 96 97 97 98 98 98 98 98 98 98 98 99 99 99 99 99 99 100 100\n", "Yes\n1 2 2 3 3 4 4 5 5 6 6 6 6 6 6 6 6 7 7 8 8 1 9 9 9 9 9 9 10 10 11 11 12 12 12 12 13 13 14 14 15 15 15 15 16 16 16 16 17 17 17 17 17 17 17 17 18 18 18 18 19 19 19 19 19 19 20 20 20 20 20 20 21 21 21 21 22 22 23 23 23 23 24 24 24 24 25 25 25 25 25 25 26 26 27 27 28 28 29 29 30 30 31 31 31 31 32 32 33 33 33 33 33 33 34 34 34 34 35 35 35 35 35 35 36 36 37 37 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 44 44 45 45 46 46 46 46 46 46 46 46 46 46 47 47 48 48 49 49 50 50 50 50 51 51 51 51 52 52 53 53 53 53 54 54 55 55 56 56 56 56 57 57 58 58 58 58 59 59 60 60 61 61 62 62 63 63 63 63 64 64 64 64 64 64 64 64 65 65 65 65 66 66 67 67 68 68 69 69 70 70 70 70 71 71 71 71 71 71 72 72 73 73 73 73 74 74 74 74 74 74 74 74 75 75 76 76 77 77 77 77 78 78 78 78 79 79 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 96 96 96 96 96 96 97 97 98 98 98 98 98 98 98 98 99 99 99 99 99 99 100 100\n", "Yes\n3 1 1 1 1 2 2 2 2 2 2 4 4 5 5 6 6 7 7 7 7 8 8 9 9 10 10 10 10 11 11 12 12 12 12 12 12 13 13 13 13 14 14 14 14 14 14 15 15 15 15 16 16 17 17 18 18 19 19 20 20 21 21 21 21 21 21 22 22 22 22 22 22 23 23 24 24 25 25 25 25 26 26 27 27 27 27 27 27 27 27 27 27 28 28 29 29 29 29 29 29 30 30 31 31 31 31 31 31 31 31 31 31 31 31 32 32 33 33 34 34 34 34 35 35 36 36 37 37 37 37 38 38 39 39 40 40 40 40 41 41 41 41 42 42 43 43 44 44 44 44 45 45 45 45 45 45 46 46 46 46 47 47 48 48 49 49 49 49 49 49 50 50 51 51 51 51 51 51 52 52 53 53 54 54 54 54 55 55 55 55 55 55 56 56 57 57 58 58 58 58 58 58 59 59 59 59 60 60 61 61 61 61 62 62 62 62 62 62 63 63 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 65 65 65 65 65 65 65 65 66 66 67 67 68 68 69 69 70 70 70 70 71 71 71 71 72 72 73 73 73 73 73 73 74 74 75 75 76 76 77 77 77 77 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 79 79 79 79 80 80 80 80 81 81 81 81 82 82 82 82 82 82 82 82 83 83 84 84 85 85 86 86 86 86 87 87 88 88 88 88 88 88 89 89 90 90 91 91 92 92 92 92 92 92 92 92 92 92 92 92 93 93 94 94 94 94 95 95 95 95 95 95 96 96 97 97 98 98 98 98 99 99 100 100 3\n", "Yes\n5 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5\n", "Yes\nn", "No\n", "No\n", "No\n", "Yes\n2 1 1 1 1 1 1 2 3 3 3 3 3 3 3 3 \n", "No\n", "Yes\nn", "No\n", "No\n", "Yes\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2\n", "No\n", "No\n", "No\n", "Yes\n1 2 2 2 2 2 2 1 2 1 1 1 1 2 1 1\n", "No\n", "No\n"]}, "index": 8020}, {"input": "Iahub is so happy about inventing bubble sort graphs that he's staying all day long at the office and writing permutations. Iahubina is angry that she is no more important for Iahub. When Iahub goes away, Iahubina comes to his office and sabotage his research work.\n\nThe girl finds an important permutation for the research. The permutation contains n distinct integers a1, a2, ..., an (1 \u2264 ai \u2264 n). She replaces some of permutation elements with -1 value as a revenge. \n\nWhen Iahub finds out his important permutation is broken, he tries to recover it. The only thing he remembers about the permutation is it didn't have any fixed point. A fixed point for a permutation is an element ak which has value equal to k (ak = k). Your job is to proof to Iahub that trying to recover it is not a good idea. Output the number of permutations which could be originally Iahub's important permutation, modulo 1000000007 (109 + 7).\n\nInput\n\nThe first line contains integer n (2 \u2264 n \u2264 2000). On the second line, there are n integers, representing Iahub's important permutation after Iahubina replaces some values with -1. \n\nIt's guaranteed that there are no fixed points in the given permutation. Also, the given sequence contains at least two numbers -1 and each positive number occurs in the sequence at most once. It's guaranteed that there is at least one suitable permutation.\n\nOutput\n\nOutput a single integer, the number of ways Iahub could recover his permutation, modulo 1000000007 (109 + 7).\n\n", "output": "input()\nt = list(map(int, input().split()))\ns, m = 0, 1000000007\np = {i for i, q in enumerate(t, 1) if q == -1}\nn, k = len(p), len(p - set(t))\nd, c = 2 * (n & 1) - 1, 1\nfor j in range(n + 1):\n    d = -d * max(1, j) % m\n    if n - j <= k:\n        s += c * d\n        c = c * max(1, n - j) * pow(k - n + j + 1, m - 2, m) % m\nprint(s % m)", "public_tests": {"input": ["5\n-1 -1 4 3 -1\n"], "output": ["2\n"]}, "private_tests": {"input": ["6\n-1 -1 -1 -1 -1 -1\n", "7\n-1 -1 4 -1 7 1 6\n", "10\n4 10 -1 1 6 8 9 2 -1 -1\n", "8\n2 4 5 3 -1 8 -1 6\n", "2\n-1 -1\n", "20\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"], "output": ["265\n", "4\n", "4\n", "1\n", "1\n", "927799753\n"]}, "index": 8021}, {"input": "Fox Ciel has n boxes in her room. They have the same size and weight, but they might have different strength. The i-th box can hold at most xi boxes on its top (we'll call xi the strength of the box). \n\nSince all the boxes have the same size, Ciel cannot put more than one box directly on the top of some box. For example, imagine Ciel has three boxes: the first has strength 2, the second has strength 1 and the third has strength 1. She cannot put the second and the third box simultaneously directly on the top of the first one. But she can put the second box directly on the top of the first one, and then the third box directly on the top of the second one. We will call such a construction of boxes a pile.\n\n<image>\n\nFox Ciel wants to construct piles from all the boxes. Each pile will contain some boxes from top to bottom, and there cannot be more than xi boxes on the top of i-th box. What is the minimal number of piles she needs to construct?\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100). The next line contains n integers x1, x2, ..., xn (0 \u2264 xi \u2264 100).\n\nOutput\n\nOutput a single integer \u2014 the minimal possible number of piles.\n\n", "output": "input();print(1+max(x//-~f for x,f in enumerate(sorted(map(int,input().split())))))", "public_tests": {"input": ["9\n0 1 0 2 0 1 1 2 10\n", "5\n0 1 2 3 4\n", "3\n0 0 10\n", "4\n0 0 0 0\n"], "output": ["3\n", "1\n", "2\n", "4\n"]}, "private_tests": {"input": ["59\n61 33 84 76 56 47 70 94 46 77 95 85 35 90 83 62 48 74 36 74 83 97 62 92 95 75 70 82 94 67 82 42 78 70 50 73 80 76 94 83 96 80 80 88 91 79 83 54 38 90 33 93 53 33 86 95 48 34 46\n", "18\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "5\n4 1 1 1 1\n", "100\n3 4 4 4 3 3 3 3 3 4 4 4 3 3 3 4 3 4 4 4 3 4 3 4 3 4 3 3 4 4 3 4 4 3 4 4 4 4 4 3 4 3 3 3 4 3 3 4 3 4 3 4 3 3 4 4 4 3 3 3 3 3 4 4 3 4 4 3 4 3 3 3 4 4 3 3 3 3 3 4 3 4 4 3 3 4 3 4 3 4 4 4 3 3 3 4 4 4 4 3\n", "39\n54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54\n", "100\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n", "46\n14 13 13 10 13 15 8 8 12 9 11 15 8 10 13 8 12 13 11 8 12 15 12 15 11 13 12 9 13 12 10 8 13 15 9 15 8 13 11 8 9 9 9 8 11 8\n", "100\n34 3 37 35 40 44 38 46 13 31 12 23 26 40 26 18 28 36 5 21 2 4 10 29 3 46 38 41 37 28 44 14 39 10 35 17 24 28 38 16 29 6 2 42 47 34 43 2 43 46 7 16 16 43 33 32 20 47 8 48 32 4 45 38 15 7 25 25 19 41 20 35 16 2 31 5 31 25 27 3 45 29 32 36 9 47 39 35 9 21 32 17 21 41 29 48 11 40 5 25\n", "100\n0 3 1 0 3 2 1 2 2 1 2 1 3 2 1 2 1 3 2 0 0 2 3 0 0 2 1 2 2 3 1 2 2 2 0 3 3 2 0 0 1 0 1 2 3 1 0 3 3 3 0 2 1 3 0 1 3 2 2 2 2 3 3 2 0 2 0 1 0 1 3 0 1 2 0 1 3 2 0 3 1 1 2 3 1 3 1 0 3 0 3 0 2 1 1 1 2 2 0 1\n", "2\n100 99\n", "100\n1 1 1 2 2 2 2 2 2 1 1 1 2 0 2 2 0 0 0 0 0 2 0 0 2 2 1 0 2 0 2 1 1 2 2 1 2 2 1 2 1 2 2 1 2 0 1 2 2 0 2 2 2 2 1 0 1 0 0 0 2 0 2 0 1 1 0 2 2 2 2 1 1 1 2 1 1 2 1 1 1 2 1 0 2 1 0 1 2 0 1 1 2 0 0 1 1 0 1 1\n", "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "18\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "2\n0 0\n", "87\n52 63 93 90 50 35 67 66 46 89 43 64 33 88 34 80 69 59 75 55 55 68 66 83 46 33 72 36 73 34 54 85 52 87 67 68 47 95 52 78 92 58 71 66 84 61 36 77 69 44 84 70 71 55 43 91 33 65 77 34 43 59 83 70 95 38 92 92 74 53 66 65 81 45 55 89 49 52 43 69 78 41 37 79 63 70 67\n", "100\n48 35 44 37 35 42 42 39 49 53 35 55 41 42 42 39 43 49 46 54 48 39 42 53 55 39 56 43 43 38 48 40 54 36 48 55 46 40 41 39 45 56 38 40 47 46 45 46 53 51 38 41 54 35 35 47 42 43 54 54 39 44 49 41 37 49 36 37 37 49 53 44 47 37 55 49 45 40 35 51 44 40 42 35 46 48 53 48 35 38 42 36 54 46 44 47 41 40 41 42\n", "100\n1 0 2 2 2 2 1 0 1 2 2 2 0 1 0 1 2 1 2 1 0 1 2 2 2 1 0 1 0 2 1 2 0 2 1 1 2 1 1 0 1 2 1 1 2 1 1 0 2 2 0 0 1 2 0 2 0 0 1 1 0 0 2 1 2 1 0 2 2 2 2 2 2 1 2 0 1 2 1 2 1 0 1 0 1 0 1 1 0 2 1 0 0 1 2 2 1 0 0 1\n", "70\n6 1 4 1 1 6 5 2 5 1 1 5 2 1 2 4 1 1 1 2 4 5 2 1 6 6 5 2 1 4 3 1 4 3 6 5 2 1 3 4 4 1 4 5 6 2 1 2 4 4 5 3 6 1 1 2 2 1 5 6 1 6 3 1 4 4 2 3 1 4\n", "2\n0 1\n", "39\n40 20 49 35 80 18 20 75 39 62 43 59 46 37 58 52 67 16 34 65 32 75 59 42 59 41 68 21 41 61 66 19 34 63 19 63 78 62 24\n", "46\n14 8 7 4 8 7 8 8 12 9 9 12 9 12 14 8 10 14 14 6 9 11 7 14 14 13 11 4 13 13 11 13 9 10 10 12 10 8 12 10 13 10 7 13 14 6\n", "11\n71 34 31 71 42 38 64 60 36 76 67\n", "100\n8 7 9 10 2 7 8 11 11 4 7 10 2 5 8 9 10 3 9 4 10 5 5 6 3 8 8 9 6 9 5 5 4 11 4 2 11 8 3 5 6 6 11 9 8 11 9 8 3 3 8 9 8 9 4 8 6 11 4 4 4 9 7 5 3 4 11 3 9 11 8 10 3 5 5 7 6 9 4 5 2 11 3 6 2 10 9 4 6 10 5 11 8 10 10 8 9 8 5 3\n", "9\n0 1 1 0 2 0 3 45 4\n", "94\n11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\n", "100\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "100\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "15\n20 69 36 63 40 40 52 42 20 43 59 68 64 49 47\n", "100\n2 4 5 5 0 5 3 0 3 0 5 3 4 1 0 3 0 5 5 0 4 3 3 3 0 2 1 2 2 4 4 2 4 0 1 3 4 1 4 2 5 3 5 2 3 0 1 2 5 5 2 0 4 2 5 1 0 0 4 0 1 2 0 1 2 4 1 4 5 3 4 5 5 1 0 0 3 1 4 0 4 5 1 3 3 0 4 2 0 4 5 2 3 0 5 1 4 4 1 0\n", "1\n0\n", "74\n4 4 5 5 5 5 5 5 6 6 5 4 4 4 3 3 5 4 5 3 4 4 5 6 3 3 5 4 4 5 4 3 5 5 4 4 3 5 6 4 3 6 6 3 4 5 4 4 3 3 3 6 3 5 6 5 5 5 5 3 6 4 5 4 4 6 6 3 4 5 6 6 6 6\n", "10\n1 1 1 1 2 2 2 2 2 2\n"], "output": ["1\n", "18\n", "2\n", "20\n", "1\n", "17\n", "3\n", "3\n", "26\n", "1\n", "34\n", "1\n", "9\n", "2\n", "1\n", "2\n", "34\n", "11\n", "1\n", "1\n", "4\n", "1\n", "9\n", "3\n", "8\n", "100\n", "2\n", "1\n", "21\n", "1\n", "11\n", "4\n"]}, "index": 8022}, {"input": "One day, little Vasya found himself in a maze consisting of (n + 1) rooms, numbered from 1 to (n + 1). Initially, Vasya is at the first room and to get out of the maze, he needs to get to the (n + 1)-th one.\n\nThe maze is organized as follows. Each room of the maze has two one-way portals. Let's consider room number i (1 \u2264 i \u2264 n), someone can use the first portal to move from it to room number (i + 1), also someone can use the second portal to move from it to room number pi, where 1 \u2264 pi \u2264 i.\n\nIn order not to get lost, Vasya decided to act as follows. \n\n  * Each time Vasya enters some room, he paints a cross on its ceiling. Initially, Vasya paints a cross at the ceiling of room 1. \n  * Let's assume that Vasya is in room i and has already painted a cross on its ceiling. Then, if the ceiling now contains an odd number of crosses, Vasya uses the second portal (it leads to room pi), otherwise Vasya uses the first portal. \n\n\n\nHelp Vasya determine the number of times he needs to use portals to get to room (n + 1) in the end.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 103) \u2014 the number of rooms. The second line contains n integers pi (1 \u2264 pi \u2264 i). Each pi denotes the number of the room, that someone can reach, if he will use the second portal in the i-th room.\n\nOutput\n\nPrint a single number \u2014 the number of portal moves the boy needs to go out of the maze. As the number can be rather large, print it modulo 1000000007 (109 + 7).\n\n", "output": "input()\ndp = [0] \n[dp.append((2 * dp[-1] + 2 - dp[u - 1]) % 1000000007) for u in map(int, input().split())]\nprint (dp[-1])", "public_tests": {"input": ["2\n1 2\n", "5\n1 1 1 1 1\n", "4\n1 1 2 3\n"], "output": ["4\n", "62\n", "20\n"]}, "private_tests": {"input": ["3\n1 1 3\n", "102\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\n1 1 3 2 2 1 3 4 7 5\n", "31\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 29\n", "1\n1\n", "10\n1 1 1 1 1 1 1 1 1 1\n", "129\n1 1 3 3 1 4 7 4 3 5 8 11 3 9 15 4 11 17 1 6 18 9 11 13 17 22 8 18 26 13 16 20 3 16 35 26 23 28 27 30 39 29 43 8 14 6 17 32 26 31 2 18 3 47 52 21 57 1 35 35 53 47 16 26 30 65 48 2 32 11 10 5 4 1 4 53 71 21 53 8 58 49 17 6 19 80 1 49 43 60 12 60 35 25 86 45 47 97 52 74 10 91 93 31 69 41 80 90 67 4 94 92 82 36 27 18 65 8 45 90 42 115 34 61 16 97 20 43 104\n", "104\n1 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102\n", "100\n1 1 3 1 5 1 1 1 8 9 7 3 11 11 15 14 4 10 11 12 1 10 13 11 7 23 8 12 18 23 27 17 14 29 1 33 5 24 26 29 25 14 40 8 43 29 43 40 34 18 21 31 3 8 20 14 28 29 3 54 14 3 59 1 45 9 13 11 50 48 26 57 17 33 9 52 21 46 24 20 16 58 69 77 52 36 80 2 31 3 44 36 64 90 84 8 21 25 65 67\n", "30\n1 1 2 2 5 6 4 3 4 7 3 5 12 12 2 15 3 8 3 10 12 3 14 1 10 4 22 11 22 27\n", "70\n1 1 2 3 4 3 5 2 2 4 8 6 13 6 13 3 5 4 5 10 11 9 11 8 12 24 21 6 9 29 25 31 17 27 3 17 35 5 21 11 27 14 33 7 33 44 22 33 21 11 38 46 53 46 3 22 5 27 55 22 41 25 56 61 27 28 11 66 68 13\n", "10\n1 2 3 4 5 6 7 8 9 10\n", "20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n", "20\n1 2 2 2 2 1 4 7 8 6 5 3 5 3 8 11 5 10 16 10\n", "32\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "107\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107\n", "7\n1 2 1 3 1 2 1\n", "20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"], "output": ["8\n", "810970229\n", "858\n", "758096363\n", "2\n", "2046\n", "931883285\n", "740446116\n", "264413610\n", "132632316\n", "707517223\n", "20\n", "40\n", "433410\n", "589934534\n", "214\n", "154\n", "2097150\n"]}, "index": 8023}, {"input": "Pashmak has fallen in love with an attractive girl called Parmida since one year ago...\n\nToday, Pashmak set up a meeting with his partner in a romantic garden. Unfortunately, Pashmak has forgotten where the garden is. But he remembers that the garden looks like a square with sides parallel to the coordinate axes. He also remembers that there is exactly one tree on each vertex of the square. Now, Pashmak knows the position of only two of the trees. Help him to find the position of two remaining ones.\n\nInput\n\nThe first line contains four space-separated x1, y1, x2, y2 ( - 100 \u2264 x1, y1, x2, y2 \u2264 100) integers, where x1 and y1 are coordinates of the first tree and x2 and y2 are coordinates of the second tree. It's guaranteed that the given points are distinct.\n\nOutput\n\nIf there is no solution to the problem, print -1. Otherwise print four space-separated integers x3, y3, x4, y4 that correspond to the coordinates of the two other trees. If there are several solutions you can output any of them. \n\nNote that x3, y3, x4, y4 must be in the range ( - 1000 \u2264 x3, y3, x4, y4 \u2264 1000).\n\n", "output": "a,b,c,d=map(int,input().split())\nl=abs(a-c);m=abs(b-d)\nif a==c: print(a+m,b,c+m,d)\nelif b==d: print(a,b+l,c,d+l)\nelif l!=m: print(-1)\nelse: print(a,d,c,b)", "public_tests": {"input": ["0 0 1 2\n", "0 0 0 1\n", "0 0 1 1\n"], "output": ["-1\n", "1 0 1 1\n", "0 1 1 0\n"]}, "private_tests": {"input": ["0 1 3 1\n", "66 -64 -25 -64\n", "100 100 100 -100\n", "-100 -100 100 100\n", "-1 1 1 -1\n", "0 1 1 0\n", "2 8 7 3\n", "1 3 3 1\n", "51 -36 18 83\n", "0 0 1 -1\n", "1 0 0 1\n", "6 85 -54 -84\n", "-42 84 -67 59\n", "5 6 8 3\n", "67 77 -11 -1\n", "27 -74 27 74\n", "73 47 -5 -77\n", "-68 -78 -45 -55\n", "0 0 2 14\n", "2 4 5 4\n", "4 1 2 1\n", "4 0 0 4\n", "1 12 3 10\n", "1 1 0 0\n", "0 0 -1 1\n", "1 0 2 1\n", "0 0 1 0\n", "0 3 3 0\n", "0 2 1 2\n", "1 2 2 3\n", "0 0 -3 3\n", "0 2 2 0\n", "-100 -100 99 100\n", "0 1 2 3\n", "1 2 3 2\n", "2 3 3 4\n", "-1 2 -2 3\n", "-17 -32 76 -32\n", "0 0 4 3\n", "0 2 1 1\n", "56 22 48 70\n", "91 -40 30 21\n", "-100 -100 -100 100\n", "1 0 1 1\n", "-3 3 0 0\n", "68 -92 8 -32\n", "95 -83 -39 -6\n", "54 94 53 -65\n", "-100 100 100 100\n", "1 2 2 1\n", "70 0 0 10\n", "0 -100 0 100\n", "3 4 7 8\n", "69 -22 60 16\n", "0 0 5 0\n", "-92 15 84 15\n", "0 5 1 5\n", "0 1 1 8\n", "0 1 0 0\n", "15 -9 80 -9\n", "2 3 4 1\n", "0 5 5 0\n", "0 0 2 0\n", "3 5 5 3\n", "1 1 0 1\n", "2 2 1 1\n", "1 1 2 0\n", "100 -100 -100 -100\n", "-58 -55 40 43\n", "-100 100 100 -100\n", "0 0 1 7\n"], "output": ["0 4 3 4\n", "66 27 -25 27\n", "300 100 300 -100\n", "-100 100 100 -100\n", "-1 -1 1 1\n", "0 0 1 1\n", "2 3 7 8\n", "1 1 3 3\n", "-1\n", "0 -1 1 0\n", "1 1 0 0\n", "-1\n", "-42 59 -67 84\n", "5 3 8 6\n", "67 -1 -11 77\n", "175 -74 175 74\n", "-1\n", "-68 -55 -45 -78\n", "-1\n", "2 7 5 7\n", "4 3 2 3\n", "4 4 0 0\n", "1 10 3 12\n", "1 0 0 1\n", "0 1 -1 0\n", "1 1 2 0\n", "0 1 1 1\n", "0 0 3 3\n", "0 3 1 3\n", "1 3 2 2\n", "0 3 -3 0\n", "0 0 2 2\n", "-1\n", "0 3 2 1\n", "1 4 3 4\n", "2 4 3 3\n", "-1 3 -2 2\n", "-17 61 76 61\n", "-1\n", "0 1 1 2\n", "-1\n", "91 21 30 -40\n", "100 -100 100 100\n", "2 0 2 1\n", "-3 0 0 3\n", "68 -32 8 -92\n", "-1\n", "-1\n", "-100 300 100 300\n", "1 1 2 2\n", "-1\n", "200 -100 200 100\n", "3 8 7 4\n", "-1\n", "0 5 5 5\n", "-92 191 84 191\n", "0 6 1 6\n", "-1\n", "1 1 1 0\n", "15 56 80 56\n", "2 1 4 3\n", "0 0 5 5\n", "0 2 2 2\n", "3 3 5 5\n", "1 2 0 2\n", "2 1 1 2\n", "1 0 2 1\n", "100 100 -100 100\n", "-58 43 40 -55\n", "-100 -100 100 100\n", "-1\n"]}, "index": 8024}, {"input": "Bertown is under siege! The attackers have blocked all the ways out and their cannon is bombarding the city. Fortunately, Berland intelligence managed to intercept the enemies' shooting plan. Let's introduce the Cartesian system of coordinates, the origin of which coincides with the cannon's position, the Ox axis is directed rightwards in the city's direction, the Oy axis is directed upwards (to the sky). The cannon will make n more shots. The cannon balls' initial speeds are the same in all the shots and are equal to V, so that every shot is characterized by only one number alphai which represents the angle at which the cannon fires. Due to the cannon's technical peculiarities this angle does not exceed 45 angles (\u03c0 / 4). We disregard the cannon sizes and consider the firing made from the point (0, 0).\n\nThe balls fly according to the known physical laws of a body thrown towards the horizon at an angle: \n\nvx(t) = V\u00b7cos(alpha) vy(t) = V\u00b7sin(alpha) \u2013 g\u00b7t x(t) = V\u00b7cos(alpha)\u00b7t y(t) = V\u00b7sin(alpha)\u00b7t \u2013 g\u00b7t2 / 2\n\nThink of the acceleration of gravity g as equal to 9.8.\n\nBertown defends m walls. The i-th wall is represented as a vertical segment (xi, 0) - (xi, yi). When a ball hits a wall, it gets stuck in it and doesn't fly on. If a ball doesn't hit any wall it falls on the ground (y = 0) and stops. If the ball exactly hits the point (xi, yi), it is considered stuck. \n\nYour task is to find for each ball the coordinates of the point where it will be located in the end.\n\nInput\n\nThe first line contains integers n and V (1 \u2264 n \u2264 104, 1 \u2264 V \u2264 1000) which represent the number of shots and the initial speed of every ball. The second line contains n space-separated real numbers alphai (0 < alphai < \u03c0 / 4) which represent the angles in radians at which the cannon will fire. The third line contains integer m (1 \u2264 m \u2264 105) which represents the number of walls. Then follow m lines, each containing two real numbers xi and yi (1 \u2264 xi \u2264 1000, 0 \u2264 yi \u2264 1000) which represent the wall\u2019s coordinates. All the real numbers have no more than 4 decimal digits. The walls may partially overlap or even coincide.\n\nOutput\n\nPrint n lines containing two real numbers each \u2014 calculate for every ball the coordinates of its landing point. Your answer should have the relative or absolute error less than 10 - 4.\n\n", "output": "import sys\nfrom array import array  # noqa: F401\nfrom math import pi, sin, cos\nfrom bisect import bisect_left\n\n\ndef input():\n    return sys.stdin.buffer.readline().decode('utf-8')\n\n\nn, v = map(int, input().split())\nv = float(v)\nalpha = [float(input()) for _ in range(n)]\nm = int(input())\nwall = sorted(tuple(map(float, input().split())) for _ in range(m)) + [(1e9, 1e9)]\nmax_angle = pi / 4\neps = 1e-9\na = [0.0] * m + [max_angle + eps]\n\nfor i in range(m):\n    ng_angle, ok_angle = 0.0, max_angle + eps\n\n    for _ in range(50):\n        mid_angle = (ok_angle + ng_angle) / 2\n        t = wall[i][0] / (v * cos(mid_angle))\n        if (v * sin(mid_angle) * t - 9.8 * t**2 / 2) - eps <= wall[i][1]:\n            ng_angle = mid_angle\n        else:\n            ok_angle = mid_angle\n\n    a[i] = max(a[i], ng_angle)\n    a[i + 1] = max(a[i], a[i + 1])\n\n\nans = [''] * n\nfor i in range(n):\n    wi = bisect_left(a, alpha[i])\n\n    ok, ng = 0.0, 1e7\n    sin_a = sin(alpha[i])\n\n    for _ in range(50):\n        t = (ok + ng) / 2\n        if v * sin_a * t - 9.8 * t**2 / 2 >= 0.0:\n            ok = t\n        else:\n            ng = t\n\n    x = v * cos(alpha[i]) * ok\n\n    if x < wall[wi][0]:\n        ans[i] = f'{x:.8f} {0:.8f}'\n    else:\n        ok, ng = 0.0, 1e7\n        cos_a = cos(alpha[i])\n\n        for _ in range(50):\n            t = (ok + ng) / 2\n            if v * cos_a * t <= wall[wi][0]:\n                ok = t\n            else:\n                ng = t\n        y = v * sin_a * ok - 9.8 * ok**2 / 2\n        ans[i] = f'{wall[wi][0]:.8f} {y:.8f}'\n\nprint('\\n'.join(ans))\n", "public_tests": {"input": ["2 10\n0.7853\n0.3\n2\n4.0 2.4\n6.0 1.9\n", "2 10\n0.7853\n0.3\n3\n5.0 5.0\n4.0 2.4\n6.0 1.9\n"], "output": ["10.204081436 0.000000000\n4.000000000 0.378324889\n", "5.000000000 2.549499369\n4.000000000 0.378324889\n"]}, "private_tests": {"input": ["6 417\n0.0303\n0.7536\n0.7225\n0.2404\n0.2432\n0.4583\n3\n979.9372 477.1436\n469.9804 408.1158\n923.2564 220.5522\n", "4 851\n0.3178\n0.5635\n0.1335\n0.5107\n4\n685.3785 249.6264\n681.8946 242.4571\n917.2937 600.3285\n150.5685 135.5137\n", "3 186\n0.4084\n0.4559\n0.1203\n3\n978.8435 234.6507\n343.6961 128.6128\n611.2897 458.9593\n", "2 875\n0.7537\n0.4375\n5\n445.8822 355.9854\n29.3463 12.5104\n845.7334 537.7371\n494.5914 322.9145\n799.3183 315.1701\n"], "output": ["469.980400000 8.014848928\n17707.905316391 0.000000000\n469.980400000 403.227402023\n469.980400000 108.613087969\n469.980400000 109.999956153\n469.980400000 224.117928434\n", "150.568500000 49.359453403\n150.568500000 94.919970010\n150.568500000 20.065007118\n150.568500000 84.158687413\n", "611.289700000 201.687561175\n611.289700000 234.096418112\n343.696100000 24.571869439\n", "77968.056705539 0.000000000\n445.882200000 207.001740252\n"]}, "index": 8025}, {"input": "Kyoya Ootori is selling photobooks of the Ouran High School Host Club. He has 26 photos, labeled \"a\" to \"z\", and he has compiled them into a photo booklet with some photos in some order (possibly with some photos being duplicated). A photo booklet can be described as a string of lowercase letters, consisting of the photos in the booklet in order. He now wants to sell some \"special edition\" photobooks, each with one extra photo inserted anywhere in the book. He wants to make as many distinct photobooks as possible, so he can make more money. He asks Haruhi, how many distinct photobooks can he make by inserting one extra photo into the photobook he already has?\n\nPlease help Haruhi solve this problem.\n\nInput\n\nThe first line of input will be a single string s (1 \u2264 |s| \u2264 20). String s consists only of lowercase English letters. \n\nOutput\n\nOutput a single integer equal to the number of distinct photobooks Kyoya Ootori can make.\n\n", "output": "print(25*len(input())+26)", "public_tests": {"input": ["hi\n", "a\n"], "output": ["76\n", "51\n"]}, "private_tests": {"input": ["lpfpndmjfvqejdgf\n", "jgv\n", "fykkiubdkt\n", "ydzpjhsidipricw\n", "gggggggggggggggggggg\n", "kgan\n", "lllllllllllllll\n", "e\n", "ofkvparuvjtggnmab\n", "zv\n", "xxncfutrtxcwdzwbgs\n", "kskkskkkssksssk\n", "coccoooogogcgocccmcg\n", "zsfo\n", "fznbcxsxygs\n", "y\n", "zoabkyuvus\n", "mddoxsf\n", "takttttaakaaktakttkt\n", "dwemig\n", "foamodbvptlxxg\n", "qktrbjzrqgmlr\n", "cskgsxywlvfeicoueglr\n", "qcrvrdqcbtou\n", "jselr\n", "spyemhyznjieyhhbk\n", "jgirkrmi\n", "spkxurcum\n", "qdqdddqddqqddqddqdqd\n", "xulsyfkuizjauadjjopu\n", "zovhffccflkgqncsdte\n"], "output": ["426\n", "101\n", "276\n", "401\n", "526\n", "126\n", "401\n", "51\n", "451\n", "76\n", "476\n", "401\n", "526\n", "126\n", "301\n", "51\n", "276\n", "201\n", "526\n", "176\n", "376\n", "351\n", "526\n", "326\n", "151\n", "451\n", "226\n", "251\n", "526\n", "526\n", "501\n"]}, "index": 8026}, {"input": "You are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied: \n\n  * the i-th letter occurs in the string no more than ai times; \n  * the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 26) \u2014 the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 \u2264 ai \u2264 109) \u2014 i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\nOutput\n\nPrint a single integer \u2014 the maximum length of the string that meets all the requirements.\n\n", "output": "input()\nd={}\ns=0\nfor i in map(int,input().split()):\n while i in d and i:i-=1\n d[i]=1\n s+=i\nprint(s)", "public_tests": {"input": ["3\n2 5 5\n", "3\n1 1 2\n"], "output": ["11\n", "3\n"]}, "private_tests": {"input": ["26\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n", "4\n4 3 2 1\n", "20\n654616375 542649443 729213190 188364665 238384327 726353863 974350390 526804424 601329631 886592063 734805196 275562411 861801362 374466292 119830901 403120565 670982545 63210795 130397643 601611646\n", "10\n876938317 219479349 703839299 977218449 116819315 752405530 393874852 286326991 592978634 155758306\n", "14\n812998169 353860693 690443110 153688149 537992938 798779618 791624505 282706982 733654279 468319337 568341847 597888944 649703235 667623671\n", "26\n220 675 725 888 725 654 546 806 379 182 604 667 734 394 889 731 572 193 850 651 844 734 163 671 820 887\n", "10\n600386086 862479376 284190454 781950823 672077209 5753052 145701234 680334621 497013634 35429365\n", "5\n694257603 528073418 726928894 596328666 652863391\n", "26\n197464663 125058028 622449215 11119637 587496049 703992162 219591040 965159268 229879004 278894000 841629744 616893922 218779915 362575332 844188865 342411376 369680019 43823059 921419789 999588082 943769007 35365522 301907919 758302419 427454397 807507709\n", "18\n966674765 786305522 860659958 935480883 108937371 60800080 673584584 826142855 560238516 606238013 413177515 455456626 643879364 969943855 963609881 177380550 544192822 864797474\n", "2\n559476582 796461544\n", "26\n907247856 970380443 957324066 929910532 947150618 944189007 998282297 988343406 981298600 943026596 953932265 972691398 950024048 923033790 996423650 972134755 946404759 918183059 902987271 965507679 906967700 982106487 933997242 972594441 977736332 928874832\n", "5\n2 2 2 2 2\n", "13\n525349200 54062222 810108418 237010994 821513756 409532178 158915465 87142595 630219037 770849718 843168738 617993222 504443485\n", "7\n446656860 478792281 77541870 429682977 85821755 826122363 563802405\n", "21\n942265343 252505322 904519178 810069524 954862509 115602302 548124942 132426218 999736168 584061682 696014113 960485837 712089816 581331718 317512142 593926314 302610323 716885305 477125514 813997503 535631456\n", "26\n1001 1001 1000 1000 1001 1000 1001 1001 1001 1000 1000 1001 1001 1000 1000 1000 1000 1001 1000 1001 1001 1000 1001 1001 1001 1000\n", "4\n111637338 992238139 787658714 974622806\n", "6\n5 3 3 3 3 1\n", "6\n217943380 532900593 902234882 513005821 369342573 495810412\n", "26\n72 49 87 47 94 96 36 91 43 11 19 83 36 38 10 93 95 81 4 96 60 38 97 37 36 41\n", "11\n183007351 103343359 164525146 698627979 388556391 926007595 483438978 580927711 659384363 201890880 920750904\n", "23\n989635897 498195481 255132154 643423835 387820874 894097181 223601429 228583694 265543138 153021520 618431947 684241474 943673829 174949754 358967839 444530707 801900686 965299835 347682577 648826625 406714384 129525158 958578251\n", "2\n1 1\n", "26\n8717 9417 1409 7205 3625 6247 8626 9486 464 4271 1698 8449 4551 1528 7456 9198 4886 2889 7534 506 7867 9410 1635 4955 2580 2580\n", "19\n490360541 496161402 330938242 852158038 120387849 686083328 247359135 431764649 427637949 8736336 843378328 435352349 494167818 766752874 161292122 368186298 470791896 813444279 170758124\n", "8\n29278125 778590752 252847858 51388836 802299938 215370803 901540149 242074772\n", "26\n10 1 20 2 23 3 14 6 7 13 26 21 11 8 16 25 12 15 19 9 17 22 24 18 5 4\n", "3\n587951561 282383259 612352726\n", "26\n605 641 814 935 936 547 524 702 133 674 173 102 318 620 248 523 77 718 318 635 322 362 306 86 8 442\n", "26\n1000 1001 1000 1001 1000 1001 1001 1000 1001 1002 1002 1000 1001 1000 1000 1000 1001 1002 1001 1000 1000 1001 1000 1002 1001 1002\n", "25\n95942939 979921447 310772834 181806850 525806942 613657573 194049213 734797579 531349109 721980358 304813974 113025815 470230137 473595494 695394833 590106396 770183946 567622150 218239639 778627043 41761505 127248600 134450869 860350034 901937574\n", "26\n1003 1002 1002 1003 1000 1000 1000 1003 1000 1001 1003 1003 1000 1002 1002 1002 1001 1003 1000 1001 1000 1001 1001 1000 1003 1003\n", "3\n1 1 1\n", "15\n336683946 299752380 865749098 775393009 959499824 893055762 365399057 419335880 896025008 575845364 529550764 341748859 30999793 464432689 19445239\n", "26\n619627716 984748623 486078822 98484005 537257421 2906012 62795060 635390669 103777246 829506385 971050595 92921538 851525695 680460920 893076074 780912144 401811723 221297659 269996214 991012900 242806521 626109821 987889730 682613155 209557740 806895799\n", "10\n10 10 10 10 10 10 10 10 1 1\n", "16\n860368723 540615364 41056086 692070164 970950302 282304201 998108096 24957674 999460249 37279175 490759681 26673285 412295352 671298115 627182888 90740349\n", "5\n1 1 1 1 1\n", "10\n100 100 10 10 10 10 10 1 1 1\n", "3\n1 1000000000 2\n", "22\n465951120 788339601 784853870 726746679 376370396 504849742 180834982 33019308 867135601 455551901 657223030 940381560 93386374 378140736 161286599 548696254 934237100 75589518 764917898 731412064 205669368 630662937\n", "2\n257775227 621811272\n", "26\n775 517 406 364 548 951 680 984 466 141 960 513 660 849 152 250 176 601 199 370 971 554 141 224 724 543\n", "26\n130 396 985 226 487 671 188 706 106 649 38 525 210 133 298 418 953 431 577 69 12 982 264 373 283 266\n", "26\n999999061 999999688 999999587 999999429 999999110 999999563 999999120 999999111 999999794 999999890 999999004 999999448 999999770 999999543 999999460 999999034 999999361 999999305 999999201 999999778 999999432 999999844 999999133 999999342 999999600 999999319\n", "5\n5 3 3 3 1\n", "17\n148018692 545442539 980325266 313776023 687429485 376580345 40875544 925549764 161831978 144805202 451968598 475560904 262583806 468107133 60900936 281546097 912565045\n", "26\n475 344 706 807 925 813 974 166 578 226 624 591 419 894 574 909 544 597 170 990 893 785 399 172 792 748\n", "12\n706692128 108170535 339831134 320333838 810063277 20284739 821176722 481520801 467848308 604388203 881959821 874133307\n", "26\n243 364 768 766 633 535 502 424 502 283 592 877 137 891 837 990 681 898 831 487 595 604 747 856 805 688\n", "9\n552962902 724482439 133182550 673093696 518779120 604618242 534250189 847695567 403066553\n", "26\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n", "26\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "24\n277285866 739058464 135466846 265129694 104300056 519381429 856310469 834204489 132942572 260547547 343605057 664137197 619941683 676786476 497713592 635336455 138557168 618975345 635474960 861212482 76752297 923357675 517046816 274123722\n"], "output": ["25999999675\n", "10\n", "10304447727\n", "5075639042\n", "8107625477\n", "16202\n", "4565315854\n", "3198451972\n", "12776400142\n", "11417500634\n", "1355938126\n", "24770753129\n", "3\n", "6470309028\n", "2908420511\n", "12951783229\n", "25701\n", "2866156997\n", "11\n", "3031237661\n", "1478\n", "5310460657\n", "12022378269\n", "1\n", "137188\n", "8615711557\n", "3273391233\n", "351\n", "1482687546\n", "11768\n", "25727\n", "11937672853\n", "25753\n", "1\n", "7772916672\n", "14070510187\n", "53\n", "7766119704\n", "1\n", "240\n", "1000000003\n", "11305256638\n", "879586499\n", "13718\n", "10376\n", "25999984927\n", "11\n", "7237867357\n", "16115\n", "6436402813\n", "16535\n", "4992131258\n", "25675\n", "1\n", "11607648357\n"]}, "index": 8027}, {"input": "We all know the impressive story of Robin Hood. Robin Hood uses his archery skills and his wits to steal the money from rich, and return it to the poor.\n\nThere are n citizens in Kekoland, each person has ci coins. Each day, Robin Hood will take exactly 1 coin from the richest person in the city and he will give it to the poorest person (poorest person right after taking richest's 1 coin). In case the choice is not unique, he will select one among them at random. Sadly, Robin Hood is old and want to retire in k days. He decided to spend these last days with helping poor people. \n\nAfter taking his money are taken by Robin Hood richest person may become poorest person as well, and it might even happen that Robin Hood will give his money back. For example if all people have same number of coins, then next day they will have same number of coins too. \n\nYour task is to find the difference between richest and poorest persons wealth after k days. Note that the choosing at random among richest and poorest doesn't affect the answer.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 500 000, 0 \u2264 k \u2264 109) \u2014 the number of citizens in Kekoland and the number of days left till Robin Hood's retirement.\n\nThe second line contains n integers, the i-th of them is ci (1 \u2264 ci \u2264 109) \u2014 initial wealth of the i-th person.\n\nOutput\n\nPrint a single line containing the difference between richest and poorest peoples wealth.\n\n", "output": "import sys\nsys.stderr = sys.stdout\n\n\ndef hood(n, k, C):\n    C.sort()\n    m, r = divmod(sum(C), n)\n    m1 = (m + 1) if r else m\n\n    c_lo = C[0]\n    k_lo = k\n    for i, c in enumerate(C):\n        if c_lo == m:\n            break\n        c_m = min(c, m)\n        dc = c_m - c_lo\n        dk = i * dc\n        if k_lo >= dk:\n            k_lo -= dk\n            c_lo = c_m\n        else:\n            dc = k_lo // i\n            c_lo += dc\n            break\n\n    c_hi = C[-1]\n    k_hi = k\n    for i, c in enumerate(reversed(C)):\n        if c_hi == m1:\n            break\n        c_m1 = max(c, m1)\n        dc = c_hi - c_m1\n        dk = i * dc\n        if k_hi >= dk:\n            k_hi -= dk\n            c_hi = c_m1\n        else:\n            dc = k_hi // i\n            c_hi -= dc\n            break\n\n    return c_hi - c_lo\n\n\ndef main():\n    n, k = readinti()\n    C = readintl()\n    print(hood(n, k, C))\n\n##########\n\ndef readint():\n    return int(input())\n\n\ndef readinti():\n   return map(int, input().split())\n\n\ndef readintt():\n   return tuple(readinti())\n\n\ndef readintl():\n   return list(readinti())\n\n\ndef readinttl(k):\n    return [readintt() for _ in range(k)]\n\n\ndef readintll(k):\n    return [readintl() for _ in range(k)]\n\n\ndef log(*args, **kwargs):\n    print(*args, **kwargs, file=sys.__stderr__)\n\n\nif __name__ == '__main__':\n    main()\n", "public_tests": {"input": ["4 1\n1 1 4 2\n", "3 1\n2 2 2\n"], "output": ["2\n", "0\n"]}, "private_tests": {"input": ["10 1000000\n307196 650096 355966 710719 99165 959865 500346 677478 614586 6538\n", "4 0\n1 4 4 4\n", "3 4\n1 2 7\n", "10 20\n6 4 7 10 4 5 5 3 7 10\n", "2 0\n182 2\n", "4 100\n1 1 10 10\n", "4 42\n1 1 1 1000000000\n", "123 54564\n38 44 41 42 59 3 95 15 45 32 44 69 35 83 94 57 65 85 64 47 24 20 34 86 26 91 98 12 36 96 80 4 70 40 95 38 70 22 58 50 34 84 80 45 14 60 61 43 11 56 19 59 50 63 21 15 97 98 27 13 9 71 32 18 90 10 2 99 75 87 74 83 79 37 89 3 49 27 92 95 49 1 26 50 72 75 81 37 60 98 28 28 10 93 99 63 14 26 69 51 47 59 42 7 20 17 75 44 44 20 44 85 27 32 65 95 47 46 12 22 64 77 21\n", "5 1000000\n145119584 42061308 953418415 717474449 57984109\n", "100 20\n2 5 3 3 2 7 6 2 2 2 6 7 2 1 8 10 2 4 10 6 10 2 1 1 4 7 1 2 9 7 5 3 7 4 6 3 10 10 3 7 6 8 2 2 10 3 1 2 1 3 1 6 3 1 4 10 3 10 9 5 10 4 3 10 3 3 5 3 10 2 1 5 10 7 8 7 7 2 4 2 1 3 3 8 8 5 7 3 1 1 8 10 5 7 4 4 7 7 1 9\n", "111 10\n2 8 6 1 3 5 8 3 8 2 9 9 6 9 8 8 5 2 3 8 8 3 8 3 7 9 4 3 9 7 1 8 3 1 5 5 5 8 2 4 2 7 9 1 4 4 3 1 6 7 7 4 1 3 5 3 9 4 4 4 8 8 7 3 5 6 3 3 8 2 8 4 5 8 1 8 4 1 7 1 4 9 8 9 7 6 5 6 3 7 4 8 9 3 8 9 9 3 5 9 1 3 6 8 9 1 1 3 8 7 6\n", "2 100000\n1 3\n", "10 1000\n1000000000 999999994 999999992 1000000000 999999994 999999999 999999990 999999997 999999995 1000000000\n", "30 7\n3 3 2 2 2 2 3 4 4 5 2 1 1 5 5 3 4 3 2 1 3 4 3 2 2 5 2 5 1 2\n"], "output": ["80333\n", "3\n", "1\n", "1\n", "180\n", "1\n", "999999943\n", "1\n", "909357107\n", "7\n", "8\n", "0\n", "1\n", "2\n"]}, "index": 8028}, {"input": "One of Timofey's birthday presents is a colourbook in a shape of an infinite plane. On the plane n rectangles with sides parallel to coordinate axes are situated. All sides of the rectangles have odd length. Rectangles cannot intersect, but they can touch each other.\n\nHelp Timofey to color his rectangles in 4 different colors in such a way that every two rectangles touching each other by side would have different color, or determine that it is impossible.\n\nTwo rectangles intersect if their intersection has positive area. Two rectangles touch by sides if there is a pair of sides such that their intersection has non-zero length\n\n<image> The picture corresponds to the first example\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 5\u00b7105) \u2014 the number of rectangles.\n\nn lines follow. The i-th of these lines contains four integers x1, y1, x2 and y2 ( - 109 \u2264 x1 < x2 \u2264 109,  - 109 \u2264 y1 < y2 \u2264 109), that means that points (x1, y1) and (x2, y2) are the coordinates of two opposite corners of the i-th rectangle.\n\nIt is guaranteed, that all sides of the rectangles have odd lengths and rectangles don't intersect each other.\n\nOutput\n\nPrint \"NO\" in the only line if it is impossible to color the rectangles in 4 different colors in such a way that every two rectangles touching each other by side would have different color.\n\nOtherwise, print \"YES\" in the first line. Then print n lines, in the i-th of them print single integer ci (1 \u2264 ci \u2264 4) \u2014 the color of i-th rectangle.\n\nExample\n\nInput\n\n8\n0 0 5 3\n2 -1 5 0\n-3 -4 2 -1\n-1 -1 2 0\n-3 0 0 5\n5 2 10 3\n7 -3 10 2\n4 -2 7 -1\n\n\nOutput\n\nYES\n1\n2\n2\n3\n2\n2\n4\n", "output": "n=int(input())\nprint(\"YES\")\nwhile n:\n\t(x,y,a,b)=list(map(int, input().split()))\n\tprint(1+x%2+2*(y%2))\n\tn=n-1", "public_tests": {"input": ["8\n0 0 5 3\n2 -1 5 0\n-3 -4 2 -1\n-1 -1 2 0\n-3 0 0 5\n5 2 10 3\n7 -3 10 2\n4 -2 7 -1\n"], "output": ["YES\n1\n2\n3\n4\n3\n3\n4\n1\n"]}, "private_tests": {"input": ["25\n0 0 7 7\n0 18 7 29\n7 36 12 41\n7 18 12 29\n15 29 26 36\n7 7 12 18\n12 36 15 41\n15 7 26 18\n12 0 15 7\n12 7 15 18\n7 29 12 36\n12 29 15 36\n15 18 26 29\n26 18 27 29\n12 18 15 29\n26 29 27 36\n0 7 7 18\n26 0 27 7\n7 0 12 7\n15 36 26 41\n26 7 27 18\n26 36 27 41\n15 0 26 7\n0 36 7 41\n0 29 7 36\n", "28\n0 0 3 1\n0 1 1 6\n0 6 1 9\n0 9 1 12\n0 12 1 13\n0 13 3 14\n1 1 2 4\n1 4 2 7\n1 7 2 10\n1 10 2 13\n2 1 3 2\n2 2 3 5\n2 5 3 8\n2 8 3 13\n3 0 6 1\n3 1 4 6\n3 6 4 9\n3 9 4 12\n3 12 4 13\n3 13 6 14\n4 1 5 4\n4 4 5 7\n4 7 5 10\n4 10 5 13\n5 1 6 2\n5 2 6 5\n5 5 6 8\n5 8 6 13\n", "4\n0 0 1 1\n1 0 2 1\n1 1 2 2\n0 1 1 2\n", "25\n76 0 85 9\n46 0 55 9\n6 0 13 9\n86 0 95 9\n56 0 65 9\n152 0 157 9\n146 0 151 9\n14 0 21 9\n0 0 1 9\n180 0 189 9\n120 0 125 9\n96 0 99 9\n126 0 133 9\n158 0 169 9\n22 0 27 9\n100 0 107 9\n170 0 179 9\n2 0 5 9\n134 0 141 9\n114 0 119 9\n108 0 113 9\n66 0 75 9\n36 0 45 9\n142 0 145 9\n28 0 35 9\n", "4\n3 3 10 12\n5 0 14 3\n0 3 3 12\n0 0 5 3\n", "1\n0 0 1 1\n", "8\n0 0 5 3\n2 -1 5 0\n-3 -4 2 -1\n-1 -1 2 0\n-3 0 0 5\n5 2 10 3\n7 -3 10 2\n4 -2 7 -1\n", "4\n3 11 12 18\n0 0 1 11\n0 11 3 18\n1 0 8 11\n", "6\n0 1 1 4\n0 4 1 7\n1 0 2 3\n1 3 2 4\n1 4 2 5\n2 3 3 4\n", "3\n0 0 1 3\n1 0 4 1\n1 1 2 2\n"], "output": ["YES\n1\n1\n3\n3\n4\n4\n1\n4\n1\n2\n4\n2\n3\n1\n1\n2\n2\n1\n3\n3\n2\n1\n3\n1\n2\n", "YES\n1\n2\n1\n2\n1\n2\n4\n3\n4\n3\n2\n1\n2\n1\n3\n4\n3\n4\n3\n4\n2\n1\n2\n1\n4\n3\n4\n3\n", "YES\n1\n3\n4\n2\n", "YES\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n", "YES\n4\n3\n2\n1\n", "YES\n1\n", "YES\n1\n2\n3\n4\n3\n3\n4\n1\n", "YES\n4\n1\n2\n3\n", "YES\n2\n1\n3\n4\n3\n2\n", "YES\n1\n3\n4\n"]}, "index": 8029}, {"input": "Polycarp invited all his friends to the tea party to celebrate the holiday. He has n cups, one for each of his n friends, with volumes a1, a2, ..., an. His teapot stores w milliliters of tea (w \u2264 a1 + a2 + ... + an). Polycarp wants to pour tea in cups in such a way that:\n\n  * Every cup will contain tea for at least half of its volume \n  * Every cup will contain integer number of milliliters of tea \n  * All the tea from the teapot will be poured into cups \n  * All friends will be satisfied. \n\n\n\nFriend with cup i won't be satisfied, if there exists such cup j that cup i contains less tea than cup j but ai > aj.\n\nFor each cup output how many milliliters of tea should be poured in it. If it's impossible to pour all the tea and satisfy all conditions then output -1.\n\nInput\n\nThe first line contains two integer numbers n and w (1 \u2264 n \u2264 100, <image>).\n\nThe second line contains n numbers a1, a2, ..., an (1 \u2264 ai \u2264 100).\n\nOutput\n\nOutput how many milliliters of tea every cup should contain. If there are multiple answers, print any of them.\n\nIf it's impossible to pour all the tea and satisfy all conditions then output -1.\n\n", "output": "n,w=map(int,input().split())\na=list(map(int,input().split()))\nans=[(x+1)//2 for x in a]\nw-=sum(ans)\nif w<0:\n    print(-1)\n    exit(0)\nwhile w>0:\n    i=a.index(max(a))\n    while w>0 and a[i]!=ans[i]:\n        ans[i]+=1\n        w-=1\n    a[i]=0\nprint(*ans)\n", "public_tests": {"input": ["2 10\n8 7\n", "3 10\n9 8 10\n", "4 4\n1 1 1 1\n"], "output": ["6 4 ", "-1\n", "1 1 1 1 "]}, "private_tests": {"input": ["50 1113\n25 21 23 37 28 23 19 25 5 12 3 11 46 50 13 50 7 1 8 40 4 6 34 27 11 39 45 31 10 12 48 2 19 37 47 45 30 24 21 42 36 14 31 30 31 50 6 3 33 49\n", "11 287\n34 30 69 86 22 53 11 91 62 44 5\n", "10 21\n3 3 3 3 4 3 3 3 3 3\n", "71 1899\n23 55 58 87 69 85 100 21 19 72 81 68 20 25 29 92 18 74 89 70 53 7 78 57 41 79 64 87 63 76 95 84 1 28 32 1 79 34 77 17 71 61 35 31 62 92 69 99 60 26 2 18 61 9 27 77 82 6 30 65 52 3 51 43 13 77 41 59 19 29 86\n", "1 10\n20\n", "2 5\n3 4\n", "3 10\n8 4 8\n", "40 100\n3 3 3 3 4 1 1 1 1 1 2 2 1 3 1 2 3 2 1 2 2 2 1 4 2 2 3 3 3 2 4 6 4 4 3 2 2 2 4 5\n", "23 855\n5 63 94 57 38 84 77 79 83 36 47 31 60 79 75 48 88 17 46 33 23 15 27\n", "100 55\n1 1 1 1 2 1 1 1 1 1 2 2 1 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 2 2 2 1 1 2 1 1 1 2 2 2 1 1 1 2 1 2 2 1 2 1 1 2 2 1 2 1 2 1 2 2 1 1 1 2 1 1 2 1 2 1 2 2 2 1 2 1 2 2 2 1 2 2 1 1 1 1 2 2 2 2 2 2 2 1 1 1 2 1 2 1\n", "1 1\n1\n", "20 8\n1 2 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 2 2\n", "71 3512\n97 46 76 95 81 96 99 83 10 50 19 18 73 5 41 60 12 73 60 31 21 64 88 61 43 57 61 19 75 35 41 85 12 59 32 47 37 43 35 92 90 47 3 98 21 18 61 79 39 86 74 8 52 33 39 27 93 54 35 38 96 36 83 51 97 10 8 66 75 87 68\n", "55 1645\n60 53 21 20 87 48 10 21 76 35 52 41 82 86 93 11 93 86 34 15 37 63 57 3 57 57 32 8 55 25 29 38 46 22 13 87 27 35 40 83 5 7 6 18 88 25 4 59 95 62 31 93 98 50 62\n", "3 100\n37 26 37\n", "1 1\n2\n", "50 440\n14 69 33 38 83 65 21 66 89 3 93 60 31 16 61 20 42 64 13 1 50 50 74 58 67 61 52 22 69 68 18 33 28 59 4 8 96 32 84 85 87 87 61 89 2 47 15 64 88 18\n", "100 640\n82 51 81 14 37 17 78 92 64 15 8 86 89 8 87 77 66 10 15 12 100 25 92 47 21 78 20 63 13 49 41 36 41 79 16 87 87 69 3 76 80 60 100 49 70 59 72 8 38 71 45 97 71 14 76 54 81 4 59 46 39 29 92 3 49 22 53 99 59 52 74 31 92 43 42 23 44 9 82 47 7 40 12 9 3 55 37 85 46 22 84 52 98 41 21 77 63 17 62 91\n", "30 50\n3 1 2 4 1 2 2 4 3 4 4 3 3 3 3 5 3 2 5 4 3 3 5 3 3 5 4 5 3 5\n", "20 14\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "100 82\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "100 2633\n99 50 64 81 75 73 26 31 31 36 95 12 100 2 70 72 78 56 76 23 94 8 91 1 39 82 97 67 64 25 71 90 48 34 31 46 64 37 46 50 99 93 14 56 1 89 95 89 50 52 12 58 43 65 45 88 90 14 38 19 6 15 91 67 43 48 82 20 11 48 33 20 39 52 73 5 25 84 26 54 42 56 10 28 9 63 60 98 30 1 25 74 86 56 85 9 12 94 80 95\n", "2 6\n2 6\n", "100 10000\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "52 2615\n73 78 70 92 94 74 46 19 55 20 70 3 1 42 68 10 66 80 1 31 65 19 73 74 56 35 53 38 92 35 65 81 6 98 74 51 27 49 76 19 86 76 5 60 14 75 64 99 43 7 36 79\n", "3 60\n43 23 24\n"], "output": ["13 11 12 37 28 12 10 18 3 6 2 6 46 50 7 50 4 1 4 40 2 3 34 27 6 39 45 31 5 6 48 1 10 37 47 45 30 12 11 42 36 7 31 30 31 50 3 2 33 49 ", "17 15 35 43 11 27 6 77 31 22 3 ", "2 2 2 2 3 2 2 2 2 2 ", "12 28 29 44 35 43 95 11 10 36 41 34 10 13 15 46 9 37 45 35 27 4 39 29 21 40 32 44 32 38 48 42 1 14 16 1 40 17 39 9 36 31 18 16 31 46 35 50 30 13 1 9 31 5 14 39 41 3 15 33 26 2 26 22 7 39 21 30 10 15 43 ", "10 ", "2 3 ", "4 2 4 ", "3 3 3 3 4 1 1 1 1 1 2 2 1 3 1 2 3 2 1 2 2 2 1 4 2 2 3 3 3 2 4 6 4 4 3 2 2 2 4 5 ", "3 32 94 29 19 84 39 72 83 18 24 16 30 79 38 24 88 9 23 17 12 8 14 ", "-1\n", "1 ", "-1\n", "97 46 76 95 81 96 99 83 5 50 10 9 73 3 41 60 6 73 60 16 11 64 88 61 43 57 61 10 75 18 41 85 6 59 16 47 19 43 18 92 90 47 2 98 11 9 61 79 20 86 74 4 52 17 21 14 93 54 18 19 96 18 83 51 97 5 4 66 75 87 68 ", "30 27 11 10 82 24 5 11 38 18 26 21 41 43 93 6 93 43 17 8 19 32 29 2 29 29 16 4 28 13 15 19 23 11 7 87 14 18 20 42 3 4 3 9 88 13 2 30 95 31 16 93 98 25 31 ", "37 26 37 ", "1 ", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "50 25 32 41 38 37 13 16 16 18 48 6 61 1 35 36 39 28 38 12 47 4 46 1 20 41 49 34 32 13 36 45 24 17 16 23 32 19 23 25 50 47 7 28 1 45 48 45 25 26 6 29 22 33 23 44 45 7 19 10 3 8 46 34 22 24 41 10 6 24 17 10 20 26 37 3 13 42 13 27 21 28 5 14 5 32 30 49 15 1 13 37 43 28 43 5 6 47 40 48 ", "1 5 ", "100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 ", "73 78 70 92 94 74 46 10 55 10 70 2 1 42 68 5 66 80 1 16 65 10 73 74 56 18 53 38 92 30 65 81 3 98 74 51 14 49 76 10 86 76 3 60 7 75 64 99 43 4 36 79 ", "36 12 12 "]}, "index": 8030}, {"input": "Misha and Grisha are funny boys, so they like to use new underground. The underground has n stations connected with n - 1 routes so that each route connects two stations, and it is possible to reach every station from any other.\n\nThe boys decided to have fun and came up with a plan. Namely, in some day in the morning Misha will ride the underground from station s to station f by the shortest path, and will draw with aerosol an ugly text \"Misha was here\" on every station he will pass through (including s and f). After that on the same day at evening Grisha will ride from station t to station f by the shortest path and will count stations with Misha's text. After that at night the underground workers will wash the texts out, because the underground should be clean. \n\nThe boys have already chosen three stations a, b and c for each of several following days, one of them should be station s on that day, another should be station f, and the remaining should be station t. They became interested how they should choose these stations s, f, t so that the number Grisha will count is as large as possible. They asked you for help.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 105, 1 \u2264 q \u2264 105) \u2014 the number of stations and the number of days.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 \u2264 pi \u2264 n). The integer pi means that there is a route between stations pi and i. It is guaranteed that it's possible to reach every station from any other.\n\nThe next q lines contains three integers a, b and c each (1 \u2264 a, b, c \u2264 n) \u2014 the ids of stations chosen by boys for some day. Note that some of these ids could be same.\n\nOutput\n\nPrint q lines. In the i-th of these lines print the maximum possible number Grisha can get counting when the stations s, t and f are chosen optimally from the three stations on the i-th day.\n\n", "output": "# by the authority of GOD     author: manhar singh sachdev #\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\ndef euler_path(n,path):\n    height = [0]*n+[10**10]\n    euler,st,visi,he = [],[0],[1]+[0]*(n-1),0\n    first = [-1]*n\n    while len(st):\n        x = st[-1]\n        euler.append(x)\n        if first[x] == -1:\n            first[x] = len(euler)-1\n        while len(path[x]) and visi[path[x][-1]]:\n            path[x].pop()\n        if not len(path[x]):\n            he -= 1\n            st.pop()\n        else:\n            i = path[x].pop()\n            he += 1\n            st.append(i)\n            height[i],visi[i] = he,1\n    return height,euler,first\n\ndef cons(euler,height):\n    n = len(euler)\n    xx = n.bit_length()\n    dp = [[n]*n for _ in range(xx)]\n    dp[0] = euler\n    for i in range(1,xx):\n        for j in range(n-(1<<i)+1):\n            a,b = dp[i-1][j],dp[i-1][j+(1<<(i-1))]\n            dp[i][j] = a if height[a] < height[b] else b\n    return dp\n\ndef lca(l,r,dp,height,first):\n    l,r = first[l],first[r]\n    if l > r:\n        l,r = r,l\n    xx1 = (r-l+1).bit_length()-1\n    a,b = dp[xx1][l],dp[xx1][r-(1<<xx1)+1]\n    return a if height[a] < height[b] else b\n\ndef solve(s,f,t,dp,height,first):\n    a = lca(s,f,dp,height,first)\n    b = lca(t,f,dp,height,first)\n    ans = height[f]-max(height[a],height[b])+1\n    if a == b:\n        x = lca(s,t,dp,height,first)\n        ans += height[x]-height[a]\n    return ans\n\ndef main():\n    n,q = map(int,input().split())\n    path = [[] for _ in range(n)]\n    for ind,i in enumerate(map(int,input().split())):\n        path[ind+1].append(i-1)\n        path[i-1].append(ind+1)\n    height,euler,first = euler_path(n,path)\n    dp = cons(euler,height)\n    for _ in range(q):\n        a,b,c = map(lambda xx:int(xx)-1,input().split())\n        print(max(solve(a,b,c,dp,height,first),\n                  solve(a,c,b,dp,height,first),\n                  solve(b,a,c,dp,height,first)))\n\n# Fast IO Region\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nif __name__ == \"__main__\":\n    main()", "public_tests": {"input": ["3 2\n1 1\n1 2 3\n2 3 3\n", "4 1\n1 2 3\n1 2 3\n"], "output": ["2\n3\n", "2\n"]}, "private_tests": {"input": ["5 20\n5 5 1 4\n1 4 3\n2 4 1\n1 5 5\n5 1 4\n5 1 5\n1 5 5\n5 4 4\n2 3 3\n4 4 1\n1 4 1\n4 5 4\n1 4 5\n4 1 5\n2 4 2\n4 3 3\n2 5 5\n1 5 4\n3 3 4\n5 5 1\n3 4 1\n", "2 4\n1\n1 1 1\n1 1 2\n1 2 2\n2 2 2\n", "5 20\n4 1 1 4\n2 2 5\n3 2 5\n2 3 4\n4 2 5\n4 1 2\n5 3 1\n2 1 2\n4 3 2\n1 3 3\n4 2 5\n5 1 4\n4 5 4\n1 2 4\n3 3 1\n5 4 5\n1 1 1\n1 4 4\n5 3 2\n4 2 1\n3 1 4\n"], "output": ["3\n3\n3\n2\n3\n3\n2\n3\n2\n2\n2\n2\n2\n3\n3\n2\n2\n3\n3\n3\n", "1\n2\n2\n1\n", "3\n3\n3\n2\n2\n3\n3\n3\n2\n2\n2\n2\n2\n2\n2\n1\n2\n3\n2\n2\n"]}, "index": 8031}, {"input": "Country of Metropolia is holding Olympiad of Metrpolises soon. It mean that all jury members of the olympiad should meet together in Metropolis (the capital of the country) for the problem preparation process.\n\nThere are n + 1 cities consecutively numbered from 0 to n. City 0 is Metropolis that is the meeting point for all jury members. For each city from 1 to n there is exactly one jury member living there. Olympiad preparation is a long and demanding process that requires k days of work. For all of these k days each of the n jury members should be present in Metropolis to be able to work on problems.\n\nYou know the flight schedule in the country (jury members consider themselves important enough to only use flights for transportation). All flights in Metropolia are either going to Metropolis or out of Metropolis. There are no night flights in Metropolia, or in the other words, plane always takes off at the same day it arrives. On his arrival day and departure day jury member is not able to discuss the olympiad. All flights in Megapolia depart and arrive at the same day.\n\nGather everybody for k days in the capital is a hard objective, doing that while spending the minimum possible money is even harder. Nevertheless, your task is to arrange the cheapest way to bring all of the jury members to Metrpolis, so that they can work together for k days and then send them back to their home cities. Cost of the arrangement is defined as a total cost of tickets for all used flights. It is allowed for jury member to stay in Metropolis for more than k days.\n\nInput\n\nThe first line of input contains three integers n, m and k (1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105, 1 \u2264 k \u2264 106). \n\nThe i-th of the following m lines contains the description of the i-th flight defined by four integers di, fi, ti and ci (1 \u2264 di \u2264 106, 0 \u2264 fi \u2264 n, 0 \u2264 ti \u2264 n, 1 \u2264 ci \u2264 106, exactly one of fi and ti equals zero), the day of departure (and arrival), the departure city, the arrival city and the ticket cost.\n\nOutput\n\nOutput the only integer that is the minimum cost of gathering all jury members in city 0 for k days and then sending them back to their home cities.\n\nIf it is impossible to gather everybody in Metropolis for k days and then send them back to their home cities, output \"-1\" (without the quotes).\n\n", "output": "g = lambda: map(int, input().split())\nn, m, k = g()\nF, T = [], []\ne = int(3e11)\n\nfor i in range(m):\n    d, f, t, c = g()\n    if f: F.append((d, f, c))\n    else: T.append((-d, t, c))\n\nfor p in [F, T]:\n    C = [e] * (n + 1)\n    s = n * e\n    q = []\n\n    p.sort()\n    for d, t, c in p:\n        if C[t] > c:\n            s += c - C[t]\n            C[t] = c\n            if s < e: q.append((s, d))\n    p.clear()\n    p += q\n\ns, t = e, (0, 0)\nfor f in F:\n    while f:\n        if t[1] + f[1] + k < 0: s = min(s, f[0] + t[0])\n        elif T:\n            t = T.pop()\n            continue\n        f = 0\n\nprint(s if s < e else -1)", "public_tests": {"input": ["2 4 5\n1 2 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 6000\n", "2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n"], "output": ["-1", "                                                           24500\n"]}, "private_tests": {"input": ["7 10 1\n369 6 0 9\n86 7 0 9\n696 0 4 8\n953 6 0 7\n280 4 0 9\n244 0 2 9\n645 6 0 8\n598 7 0 6\n598 0 7 8\n358 0 4 6\n", "2 5 5\n1 1 0 1\n2 2 0 100\n3 2 0 10\n9 0 1 1000\n10 0 2 10000\n", "1 10 1\n278 1 0 4\n208 1 0 4\n102 0 1 9\n499 0 1 7\n159 0 1 8\n218 1 0 6\n655 0 1 5\n532 1 0 6\n318 0 1 6\n304 1 0 7\n", "5 10 1\n132 0 4 7\n803 0 2 8\n280 3 0 5\n175 4 0 6\n196 1 0 7\n801 0 4 6\n320 0 5 7\n221 0 4 6\n446 4 0 8\n699 0 5 9\n", "4 10 1\n988 0 1 1\n507 1 0 9\n798 1 0 9\n246 0 3 7\n242 1 0 8\n574 4 0 7\n458 0 4 9\n330 0 2 9\n303 2 0 8\n293 0 3 9\n", "1 2 1\n10 1 0 16\n20 0 1 7\n", "4 8 1\n9 2 0 3\n22 0 3 100\n20 0 1 40\n10 1 0 37\n23 0 4 49\n7 4 0 53\n21 0 2 94\n8 3 0 97\n", "3 6 9\n10 1 0 93\n20 0 1 26\n8 3 0 51\n22 0 3 90\n21 0 2 78\n9 2 0 65\n", "1 2 1\n5 0 1 91\n1 1 0 87\n", "1 0 1\n", "3 10 1\n48 2 0 9\n98 0 2 5\n43 0 1 8\n267 0 1 7\n394 3 0 7\n612 0 3 9\n502 2 0 6\n36 0 2 9\n602 0 1 3\n112 1 0 6\n", "6 10 1\n845 0 4 9\n47 0 4 8\n762 0 2 8\n212 6 0 6\n416 0 5 9\n112 5 0 9\n897 0 6 9\n541 0 4 5\n799 0 6 7\n252 2 0 9\n", "5 10 10\n24 0 5 64\n23 0 4 17\n20 0 1 91\n9 2 0 35\n21 0 2 4\n22 0 3 51\n6 5 0 69\n7 4 0 46\n8 3 0 92\n10 1 0 36\n", "2 4 1\n1 1 0 88\n5 2 0 88\n3 0 1 46\n9 0 2 63\n", "2 4 9\n10 1 0 22\n21 0 2 92\n9 2 0 29\n20 0 1 37\n", "2 4 1\n20 0 1 72\n21 0 2 94\n9 2 0 43\n10 1 0 91\n", "2 4 5\n1 1 0 1\n2 2 0 10\n8 0 1 100\n9 0 2 1000\n", "4 8 10\n8 3 0 65\n21 0 2 75\n7 4 0 7\n23 0 4 38\n20 0 1 27\n10 1 0 33\n22 0 3 91\n9 2 0 27\n", "10 10 1\n351 0 3 7\n214 0 9 9\n606 0 7 8\n688 0 9 3\n188 3 0 9\n994 0 1 7\n372 5 0 8\n957 0 3 6\n458 8 0 7\n379 0 4 7\n", "1 2 10\n20 0 1 36\n10 1 0 28\n", "5 0 1\n", "3 6 1\n10 1 0 62\n8 3 0 83\n20 0 1 28\n22 0 3 61\n21 0 2 61\n9 2 0 75\n", "3 6 1\n19 0 3 80\n11 0 2 32\n8 2 0 31\n4 0 1 45\n1 1 0 63\n15 3 0 76\n", "2 10 1\n5 0 2 5\n52 2 0 9\n627 0 2 6\n75 0 1 6\n642 0 1 8\n543 0 2 7\n273 1 0 2\n737 2 0 4\n576 0 1 7\n959 0 2 5\n", "4 8 9\n8 3 0 61\n9 2 0 94\n23 0 4 18\n21 0 2 19\n20 0 1 52\n10 1 0 68\n22 0 3 5\n7 4 0 59\n", "8 10 1\n196 2 0 9\n67 2 0 9\n372 3 0 6\n886 6 0 6\n943 0 3 8\n430 3 0 6\n548 0 4 9\n522 0 3 8\n1 4 0 3\n279 4 0 8\n", "3 6 10\n22 0 3 71\n20 0 1 57\n8 3 0 42\n10 1 0 26\n9 2 0 35\n21 0 2 84\n", "5 10 9\n22 0 3 13\n9 2 0 30\n24 0 5 42\n21 0 2 33\n23 0 4 36\n20 0 1 57\n10 1 0 39\n8 3 0 68\n7 4 0 85\n6 5 0 35\n", "2 4 10\n20 0 1 7\n9 2 0 32\n10 1 0 27\n21 0 2 19\n", "5 10 1\n24 0 5 61\n22 0 3 36\n8 3 0 7\n21 0 2 20\n6 5 0 23\n20 0 1 28\n23 0 4 18\n9 2 0 40\n7 4 0 87\n10 1 0 8\n", "1 2 9\n20 0 1 97\n10 1 0 47\n", "9 10 1\n531 8 0 5\n392 2 0 9\n627 8 0 9\n363 5 0 9\n592 0 5 3\n483 0 6 7\n104 3 0 8\n97 8 0 9\n591 0 7 9\n897 0 6 7\n"], "output": ["-1", "11011", "9", "-1", "-1", "23", "473", "403", "178", "-1", "-1", "-1", "-1", "-1", "180", "300", "1111", "-1", "-1", "-1", "-1", "370", "-1", "23", "376", "-1", "-1", "438", "-1", "328", "144", "-1"]}, "index": 8032}, {"input": "In Ann's favorite book shop are as many as n books on math and economics. Books are numbered from 1 to n. Each of them contains non-negative number of problems.\n\nToday there is a sale: any subsegment of a segment from l to r can be bought at a fixed price. \n\nAnn decided that she wants to buy such non-empty subsegment that the sale operates on it and the number of math problems is greater than the number of economics problems exactly by k. Note that k may be positive, negative or zero.\n\nUnfortunately, Ann is not sure on which segment the sale operates, but she has q assumptions. For each of them she wants to know the number of options to buy a subsegment satisfying the condition (because the time she spends on choosing depends on that).\n\nCurrently Ann is too busy solving other problems, she asks you for help. For each her assumption determine the number of subsegments of the given segment such that the number of math problems is greaten than the number of economics problems on that subsegment exactly by k.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100 000,  - 109 \u2264 k \u2264 109) \u2014 the number of books and the needed difference between the number of math problems and the number of economics problems.\n\nThe second line contains n integers t1, t2, ..., tn (1 \u2264 ti \u2264 2), where ti is 1 if the i-th book is on math or 2 if the i-th is on economics.\n\nThe third line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 109), where ai is the number of problems in the i-th book.\n\nThe fourth line contains a single integer q (1 \u2264 q \u2264 100 000) \u2014 the number of assumptions.\n\nEach of the next q lines contains two integers li and ri (1 \u2264 li \u2264 ri \u2264 n) describing the i-th Ann's assumption.\n\nOutput\n\nPrint q lines, in the i-th of them print the number of subsegments for the i-th Ann's assumption.\n\n", "output": "# ------------------- fast io --------------------\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n    \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ------------------- fast io --------------------\nfrom math import ceil\n\n\ndef prod(a, mod=10 ** 9 + 7):\n    ans = 1\n    for each in a:\n        ans = (ans * each) % mod\n    return ans\n\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef lcm(a, b): return a * b // gcd(a, b)\n\n\ndef binary(x, length=16):\n    y = bin(x)[2:]\n    return y if len(y) >= length else \"0\" * (length - len(y)) + y\n\n\nfor _ in range(int(input()) if not True else 1):\n    #n = int(input())\n    n, k = map(int, input().split())\n    # a, b = map(int, input().split())\n    # c, d = map(int, input().split())\n    t = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    # s = input()\n    for i in range(n):\n        # math = eco + k\n        # math - eco = k\n        if t[i] == 2:\n            a[i] *= -1\n        \n    count = [0] * (n + 1)\n    pre = [0]\n    for i in a:\n        pre += [pre[-1] + i]\n\n    index = {}\n    cc = list(set(pre))\n    for i in range(len(cc)):\n        index[cc[i]] = i\n        \n    minusK = [-1]*(n + 1)\n    plusK = [-1] * (n + 1)\n    zero = [-1] * (n + 1)\n    for i in range(n + 1):\n        if pre[i] - k in index:\n            minusK[i] = index[pre[i] - k]\n        if pre[i] + k in index:\n            plusK[i] = index[pre[i] + k]\n        zero[i] = index[pre[i]]\n        \n    \n    BLOCK_SIZE = 320\n    blocks = [[] for i in range(BLOCK_SIZE)]\n    q = int(input())\n    ans = [0]*q\n    for i in range(q):\n        l, r = map(int, input().split())\n        blocks[l // BLOCK_SIZE] += [[l-1, r, i]]\n    \n    for i in range(len(blocks)):\n        if not blocks[i]: continue\n        blocks[i] = sorted(blocks[i], key=lambda x: x[1])\n        left = right = BLOCK_SIZE * i\n        res = 0\n        count[zero[left]] += 1\n        for l, r, ind in blocks[i]:\n            while right < r:\n                right += 1\n                if minusK[right] != -1:\n                    res += count[minusK[right]]\n                count[zero[right]] += 1\n            while left < l:\n                count[zero[left]] -= 1\n                if plusK[left] != -1:\n                    res -= count[plusK[left]]\n                left += 1\n            while left > l:\n                left -= 1\n                if plusK[left] != -1:\n                    res += count[plusK[left]]\n                count[zero[left]] += 1\n            ans[ind] = res\n\n        while left <= right:\n            count[zero[left]] -= 1\n            if plusK[left] != -1:\n                res -= count[plusK[left]]\n            left += 1\n        assert res == 0\n    \n    for i in ans:\n        print(i)", "public_tests": {"input": ["4 1\n1 1 1 2\n1 1 1 1\n4\n1 2\n1 3\n1 4\n3 4\n", "4 0\n1 2 1 2\n0 0 0 0\n1\n1 4\n"], "output": ["2\n3\n4\n1\n", "10\n"]}, "private_tests": {"input": ["2 0\n1 2\n43 43\n3\n1 2\n2 2\n1 1\n", "10 -10\n1 2 1 2 1 1 2 2 2 1\n7 7 10 3 7 10 6 8 0 1\n10\n2 6\n10 10\n6 9\n5 8\n7 10\n2 7\n2 9\n2 7\n5 6\n2 8\n", "10 10\n1 1 1 1 1 2 1 2 1 2\n7 10 2 5 0 1 8 10 1 8\n10\n4 5\n1 3\n6 7\n8 10\n5 10\n1 8\n5 6\n1 5\n2 8\n9 10\n", "10 10\n2 1 1 1 1 1 1 1 1 2\n0 10 10 0 0 10 10 10 10 0\n10\n4 10\n3 7\n9 9\n2 9\n10 10\n5 5\n2 2\n6 8\n3 4\n1 3\n"], "output": ["1\n0\n0\n", "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n", "0\n1\n0\n0\n0\n1\n0\n1\n1\n0\n", "7\n7\n1\n10\n0\n0\n1\n3\n2\n3\n"]}, "index": 8033}, {"input": "Suppose you have two polynomials <image> and <image>. Then polynomial <image> can be uniquely represented in the following way:\n\n<image>\n\nThis can be done using [long division](https://en.wikipedia.org/wiki/Polynomial_long_division). Here, <image> denotes the degree of polynomial P(x). <image> is called the remainder of division of polynomial <image> by polynomial <image>, it is also denoted as <image>. \n\nSince there is a way to divide polynomials with remainder, we can define Euclid's algorithm of finding the greatest common divisor of two polynomials. The algorithm takes two polynomials <image>. If the polynomial <image> is zero, the result is <image>, otherwise the result is the value the algorithm returns for pair <image>. On each step the degree of the second argument decreases, so the algorithm works in finite number of steps. But how large that number could be? You are to answer this question. \n\nYou are given an integer n. You have to build two polynomials with degrees not greater than n, such that their coefficients are integers not exceeding 1 by their absolute value, the leading coefficients (ones with the greatest power of x) are equal to one, and the described Euclid's algorithm performs exactly n steps finding their greatest common divisor. Moreover, the degree of the first polynomial should be greater than the degree of the second. By a step of the algorithm we mean the transition from pair <image> to pair <image>. \n\nInput\n\nYou are given a single integer n (1 \u2264 n \u2264 150) \u2014 the number of steps of the algorithm you need to reach.\n\nOutput\n\nPrint two polynomials in the following format.\n\nIn the first line print a single integer m (0 \u2264 m \u2264 n) \u2014 the degree of the polynomial. \n\nIn the second line print m + 1 integers between  - 1 and 1 \u2014 the coefficients of the polynomial, from constant to leading. \n\nThe degree of the first polynomial should be greater than the degree of the second polynomial, the leading coefficients should be equal to 1. Euclid's algorithm should perform exactly n steps when called using these polynomials.\n\nIf there is no answer for the given n, print -1.\n\nIf there are multiple answer, print any of them.\n\n", "output": "n=int(input())\np = [[1], [0, 1]]\nfor i in range(n-1):\n    t=[0]+p[-1]\n    for j in range(len(p[i])):\n        t[j]^=p[i][j]\n    p.append(t)\nprint(n)\nprint(*p[n])\nprint(n-1)\nprint(*p[-2])\n", "public_tests": {"input": ["1\n", "2\n"], "output": ["1\n0 1\n0\n1\n", "2\n1 0 1\n1\n0 1\n"]}, "private_tests": {"input": ["70\n", "64\n", "102\n", "141\n", "43\n", "36\n", "91\n", "50\n", "77\n", "135\n", "44\n", "59\n", "20\n", "14\n", "57\n", "34\n", "13\n", "118\n", "101\n", "96\n", "6\n", "72\n", "84\n", "133\n", "11\n", "110\n", "18\n", "69\n", "113\n", "139\n", "142\n", "130\n", "73\n", "74\n", "31\n", "99\n", "47\n", "24\n", "93\n", "38\n", "7\n", "147\n", "54\n", "100\n", "12\n", "3\n", "121\n", "109\n", "30\n", "78\n", "116\n", "68\n", "56\n", "33\n", "83\n", "80\n", "94\n", "124\n", "143\n", "112\n", "120\n", "61\n", "85\n", "5\n", "53\n", "35\n", "106\n", "10\n", "82\n", "92\n", "95\n", "8\n", "42\n", "71\n", "126\n", "150\n", "51\n", "25\n", "67\n", "46\n", "122\n", "132\n", "111\n", "48\n", "60\n", "45\n", "105\n", "107\n", "108\n", "63\n", "146\n", "140\n", "98\n", "115\n", "119\n", "131\n", "21\n", "144\n", "19\n", "49\n", "117\n", "32\n", "104\n", "81\n", "39\n", "76\n", "4\n", "9\n", "125\n", "136\n", "89\n", "90\n", "62\n", "134\n", "17\n", "148\n", "16\n", "129\n", "66\n", "37\n", "103\n", "86\n", "52\n", "88\n", "75\n", "97\n", "145\n", "29\n", "114\n", "123\n", "27\n", "87\n", "22\n", "41\n", "23\n", "137\n", "58\n", "79\n", "55\n", "128\n", "15\n", "127\n", "28\n", "40\n", "65\n", "149\n", "26\n", "138\n"], "output": ["70\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n69\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "64\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n63\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "102\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n101\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "141\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n140\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "43\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n42\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "36\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n35\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "91\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n90\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "50\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n49\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "77\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n76\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "135\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n134\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "44\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n43\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "59\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n58\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "20\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n19\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "14\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n13\n0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "57\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n56\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "34\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n33\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "13\n0 1 0 0 0 0 0 0 0 1 0 0 0 1\n12\n1 0 1 0 0 0 0 0 1 0 1 0 1\n", "118\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n117\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "101\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n100\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "96\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n95\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "6\n1 0 0 0 1 0 1\n5\n0 1 0 0 0 1\n", "72\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n71\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "84\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n83\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "133\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n132\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "11\n0 0 0 1 0 0 0 0 0 0 0 1\n10\n1 0 1 0 1 0 0 0 1 0 1\n", "110\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n109\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "18\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n17\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "69\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n68\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "113\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n112\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "139\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n138\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "142\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n141\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "130\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n129\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "73\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n72\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "74\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n73\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "31\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "99\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n98\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "47\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n46\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "24\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n23\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "93\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n92\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "38\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n37\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "7\n0 0 0 0 0 0 0 1\n6\n1 0 0 0 1 0 1\n", "147\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n146\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "54\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n53\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "100\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n99\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "12\n1 0 1 0 0 0 0 0 1 0 1 0 1\n11\n0 0 0 1 0 0 0 0 0 0 0 1\n", "3\n0 0 0 1\n2\n1 0 1\n", "121\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n120\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "109\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n108\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n29\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "78\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n77\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "116\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n115\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "68\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n67\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "56\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n55\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "33\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n32\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "83\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n82\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "80\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n79\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "94\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n93\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "124\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n123\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "143\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n142\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "112\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n111\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "120\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n119\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "61\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n60\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "85\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n84\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "5\n0 1 0 0 0 1\n4\n1 0 1 0 1\n", "53\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n52\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "35\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n34\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "106\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n105\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "10\n1 0 1 0 1 0 0 0 1 0 1\n9\n0 1 0 0 0 1 0 0 0 1\n", "82\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n81\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "92\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n91\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "95\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n94\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "8\n1 0 0 0 1 0 1 0 1\n7\n0 0 0 0 0 0 0 1\n", "42\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n41\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "71\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n70\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "126\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n125\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "150\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n149\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "51\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n50\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "25\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n24\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "67\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n66\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "46\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n45\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "122\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n121\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "132\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n131\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "111\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n110\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "48\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n47\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "60\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n59\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "45\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n44\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "105\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n104\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "107\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n106\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "108\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n107\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "63\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n62\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "146\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n145\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "140\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n139\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "98\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n97\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "115\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n114\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "119\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n118\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "131\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n130\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "21\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n20\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "144\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n143\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "19\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n18\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "49\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n48\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "117\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n116\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "32\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n31\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "104\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n103\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "81\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n80\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "39\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n38\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "76\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n75\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "4\n1 0 1 0 1\n3\n0 0 0 1\n", "9\n0 1 0 0 0 1 0 0 0 1\n8\n1 0 0 0 1 0 1 0 1\n", "125\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n124\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "136\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n135\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "89\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n88\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "90\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n89\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "62\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n61\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "134\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n133\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "17\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n16\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "148\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n147\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "16\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n15\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "129\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n128\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "66\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n65\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "37\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n36\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "103\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n102\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "86\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n85\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "52\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n51\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "88\n1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n87\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "75\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n74\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "97\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n96\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "145\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n144\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "29\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n28\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "114\n1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n113\n0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "123\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n122\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "27\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n26\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n", "87\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n86\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "22\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n21\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n", "41\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n40\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "23\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n22\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "137\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n136\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "58\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n57\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "79\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n78\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "55\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n54\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "128\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n127\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "15\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n14\n1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "127\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n126\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1\n", "28\n1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n27\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1\n", "40\n1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n39\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n", "65\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n64\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1\n", "149\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1\n148\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1\n", "26\n1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1\n25\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1\n", "138\n1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 \n137\n0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 "]}, "index": 8034}, {"input": "\n\nInput\n\nThe input contains a single integer a (10 \u2264 a \u2264 999).\n\nOutput\n\nOutput 0 or 1.\n\n", "output": "print((int)(input())%2)", "public_tests": {"input": ["13\n", "48\n", "927\n"], "output": ["1\n", "0\n", "1\n"]}, "private_tests": {"input": ["758\n", "496\n", "957\n", "835\n", "932\n", "572\n", "329\n", "694\n", "207\n", "429\n", "583\n", "309\n", "636\n", "470\n", "168\n", "550\n", "10\n", "990\n", "999\n", "288\n", "431\n", "174\n", "846\n", "142\n", "33\n", "899\n", "25\n"], "output": ["0\n", "0\n", "1\n", "1\n", "0\n", "0\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n", "1\n", "0\n", "0\n", "0\n", "1\n", "1\n", "1\n"]}, "index": 8035}, {"input": "Kuro is living in a country called Uberland, consisting of n towns, numbered from 1 to n, and n - 1 bidirectional roads connecting these towns. It is possible to reach each town from any other. Each road connects two towns a and b. Kuro loves walking and he is planning to take a walking marathon, in which he will choose a pair of towns (u, v) (u \u2260 v) and walk from u using the shortest path to v (note that (u, v) is considered to be different from (v, u)).\n\nOddly, there are 2 special towns in Uberland named Flowrisa (denoted with the index x) and Beetopia (denoted with the index y). Flowrisa is a town where there are many strong-scent flowers, and Beetopia is another town where many bees live. In particular, Kuro will avoid any pair of towns (u, v) if on the path from u to v, he reaches Beetopia after he reached Flowrisa, since the bees will be attracted with the flower smell on Kuro\u2019s body and sting him.\n\nKuro wants to know how many pair of city (u, v) he can take as his route. Since he\u2019s not really bright, he asked you to help him with this problem.\n\nInput\n\nThe first line contains three integers n, x and y (1 \u2264 n \u2264 3 \u22c5 10^5, 1 \u2264 x, y \u2264 n, x \u2260 y) - the number of towns, index of the town Flowrisa and index of the town Beetopia, respectively.\n\nn - 1 lines follow, each line contains two integers a and b (1 \u2264 a, b \u2264 n, a \u2260 b), describes a road connecting two towns a and b.\n\nIt is guaranteed that from each town, we can reach every other town in the city using the given roads. That is, the given map of towns and roads is a tree.\n\nOutput\n\nA single integer resembles the number of pair of towns (u, v) that Kuro can use as his walking route.\n\n", "output": "from collections import defaultdict\n\nn,x,y = list(map(int,input().split()))\ngraph = defaultdict(list)\nvis = [False for i in range(n+1)]\nmat = [False for i in range(n+1)]\nsubtree = [0 for i in range(n+1)]\n\nfor i in range(n-1):\n\tu,v = list(map(int,input().split()))\n\tgraph[u].append(v)\n\tgraph[v].append(u)\nq = []\ncur = 0\nfor v in graph[x]:\n\tif v!=y:\n\t\tq.append([v,v])\n\telse:\n\t\tcur = v\nvis[x] = 1\nwhile q!=[]:\n\ttemp = q.pop()\n\tu,v = temp\n\tvis[u] = True\n\tsubtree[v]+=1\n\tfor node in graph[u]:\n\t\tif vis[node]==False:\n\t\t\tif node!=y:\n\t\t\t\tq.append([node,v])\n\t\t\telse:\n\t\t\t\tcur = v\nval = sum(subtree)\nval1 = (val+1-subtree[cur])\nval2 = n-(sum(subtree)+1)\nval = val1*val2\nprint(n*(n-1)-val)", "public_tests": {"input": ["3 1 3\n1 2\n2 3\n", "3 1 3\n1 2\n1 3\n"], "output": ["5\n", "4\n"]}, "private_tests": {"input": ["31 29 20\n29 23\n29 18\n22 14\n29 20\n1 21\n29 10\n28 2\n1 17\n17 15\n1 11\n29 31\n28 6\n12 29\n12 26\n1 13\n22 4\n29 25\n28 22\n17 5\n28 30\n20 27\n29 8\n12 28\n1 12\n12 24\n22 7\n12 16\n12 3\n28 9\n1 19\n", "8 5 1\n5 8\n1 5\n1 3\n1 4\n5 6\n6 7\n1 2\n", "13 5 13\n2 5\n5 8\n1 2\n13 7\n2 3\n1 13\n13 11\n13 4\n10 6\n10 12\n7 9\n1 10\n", "70 42 32\n25 50\n51 7\n39 61\n1 33\n20 5\n1 70\n1 63\n42 35\n64 16\n1 11\n39 42\n20 54\n11 14\n57 44\n1 59\n55 40\n25 3\n31 18\n38 68\n57 23\n39 57\n28 10\n39 20\n42 26\n58 6\n20 56\n57 2\n13 21\n15 69\n39 64\n1 39\n62 53\n39 13\n1 41\n22 12\n13 30\n68 67\n20 31\n51 15\n57 32\n59 34\n39 4\n31 65\n58 24\n20 55\n15 27\n25 46\n20 22\n57 49\n68 52\n39 8\n54 58\n39 28\n13 48\n15 43\n25 66\n1 29\n15 37\n31 60\n1 19\n62 38\n39 17\n64 36\n59 25\n57 45\n57 9\n11 62\n20 51\n54 47\n", "2 1 2\n2 1\n", "61 26 12\n33 38\n32 8\n27 59\n1 21\n61 57\n61 22\n35 18\n61 14\n39 56\n50 10\n1 42\n21 43\n61 41\n31 30\n35 9\n23 28\n39 34\n39 4\n39 25\n27 60\n45 51\n1 11\n35 26\n29 15\n23 44\n31 2\n35 27\n39 20\n1 24\n1 53\n35 58\n39 37\n61 13\n61 16\n1 12\n32 17\n1 40\n33 47\n29 52\n1 39\n35 19\n39 50\n27 6\n26 3\n26 55\n35 31\n1 61\n1 23\n27 45\n39 7\n1 35\n39 29\n27 5\n39 32\n27 48\n35 49\n29 54\n1 46\n35 36\n31 33\n", "2 1 2\n1 2\n", "7 7 3\n3 2\n3 5\n3 7\n1 3\n1 4\n5 6\n", "8 6 4\n1 2\n1 4\n1 8\n1 3\n1 7\n2 6\n2 5\n", "72 16 5\n1 20\n8 4\n23 19\n16 63\n45 65\n27 67\n58 21\n36 17\n20 52\n1 71\n8 59\n20 26\n28 16\n23 3\n45 42\n61 51\n6 31\n1 15\n1 11\n6 62\n43 60\n20 27\n20 32\n1 8\n68 25\n1 57\n20 70\n1 64\n1 13\n8 18\n8 46\n28 49\n8 39\n64 58\n28 47\n27 14\n8 10\n11 53\n1 24\n28 2\n72 30\n36 29\n1 45\n24 23\n1 72\n46 61\n45 56\n72 35\n11 50\n8 55\n8 28\n1 38\n61 41\n1 44\n61 40\n27 33\n72 69\n46 36\n43 66\n61 22\n45 5\n27 43\n46 12\n1 7\n16 68\n1 6\n1 9\n45 37\n27 34\n8 54\n20 48\n"], "output": ["872\n", "40\n", "146\n", "4827\n", "1\n", "3657\n", "1\n", "36\n", "55\n", "5108\n"]}, "index": 8036}, {"input": "You are given an array consisting of n integers a_1, a_2, ..., a_n, and a positive integer m. It is guaranteed that m is a divisor of n.\n\nIn a single move, you can choose any position i between 1 and n and increase a_i by 1.\n\nLet's calculate c_r (0 \u2264 r \u2264 m-1) \u2014 the number of elements having remainder r when divided by m. In other words, for each remainder, let's find the number of corresponding elements in a with that remainder.\n\nYour task is to change the array in such a way that c_0 = c_1 = ... = c_{m-1} = n/m.\n\nFind the minimum number of moves to satisfy the above requirement.\n\nInput\n\nThe first line of input contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 n). It is guaranteed that m is a divisor of n.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9), the elements of the array.\n\nOutput\n\nIn the first line, print a single integer \u2014 the minimum number of moves required to satisfy the following condition: for each remainder from 0 to m - 1, the number of elements of the array having this remainder equals n/m.\n\nIn the second line, print any array satisfying the condition and can be obtained from the given array with the minimum number of moves. The values of the elements of the resulting array must not exceed 10^{18}.\n\n", "output": "R = lambda: map(int, input().split())\nn,m = R()\nL = list(R())\nd = [[] for i in range(m)]\nfor j,i in enumerate(L):\n    d[i%m].append(j)\nk = n//m\na = []\nres = 0\nj = 0\nfor i in range(m):\n    while len(d[i]) > k:\n        while j < i or len(d[j % m]) >= k: j += 1\n        ind = d[i].pop()\n        L[ind] += (j-i)%m\n        res += (j-i)%m\n        d[j%m].append(ind)\nprint(res)\nprint(*L)", "public_tests": {"input": ["4 2\n0 1 2 3\n", "6 3\n3 2 0 6 10 12\n"], "output": ["0\n0 1 2 3 \n", "3\n3 2 0 7 10 14 "]}, "private_tests": {"input": ["100 25\n6745 2075 7499 7517 1776 5164 2335 2745 4465 1457 7565 2232 2486 9025 8059 9646 8017 7662 9690 3352 2306 366 7422 1073 7169 8966 4506 8225 5614 8628 2908 7452 9625 9332 7097 353 1043 8118 5794 4486 626 971 6731 6618 887 6354 4814 7307 7681 6160 9351 2579 411 3436 5570 2812 2726 4433 3220 577 5891 3861 528 2183 127 5579 6979 4005 9953 5038 9937 4792 3003 9417 8796 1565 11 2596 2486 3494 4464 9568 5512 5565 9822 9820 4848 2889 9527 2249 9860 8236 256 8434 8038 6407 5570 5922 7435 2815\n", "1 1\n1000000000\n", "6 3\n3 2 0 6 10 11\n"], "output": ["88\n6745 2075 7499 7517 1776 5164 2335 2745 4465 1457 7565 2232 2486 9025 8059 9646 8017 7662 9690 3352 2306 366 7422 1073 7169 8966 4506 8225 5614 8628 2908 7452 9625 9332 7097 353 1043 8118 5794 4486 626 971 6731 6618 887 6354 4814 7307 7681 6160 9351 2579 411 3436 5570 2812 2726 4433 3220 577 5891 3863 528 2183 127 5579 6979 4005 9953 5038 9937 4792 3005 9417 8796 1565 24 2596 2505 3494 4464 9568 5513 5566 9822 9823 4848 2899 9530 2249 9860 8259 259 8434 8038 6408 5573 5922 7435 2819 ", "0\n1000000000 \n", "1\n3 2 0 7 10 11 \n"]}, "index": 8037}, {"input": "You are given an integer K. Print the string obtained by repeating the string `ACL` K times and concatenating them.\n\nFor example, if K = 3, print `ACLACLACL`.\n\nConstraints\n\n* 1 \\leq K \\leq 5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\n\n\nOutput\n\nPrint the string obtained by repeating the string `ACL` K times and concatenating them.\n\nExample\n\nInput\n\n3\n\n\nOutput\n\nACLACLAC", "output": "print(int(input())*\"ACL\")", "public_tests": {"input": ["3"], "output": ["ACLACLACL"]}, "private_tests": {"input": [], "output": []}, "index": 8038}, {"input": "There are N towns numbered 1, 2, \\cdots, N.\n\nSome roads are planned to be built so that each of them connects two distinct towns bidirectionally. Currently, there are no roads connecting towns.\n\nIn the planning of construction, each town chooses one town different from itself and requests the following: roads are built so that the chosen town is reachable from itself using one or more roads.\n\nThese requests from the towns are represented by an array P_1, P_2, \\cdots, P_N. If P_i = -1, it means that Town i has not chosen the request; if 1 \\leq P_i \\leq N, it means that Town i has chosen Town P_i.\n\nLet K be the number of towns i such that P_i = -1. There are (N-1)^K ways in which the towns can make the requests. For each way to make requests, find the minimum number of roads needed to meet all the requests, and print the sum of those (N-1)^K numbers, modulo (10^9+7).\n\nConstraints\n\n* 2 \\leq N \\leq 5000\n* P_i = -1 or 1 \\leq P_i \\leq N.\n* P_i \\neq i\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1 P_2 \\cdots P_N\n\n\nOutput\n\nFor each way to make requests, find the minimum number of roads needed to meet all the requests, and print the sum of those (N-1)^K numbers, modulo (10^9+7).\n\n", "output": "def par(a):\n    L = []\n    while P[a] != a:\n        L.append(a)\n        a = P[a]\n    for l in L:\n        P[l] = a\n    return a\ndef unite(a, b):\n    pa = par(a)\n    pb = par(b)\n    if pa == pb: return\n    if LEN[pa] < LEN[pb]:\n        a, b, pa, pb = b, a, pb, pa\n    P[pb] = pa\n    if LEN[pa] == LEN[pb]: LEN[pa] += 1\n    CNT[pa] += CNT[pb]\ndef cnt(a):\n    return CNT[par(a)]\n\nN = int(input())\nP = [i for i in range(N)]\nLEN = [1] * N\nCNT = [1] * N\nFULL = [0] * N\nA = [int(a) - 1 for a in input().split()]\nfor i, a in enumerate(A):\n    if a < 0: continue\n    if par(i) != par(a):\n        unite(i, a)\n    else:\n        FULL[i] = 1\nfor i in range(N):\n    if FULL[i]:\n        FULL[par(i)] = 1\nX = []\nY = []\nfor i in range(N):\n    if par(i) == i:\n        if FULL[i] == 0:\n            X.append(CNT[i])\n        else:\n            Y.append(CNT[i])\nM = len(X)\nmod = 10 ** 9 + 7\nK = 96\nm = int((\"1\" * 32 + \"0\" * 64) * 5050, 2)\npa = (1 << 64) - ((1 << 64) % mod)\nmodP = lambda x: x - ((x & m) >> 64) * pa\nans = (sum(X) + sum(Y) - len(Y)) * pow(N - 1, M, mod) % mod\nx = 1\nfor i, a in enumerate(X):\n    x *= (a << K) + 1\n    x = modP(x)\n\nsx = bin(x)[2:] + \"_\"\nL = [int(sx[-(i+1) * K - 1:-i * K - 1], 2) % mod for i in range((len(sx)+K-2) // K)]\nfa = 1\nans = (ans + M * pow(N - 1, M - 1, mod)) % mod\nfor i, l in enumerate(L):\n    if i == 0: continue\n    ans = (ans - l * fa * pow(N - 1, M - i, mod)) % mod\n    fa = fa * i % mod\nprint(ans)", "public_tests": {"input": ["4\n2 1 -1 3", "2\n2 1", "10\n2 6 9 -1 6 9 -1 -1 -1 -1"], "output": ["8", "1", "527841"]}, "private_tests": {"input": [], "output": []}, "index": 8039}, {"input": "We have a grid with H rows and W columns, where all the squares are initially white.\n\nYou will perform some number of painting operations on the grid. In one operation, you can do one of the following two actions:\n\n* Choose one row, then paint all the squares in that row black.\n* Choose one column, then paint all the squares in that column black.\n\n\n\nAt least how many operations do you need in order to have N or more black squares in the grid? It is guaranteed that, under the conditions in Constraints, having N or more black squares is always possible by performing some number of operations.\n\nConstraints\n\n* 1 \\leq H \\leq 100\n* 1 \\leq W \\leq 100\n* 1 \\leq N \\leq H \\times W\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH\nW\nN\n\n\nOutput\n\nPrint the minimum number of operations needed.\n\n", "output": "h,w,n=map(int,open(0));print(0--n//max(h,w))", "public_tests": {"input": ["3\n7\n10", "2\n100\n200", "14\n12\n112"], "output": ["2", "2", "8"]}, "private_tests": {"input": [], "output": []}, "index": 8040}, {"input": "There are N cards placed on a grid with H rows and W columns of squares.\n\nThe i-th card has an integer A_i written on it, and it is placed on the square at the R_i-th row from the top and the C_i-th column from the left.\n\nMultiple cards may be placed on the same square.\n\nYou will first pick up at most one card from each row.\n\nThen, you will pick up at most one card from each column.\n\nFind the maximum possible sum of the integers written on the picked cards.\n\nConstraints\n\n* All values are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq H, W \\leq 10^5\n* 1 \\leq A_i \\leq 10^5\n* 1 \\leq R_i \\leq H\n* 1 \\leq C_i \\leq W\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H W\nR_1 C_1 A_1\nR_2 C_2 A_2\n\\vdots\nR_N C_N A_N\n\n\nOutput\n\nPrint the maximum possible sum of the integers written on the picked cards.\n\n", "output": "import sys\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 7)\n\nN,H,W = map(int,readline().split())\nRCA = [tuple(int(x) for x in line.split()) for line in readlines()]\n\nRCA.sort(key = lambda x: -x[2])\n\nRCA\n\nroot = list(range(H+W))\nsize = [0] * (H+W)\nno_cycle = [True] * (H+W)\n\ndef find_root(x):\n    y = root[x]\n    if x == y:\n        return y\n    z = find_root(y)\n    root[x] = z\n    return z\n\ndef merge(x,y):\n    x,y = find_root(x),find_root(y)\n    sx,sy = size[x],size[y]\n    if sx < sy:\n        sx,sy = sy,sx\n        x,y = y,x\n    root[y] = x\n    no_cycle[x] = no_cycle[x] and no_cycle[y]\n\nanswer = 0\nfor R,C,A in RCA:\n    x,y = R-1,H+C-1\n    rx,ry = find_root(x),find_root(y)\n    if rx == ry:\n        if not no_cycle[rx]:\n            continue\n        no_cycle[rx] = False\n    else:\n        if (not no_cycle[rx]) and (not no_cycle[ry]):\n            continue\n        merge(rx,ry)\n    answer += A\n\nprint(answer)\n\n", "public_tests": {"input": ["1 100000 100000\n1 1 1", "13 5 6\n1 3 35902\n4 6 19698\n4 6 73389\n3 6 3031\n3 1 4771\n1 4 4784\n2 1 36357\n2 1 24830\n5 6 50219\n4 6 22645\n1 2 30739\n1 4 68417\n1 5 78537", "6 2 2\n2 2 2\n1 1 8\n1 1 5\n1 2 9\n1 2 7\n2 1 4"], "output": ["1", "430590", "28"]}, "private_tests": {"input": [], "output": []}, "index": 8041}, {"input": "There are three houses on a number line: House 1, 2 and 3, with coordinates A, B and C, respectively. Print `Yes` if we pass the coordinate of House 3 on the straight way from House 1 to House 2 without making a detour, and print `No` otherwise.\n\nConstraints\n\n* 0\\leq A,B,C\\leq 100\n* A, B and C are distinct integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C\n\n\nOutput\n\nPrint `Yes` if we pass the coordinate of House 3 on the straight way from House 1 to House 2 without making a detour, and print `No` otherwise.\n\n", "output": "a,b,c=map(int,input().split());print('NYoe s'[(c>a)^(c>b)::2])", "public_tests": {"input": ["10 2 4", "7 3 1", "31 41 59", "3 8 5"], "output": ["Yes", "No", "No", "Yes"]}, "private_tests": {"input": [], "output": []}, "index": 8042}, {"input": "Shichi-Go-San (literally \"Seven-Five-Three\") is a traditional event in a certain country to celebrate the growth of seven-, five- and three-year-old children.\n\nTakahashi is now X years old. Will his growth be celebrated in Shichi-Go-San this time?\n\nConstraints\n\n* 1 \u2264 X \u2264 9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX\n\n\nOutput\n\nIf Takahashi's growth will be celebrated, print `YES`; if it will not, print `NO`.\n\n", "output": "print(\"NYOE S\"[input()in\"357\"::2])", "public_tests": {"input": ["6", "5"], "output": ["NO", "YES"]}, "private_tests": {"input": [], "output": []}, "index": 8043}, {"input": "In AtCoder Kingdom, Gregorian calendar is used, and dates are written in the \"year-month-day\" order, or the \"month-day\" order without the year.\nFor example, May 3, 2018 is written as 2018-5-3, or 5-3 without the year.\n\nIn this country, a date is called Takahashi when the month and the day are equal as numbers. For example, 5-5 is Takahashi.\nHow many days from 2018-1-1 through 2018-a-b are Takahashi?\n\nConstraints\n\n* a is an integer between 1 and 12 (inclusive).\n* b is an integer between 1 and 31 (inclusive).\n* 2018-a-b is a valid date in Gregorian calendar.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na b\n\n\nOutput\n\nPrint the number of days from 2018-1-1 through 2018-a-b that are Takahashi.\n\n", "output": "a,b=input().split();print(int(a)-(a>b))", "public_tests": {"input": ["11 30", "2 1", "5 5"], "output": ["11", "1", "5"]}, "private_tests": {"input": [], "output": []}, "index": 8044}, {"input": "Ringo has an undirected graph G with N vertices numbered 1,2,...,N and M edges numbered 1,2,...,M. Edge i connects Vertex a_{i} and b_{i} and has a length of w_i.\n\nNow, he is in the middle of painting these N vertices in K colors numbered 1,2,...,K. Vertex i is already painted in Color c_i, except when c_i = 0, in which case Vertex i is not yet painted.\n\nAfter he paints each vertex that is not yet painted in one of the K colors, he will give G to Snuke.\n\nBased on G, Snuke will make another undirected graph G' with K vertices numbered 1,2,...,K and M edges. Initially, there is no edge in G'. The i-th edge will be added as follows:\n\n* Let x and y be the colors of the two vertices connected by Edge i in G.\n* Add an edge of length w_i connecting Vertex x and y in G'.\n\n\n\nWhat is the minimum possible sum of the lengths of the edges in the minimum spanning tree of G'? If G' will not be connected regardless of how Ringo paints the vertices, print -1.\n\nConstraints\n\n* 1 \\leq N,M \\leq 10^{5}\n* 1 \\leq K \\leq N\n* 0 \\leq c_i \\leq K\n* 1 \\leq a_i,b_i \\leq N\n* 1 \\leq w_i \\leq 10^{9}\n* The given graph may NOT be simple or connected.\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K\nc_1 c_2 ... c_{N}\na_1 b_1 w_1\n:\na_M b_M w_M\n\n\nOutput\n\nPrint the answer.\n\n", "output": "class Unionfindtree:\n    def __init__(self, number):\n        self.par = [i for i in range(number)]\n        self.rank = [0] * (number)\n\n    def find(self, x):  # \u89aa\u3092\u63a2\u3059\n        if self.par[x] == x:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n\n    def union(self, x, y):  # x,y\u3092\u7e4b\u3052\u308b\n        px = self.find(x)\n        py = self.find(y)\n        if px == py:\n            return\n        if self.rank[px] < self.rank[py]:\n            self.par[px] = py\n        else:\n            self.par[py] = px\n        if self.rank[px] == self.rank[py]:\n            self.rank[px] += 1\n\n    def connect(self, x, y):  # \u89aa\u304c\u540c\u3058\u304b\u307f\u308b\n        return self.find(x) == self.find(y)\n\n\nN, M, K = map(int, input().split())\nC = [int(i) for i in input().split()]\ntable = []\nt = K\nfor i in range(N):\n    if C[i]==0:\n        t+=1\n        C[i]=t\nfor i in range(M):\n    s, u, c = map(int, input().split())\n    a, b = C[s - 1], C[u - 1]\n    table.append((c, a, b))\n\ntree = Unionfindtree(t+1)\ntable.sort()\nct = K - 1\nans = 0\nfor c, a, b in table:\n    if not tree.connect(a, b) and ct > 0:\n        tree.union(a, b)\n        ans += c\n        ct -= 1\nif ct > 0:\n    print(-1)\nelse:\n    print(ans)\n\n", "public_tests": {"input": ["4 3 3\n1 0 1 2\n1 2 10\n2 3 20\n2 4 50", "18 37 12\n5 0 4 10 8 7 2 10 6 0 9 12 12 11 11 11 0 1\n17 1 1\n11 16 7575\n11 15 9\n10 10 289938980\n5 10 17376\n18 4 1866625\n8 11 959154208\n18 13 200\n16 13 2\n2 7 982223\n12 12 9331\n13 12 8861390\n14 13 743\n2 10 162440\n2 4 981849\n7 9 1\n14 17 2800\n2 7 7225452\n3 7 85\n5 17 4\n2 13 1\n10 3 45\n1 15 973\n14 7 56553306\n16 17 70476\n7 18 9\n9 13 27911\n18 14 7788322\n11 11 8925\n9 13 654295\n2 10 9\n10 1 545631016\n3 4 5\n17 12 1929\n2 11 57\n1 5 4\n1 17 7807368", "9 12 9\n1 2 3 4 5 6 7 8 9\n6 9 9\n8 9 6\n6 7 85\n9 5 545631016\n2 1 321545\n1 6 33562944\n7 3 84946329\n9 7 15926167\n4 7 53386480\n5 8 70476\n4 6 4549\n4 8 8", "5 2 4\n0 0 0 0 0\n1 2 10\n2 3 10"], "output": ["60", "171", "118901402", "-1"]}, "private_tests": {"input": [], "output": []}, "index": 8045}, {"input": "Takahashi wants to gain muscle, and decides to work out at AtCoder Gym.\n\nThe exercise machine at the gym has N buttons, and exactly one of the buttons is lighten up. These buttons are numbered 1 through N. When Button i is lighten up and you press it, the light is turned off, and then Button a_i will be lighten up. It is possible that i=a_i. When Button i is not lighten up, nothing will happen by pressing it.\n\nInitially, Button 1 is lighten up. Takahashi wants to quit pressing buttons when Button 2 is lighten up.\n\nDetermine whether this is possible. If the answer is positive, find the minimum number of times he needs to press buttons.\n\nConstraints\n\n* 2 \u2264 N \u2264 10^5\n* 1 \u2264 a_i \u2264 N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1\na_2\n:\na_N\n\n\nOutput\n\nPrint -1 if it is impossible to lighten up Button 2. Otherwise, print the minimum number of times we need to press buttons in order to lighten up Button 2.\n\n", "output": "n,*a=map(int,open(0));c,s=0,1\nwhile s-2and c<n:c+=1;s=a[s-1]\nprint(c*(c<n)or-1)", "public_tests": {"input": ["3\n3\n1\n2", "5\n3\n3\n4\n2\n4", "4\n3\n4\n1\n2"], "output": ["2", "3", "-1"]}, "private_tests": {"input": [], "output": []}, "index": 8046}, {"input": "You are given two integers K and S.\nThree variable X, Y and Z takes integer values satisfying 0\u2264X,Y,Z\u2264K.\nHow many different assignments of values to X, Y and Z are there such that X + Y + Z = S?\n\nConstraints\n\n* 2\u2264K\u22642500\n* 0\u2264S\u22643K\n* K and S are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nK S\n\n\nOutput\n\nPrint the number of the triples of X, Y and Z that satisfy the condition.\n\n", "output": "k,s=map(int,input().split());k+=1;print(sum(k>s-I//k-I%k>=0for I in range(k*k)))", "public_tests": {"input": ["2 2", "5 15"], "output": ["6", "1"]}, "private_tests": {"input": [], "output": []}, "index": 8047}, {"input": "We have a grid with H rows and W columns. At first, all cells were painted white.\n\nSnuke painted N of these cells. The i-th ( 1 \\leq i \\leq N ) cell he painted is the cell at the a_i-th row and b_i-th column.\n\nCompute the following:\n\n* For each integer j ( 0 \\leq j \\leq 9 ), how many subrectangles of size 3\u00d73 of the grid contains exactly j black cells, after Snuke painted N cells?\n\nConstraints\n\n* 3 \\leq H \\leq 10^9\n* 3 \\leq W \\leq 10^9\n* 0 \\leq N \\leq min(10^5,H\u00d7W)\n* 1 \\leq a_i \\leq H (1 \\leq i \\leq N)\n* 1 \\leq b_i \\leq W (1 \\leq i \\leq N)\n* (a_i, b_i) \\neq (a_j, b_j) (i \\neq j)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nH W N\na_1 b_1\n:\na_N b_N\n\n\nOutput\n\nPrint 10 lines. The (j+1)-th ( 0 \\leq j \\leq 9 ) line should contain the number of the subrectangles of size 3\u00d73 of the grid that contains exactly j black cells.\n\n", "output": "from collections import*\nh,w,_,*t=map(int,open(0).read().split())\nd=defaultdict(int)\nfor a,b in zip(*[iter(t)]*2):\n  for i in range(9):d[a-i//3,b-i%3]+=1\na=[0]*10\nfor i,j in d:a[d[i,j]]+=h-1>i>0<j<w-1\na[0]=(h-2)*(w-2)-sum(a)\nprint(*a)", "public_tests": {"input": ["1000000000 1000000000 0", "4 5 8\n1 1\n1 4\n1 5\n2 3\n3 1\n3 2\n3 4\n4 4", "10 10 20\n1 1\n1 4\n1 9\n2 5\n3 10\n4 2\n4 7\n5 9\n6 4\n6 6\n6 7\n7 1\n7 3\n7 7\n8 1\n8 5\n8 10\n9 2\n10 4\n10 9"], "output": ["999999996000000004\n0\n0\n0\n0\n0\n0\n0\n0\n0", "0\n0\n0\n2\n4\n0\n0\n0\n0\n0", "4\n26\n22\n10\n2\n0\n0\n0\n0\n0"]}, "private_tests": {"input": [], "output": []}, "index": 8048}, {"input": "Dr .: Peter, I've finally done it.\nPeter: What's wrong, Dr. David? Is it a silly invention again?\nDr .: This table, this table.\n\n\n| Character | Sign\n--- | ---\n(Blank) | 101\n'| 000000\n, | 000011\n-| 10010001\n. | 010001\n? | 000001\nA | 100101\nB | 10011010\n| Character | Sign\n--- | ---\nC | 0101\nD | 0001\nE | 110\nF | 01001\nG | 10011011\nH | 010000\nI | 0111\nJ | 10011000\n| Character | Sign\n--- | ---\nK | 0110\nL | 00100\nM | 10011001\nN | 10011110\nO | 00101\nP | 111\nQ | 10011111\nR | 1000\n| Character | Sign\n--- | ---\nS | 00110\nT | 00111\nU | 10011100\nV | 10011101\nW | 000010\nX | 10010010\nY | 10010011\nZ | 10010000\n\n\n\nPeter: What? This table is.\nDr .: Okay, just do what you say. First, write your name on a piece of paper.\nPeter: Yes, \"PETER POTTER\".\nDr .: Then, replace each character with the \"code\" in this table.\nPeter: Well, change \"P\" to \"111\" and \"E\" to \"110\" ... It's quite annoying.\n\n\n111 110 00111 110 1000 101 111 00101 00111 00111 110 1000\n\n\nbecame. It looks like a barcode.\nDr .: All right. Then connect all the replaced strings and separate them by 5 characters.\nPeter: Yes, if you connect and separate.\n\n\n11111 00011 11101 00010 11110 01010 01110 01111 10100 0\n\n\nIt turned out to be something like this. But what about the last \"0\" guy?\nDr .: Add 0 to make it 5 letters.\nPeter: Well, there is only one 0 at the end, so I should add four more 0s. I was able to do it.\n\n\n\n11111 00011 11101 00010 11110 01010 01110 01111 10100 00000\n\n\nDr .: Next, use this table.\n\n\n| Sign | Character\n--- | ---\n00000 | A\n00001 | B\n00010 | C\n00011 | D\n00100 | E\n00101 | F\n00110 | G\n00111 | H\n| Sign | Character\n--- | ---\n01000 | I\n01001 | J\n01010 | K\n01011 | L\n01100 | M\n01101 | N\n01110 | O\n01111 | P\n| Sign | Character\n--- | ---\n10000 | Q\n10001 | R\n10010 | S\n10011 | T\n10100 | U\n10101 | V\n10110 | W\n10111 | X\n| Sign | Character\n--- | ---\n11000 | Y\n11001 | Z\n11010 | (blank)\n11011 | ..\n11100 |,\n11101 |-\n11110 |'\n11111 |?\n\n\n\nPeter: How do you use this ... yeah! Now you're going to replace the code with a letter!\nDr .: That's right. If it is \"11111\", go to \"?\", If it is \"00011\", go to \"D\".\nPeter: This is simple ... well, it became \"? D-C'KOPUA\". But it doesn't make sense.\nDr .: Count the number of characters.\nPeter: It's 10 characters. Oh, \"PETER POTTER\" was 12 characters, but 2 characters are reduced.\nDr .: Yes, you can use this table to reduce the number of letters. Now do the same thing in this sentence.\n\n\n\nPETER PIPER PICKED A PECK OF PICKLED PEPPERS. A PECK OF PICKLED PEPPERS\nPETER PIPER PICKED. IF PETER PIPER PICKED A PECK OF PICKLED PEPPERS, WHERE'S\nTHE PECK OF PICKLED PEPPERS PETER PIPER PICKED?\n\n\nPeter: Gyogyo, the lines are separated, what do you do?\nDr .: Due to space limitations, there are only 3 lines, but think of it as a long line with a space instead of a newline character.\nPeter: Yes, yes. There is a blank space between the lines. But it's a hassle ...\nDr .: Then why not let the program do it?\n\n\nSo, instead of Peter, create a program that converts the read character string into a code and outputs it.\n\n\n\ninput\n\nGiven multiple datasets. Each dataset is given a line of strings (consisting of the characters contained in the table). The string contains at least 1 and no more than 100 characters.\n\nThe number of datasets does not exceed 200.\n\noutput\n\nFor each data set, output the converted character string on one line.\n\nExample\n\nInput\n\nPETER POTTER\n\n\nOutput\n\n?D-C'KOPU", "output": "import sys\nd={' ':'101',\"'\":'000000',',':'000011','-':'10010001','.':'010001','?':'000001','A':'100101','B':'10011010','C':'0101','D':'0001','E':'110',\n'F':'01001','G':'10011011','H':'010000','I':'0111','J':'10011000','K':'0110','L':'00100','M':'10011001','N':'10011110','O':'00101','P':'111',\n'Q':'10011111','R':'1000','S':'00110','T':'00111','U':'10011100','V':'10011101','W':'000010','X':'10010010','Y':'10010011','Z':'10010000'}\nfor e in sys.stdin:\n a=''.join(d[c]for c in e[:-1])\n a+='0'*(-len(a)%5)\n print(''.join(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?\"[int(a[i:i+5],2)]for i in range(0,len(a),5)))\n", "public_tests": {"input": ["PETER POTTER"], "output": ["?D-C'KOPUA"]}, "private_tests": {"input": [], "output": []}, "index": 8049}, {"input": "\"What are your shoe sizes?\"\n\nSuddenly, the doctor asked me when I met him for the first time.\n\n\"It's 23.5\"\n\"Oh, that's a really nice number. It's 2 to the 4th power plus 2 to the 2nd power, 2 to the 1st power, 2 to the 0th power, and 2 to the 1st power.\"\n\nThen the doctor asked.\n\n\"You, how tall are you?\"\n\"Yes, it's 158.1.\"\n\nHe folded his arms and closed his eyes. After a while of silence, I opened my mouth.\n\n\"Nah ~\"\n\nAfter that, during the time I spent together, I gradually became able to understand the behavior of the doctor.\n\nFirst, I say the real number at the request of the doctor. If the real number is represented by a binary number with no more than 8 digits for the integer part and no more than 4 digits for the decimal part, he is happy to say the result of the conversion to binary. If not, it will sadly yell \"Nah ~\". This repeats until I say a negative real number.\n\nBy the way, as he got older, it became more and more difficult to make long calculations. Therefore, please make a program for you to input real numbers and convert / output them to binary numbers on your behalf. However, if the binary representation does not fit within the limit number of digits (integer part within 8 digits + decimal part within 4 digits), output NA (half-width alphabetic characters). The input real number shall fit within 8 digits of the integer part and within 4 digits of the decimal part, and the binary representation to be output should be output with 8 digits of the integer part and 4 digits of the decimal part.\n\n\n\nInput\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single negative real line. One real number n is given to one row for each dataset.\n\nThe number of datasets does not exceed 1200.\n\nOutput\n\nOutputs the conversion result to binary number for each input data set.\n\nExample\n\nInput\n\n23.5\n158.1\n-1.0\n\n\nOutput\n\n00010111.1000\nN", "output": "while(True):\n    n = float(input())\n    if n < 0: break\n    if int(n*16)-n*16: print(\"NA\"); continue\n    else:\n        s = bin(int(n*16))[2:].zfill(12)\n        print(s[:-4]+\".\"+s[-4:])\n", "public_tests": {"input": ["23.5\n158.1\n-1.0"], "output": ["00010111.1000\nNA"]}, "private_tests": {"input": [], "output": []}, "index": 8050}, {"input": "PCK Taxi in Aizu city, owned by PCK company, has adopted a unique billing system: the user can decide the taxi fare. Today as usual, many people are waiting in a queue at the taxi stand in front of the station.\n\nIn front of the station, there are $N$ parking spaces in row for PCK taxis, each with an index running from $1$ to $N$. Each of the parking areas is occupied by a taxi, and a queue of potential passengers is waiting for the ride. Each one in the queue has his/her own plan for how much to pay for the ride.\n\nTo increase the company\u2019s gain, the taxi driver is given the right to select the passenger who offers the highest taxi fare, rejecting others.\n\nThe driver in the $i$-th parking space can perform the following actions any number of times in any sequence before he finally selects a passenger and starts driving.\n\n1. Offer a ride to the passenger who is at the head of the $i$-th parking space\u2019s queue.\n2. Reject to offer a ride to the passenger who is at the head of the $i$-th parking space\u2019s queue. The passenger is removed from the queue.\n3. Move to the $i + 1$-th parking area if it is empty. If he is in the $N$-th parking area, he leaves the taxi stand to cruise the open road.\n\n\n\nA preliminary listening is made as to the fare the users offer. Your task is to maximize the sales volume of PCK Taxi in reference to the table of offered fares. A taxi cannot accommodate more than one passenger.\n\nGiven the number of taxi parking spaces and information regarding the persons waiting in the parking areas, calculate the maximum possible volume of sales.\n\n\n\nInput\n\nThe input is given in the following format.\n\n\n$N$\n$s_1$\n$s_2$\n$...$\n$s_N$\n\n\nThe first line provides the number of taxi parking areas $N$ ($1 \\leq N \\leq 300,000$). Each of the subsequent $N$ lines provides information on the customers queueing in the $i$-th taxi parking area in the following format:\n\n\n$M$ $c_1$ $c_2$ ... $c_M$\n\n\nThe first integer $M$ ($1 \\leq M \\leq 300,000$) indicates the number of customers in the queue, and the subsequent array of integers $c_j$ ($1 \\leq c_j \\leq 10,000$) indicates the fare the $j$-th customer in the queue is willing to pay. The total number of customers in the taxi stand is equal to or less than $300,000$.\n\nOutput\n\nOutput the maximum volume of sales.\n\nExample\n\nInput\n\n3\n3 8 10 1\n4 7 1 2 15\n3 11 8 19\n\n\nOutput\n\n4", "output": "from heapq import heappush, heappop\ndef main():\n  n = int(input())\n  que = []\n  for i in range(n):\n    lst = sorted(list(map(int, input().split()))[1:], reverse=True)[:i+1]\n    heappush(que, lst[-1])\n    for v in lst[:-1]:\n      heappush(que, v)\n      heappop(que)\n  print(sum(que))\nmain()\n", "public_tests": {"input": ["3\n3 8 10 1\n4 7 1 2 15\n3 11 8 19"], "output": ["45"]}, "private_tests": {"input": [], "output": []}, "index": 8051}, {"input": "Let A, B, C, D, E be sets of integers and let U is a universal set that includes all sets under consideration. All elements in any set are different (no repetitions).\n\nu - union of two sets, AuB = {x \u2208 U : x \u2208 A or x \u2208 B} is the set of all elements which belong to A or B.\n\ni - intersection of two sets, AiB = {x \u2208 U : x \u2208 A and x \u2208 B} is the set of all elements which belong to both A and B.\n\nd - difference of two sets, AdB = {x \u2208 U : x \u2208 A, x \u2209 B} is the set of those elements of A which do not belong to B.\n\ns - symmetric difference of two sets, AsB = (AdB)u(BdA) consists of those elements which belong to A or B but not to both.\n\nc - complement of a set, cA = {x \u2208 U : x \u2209 A}, is set of elements which belong to U but do not belong to A. Unary operator c has higest precedence.\n\nThe universal set U is defined as a union of all sets specified in data.\n\nYour task is to determine the result of an expression, which includes sets, set operations and parenthesis (any number of parenthesis and any correct enclosure of parenthesis may take place).\n\n\n\nInput\n\nInput consists of several pairs of lines difining sets and one pair of lines defining an expression. Each pair of lines for set definition includes the following.\n\nLine 1: Set name (A, B, C, D, E), number of elements in a set.\n\nLine 2: Set elements separated by blanks.\n\nPair of lines for expression definition:\n\nLine 1: R 0\n\nLine 2: Expression consisting of set names, operators and parenthesis (no blanks).\n\nNumber of sets can vary from 1 to 5. Set names can be specified in any order. Each set consists of 1-100 elements. Pair of lines for expression definition signals the end of data set. Input file includes several data sets. The number of datasets is less than 20.\n\nOutput\n\nFor each data set, the output should contain one line with resulting set elements sorted in ascending order separated by blanks. If the result contains no set elements then the line should contain the text NULL.\n\nExample\n\nInput\n\nA 3\n1 3 -1\nB 4\n3 1 5 7\nD 1\n5\nR 0\ncAiBdD\nC 3\n1 2 3\nA 4\n2 10 8 3\nB 3\n2 4 8\nR 0\n(As(AiB))uC\n\n\nOutput\n\n7\n1 2 3 1", "output": "import sys\n\ndef rpn(str):\n    r = []\n    stack = []\n    for i in range(0, len(str)):\n        c = str[i]\n        if c in \"idsu\":\n            while len(stack) > 0:\n                if stack[-1] in \"idsuc\":\n                    a = stack.pop()\n                    r.extend(a)\n                else:\n                    break\n            stack.extend(c)\n        elif c == \"c\":\n            stack.extend(c)\n        elif c == \"(\":\n            stack.extend(c)\n        elif c == \")\":\n            while len(stack) > 0:\n                a = stack.pop()\n                if a == \"(\":\n                    break\n                r.extend(a)\n        else:\n            r.extend(c)\n    while len(stack) > 0:\n        a = stack.pop()\n        r.extend(a)\n    return r\n\ndef intersect(a, b):\n    r = []\n    for e in a:\n        if e in b:\n            r.extend([e])\n    return r\n\ndef union(a, b):\n    r = list(set(a + b))\n    return r\n\ndef diff(a, b):\n    r = []\n    for e in a:\n        if e not in b:\n            r.extend([e])\n    return r\n\ndef universal(sets):\n    r = []\n    for v in sets.values():\n        r.extend(v)\n    r = list(set(r))\n    return r\n\ndef calc(rpn, sets):\n    stack = []\n    U = universal(sets)\n    for c in rpn:\n        if c in \"iuds\":\n            op2 = stack.pop()\n            op1 = stack.pop()\n            if c == \"i\":\n                x = intersect(op1, op2)\n                stack.append(x)\n            elif c == \"u\":\n                x = union(op1, op2)\n                stack.append(x)\n            elif c == \"d\":\n                x = diff(op1, op2)\n                stack.append(x)\n            elif c == \"s\":\n                x = diff(op1, op2)\n                y = diff(op2, op1)\n                z = union(x, y)\n                stack.append(z)\n        elif c == \"c\":\n            op1 = stack.pop()\n            x = diff(U, op1)\n            stack.append(x)\n        else:\n            stack.append(sets[c])\n    return stack.pop()\n            \nlno = 0\nsets = {}\nname = \"\"\nfor line in sys.stdin:\n    lno += 1\n    if lno % 2 == 1:\n        name = line.strip().split()[0]\n    elif name != \"R\":\n        elem = list(map(int, line.strip().split()))\n        sets[name] = elem\n    else:\n        e = rpn(line.strip())\n        result = calc(e, sets)\n        result.sort()\n        if len(result) > 0:\n            print(\" \".join([str(n) for n in result]))\n        else:\n            print(\"NULL\")\n        sets = {}\n", "public_tests": {"input": ["A 3\n1 3 -1\nB 4\n3 1 5 7\nD 1\n5\nR 0\ncAiBdD\nC 3\n1 2 3\nA 4\n2 10 8 3\nB 3\n2 4 8\nR 0\n(As(AiB))uC"], "output": ["7\n1 2 3 10"]}, "private_tests": {"input": [], "output": []}, "index": 8052}, {"input": "Taro and Hanako have numbers of cards in their hands. Each of the cards has a score on it. Taro and Hanako wish to make the total scores of their cards equal by exchanging one card in one's hand with one card in the other's hand. Which of the cards should be exchanged with which?\n\nNote that they have to exchange their cards even if they already have cards of the same total score.\n\nInput\n\nThe input consists of a number of datasets. Each dataset is formatted as follows.\n\n> n m\n>  s1\n>  s2\n>  ...\n>  sn\n>  sn+1\n>  sn+2\n>  ...\n>  sn+m\n>\n\nThe first line of a dataset contains two numbers n and m delimited by a space, where n is the number of cards that Taro has and m is the number of cards that Hanako has. The subsequent n+m lines list the score for each of the cards, one score per line. The first n scores (from s1 up to sn) are the scores of Taro's cards and the remaining m scores (from sn+1 up to sn+m) are Hanako's.\n\nThe numbers n and m are positive integers no greater than 100. Each score is a non-negative integer no greater than 100.\n\nThe end of the input is indicated by a line containing two zeros delimited by a single space.\n\nOutput\n\nFor each dataset, output a single line containing two numbers delimited by a single space, where the first number is the score of the card Taro gives to Hanako and the second number is the score of the card Hanako gives to Taro. If there is more than one way to exchange a pair of cards that makes the total scores equal, output a pair of scores whose sum is the smallest.\n\nIn case no exchange can make the total scores equal, output a single line containing solely -1. The output must not contain any superfluous characters that do not conform to the format.\n\nSample Input\n\n\n2 2\n1\n5\n3\n7\n6 5\n3\n9\n5\n2\n3\n3\n12\n2\n7\n3\n5\n4 5\n10\n0\n3\n8\n1\n9\n6\n0\n6\n7 4\n1\n1\n2\n1\n2\n1\n4\n2\n3\n4\n3\n2 3\n1\n1\n2\n2\n2\n0 0\n\n\nOutput for the Sample Input\n\n\n1 3\n3 5\n-1\n2 2\n-1\n\n\n\n\n\n\nExample\n\nInput\n\n2 2\n1\n5\n3\n7\n6 5\n3\n9\n5\n2\n3\n3\n12\n2\n7\n3\n5\n4 5\n10\n0\n3\n8\n1\n9\n6\n0\n6\n7 4\n1\n1\n2\n1\n2\n1\n4\n2\n3\n4\n3\n2 3\n1\n1\n2\n2\n2\n0 0\n\n\nOutput\n\n1 3\n3 5\n-1\n2 2\n-", "output": "while True:\n  n, m = map(int, input().split())\n  if n == 0:\n    break\n  a = [int(input()) for _ in range(n)]\n  b = [int(input()) for _ in range(m)]\n  a.sort\n  b.sort\n  suma = sum(a)\n  sumb = sum(b)\n \n  def change():\n    for i in a:\n      for j in b:\n        if(i-j) * 2 == suma - sumb:\n          print(i, j)\n          return\n    print(-1)\n  \n  change()\n", "public_tests": {"input": ["2 2\n1\n5\n3\n7\n6 5\n3\n9\n5\n2\n3\n3\n12\n2\n7\n3\n5\n4 5\n10\n0\n3\n8\n1\n9\n6\n0\n6\n7 4\n1\n1\n2\n1\n2\n1\n4\n2\n3\n4\n3\n2 3\n1\n1\n2\n2\n2\n0 0"], "output": ["1 3\n3 5\n-1\n2 2\n-1"]}, "private_tests": {"input": [], "output": []}, "index": 8053}, {"input": "International Center for Picassonian Cubism is a Spanish national museum of cubist artworks, dedicated to Pablo Picasso. The center held a competition for an artwork that will be displayed in front of the facade of the museum building. The artwork is a collection of cubes that are piled up on the ground and is intended to amuse visitors, who will be curious how the shape of the collection of cubes changes when it is seen from the front and the sides.\n\nThe artwork is a collection of cubes with edges of one foot long and is built on a flat ground that is divided into a grid of one foot by one foot squares. Due to some technical reasons, cubes of the artwork must be either put on the ground, fitting into a unit square in the grid, or put on another cube in the way that the bottom face of the upper cube exactly meets the top face of the lower cube. No other way of putting cubes is possible.\n\nYou are a member of the judging committee responsible for selecting one out of a plenty of artwork proposals submitted to the competition. The decision is made primarily based on artistic quality but the cost for installing the artwork is another important factor. Your task is to investigate the installation cost for each proposal. The cost is proportional to the number of cubes, so you have to figure out the minimum number of cubes needed for installation.\n\nEach design proposal of an artwork consists of the front view and the side view (the view seen from the right-hand side), as shown in Figure 1.\n\n<image>\n\n\nFigure 1: An example of an artwork proposal\n\nThe front view (resp., the side view) indicates the maximum heights of piles of cubes for each column line (resp., row line) of the grid.\n\nThere are several ways to install this proposal of artwork, such as the following figures.\n\n<image>\n\n\nIn these figures, the dotted lines on the ground indicate the grid lines. The left figure makes use of 16 cubes, which is not optimal. That is, the artwork can be installed with a fewer number of cubes. Actually, the right one is optimal and only uses 13 cubes. Note that, a single pile of height three in the right figure plays the roles of two such piles in the left one.\n\nNotice that swapping columns of cubes does not change the side view. Similarly, swapping rows does not change the front view. Thus, such swaps do not change the costs of building the artworks.\n\nFor example, consider the artwork proposal given in Figure 2.\n\n<image>\n\n\nFigure 2: Another example of artwork proposal\n\nAn optimal installation of this proposal of artwork can be achieved with 13 cubes, as shown in the following figure, which can be obtained by exchanging the rightmost two columns of the optimal installation of the artwork of Figure 1.\n\n<image>\n\n\n\nInput\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.\n\nw d\nh1 h2 ... hw\nh'1 h'2 ... h'd\n\n\nThe integers w and d separated by a space are the numbers of columns and rows of the grid, respectively. You may assume 1 \u2264 w \u2264 10 and 1 \u2264 d \u2264 10. The integers separated by a space in the second and third lines specify the shape of the artwork. The integers hi (1 \u2264 hi \u2264 20, 1 \u2264 i \u2264 w) in the second line give the front view, i.e., the maximum heights of cubes per each column line, ordered from left to right (seen from the front). The integers hi (1 \u2264 hi \u2264 20, 1 \u2264 i \u2264 d) in the third line give the side view, i.e., the maximum heights of cubes per each row line, ordered from left to right (seen from the right-hand side).\n\nOutput\n\nFor each dataset, output a line containing the minimum number of cubes. The output should not contain any other extra characters.\n\nYou can assume that, for each dataset, there is at least one way to install the artwork.\n\nExample\n\nInput\n\n5 5\n1 2 3 4 5\n1 2 3 4 5\n5 5\n2 5 4 1 3\n4 1 5 3 2\n5 5\n1 2 3 4 5\n3 3 3 4 5\n3 3\n7 7 7\n7 7 7\n3 3\n4 4 4\n4 3 4\n4 3\n4 2 2 4\n4 2 1\n4 4\n2 8 8 8\n2 3 8 3\n10 10\n9 9 9 9 9 9 9 9 9 9\n9 9 9 9 9 9 9 9 9 9\n10 9\n20 1 20 20 20 20 20 18 20 20\n20 20 20 20 7 20 20 20 20\n0 0\n\n\nOutput\n\n15\n15\n21\n21\n15\n13\n32\n90\n18", "output": "from collections import Counter\nwhile True:\n    W, D = map(int, input().split())\n    if not (W | D):\n        break\n    hw = [int(x) for x in input().split()]\n    hd = [int(x) for x in input().split()]\n    print(sum(hw) + sum(hd) - sum(k * v for k, v in (Counter(hw) & Counter(hd)).items()))", "public_tests": {"input": ["5 5\n1 2 3 4 5\n1 2 3 4 5\n5 5\n2 5 4 1 3\n4 1 5 3 2\n5 5\n1 2 3 4 5\n3 3 3 4 5\n3 3\n7 7 7\n7 7 7\n3 3\n4 4 4\n4 3 4\n4 3\n4 2 2 4\n4 2 1\n4 4\n2 8 8 8\n2 3 8 3\n10 10\n9 9 9 9 9 9 9 9 9 9\n9 9 9 9 9 9 9 9 9 9\n10 9\n20 1 20 20 20 20 20 18 20 20\n20 20 20 20 7 20 20 20 20\n0 0"], "output": ["15\n15\n21\n21\n15\n13\n32\n90\n186"]}, "private_tests": {"input": [], "output": []}, "index": 8054}, {"input": "Space Coconut Crab\n\nSpace coconut crab\n\nEnglish text is not available in this practice contest.\n\nKen Marine Blue is a space hunter who travels through the entire galaxy in search of space coconut crabs. The space coconut crab is the largest crustacean in the universe, and it is said that the body length after growth is 400 meters or more, and if you spread your legs, it will reach 1,000 meters or more. Many people have already witnessed the space coconut crab, but none have succeeded in catching it.\n\nThrough a long-term study, Ken uncovered important facts about the ecology of space coconut crabs. Surprisingly, the space coconut crab did the same thing as the latest warp technology called phase transition navigation, and lived back and forth between normal space and hyperspace. Furthermore, it was found that it takes a long time for the space coconut crab to warp out from the hyperspace to the normal space, and that it cannot move to the hyperspace for a while after the warp out.\n\nSo Ken finally decided to catch the space coconut crab. The strategy is as follows. First, we observe the energy of the space coconut crab as it plunges from normal space into hyperspace. When this energy is e, it is known that the coordinates (x, y, z) at which the space coconut crab warps out of hyperspace satisfy the following conditions.\n\n* x, y, z are all non-negative integers.\n* x + y2 + z3 = e.\n* Minimize the value of x + y + z under the above conditions.\n\n\n\nThese conditions alone do not always uniquely determine the coordinates, but it is certain that the coordinates to warp out are on the plane x + y + z = m, where m is the minimum value of x + y + z. Is. Therefore, a barrier of sufficient size is placed on this plane. Then, the space coconut crab will warp out to the place where the barrier is stretched. Space coconut crabs affected by the barrier get stuck. It is a setup to capture it with the weapon breaker, which is a state-of-the-art spacecraft operated by Ken.\n\nThe barrier can only be set once, so it cannot fail. So Ken decided to use a calculator to carry out his mission. Your job is to write a program that finds the plane x + y + z = m to which the barrier should be placed when the energy for the space coconut crab to enter the hyperspace is given. Your program will be accepted when it outputs the correct results for all of the prepared test cases.\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of only one row and contains one positive integer e (e \u2264 1,000,000). This represents the energy when the space coconut crab rushes into hyperspace. The input ends when e = 0, which is not included in the dataset.\n\nOutput\n\nFor each dataset, output the value of m on one line. The output must not contain any other characters.\n\nSample Input\n\n\n1\n2\nFour\n27\n300\n1250\n0\n\n\nOutput for the Sample Input\n\n\n1\n2\n2\n3\n18\n44\n\n\n\n\n\n\nExample\n\nInput\n\n1\n2\n4\n27\n300\n1250\n0\n\n\nOutput\n\n1\n2\n2\n3\n18\n4", "output": "while 1:\n    e=int(input())\n    if e==0:break\n    m,z=10**15,0\n    while z**3<=e:\n        b=e-z**3\n        a=int(b**0.5)\n        m=min(m,b+z-a**2+a)\n        z+=1\n    print(m)", "public_tests": {"input": ["1\n2\n4\n27\n300\n1250\n0"], "output": ["1\n2\n2\n3\n18\n44"]}, "private_tests": {"input": [], "output": []}, "index": 8055}, {"input": "Mr. A and Mr. B live in an N \u00d7 M rectangular grid area. Each square is either a road, a wall, or a house. Since this area is famous for the frequent occurrence of molestation damage due to the complicated and intricate roads, the boundary between this area and the outside is completely surrounded by walls and isolated.\n\nMr. B somehow felt like it, so he decided to go to see Mr. A's house. However, unfortunately, Mr. B has an apparently suspicious face, so if he takes any action that seems to be suspected of being a molester on his way to Mr. A's house, he will be caught immediately. In particular, never walk with your right hand off the wall. Can Mr. B reach Mr. A's house without letting go of his right hand for a moment?\n\nMr. B is always facing up, down, left, or right, and the range that Mr. B's right hand can reach is only four squares, front, diagonally right front, right, and diagonally right back with respect to the direction that Mr. B is facing. Mr. B repeats one of the following actions. However, these cannot be done at the same time.\n\n* If there is no wall in front, go one square.\n* Change the direction you are facing to the right by 90 degrees.\n* Change the direction you are facing to the left by 90 degrees.\n* Change the square that your right hand touches. However, at this time, Mr. B cannot release his right hand, so he must have something in common between the square before the change and the square after the change.\n\nConstraints\n\n* 1 \u2264 N \u2264 50\n* 1 \u2264 M \u2264 50\n* Only one of the characters \"^\", \"v\", \"<\", \">\" always appears in the input.\n* Similarly, only one letter \"G\" always appears in the input.\n* In the initial state, Mr. B's right hand touches the wall on the right from the direction in which Mr. B is facing.\n\nInput\n\nThe input is given in the following format.\n\n\nN M\nS1\nS2\n::\nSN\n\n\nSi (1 \u2264 i \u2264 N) is a string of M characters, each character representing the following.\n\n* \"^\", \"V\", \"<\", \">\" indicate the first position of Mr. B and the direction (up, down, left, right).\n* \".\" Is an empty cell. Mr. B can move on this square.\n* \"#\" Represents a wall. You cannot move on the wall.\n* \"G\" represents the location of Mr. A's house. Mr. B repeats the movement until he reaches Mr. A's house.\n\nOutput\n\nIf you can reach Mr. A's house without releasing your right hand, output the minimum number of different squares that you have passed to reach Mr. A's house. If you cannot reach Mr. A's house, output -1.\n\n", "output": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    n,m = LI()\n    a = ['#'*(m+2)] + ['#' + S() + '#' for _ in range(n)] + ['#'*(m+2)]\n    st = (-1,-1,-1)\n    for i in range(1,n+1):\n        for j in range(m+1):\n            c = a[i][j]\n            if c == '^':\n                st = (i,j,0,1)\n            elif c == 'v':\n                st = (i,j,2,1)\n            elif c == '>':\n                st = (i,j,1,1)\n            elif c == '<':\n                st = (i,j,3,1)\n    v = collections.defaultdict(bool)\n    vs = set()\n    r = -1\n    kb = [[(-1,1), (0,1), (1,1)], [(1,1),(1,0),(1,-1)], [(1,-1),(0,-1),(-1,-1)], [(-1,-1),(-1,0),(-1,1)]]\n    while True:\n        if v[st]:\n            return -1\n        v[st] = True\n        i,j,di,ki = st\n        vs.add((i,j))\n        if a[i][j] == 'G':\n            return len(vs)\n        if ki < 2:\n            if a[i+dd[di][0]][j+dd[di][1]] != '#':\n                r += 1\n                st = (i+dd[di][0], j+dd[di][1], di, ki+1)\n            else:\n                st = (i, j, (di-1)%4, 1)\n        else:\n            dk = (di+1) % 4\n            if a[i+dd[dk][0]][j+dd[dk][1]] == '#':\n                st = (i, j, di, 1)\n            else:\n                st = (i, j, dk, 0)\n\n    return -1\n\n\n\n\nprint(main())\n\n", "public_tests": {"input": ["4 4\n....\n.#.G\n...#\n^#..", "3 3\n...\n.G.\n.>.", "3 3\nG##\n.#.\n.", "3 3\nG##\n.#.\n.>.", "3 3\nG##\n.#.\n.<."], "output": ["8", "-1", "4", "6", "4"]}, "private_tests": {"input": [], "output": []}, "index": 8056}, {"input": "Problem statement\n\nAOR Ika-chan is in a bad mood lately. Apparently, I don't like the ratio of the number of followers to the number of followers of \"Ikatta\". Currently, AOR Ika-chan has $ A $ followers, $ B $ followers, and a ratio of $ A: B $.\n\nTherefore, AOR Ika decided to increase or decrease the number of followers so that the ratio of the number of followers to the number of followers would be an integer ratio that she liked. The integer ratio I like is a ratio that can be expressed so that both values \u200b\u200bincluded in the ratio are integers of $ 1 $ or more and $ N $ or less.\n\nHowever, AOR Ika doesn't want to change the number of followers as much as possible, so I want to make the absolute value of the difference from before the change as small as possible. Create a program that asks at least how many followers you need to change to make AOR Ika feel good.\n\nInput constraints\n\n$ 1 \\ le A, \\ B \\ le 10 ^ {12} $\n$ 1 \\ leq N \\ leq 100 $\n\nsample\n\nSample input 1\n\n\n19 30 3\n\n\nSample output 1\n\n\n1\n\n\nSample input 2\n\n\n3 7 7\n\n\nSample output 2\n\n\n0\n\n\nSample input 3\n\n\n3 7 1\n\n\nSample output 3\n\n\nFour\n\n\nSample input 4\n\n\n102 30 3\n\n\nSample output 4\n\n\n12\n\n\nBy reducing the number of followers by $ 12 $, it becomes $ 90: 30 \\ (= 3: 1) $, and the higher ratio number is $ 3 $ or less.\nAt this time, the amount of change is $ 12 $.\n\nSample input 5\n\n\n3 4 2\n\n\nSample output 5\n\n\n1\n\n\nIf you unfollow one person, it will be $ 2: 4 \\ (= 1: 2) $, and if you follow it, it will be $ 4: 4 \\ (= 1: 1) $. In both cases, the absolute value of increase / decrease is $ 1 $, which is the answer.\n\nSample input 6\n\n\n1 100 2\n\n\nSample output 6\n\n\n49\n\n\nPlease note that at least $ 1 $ people must be following.\n\n\n\ninput\n\n$ A \\ B \\ N $\n\noutput\n\nOutput the minimum absolute value of the amount of change in $ A $, which can be an integer ratio you like.\n\nExample\n\nInput\n\n19 30 3\n\n\nOutput\n\n", "output": "a, b, n = map(int, input().split())\nscore = abs(a - b)\nfor x in range(1, n + 1):\n  for y in range(1, n + 1):\n    if b * x % y == 0:\n      new_a = b * x // y\n      score = min(score, abs(a - new_a))\nprint(score)\n", "public_tests": {"input": ["19 30 3"], "output": ["1"]}, "private_tests": {"input": [], "output": []}, "index": 8057}, {"input": "Find the area of intersection between a circle $c$ and a polygon $g$. The center coordinate of the circle is ($0, 0$).\n\nThe polygon $g$ is represented by a sequence of points $p_1$, $p_2$,..., $p_n$ where line segments connecting $p_i$ and $p_{i+1}$ ($1 \\leq i \\leq n\u22121$) are sides of the polygon. The line segment connecting $p_n$ and $p_1$ is also a side of the polygon.\n\nNote that the polygon is not necessarily convex.\n\nConstraints\n\n* $3 \\leq n \\leq 100$\n* $1 \\leq r \\leq 100$\n* $-100 \\leq x_i, y_i \\leq 100$\n\nInput\n\nThe input is given in the following format.\n\n$n$ $r$\n$x_1$ $y_1$\n$x_2$ $y_2$\n:\n$x_n$ $y_n$\n\n\nIn the first line, an integer n representing the number of points in the polygon is given. The coordinate of a point $p_i$ is given by two integers $x_i$ and $y_i$. The coordinates of the points are given in the order of counter-clockwise visit of them. All input values are given in integers.\n\nOutput\n\nPrint the area of intersection in a line. The output values should be in a decimal fraction with an error less than 0.00001.\n\n", "output": "#!/usr/bin/env python3\n# CGL_7_H: Circles - Intersection of a Circle and a Polygon\n\nfrom math import acos, hypot, isclose, sqrt\n\n\ndef intersection(circle, polygon):\n    x, y, r = circle\n    area = 0.0\n\n    for p1, p2 in zip(polygon, polygon[1:]+[polygon[0]]):\n        ps = seg_intersection(circle, (p1, p2))\n        for pp1, pp2 in zip([p1] + ps, ps + [p2]):\n            c = cross(pp1, pp2)\n            if c == 0:\n                continue\n            d1 = hypot(*pp1)\n            d2 = hypot(*pp2)\n            if le(d1, r) and le(d2, r):\n                area += c / 2\n            else:\n                t = acos(dot(pp1, pp2) / (d1 * d2))\n                sign = c // abs(c)\n                area += sign * r * r * t / 2\n\n    return area\n\n\ndef cross(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return x1*y2 - x2*y1\n\n\ndef dot(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return x1*x2 + y1*y2\n\n\ndef seg_intersection(circle, seg):\n    x0, y0, r = circle\n    p1, p2 = seg\n    x1, y1 = p1\n    x2, y2 = p2\n\n    p1p2 = (x2-x1)**2 + (y2-y1)**2\n    op1 = (x1-x0)**2 + (y1-y0)**2\n    rr = r*r\n    dp = dot((x1-x0, y1-y0), (x2-x1, y2-y1))\n\n    d = dp*dp - p1p2*(op1 - rr)\n    ps = []\n\n    if isclose(d, 0.0, abs_tol=1e-9):\n        t = -dp / p1p2\n        if ge(t, 0.0) and le(t, 1.0):\n            ps.append((x1 + t*(x2-x1), y1 + t*(y2-y1)))\n    elif d > 0.0:\n        t1 = (-dp-sqrt(d)) / p1p2\n        if ge(t1, 0.0) and le(t1, 1.0):\n            ps.append((x1 + t1*(x2-x1), y1 + t1*(y2-y1)))\n        t2 = (-dp+sqrt(d)) / p1p2\n        if ge(t2, 0.0) and le(t2, 1.0):\n            ps.append((x1 + t2*(x2-x1), y1 + t2*(y2-y1)))\n\n    # assert all(isclose(r, hypot(x, y)) for x, y in ps)\n    return ps\n\n\ndef le(f1, f2):\n    return f1 < f2 or isclose(f1, f2, abs_tol=1e-9)\n\n\ndef ge(f1, f2):\n    return f1 > f2 or isclose(f1, f2, abs_tol=1e-9)\n\n\ndef eliminate_minus_zero(f):\n    if isclose(f, 0.0, abs_tol=1e-9):\n        return 0.0\n    else:\n        return f\n\n\ndef run():\n    n, r = [int(i) for i in input().split()]\n    ps = []\n\n    for _ in range(n):\n        x, y = [int(i) for i in input().split()]\n        ps.append((x, y))\n\n    print(\"{:.10f}\".format(eliminate_minus_zero(intersection((0, 0, r), ps))))\n\n\nif __name__ == '__main__':\n    run()\n\n", "public_tests": {"input": ["4 5\n0 0\n-3 -6\n1 -3\n5 -4", "3 5\n1 1\n4 1\n5 5"], "output": ["11.787686807576", "4.639858417607"]}, "private_tests": {"input": [], "output": []}, "index": 8058}, {"input": "For a dictionary $M$ that stores elements formed by a pair of a string key and an integer value, perform a sequence of the following operations. Note that each key in $M$ must be unique.\n\n* insert($key$, $x$): Insert an element formed by a pair of $key$ and $x$ to $M$.\n* get($key$): Print the value with the specified $key$. Print 0 if there is no such element.\n* delete($key$): Delete the element with the specified $key$.\n\nConstraints\n\n* $1 \\leq q \\leq 200,000$\n* $1 \\leq x \\leq 1,000,000,000$\n* $1 \\leq $ length of $key$ $ \\leq 20$\n* $key$ consits of lower case letters\n\nInput\n\nThe input is given in the following format.\n\n\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n\n\nEach query $query_i$ is given by\n\n\n0 $key$ $x$\n\n\nor\n\n\n1 $key$\n\n\nor\n\n\n2 $key$\n\n\nwhere the first digits 0, 1 and 2 represent insert, get and delete operations respectively.\n\nOutput\n\nFor each get operation, print an integer in a line.\n\nExample\n\nInput\n\n8\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n2 red\n1 black\n1 red\n\n\nOutput\n\n1\n4\n0\n", "output": "d = {}\nfor _ in range(int(input())):\n\ta = list(input().split())\n\tx = a[1]\n\ty = a[0]\n\tif y == \"0\":\n\t\td[x] = a[2]\n\telif y == \"2\":\n\t\td[x] = 0\n\telse:\n\t\tprint(d[x] if x in d else 0)\n", "public_tests": {"input": ["8\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n2 red\n1 black\n1 red"], "output": ["1\n4\n0\n0"]}, "private_tests": {"input": [], "output": []}, "index": 8059}, {"input": "Since Sonya has just learned the basics of matrices, she decided to play with them a little bit.\n\nSonya imagined a new type of matrices that she called rhombic matrices. These matrices have exactly one zero, while all other cells have the Manhattan distance to the cell containing the zero. The cells with equal numbers have the form of a rhombus, that is why Sonya called this type so.\n\nThe Manhattan distance between two cells (x_1, y_1) and (x_2, y_2) is defined as |x_1 - x_2| + |y_1 - y_2|. For example, the Manhattan distance between the cells (5, 2) and (7, 1) equals to |5-7|+|2-1|=3.\n\n<image> Example of a rhombic matrix.\n\nNote that rhombic matrices are uniquely defined by n, m, and the coordinates of the cell containing the zero.\n\nShe drew a n\u00d7 m rhombic matrix. She believes that you can not recreate the matrix if she gives you only the elements of this matrix in some arbitrary order (i.e., the sequence of n\u22c5 m numbers). Note that Sonya will not give you n and m, so only the sequence of numbers in this matrix will be at your disposal.\n\nWrite a program that finds such an n\u00d7 m rhombic matrix whose elements are the same as the elements in the sequence in some order.\n\nInput\n\nThe first line contains a single integer t (1\u2264 t\u2264 10^6) \u2014 the number of cells in the matrix.\n\nThe second line contains t integers a_1, a_2, \u2026, a_t (0\u2264 a_i< t) \u2014 the values in the cells in arbitrary order.\n\nOutput\n\nIn the first line, print two positive integers n and m (n \u00d7 m = t) \u2014 the size of the matrix.\n\nIn the second line, print two integers x and y (1\u2264 x\u2264 n, 1\u2264 y\u2264 m) \u2014 the row number and the column number where the cell with 0 is located.\n\nIf there are multiple possible answers, print any of them. If there is no solution, print the single integer -1.\n\n", "output": "def get(n,m,a,b,t):\n    freq=[0]*(t+1)\n    for i in range(n):\n        for j in range(m):\n            val=abs(i-a)+abs(j-b)\n            freq[val]+=1\n    return freq\nt=int(input())\na=list(map(int,input().split()))\nmx=max(a)\nf=[0]*(t+1)\nfor i in a:\n    f[i]+=1\n\nb=1\nfor i in range(1,mx+1):\n    if f[i]!=4*i:\n        b=i\n        break\nn=1\na=-1\nx=0\ny=0\nmila=False\nwhile n*n<=t:\n    if t%n==0:\n        m=t//n\n        a=n+m-mx-b\n        x,y=n,m\n        if  a>0 and a<=n and b>0 and b<=m and f==get(n,m,a-1,b-1,t):\n            mila=True\n            break\n        if  a>0 and a<=m and b>0 and b<=n and f==get(n,m,b-1,a-1,t):\n            mila=True\n            a,b=b,a\n            break\n    n+=1\nif not mila:\n    print(-1)\nelse:\n    print(x,y)\n    print(a,b)", "public_tests": {"input": ["20\n1 0 2 3 5 3 2 1 3 2 3 1 4 2 1 4 2 3 2 4\n", "6\n2 1 0 2 1 2\n", "18\n2 2 3 2 4 3 3 3 0 2 4 2 1 3 2 1 1 1\n"], "output": ["4 5\n2 2\n", "-1\n", "3 6\n2 3\n"]}, "private_tests": {"input": ["1\n0\n", "6\n0 0 0 0 0 0\n", "7\n0 1 2 3 4 2 6\n", "4\n0 0 0 0\n"], "output": ["1 1\n1 1\n", "-1\n", "-1\n", "-1\n"]}, "index": 8060}, {"input": "Let's consider a simplified version of order book of some stock. The order book is a list of orders (offers) from people that want to buy or sell one unit of the stock, each order is described by direction (BUY or SELL) and price.\n\nAt every moment of time, every SELL offer has higher price than every BUY offer. \n\nIn this problem no two ever existed orders will have the same price.\n\nThe lowest-price SELL order and the highest-price BUY order are called the best offers, marked with black frames on the picture below.\n\n<image> The presented order book says that someone wants to sell the product at price 12 and it's the best SELL offer because the other two have higher prices. The best BUY offer has price 10.\n\nThere are two possible actions in this orderbook: \n\n  1. Somebody adds a new order of some direction with some price.\n  2. Somebody accepts the best possible SELL or BUY offer (makes a deal). It's impossible to accept not the best SELL or BUY offer (to make a deal at worse price). After someone accepts the offer, it is removed from the orderbook forever.\n\n\n\nIt is allowed to add new BUY order only with prices less than the best SELL offer (if you want to buy stock for higher price, then instead of adding an order you should accept the best SELL offer). Similarly, one couldn't add a new SELL order with price less or equal to the best BUY offer. For example, you can't add a new offer \"SELL 20\" if there is already an offer \"BUY 20\" or \"BUY 25\" \u2014 in this case you just accept the best BUY offer.\n\nYou have a damaged order book log (in the beginning the are no orders in book). Every action has one of the two types:\n\n  1. \"ADD p\" denotes adding a new order with price p and unknown direction. The order must not contradict with orders still not removed from the order book. \n  2. \"ACCEPT p\" denotes accepting an existing best offer with price p and unknown direction.\n\n\n\nThe directions of all actions are lost. Information from the log isn't always enough to determine these directions. Count the number of ways to correctly restore all ADD action directions so that all the described conditions are satisfied at any moment. Since the answer could be large, output it modulo 10^9 + 7. If it is impossible to correctly restore directions, then output 0.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 363 304) \u2014 the number of actions in the log.\n\nEach of the next n lines contains a string \"ACCEPT\" or \"ADD\" and an integer p (1 \u2264 p \u2264 308 983 066), describing an action type and price. \n\nAll ADD actions have different prices. For ACCEPT action it is guaranteed that the order with the same price has already been added but has not been accepted yet.\n\nOutput\n\nOutput the number of ways to restore directions of ADD actions modulo 10^9 + 7.\n\n", "output": "import heapq\n\nn = int(input())\n\nans = 1\n\nmod = 10**9 + 7\n\nbuy, undefined, sell = [], [], []\n\nfor i in range(n):\n    cmd, str_p = input().split()\n    p = int(str_p)\n\n    if cmd == 'ADD':\n        if buy and p < -buy[0]:\n            heapq.heappush(buy, -p)\n        elif sell and p > sell[0]:\n            heapq.heappush(sell, p)\n        else:\n            undefined.append(p)\n    else:\n        if (buy and p < -buy[0]) or (sell and p > sell[0]):\n            ans = 0\n            break\n        elif buy and p == -buy[0]:\n            heapq.heappop(buy)\n        elif sell and p == sell[0]:\n            heapq.heappop(sell)\n        else:\n            ans = (ans << 1) % mod\n        for x in undefined:\n            if x < p:\n                heapq.heappush(buy, -x)\n            elif x > p:\n                heapq.heappush(sell, x)\n        undefined = []\n\nans = ans * (len(undefined) + 1) % mod\n\nprint(ans)", "public_tests": {"input": ["6\nADD 1\nACCEPT 1\nADD 2\nACCEPT 2\nADD 3\nACCEPT 3\n", "4\nADD 1\nADD 2\nADD 3\nACCEPT 2\n", "7\nADD 1\nADD 2\nADD 3\nADD 4\nADD 5\nACCEPT 3\nACCEPT 5\n"], "output": ["8", "2", "0"]}, "private_tests": {"input": ["6\nADD 10\nADD 7\nADD 13\nADD 15\nADD 12\nACCEPT 10\n", "8\nADD 10\nADD 7\nADD 13\nADD 15\nADD 12\nACCEPT 10\nADD 11\nADD 8\n", "12\nADD 85752704\nACCEPT 85752704\nADD 82888551\nADD 31364670\nACCEPT 82888551\nADD 95416363\nADD 27575237\nADD 47306380\nACCEPT 31364670\nACCEPT 47306380\nADD 22352020\nADD 32836602\n", "5\nADD 187264133\nACCEPT 187264133\nADD 182071021\nACCEPT 182071021\nADD 291739970\n", "15\nADD 14944938\nADD 40032655\nACCEPT 14944938\nACCEPT 40032655\nADD 79373162\nACCEPT 79373162\nADD 55424250\nACCEPT 55424250\nADD 67468892\nACCEPT 67468892\nADD 51815959\nADD 13976252\nADD 2040654\nADD 74300637\nACCEPT 51815959\n", "1\nADD 308983066\n"], "output": ["2", "6", "8", "8", "32", "2"]}, "index": 8061}, {"input": "Vova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.\n\nThe current state of the wall can be respresented by a sequence a of n integers, with a_i being the height of the i-th part of the wall.\n\nVova can only use 2 \u00d7 1 bricks to put in the wall (he has infinite supply of them, however).\n\nVova can put bricks only horizontally on the neighbouring parts of the wall of equal height. It means that if for some i the current height of part i is the same as for part i + 1, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part 1 of the wall or to the right of part n of it).\n\nNote that Vova can't put bricks vertically.\n\nVova is a perfectionist, so he considers the wall completed when:\n\n  * all parts of the wall has the same height; \n  * the wall has no empty spaces inside it. \n\n\n\nCan Vova complete the wall using any amount of bricks (possibly zero)?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of parts in the wall.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the initial heights of the parts of the wall.\n\nOutput\n\nPrint \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\n\nPrint \"NO\" otherwise.\n\n", "output": "i,p=input,print;n,m,q=int(i()),0,[];f=q.append\nfor a in map(int,i().split()):\n if q:\n  if a==q[-1]:q.pop()\n  elif a>q[-1]:f(a);break\n  else:f(a)\n else:f(a)\n m=max(m,a)\np('YES'if len(q)==0 or len(q)==1 and q[0]==m else'NO')", "public_tests": {"input": ["2\n10 10\n", "3\n4 5 3\n", "5\n2 1 1 2 5\n"], "output": ["YES\n", "NO\n", "YES\n"]}, "private_tests": {"input": ["1\n1\n", "3\n2 2 1\n", "13\n5 2 2 1 1 2 5 2 1 1 2 2 5\n", "7\n2 2 2 2 2 2 1\n", "4\n4 3 2 1\n", "7\n4 1 1 2 4 3 3\n", "2\n1 2\n", "5\n4 3 3 4 1\n", "20\n10 5 2 3 5 7 7 9 4 9 9 4 9 7 7 5 3 2 5 10\n", "6\n3 2 3 3 2 3\n", "4\n10 10 40 60\n", "10\n1 9 7 6 2 4 7 8 1 3\n", "5\n1 2 1 2 5\n", "5\n1 6 1 4 4\n", "5\n5 5 1 1 2\n", "4\n3 3 3 4\n", "7\n1 1 2 2 3 3 1\n", "4\n1 2 2 1\n", "8\n9 7 6 5 5 6 7 8\n", "5\n3 2 2 4 5\n", "3\n10 10 9\n", "7\n9 7 6 5 5 6 7\n", "5\n1 1 2 3 3\n", "6\n1 1 1 1 2 1\n", "4\n3 1 2 4\n", "5\n1 1 2 2 1\n", "4\n2 2 2 3\n", "5\n10 10 9 8 8\n", "4\n5 3 3 3\n", "10\n5 2 2 6 9 7 8 1 5 5\n", "3\n5 5 4\n", "14\n7 7 7 4 3 3 4 5 4 4 5 7 7 7\n", "5\n3 3 1 1 2\n", "3\n5 5 2\n", "9\n5 4 3 3 2 2 1 1 5\n", "5\n1 2 2 1 1\n", "10\n5 3 1 2 2 1 3 5 1 1\n", "5\n1 2 2 1 5\n", "7\n4 1 1 2 3 3 4\n", "5\n2 2 2 2 1\n", "5\n1 1 6 4 4\n", "5\n10 9 5 3 7\n", "10\n10 9 8 7 7 7 8 9 10 11\n", "5\n5 4 4 4 5\n", "5\n3 2 2 3 1\n", "5\n2 1 1 1 2\n", "4\n2 10 1 1\n", "4\n1 1 3 4\n", "5\n5 5 1 1 3\n", "8\n2 2 10 6 4 2 2 4\n", "4\n1 1 3 5\n", "4\n2 1 4 5\n", "3\n5 5 3\n", "5\n1 1 4 4 6\n", "4\n4 4 4 3\n", "2\n3 2\n"], "output": ["YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n"]}, "index": 8062}, {"input": "Thanos wants to destroy the avengers base, but he needs to destroy the avengers along with their base.\n\nLet we represent their base with an array, where each position can be occupied by many avengers, but one avenger can occupy only one position. Length of their base is a perfect power of 2. Thanos wants to destroy the base using minimum power. He starts with the whole base and in one step he can do either of following: \n\n  * if the current length is at least 2, divide the base into 2 equal halves and destroy them separately, or \n  * burn the current base. If it contains no avenger in it, it takes A amount of power, otherwise it takes his B \u22c5 n_a \u22c5 l amount of power, where n_a is the number of avengers and l is the length of the current base.\n\nOutput the minimum power needed by Thanos to destroy the avengers' base.\n\nInput\n\nThe first line contains four integers n, k, A and B (1 \u2264 n \u2264 30, 1 \u2264 k \u2264 10^5, 1 \u2264 A,B \u2264 10^4), where 2^n is the length of the base, k is the number of avengers and A and B are the constants explained in the question.\n\nThe second line contains k integers a_{1}, a_{2}, a_{3}, \u2026, a_{k} (1 \u2264 a_{i} \u2264 2^n), where a_{i} represents the position of avenger in the base.\n\nOutput\n\nOutput one integer \u2014 the minimum power needed to destroy the avengers base.\n\n", "output": "from bisect import bisect,bisect_left\ndef rec(i,j):\n    x=bisect(ar,j)-bisect_left(ar,i)\n    if x==0:\n        return a\n    if i==j:\n        return b*x\n    m=(i+j)>>1\n    return min(b*(j-i+1)*x,rec(i,m)+rec(m+1,j))    \n    \nn,k,a,b = map(int,input().split())\nar=list(map(int,input().split()))\nar.sort()\nprint(rec(1,2**n))", "public_tests": {"input": ["3 2 1 2\n1 7\n", "2 2 1 2\n1 3\n"], "output": ["8", "6"]}, "private_tests": {"input": ["3 2 5 1\n7 8\n", "3 3 10000 5\n1 4 5\n", "5 3 10000 3241\n5 12 2\n", "5 1 34 241\n22\n", "3 3 5 10000\n1 4 5\n", "3 2 7 1\n7 8\n", "5 3 3521 10000\n5 12 2\n", "1 1 5 6\n1\n"], "output": ["12", "40", "58892", "411", "30020", "15", "58168", "11"]}, "index": 8063}, {"input": "Polycarp plays \"Game 23\". Initially he has a number n and his goal is to transform it to m. In one move, he can multiply n by 2 or multiply n by 3. He can perform any number of moves.\n\nPrint the number of moves needed to transform n to m. Print -1 if it is impossible to do so.\n\nIt is easy to prove that any way to transform n to m contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\n\nInput\n\nThe only line of the input contains two integers n and m (1 \u2264 n \u2264 m \u2264 5\u22c510^8).\n\nOutput\n\nPrint the number of moves to transform n to m, or -1 if there is no solution.\n\n", "output": "n,m=map(int,input().split())\nx,r=0,m/n\nfor i in[2,3]: \n   while r%i==0:r/=i;x+=1\nprint(x if r==1 else -1)", "public_tests": {"input": ["42 42\n", "48 72\n", "120 51840\n"], "output": ["0\n", "-1\n", "7\n"]}, "private_tests": {"input": ["1 223092870\n", "18782 37565\n", "1001 1001\n", "5 7\n", "50 64800\n", "10 24\n", "139999978 419999934\n", "12 26\n", "10001 10001\n", "1 7\n", "1 512\n", "6 20\n", "1 2\n", "300000007 300000007\n", "6 21\n", "4 9\n", "203 203\n", "405691171 405691171\n", "5 11\n", "1 1\n", "505 505\n", "1 5\n", "3 83\n", "2 5\n", "201 201\n", "1 22\n", "101 101\n", "1 362797056\n", "23 97\n", "202 202\n", "5 16\n", "403 403\n", "1 50331648\n", "2 18\n", "3024 94058496\n", "4 16\n", "6 29\n", "404 404\n", "2 22\n", "9 24\n", "11 67\n", "1953125 500000000\n", "1 499999993\n", "1 4\n", "3 10\n", "64 243\n", "5 12\n", "1000 2001\n", "1111 2223\n", "1 2048\n", "1234 2469\n", "10 61\n", "7 15\n", "289777775 341477104\n", "120 1081\n", "2 13\n", "2 7\n", "40 123\n", "3 13\n", "2 19\n", "303 303\n", "1000 1000\n", "120 51841\n", "2 6\n", "3 9\n", "100000000 100000001\n", "405 405\n", "2 9\n", "1 6\n", "4000 8001\n", "1 491280007\n", "1 500000000\n", "1 262144\n", "1 16777216\n"], "output": ["-1\n", "-1\n", "0\n", "-1\n", "8\n", "-1\n", "1\n", "-1\n", "0\n", "-1\n", "9\n", "-1\n", "1\n", "0\n", "-1\n", "-1\n", "0\n", "0\n", "-1\n", "0\n", "0\n", "-1\n", "-1\n", "-1\n", "0\n", "-1\n", "0\n", "22\n", "-1\n", "0\n", "-1\n", "0\n", "25\n", "2\n", "12\n", "2\n", "-1\n", "0\n", "-1\n", "-1\n", "-1\n", "8\n", "-1\n", "2\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "11\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "0\n", "0\n", "-1\n", "1\n", "1\n", "-1\n", "0\n", "-1\n", "2\n", "-1\n", "-1\n", "-1\n", "18\n", "24\n"]}, "index": 8064}, {"input": "You are given a binary string s (recall that a string is binary if each character is either 0 or 1).\n\nLet f(t) be the decimal representation of integer t written in binary form (possibly with leading zeroes). For example f(011) = 3, f(00101) = 5, f(00001) = 1, f(10) = 2, f(000) = 0 and f(000100) = 4.\n\nThe substring s_{l}, s_{l+1}, ... , s_{r} is good if r - l + 1 = f(s_l ... s_r).\n\nFor example string s = 1011 has 5 good substrings: s_1 ... s_1 = 1, s_3 ... s_3 = 1, s_4 ... s_4 = 1, s_1 ... s_2 = 10 and s_2 ... s_4 = 011. \n\nYour task is to calculate the number of good substrings of string s.\n\nYou have to answer t independent queries.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of queries.\n\nThe only line of each query contains string s (1 \u2264 |s| \u2264 2 \u22c5 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that \u2211_{i=1}^{t} |s_i| \u2264 2 \u22c5 10^5.\n\nOutput\n\nFor each query print one integer \u2014 the number of good substrings of string s.\n\nExample\n\nInput\n\n\n4\n0110\n0101\n00001000\n0001000\n\n\nOutput\n\n\n4\n3\n4\n", "output": "for _ in range(int(input())):\n\ts=input()\n\tn=len(s)\n\tz,ans=0,0\n\tfor i in range(n):\n\t\tif s[i]=='0':\n\t\t\tz+=1\n\t\telse:\n\t\t\tfor j in range(1,n+1):\n\t\t\t\tif i+j>n:break\n\t\t\t\tx=int(s[i:i+j],2)\n\t\t\t\tif z+j>=x:ans+=1\n\t\t\t\telse:break\n\t\t\tz=0\n\tprint(ans)", "public_tests": {"input": ["4\n0110\n0101\n00001000\n0001000\n"], "output": ["4\n3\n4\n3\n"]}, "private_tests": {"input": [], "output": []}, "index": 8065}, {"input": "Several days ago you bought a new house and now you are planning to start a renovation. Since winters in your region can be very cold you need to decide how to heat rooms in your house.\n\nYour house has n rooms. In the i-th room you can install at most c_i heating radiators. Each radiator can have several sections, but the cost of the radiator with k sections is equal to k^2 burles.\n\nSince rooms can have different sizes, you calculated that you need at least sum_i sections in total in the i-th room. \n\nFor each room calculate the minimum cost to install at most c_i radiators with total number of sections not less than sum_i.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 1000) \u2014 the number of rooms.\n\nEach of the next n lines contains the description of some room. The i-th line contains two integers c_i and sum_i (1 \u2264 c_i, sum_i \u2264 10^4) \u2014 the maximum number of radiators and the minimum total number of sections in the i-th room, respectively.\n\nOutput\n\nFor each room print one integer \u2014 the minimum possible cost to install at most c_i radiators with total number of sections not less than sum_i.\n\nExample\n\nInput\n\n\n4\n1 10000\n10000 1\n2 6\n4 6\n\n\nOutput\n\n\n100000000\n1\n18\n10\n\nNote\n\nIn the first room, you can install only one radiator, so it's optimal to use the radiator with sum_1 sections. The cost of the radiator is equal to (10^4)^2 = 10^8.\n\nIn the second room, you can install up to 10^4 radiators, but since you need only one section in total, it's optimal to buy one radiator with one section.\n\nIn the third room, there 7 variants to install radiators: [6, 0], [5, 1], [4, 2], [3, 3], [2, 4], [1, 5], [0, 6]. The optimal variant is [3, 3] and it costs 3^2+ 3^2 = 18", "output": "for _ in[0]*int(input()):c,s=map(int,input().split());d=s//c;print(c*d*d+s%c*(2*d+1))", "public_tests": {"input": ["4\n1 10000\n10000 1\n2 6\n4 6\n"], "output": ["100000000\n1\n18\n10\n"]}, "private_tests": {"input": ["69\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n2 6\n"], "output": ["18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n18\n"]}, "index": 8066}, {"input": "This is the easy version of this problem. The only difference is the constraint on k \u2014 the number of gifts in the offer. In this version: k=2.\n\nVasya came to the store to buy goods for his friends for the New Year. It turned out that he was very lucky \u2014 today the offer \"k of goods for the price of one\" is held in store. Remember, that in this problem k=2.\n\nUsing this offer, Vasya can buy exactly k of any goods, paying only for the most expensive of them. Vasya decided to take this opportunity and buy as many goods as possible for his friends with the money he has.\n\nMore formally, for each good, its price is determined by a_i \u2014 the number of coins it costs. Initially, Vasya has p coins. He wants to buy the maximum number of goods. Vasya can perform one of the following operations as many times as necessary:\n\n  * Vasya can buy one good with the index i if he currently has enough coins (i.e p \u2265 a_i). After buying this good, the number of Vasya's coins will decrease by a_i, (i.e it becomes p := p - a_i). \n  * Vasya can buy a good with the index i, and also choose exactly k-1 goods, the price of which does not exceed a_i, if he currently has enough coins (i.e p \u2265 a_i). Thus, he buys all these k goods, and his number of coins decreases by a_i (i.e it becomes p := p - a_i). \n\n\n\nPlease note that each good can be bought no more than once.\n\nFor example, if the store now has n=5 goods worth a_1=2, a_2=4, a_3=3, a_4=5, a_5=7, respectively, k=2, and Vasya has 6 coins, then he can buy 3 goods. A good with the index 1 will be bought by Vasya without using the offer and he will pay 2 coins. Goods with the indices 2 and 3 Vasya will buy using the offer and he will pay 4 coins. It can be proved that Vasya can not buy more goods with six coins.\n\nHelp Vasya to find out the maximum number of goods he can buy.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the test.\n\nThe next lines contain a description of t test cases. \n\nThe first line of each test case contains three integers n, p, k (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 p \u2264 2\u22c510^9, k=2) \u2014 the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them.\n\nThe second line of each test case contains n integers a_i (1 \u2264 a_i \u2264 10^4) \u2014 the prices of goods.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 2 \u22c5 10^5. It is guaranteed that in this version of the problem k=2 for all test cases.\n\nOutput\n\nFor each test case in a separate line print one integer m \u2014 the maximum number of goods that Vasya can buy.\n\nExample\n\nInput\n\n\n6\n5 6 2\n2 4 3 5 7\n5 11 2\n2 4 3 5 7\n2 10000 2\n10000 10000\n2 9999 2\n10000 10000\n5 13 2\n8 2 8 2 5\n3 18 2\n1 2 3\n\n\nOutput\n\n\n3\n4\n2\n0\n4\n", "output": "R=lambda:map(int,input().split())\nt,=R()\nfor _ in[0]*t:\n n,p,k=R();a=[0]+sorted(R());r=0\n for i in(0,1):\n  s=m=0\n  while i<n+1and s+a[i]<=p:m=i;s+=a[i];i+=k\n  r=max(r,m)\n print(r)", "public_tests": {"input": ["6\n5 6 2\n2 4 3 5 7\n5 11 2\n2 4 3 5 7\n2 10000 2\n10000 10000\n2 9999 2\n10000 10000\n5 13 2\n8 2 8 2 5\n3 18 2\n1 2 3\n"], "output": ["3\n4\n2\n0\n4\n3\n"]}, "private_tests": {"input": ["8\n5 6 2\n2 4 3 5 7\n5 11 2\n2 4 3 5 7\n3 2 3\n4 2 6\n5 2 3\n10 1 3 9 2\n2 10000 2\n10000 10000\n2 9999 2\n10000 10000\n4 6 4\n3 2 3 2\n5 5 3\n1 2 2 1 2\n", "2\n2 1 2\n1 1\n2 2000000000 2\n1 1\n"], "output": ["3\n4\n1\n1\n2\n0\n4\n5\n", "2\n2\n"]}, "index": 8067}, {"input": "Alicia has an array, a_1, a_2, \u2026, a_n, of non-negative integers. For each 1 \u2264 i \u2264 n, she has found a non-negative integer x_i = max(0, a_1, \u2026, a_{i-1}). Note that for i=1, x_i = 0.\n\nFor example, if Alicia had the array a = \\{0, 1, 2, 0, 3\\}, then x = \\{0, 0, 1, 2, 2\\}.\n\nThen, she calculated an array, b_1, b_2, \u2026, b_n: b_i = a_i - x_i.\n\nFor example, if Alicia had the array a = \\{0, 1, 2, 0, 3\\}, b = \\{0-0, 1-0, 2-1, 0-2, 3-2\\} = \\{0, 1, 1, -2, 1\\}.\n\nAlicia gives you the values b_1, b_2, \u2026, b_n and asks you to restore the values a_1, a_2, \u2026, a_n. Can you help her solve the problem?\n\nInput\n\nThe first line contains one integer n (3 \u2264 n \u2264 200 000) \u2013 the number of elements in Alicia's array.\n\nThe next line contains n integers, b_1, b_2, \u2026, b_n (-10^9 \u2264 b_i \u2264 10^9).\n\nIt is guaranteed that for the given array b there is a solution a_1, a_2, \u2026, a_n, for all elements of which the following is true: 0 \u2264 a_i \u2264 10^9.\n\nOutput\n\nPrint n integers, a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9), such that if you calculate x according to the statement, b_1 will be equal to a_1 - x_1, b_2 will be equal to a_2 - x_2, ..., and b_n will be equal to a_n - x_n.\n\nIt is guaranteed that there exists at least one solution for the given tests. It can be shown that the solution is unique.\n\n", "output": "input()\nm=0\nfor x in map(int,input().split()):print(x+m);m+=max(0,x)", "public_tests": {"input": ["3\n1000 999999000 -1000000000\n", "5\n2 1 2 2 3\n", "5\n0 1 1 -2 1\n"], "output": ["1000 1000000000 0\n", "2 3 5 7 10\n", "0 1 2 0 3\n"]}, "private_tests": {"input": ["35\n15 13 -19 -7 -28 -16 4 -10 2 -23 -6 -5 -26 -27 -24 -27 -22 1 -32 -19 -16 -15 -29 -26 -25 -17 -11 -20 -2 -11 -20 -30 -1 -7 -27\n", "3\n0 0 0\n", "3\n8 -1 0\n", "10\n10 555 394 -927 -482 18 -196 -464 -180 -98\n"], "output": ["15 28 9 21 0 12 32 22 34 11 28 29 8 7 10 7 12 35 3 16 19 20 6 9 10 18 24 15 33 24 15 5 34 28 8\n", "0 0 0\n", "8 7 8\n", "10 565 959 32 477 977 781 513 797 879\n"]}, "index": 8068}, {"input": "You are given a special jigsaw puzzle consisting of n\u22c5 m identical pieces. Every piece has three tabs and one blank, as pictured below.\n\n<image>\n\nThe jigsaw puzzle is considered solved if the following conditions hold:\n\n  1. The pieces are arranged into a grid with n rows and m columns. \n  2. For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. \n\n\n\nThrough rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.\n\nInput\n\nThe test consists of multiple test cases. The first line contains a single integer t (1\u2264 t\u2264 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nEach test case contains two integers n and m (1 \u2264 n,m \u2264 10^5).\n\nOutput\n\nFor each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n3\n1 3\n100000 100000\n2 2\n\n\nOutput\n\n\nYES\nNO\nYES\n\nNote\n\nFor the first test case, this is an example solution: \n\n<image>\n\nFor the second test case, we can show that no solution exists.\n\nFor the third test case, this is an example solution:\n\n<image", "output": "exec(int(input())*\"n,m=map(int,input().split());print('YNEOS'[n+m<n*m::2]);\")", "public_tests": {"input": ["3\n1 3\n100000 100000\n2 2\n"], "output": ["YES\nNO\nYES\n"]}, "private_tests": {"input": [], "output": []}, "index": 8069}, {"input": "There are n computers in the company network. They are numbered from 1 to n.\n\nFor each pair of two computers 1 \u2264 i < j \u2264 n you know the value a_{i,j}: the difficulty of sending data between computers i and j. All values a_{i,j} for i<j are different.\n\nYou want to separate all computers into k sets A_1, A_2, \u2026, A_k, such that the following conditions are satisfied: \n\n  * for each computer 1 \u2264 i \u2264 n there is exactly one set A_j, such that i \u2208 A_j; \n  * for each two pairs of computers (s, f) and (x, y) (s \u2260 f, x \u2260 y), such that s, f, x are from the same set but x and y are from different sets, a_{s,f} < a_{x,y}. \n\n\n\nFor each 1 \u2264 k \u2264 n find the number of ways to divide computers into k groups, such that all required conditions are satisfied. These values can be large, so you need to find them by modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1500): the number of computers.\n\nThe i-th of the next n lines contains n integers a_{i,1}, a_{i,2}, \u2026, a_{i,n}(0 \u2264 a_{i,j} \u2264 (n (n-1))/(2)).\n\nIt is guaranteed that: \n\n  * for all 1 \u2264 i \u2264 n a_{i,i} = 0; \n  * for all 1 \u2264 i < j \u2264 n a_{i,j} > 0; \n  * for all 1 \u2264 i < j \u2264 n a_{i,j} = a_{j,i}; \n  * all a_{i,j} for i <j are different. \n\nOutput\n\nPrint n integers: the k-th of them should be equal to the number of possible ways to divide computers into k groups, such that all required conditions are satisfied, modulo 998 244 353.\n\n", "output": "# import itertools as it\n# import functools as ft\nimport math\n\nteststring = \"\"\"4\n0 3 4 6\n3 0 2 1\n4 2 0 5\n6 1 5 0\n\n\"\"\"\nonline = __file__ != \"/home/jhli/py/Grakn/Problem_G2.py\"\ntrue, false = True, False\nif True:\n\n    def spitout():\n        for c in teststring.splitlines():\n            yield c\n\n\n    _ito = spitout()\n\n    if not online:\n        def input():\n            return next(_ito)\n\n\n    def build_enum(*a):\n        built = dict()\n        for i, c in enumerate(a):\n            built[c] = i\n        return lambda x: built[x]\n# T = 1\n# T = int(input())\n##-----------------start coding-----------------\nn = int(input())\nE = [(0, 0)] * (int(n*(n-1)/2))\n\nP = 998244353\n\nfor i in range(n):\n    L = list(map(int, input().split(\" \")))\n    for j in range(i+1, n):\n        E[L[j]-1] = (i, j)\n\nR = list(range(n))\nC = [[0, 1] for _ in range(n)]\nNv = [1] * n\nNe = [0] * n\n\ndef root(x):\n    if x == R[x]:\n        return x\n    else:\n        R[x] = y = root(R[x])\n        return y\n\ndef prod(A, B, da, db):\n    C = [0] * (min(da+db, n) + 1)\n    for i in range(da+1):\n        for j in range(db+1):\n            if i + j <= n:\n                C[i+j] += A[i] * B[j]\n                C[i+j] %= P\n    return C\n    \n# print(E)    \n# print(\"\")\n\nfor (x, y) in E:\n    r = rx = root(x)\n    ry = root(y)\n    # print((x, y, w), (rx, ry))\n    if rx != ry:\n        if r > ry: r = ry\n        R[rx] = R[ry] = r\n        C[r] = prod(C[rx], C[ry], Nv[rx], Nv[ry])\n        Nv[r] = Nv[rx] + Nv[ry]\n        Ne[r] = Ne[rx] + Ne[ry] + 1\n    else:\n        Ne[r] += 1\n    if Ne[r]*2 == Nv[r] * (Nv[r] - 1):\n        C[r][1] = 1\n    # print(\"R\", R)\n    # print(\"Nv\", Nv)\n    # print(\"Ne\", Ne)\n    # print(\"C\", C)\n    # print(\"\")\n        \nprint(\" \".join(map(str, C[0][1:n+1])))\n\n# print('Case #{}: {}'.format(ti, '...'))\n\n", "public_tests": {"input": ["7\n0 1 18 15 19 12 21\n1 0 16 13 17 20 14\n18 16 0 2 7 10 9\n15 13 2 0 6 8 11\n19 17 7 6 0 4 5\n12 20 10 8 4 0 3\n21 14 9 11 5 3 0\n", "4\n0 3 4 6\n3 0 2 1\n4 2 0 5\n6 1 5 0\n"], "output": ["1 1 2 3 4 3 1 \n", "1 0 1 1 \n"]}, "private_tests": {"input": ["1\n0\n", "4\n0 1 2 3\n1 0 4 5\n2 4 0 6\n3 5 6 0\n", "7\n0 21 9 3 6 13 16\n21 0 11 2 14 4 18\n9 11 0 19 7 17 15\n3 2 19 0 20 8 12\n6 14 7 20 0 5 10\n13 4 17 8 5 0 1\n16 18 15 12 10 1 0\n", "2\n0 1\n1 0\n", "6\n0 12 13 2 5 11\n12 0 15 10 1 14\n13 15 0 6 8 9\n2 10 6 0 7 4\n5 1 8 7 0 3\n11 14 9 4 3 0\n", "5\n0 9 3 4 2\n9 0 5 8 10\n3 5 0 7 1\n4 8 7 0 6\n2 10 1 6 0\n", "5\n0 7 6 8 9\n7 0 1 10 5\n6 1 0 2 3\n8 10 2 0 4\n9 5 3 4 0\n", "9\n0 30 9 13 27 34 12 7 6\n30 0 18 20 23 2 28 15 1\n9 18 0 26 35 22 5 21 19\n13 20 26 0 16 29 25 14 11\n27 23 35 16 0 3 31 10 24\n34 2 22 29 3 0 8 33 32\n12 28 5 25 31 8 0 36 4\n7 15 21 14 10 33 36 0 17\n6 1 19 11 24 32 4 17 0\n", "8\n0 26 18 7 13 12 9 6\n26 0 4 22 20 17 21 8\n18 4 0 23 19 27 2 14\n7 22 23 0 5 28 10 1\n13 20 19 5 0 24 25 16\n12 17 27 28 24 0 3 11\n9 21 2 10 25 3 0 15\n6 8 14 1 16 11 15 0\n", "10\n0 44 13 6 27 43 3 12 14 40\n44 0 28 20 17 16 5 33 45 15\n13 28 0 25 41 23 34 29 26 24\n6 20 25 0 18 32 11 37 2 38\n27 17 41 18 0 1 7 10 35 8\n43 16 23 32 1 0 19 21 42 22\n3 5 34 11 7 19 0 9 4 36\n12 33 29 37 10 21 9 0 31 39\n14 45 26 2 35 42 4 31 0 30\n40 15 24 38 8 22 36 39 30 0\n", "3\n0 1 2\n1 0 3\n2 3 0\n", "10\n0 1 17 18 19 20 21 22 30 31\n1 0 23 24 25 26 27 28 32 33\n17 23 0 12 13 14 15 16 34 35\n18 24 12 0 8 9 10 11 36 37\n19 25 13 8 0 2 4 5 38 39\n20 26 14 9 2 0 6 7 40 41\n21 27 15 10 4 6 0 3 42 43\n22 28 16 11 5 7 3 0 44 45\n30 32 34 36 38 40 42 44 0 29\n31 33 35 37 39 41 43 45 29 0\n"], "output": ["1 \n", "1 0 1 1 \n", "1 0 0 0 1 2 1 \n", "1 1 \n", "1 0 0 1 2 1 \n", "1 0 1 1 1 \n", "1 0 0 1 1 \n", "1 0 0 0 0 0 0 1 1 \n", "1 0 0 0 0 1 2 1 \n", "1 0 0 0 0 0 1 3 3 1 \n", "1 1 1 \n", "1 1 2 3 4 4 5 6 4 1 \n"]}, "index": 8070}, {"input": "Once upon a time in the Kingdom of Far Far Away lived Sam the Farmer. Sam had a cow named Dawn and he was deeply attached to her. Sam would spend the whole summer stocking hay to feed Dawn in winter. Sam scythed hay and put it into haystack. As Sam was a bright farmer, he tried to make the process of storing hay simpler and more convenient to use. He collected the hay into cubical hay blocks of the same size. Then he stored the blocks in his barn. After a summer spent in hard toil Sam stored A\u00b7B\u00b7C hay blocks and stored them in a barn as a rectangular parallelepiped A layers high. Each layer had B rows and each row had C blocks.\n\nAt the end of the autumn Sam came into the barn to admire one more time the hay he'd been stacking during this hard summer. Unfortunately, Sam was horrified to see that the hay blocks had been carelessly scattered around the barn. The place was a complete mess. As it turned out, thieves had sneaked into the barn. They completely dissembled and took away a layer of blocks from the parallelepiped's front, back, top and sides. As a result, the barn only had a parallelepiped containing (A - 1) \u00d7 (B - 2) \u00d7 (C - 2) hay blocks. To hide the evidence of the crime, the thieves had dissembled the parallelepiped into single 1 \u00d7 1 \u00d7 1 blocks and scattered them around the barn. After the theft Sam counted n hay blocks in the barn but he forgot numbers A, B \u0438 C.\n\nGiven number n, find the minimally possible and maximally possible number of stolen hay blocks.\n\nInput\n\nThe only line contains integer n from the problem's statement (1 \u2264 n \u2264 109).\n\nOutput\n\nPrint space-separated minimum and maximum number of hay blocks that could have been stolen by the thieves.\n\nNote that the answer to the problem can be large enough, so you must use the 64-bit integer type for calculations. Please, do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.\n\n", "output": "n=int(input())\na,mi=1,999999999999\nwhile a**3<=n:\n    if n%a==0:\n        b=1\n        while b**2<=(n//a):\n            if (n//a)%b==0:\n                c=n//a//b\n                mi=min(mi,(a+1)*(b+2)*(c+2))\n            b+=1\n    a+=1\nprint(mi-n, 9*n+9-n)\n", "public_tests": {"input": ["12\n", "4\n", "7\n"], "output": ["48 105\n", "28 41\n", "47 65\n"]}, "private_tests": {"input": ["999999993\n", "257259713\n", "857656800\n", "573308928\n", "286736327\n", "999893387\n", "50480\n", "644972544\n", "999942949\n", "679477248\n", "4472\n", "99264891\n", "931170240\n", "821620800\n", "509607936\n", "778377600\n", "659274082\n", "332393619\n", "980179200\n", "603979776\n", "646055\n", "908\n", "882161280\n", "805306368\n", "989903\n", "994593600\n", "7834243\n", "535074941\n", "231136953\n", "936354996\n", "999999994\n", "1985\n", "985944960\n", "96\n", "470860680\n", "859963392\n", "54\n", "45134118\n", "999999991\n", "999999883\n", "791683200\n", "628464178\n", "631243141\n", "764411904\n", "1\n", "311933803\n", "999905161\n", "958557600\n", "536870912\n", "999999997\n", "6\n", "999999893\n", "918918000\n", "999996583\n", "16\n", "14\n", "908107200\n", "790620\n", "62497\n", "951350400\n", "864864000\n", "615716902\n", "206898748\n", "735134400\n", "905969664\n", "999999998\n", "8\n", "972972000\n", "1000000000\n", "999999995\n", "7033800\n", "20\n", "999999992\n", "856079286\n", "999999999\n", "748\n", "299999771\n", "884822400\n", "89054701\n", "999999937\n", "453012754\n", "7661860\n", "999999996\n", "999999929\n", "999893227\n", "348\n", "9\n", "15\n", "534879507\n", "605404800\n", "1026\n", "127039320\n", "935625600\n", "422114561\n", "18\n", "20845\n", "999999797\n"], "output": ["490196227 7999999953\n", "2122207 2058077713\n", "4307008 6861254409\n", "3301020 4586471433\n", "290355727 2293890625\n", "1000724227 7999147105\n", "17884 403849\n", "3573148 5159780361\n", "1000368197 7999543601\n", "3693060 5435817993\n", "1603 35785\n", "15587889 794119137\n", "4548514 7449361929\n", "4185636 6572966409\n", "3045276 4076863497\n", "4036708 6227020809\n", "1977822262 5274192665\n", "10714371 2659148961\n", "4707050 7841433609\n", "3414276 4831838217\n", "140995 5168449\n", "1840 7273\n", "4388720 7057290249\n", "4201476 6442450953\n", "1082167 7919233\n", "4752650 7956748809\n", "8302235 62673953\n", "647722381 4280599537\n", "539319577 1849095633\n", "40069269 7490839977\n", "928571477 7999999961\n", "3601 15889\n", "4725040 7887559689\n", "144 777\n", "129486993 3766885449\n", "4320292 6879707145\n", "106 441\n", "19223945 361072953\n", "1059701759 7999999937\n", "4999999427 7999999073\n", "4082888 6333465609\n", "3574502 5027713433\n", "634644469 5049945137\n", "3988228 6115295241\n", "17 17\n", "1559669027 2495470433\n", "1000161721 7999241297\n", "4637398 7668460809\n", "3151876 4294967305\n", "15309947 7999999985\n", "34 57\n", "4999999477 7999999153\n", "4511288 7351344009\n", "1022096687 7999972673\n", "56 137\n", "58 121\n", "4474050 7264857609\n", "316416 6324969\n", "312497 499985\n", "4614600 7610803209\n", "4331048 6918912009\n", "10508698 4925735225\n", "1683461 1655189993\n", "3886608 5881075209\n", "4529412 7247757321\n", "504345691 7999999993\n", "40 73\n", "4685478 7783776009\n", "4770064 8000000009\n", "4924975 7999999969\n", "210976 56270409\n", "64 169\n", "129518035 7999999945\n", "196667409 6848634297\n", "52392027 8000000001\n", "487 5993\n", "1499998867 2399998177\n", "4396766 7078579209\n", "445273517 712437617\n", "4999999697 7999999505\n", "2844347 3624102041\n", "546725 61294889\n", "1000000044 7999999977\n", "4999999657 7999999441\n", "1000183267 7999145825\n", "396 2793\n", "41 81\n", "55 129\n", "253364145 4279036065\n", "3414952 4843238409\n", "591 8217\n", "1209066 1016314569\n", "4563150 7485004809\n", "78417139 3376916497\n", "57 153\n", "8873 166769\n", "4999998997 7999998385\n"]}, "index": 8071}, {"input": "Berland regional ICPC contest has just ended. There were m participants numbered from 1 to m, who competed on a problemset of n problems numbered from 1 to n.\n\nNow the editorial is about to take place. There are two problem authors, each of them is going to tell the tutorial to exactly k consecutive tasks of the problemset. The authors choose the segment of k consecutive tasks for themselves independently of each other. The segments can coincide, intersect or not intersect at all.\n\nThe i-th participant is interested in listening to the tutorial of all consecutive tasks from l_i to r_i. Each participant always chooses to listen to only the problem author that tells the tutorials to the maximum number of tasks he is interested in. Let this maximum number be a_i. No participant can listen to both of the authors, even if their segments don't intersect.\n\nThe authors want to choose the segments of k consecutive tasks for themselves in such a way that the sum of a_i over all participants is maximized.\n\nInput\n\nThe first line contains three integers n, m and k (1 \u2264 n, m \u2264 2000, 1 \u2264 k \u2264 n) \u2014 the number of problems, the number of participants and the length of the segment of tasks each of the problem authors plans to tell the tutorial to.\n\nThe i-th of the next m lines contains two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 n) \u2014 the segment of tasks the i-th participant is interested in listening to the tutorial to.\n\nOutput\n\nPrint a single integer \u2014 the maximum sum of a_i over all participants.\n\n", "output": "n, m, k = map(int, input().split());a = [list(map(int, input().split())) for _ in range(m)]\ndef solv(lst):\n    res = sum(lst[:k]);s = res\n    for i in range(n-k):s += lst[i+k] - lst[i];res = max(res, s)\n    return res\na.sort(key=lambda x: sum(x)/2);apr = [0]*n\nfor el in a:\n    for i in range(el[0]-1, el[1]):apr[i] += 1\nres = solv(apr);bpr = [0]*n\nfor r, l in a:\n    for i in range(r-1, l):apr[i] -= 1;bpr[i] += 1\n    nres = solv(apr) + solv(bpr);res = max(res, nres)\nprint(res)", "public_tests": {"input": ["10 5 3\n1 3\n2 4\n6 9\n6 9\n1 8\n", "4 4 1\n3 3\n1 1\n2 2\n4 4\n", "5 4 5\n1 2\n2 3\n3 4\n4 5\n", "10 3 3\n2 4\n4 6\n3 5\n"], "output": ["\n14\n", "\n2\n", "\n8\n", "\n8\n"]}, "private_tests": {"input": ["3 2 1\n1 1\n2 2\n", "1 5 1\n1 1\n1 1\n1 1\n1 1\n1 1\n", "1 6 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n", "2 9 1\n1 1\n2 2\n1 1\n1 2\n1 1\n2 2\n2 2\n1 2\n2 2\n", "2 5 1\n1 2\n1 1\n2 2\n1 2\n1 2\n", "1 2 1\n1 1\n1 1\n", "5 6 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 5\n", "1 9 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n", "10 4 2\n4 9\n7 8\n8 10\n5 9\n", "10 4 6\n9 10\n1 10\n7 7\n7 10\n", "2 5 2\n1 2\n2 2\n1 2\n2 2\n1 2\n", "2 7 1\n1 1\n2 2\n1 1\n1 2\n1 2\n1 2\n1 1\n", "10 10 4\n2 6\n1 4\n1 9\n1 4\n4 8\n8 10\n2 5\n6 6\n4 7\n1 2\n", "1 1 1\n1 1\n", "3 10 2\n1 3\n1 3\n2 3\n1 3\n1 2\n1 2\n2 3\n1 3\n3 3\n1 2\n", "5 8 2\n4 5\n3 4\n1 5\n1 2\n1 5\n2 5\n1 5\n1 2\n", "5 9 3\n1 4\n3 4\n1 3\n3 3\n1 3\n4 5\n3 5\n3 4\n2 5\n", "3 3 2\n1 1\n3 3\n1 2\n", "10 4 3\n3 9\n5 6\n4 9\n3 4\n", "1 3 1\n1 1\n1 1\n1 1\n", "4 10 2\n1 2\n1 2\n1 2\n3 4\n2 3\n1 2\n1 2\n1 2\n3 4\n2 3\n"], "output": ["2\n", "5\n", "6\n", "9\n", "5\n", "2\n", "7\n", "9\n", "8\n", "13\n", "8\n", "7\n", "29\n", "1\n", "19\n", "15\n", "22\n", "4\n", "10\n", "3\n", "18\n"]}, "index": 8072}, {"input": "You have n chains, the i-th chain consists of c_i vertices. Vertices in each chain are numbered independently from 1 to c_i along the chain. In other words, the i-th chain is the undirected graph with c_i vertices and (c_i - 1) edges connecting the j-th and the (j + 1)-th vertices for each 1 \u2264 j < c_i.\n\nNow you decided to unite chains in one graph in the following way: \n\n  1. the first chain is skipped; \n  2. the 1-st vertex of the i-th chain is connected by an edge with the a_i-th vertex of the (i - 1)-th chain; \n  3. the last (c_i-th) vertex of the i-th chain is connected by an edge with the b_i-th vertex of the (i - 1)-th chain. \n\n<image> Picture of the first test case. Dotted lines are the edges added during uniting process\n\nCalculate the length of the longest simple cycle in the resulting graph.\n\nA simple cycle is a chain where the first and last vertices are connected as well. If you travel along the simple cycle, each vertex of this cycle will be visited exactly once.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains the single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of chains you have.\n\nThe second line of each test case contains n integers c_1, c_2, ..., c_n (2 \u2264 c_i \u2264 10^9) \u2014 the number of vertices in the corresponding chains.\n\nThe third line of each test case contains n integers a_1, a_2, ..., a_n (a_1 = -1; 1 \u2264 a_i \u2264 c_{i - 1}).\n\nThe fourth line of each test case contains n integers b_1, b_2, ..., b_n (b_1 = -1; 1 \u2264 b_i \u2264 c_{i - 1}).\n\nBoth a_1 and b_1 are equal to -1, they aren't used in graph building and given just for index consistency. It's guaranteed that the sum of n over all test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, print the length of the longest simple cycle.\n\nExample\n\nInput\n\n\n3\n4\n3 4 3 3\n-1 1 2 2\n-1 2 2 3\n2\n5 6\n-1 5\n-1 1\n3\n3 5 2\n-1 1 1\n-1 3 5\n\n\nOutput\n\n\n7\n11\n8\n\nNote\n\nIn the first test case, the longest simple cycle is shown below: \n\n<image>\n\nWe can't increase it with the first chain, since in such case it won't be simple \u2014 the vertex 2 on the second chain will break simplicity", "output": "for _ in range(int(input())):    \n    n=int(input());c=list(map(int,input().split()));a=list(map(int,input().split()));b=list(map(int,input().split()));ans,t=0,0\n    for i in range(1,n):x=abs(a[i]-b[i]);t = (c[i]+1 if x == 0 else max(x,t-x) +c[i]+1);ans=max(ans,t)\n    print(ans)", "public_tests": {"input": ["3\n4\n3 4 3 3\n-1 1 2 2\n-1 2 2 3\n2\n5 6\n-1 5\n-1 1\n3\n3 5 2\n-1 1 1\n-1 3 5\n"], "output": ["\n7\n11\n8\n"]}, "private_tests": {"input": [], "output": []}, "index": 8073}, {"input": "This week Arkady wanted to cook some pancakes (to follow ancient traditions) and make a problem about that. But then he remembered that one can't make a problem about stacking pancakes without working at a specific IT company, so he decided to bake the Napoleon cake instead.\n\nTo bake a Napoleon cake, one has to bake n dry layers first, and then put them on each other in one stack, adding some cream. Arkady started with an empty plate, and performed the following steps n times: \n\n  * place a new cake layer on the top of the stack; \n  * after the i-th layer is placed, pour a_i units of cream on top of the stack. \n\n\n\nWhen x units of cream are poured on the top of the stack, top x layers of the cake get drenched in the cream. If there are less than x layers, all layers get drenched and the rest of the cream is wasted. If x = 0, no layer gets drenched.\n\n<image> The picture represents the first test case of the example.\n\nHelp Arkady determine which layers of the cake eventually get drenched when the process is over, and which don't.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 20 000). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of layers in the cake.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 n) \u2014 the amount of cream poured on the cake after adding each layer.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line with n integers. The i-th of the integers should be equal to 1 if the i-th layer from the bottom gets drenched, and 0 otherwise.\n\nExample\n\nInput\n\n\n3\n6\n0 3 0 0 1 3\n10\n0 0 0 1 0 5 0 0 0 2\n3\n0 0 0\n\n\nOutput\n\n\n1 1 0 1 1 1 \n0 1 1 1 1 1 0 0 1 1 \n0 0 0", "output": "for s in[*open(0)][2::2]:\n r=[];m=1\n for x in s.split()[::-1]:m=max(m-1,int(x));r+=+(m>0),\n print(*r[::-1])", "public_tests": {"input": ["3\n6\n0 3 0 0 1 3\n10\n0 0 0 1 0 5 0 0 0 2\n3\n0 0 0\n"], "output": ["\n1 1 0 1 1 1 \n0 1 1 1 1 1 0 0 1 1 \n0 0 0 \n"]}, "private_tests": {"input": [], "output": []}, "index": 8074}, {"input": "After rejecting 10^{100} data structure problems, Errorgorn is very angry at Anton and decided to kill him.\n\nAnton's DNA can be represented as a string a which only contains the characters \"ANTON\" (there are only 4 distinct characters). \n\nErrorgorn can change Anton's DNA into string b which must be a permutation of a. However, Anton's body can defend against this attack. In 1 second, his body can swap 2 adjacent characters of his DNA to transform it back to a. Anton's body is smart and will use the minimum number of moves.\n\nTo maximize the chance of Anton dying, Errorgorn wants to change Anton's DNA the string that maximizes the time for Anton's body to revert his DNA. But since Errorgorn is busy making more data structure problems, he needs your help to find the best string B. Can you help him?\n\nInput\n\nThe first line of input contains a single integer t (1 \u2264 t \u2264 100000) \u2014 the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 \u2264 |a| \u2264 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.\n\nOutput\n\nFor each testcase, print a single string, b. If there are multiple answers, you can output any one of them. b must be a permutation of the string a.\n\nExample\n\nInput\n\n\n4\nANTON\nNAAN\nAAAAAA\nOAANTTON\n\n\nOutput\n\n\nNNOTA\nAANN\nAAAAAA\nTNNTAOOA\n\nNote\n\nFor the first testcase, it takes 7 seconds for Anton's body to transform NNOTA to ANTON: \n\nNNOTA \u2192 NNOAT \u2192 NNAOT \u2192 NANOT \u2192 NANTO \u2192 ANNTO \u2192 ANTNO \u2192 ANTON. \n\nNote that you cannot output strings such as AANTON, ANTONTRYGUB, AAAAA and anton as it is not a permutation of ANTON.\n\nFor the second testcase, it takes 2 seconds for Anton's body to transform AANN to NAAN. Note that other strings such as NNAA and ANNA will also be accepted", "output": "import itertools\nm={\"A\":0,\"N\":1,\"O\":2,\"T\":3};st=\"ANOT\"\nfor _ in range(int(input())):\n\ts=input();arr=[m[ch] for ch in s];cnt=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]];cnt1=[0,0,0,0];val=-1;best=[]\n\tfor i in arr:\n\t\tfor j in range(4):cnt[j][i]+=cnt1[j]\n\t\tcnt1[i]+=1\n\tfor perm in itertools.permutations([0,1,2,3]):\n\t\tcurr=sum([cnt[perm[j]][perm[i]] for i in range(4) for j in range(i+1,4)])\n\t\tif (curr>val):val=curr;best=perm\n\tfor i in range(4):\n\t\tfor j in range(cnt1[best[i]]): print(st[best[i]],end=\"\")\n\tprint()", "public_tests": {"input": ["4\nANTON\nNAAN\nAAAAAA\nOAANTTON\n"], "output": ["\nNNOTA\nAANN\nAAAAAA\nTNNTAOOA\n"]}, "private_tests": {"input": ["1\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n", "4\nANTON\nNAAN\nAAAAAA\nOAANTTON\n"], "output": ["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n", "NNOTA\nAANN\nAAAAAA\nNNOOTTAA\n"]}, "index": 8075}, {"input": "After the lessons n groups of schoolchildren went outside and decided to visit Polycarpus to celebrate his birthday. We know that the i-th group consists of si friends (1 \u2264 si \u2264 4), and they want to go to Polycarpus together. They decided to get there by taxi. Each car can carry at most four passengers. What minimum number of cars will the children need if all members of each group should ride in the same taxi (but one taxi can take more than one group)?\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105) \u2014 the number of groups of schoolchildren. The second line contains a sequence of integers s1, s2, ..., sn (1 \u2264 si \u2264 4). The integers are separated by a space, si is the number of children in the i-th group.\n\nOutput\n\nPrint the single number \u2014 the minimum number of taxis necessary to drive all children to Polycarpus.\n\n", "output": "a=[*open(0)][1].count;print(a('4')+a('3')+(a('2')*2+max(0,a('1')-a('3'))+3)//4)", "public_tests": {"input": ["5\n1 2 4 3 3\n", "8\n2 3 4 4 2 1 3 1\n"], "output": ["4\n", "5\n"]}, "private_tests": {"input": ["5\n4 4 4 4 4\n", "3\n3 4 3\n", "2\n2 1\n", "78\n2 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 3 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n", "7\n2 2 2 1 2 1 2\n", "3\n2 4 2\n", "3\n2 1 4\n", "10\n3 1 2 2 2 2 2 2 1 2\n", "8\n1 1 2 1 1 1 3 2\n", "3\n3 3 2\n", "18\n1 3 3 3 1 1 3 1 1 1 3 3 3 3 1 3 1 1\n", "4\n2 4 1 3\n", "3\n1 3 1\n", "1\n2\n", "4\n3 2 1 3\n", "5\n1 3 4 1 3\n", "4\n3 3 4 4\n", "3\n3 2 2\n", "3\n4 2 4\n", "3\n4 3 2\n", "4\n4 4 3 2\n", "4\n3 2 1 2\n", "2\n4 2\n", "4\n3 1 3 1\n", "3\n3 1 2\n", "2\n4 1\n", "2\n1 1\n", "9\n3 1 2 1 1 1 1 1 1\n", "2\n2 3\n", "3\n4 3 4\n", "5\n1 3 2 3 2\n", "1\n3\n", "5\n2 4 2 3 4\n", "3\n4 1 1\n", "4\n2 2 1 1\n", "2\n3 1\n", "4\n2 4 4 2\n", "4\n2 2 4 1\n", "3\n4 4 1\n", "3\n1 1 2\n", "4\n2 2 3 3\n", "1\n1\n", "4\n1 4 1 4\n", "3\n1 3 3\n", "26\n3 1 3 3 1 3 2 3 1 3 3 2 1 2 3 2 2 1 2 1 2 1 1 3 2 1\n", "4\n1 4 3 1\n", "5\n1 1 2 4 2\n", "2\n4 3\n", "2\n2 2\n", "1\n4\n", "2\n3 3\n", "12\n1 1 1 1 1 1 1 1 1 1 1 1\n", "3\n3 1 4\n", "3\n2 2 1\n", "2\n4 4\n"], "output": ["5\n", "3\n", "1\n", "39\n", "3\n", "2\n", "2\n", "5\n", "3\n", "3\n", "9\n", "3\n", "2\n", "1\n", "3\n", "3\n", "4\n", "2\n", "3\n", "3\n", "4\n", "2\n", "2\n", "2\n", "2\n", "2\n", "1\n", "3\n", "2\n", "3\n", "3\n", "1\n", "4\n", "2\n", "2\n", "1\n", "3\n", "3\n", "3\n", "1\n", "3\n", "1\n", "3\n", "2\n", "13\n", "3\n", "3\n", "2\n", "1\n", "1\n", "2\n", "3\n", "2\n", "2\n", "2\n"]}, "index": 8076}, {"input": "Nowadays all circuses in Berland have a round arena with diameter 13 meters, but in the past things were different.\n\nIn Ancient Berland arenas in circuses were shaped as a regular (equiangular) polygon, the size and the number of angles could vary from one circus to another. In each corner of the arena there was a special pillar, and the rope strung between the pillars marked the arena edges.\n\nRecently the scientists from Berland have discovered the remains of the ancient circus arena. They found only three pillars, the others were destroyed by the time.\n\nYou are given the coordinates of these three pillars. Find out what is the smallest area that the arena could have.\n\nInput\n\nThe input file consists of three lines, each of them contains a pair of numbers \u2013\u2013 coordinates of the pillar. Any coordinate doesn't exceed 1000 by absolute value, and is given with at most six digits after decimal point.\n\nOutput\n\nOutput the smallest possible area of the ancient arena. This number should be accurate to at least 6 digits after the decimal point. It's guaranteed that the number of angles in the optimal polygon is not larger than 100.\n\n", "output": "from math import *\n\np = [list(map(float, input().split())) for i in range(3)]\n\na, b, c = [hypot(p[i][0] - p[(i+1)%3][0], p[i][1] - p[(i+1)%3][1]) for i in range(3)]\nA, B, C = [acos((y*y+z*z-x*x)/(2*y*z)) for x, y, z in [(a, b, c), (b, c, a), (c, a, b)]]\nR = a/sin(A)*0.5\ndef g(x,y):return x if y<1e-3 else g(y,fmod(x,y))\nu=2*g(pi, g(A,g(B,C)))\nprint(R*R*sin(u)*pi/u)\n", "public_tests": {"input": ["0.000000 0.000000\n1.000000 1.000000\n0.000000 1.000000\n"], "output": ["1.0\n"]}, "private_tests": {"input": ["76.820252 66.709341\n61.392328 82.684207\n44.267775 -2.378694\n", "6.949504 69.606390\n26.139268 72.136945\n24.032442 57.407195\n", "36.856072 121.845502\n46.453956 109.898647\n-30.047767 77.590282\n", "-7.347450 36.971423\n84.498728 89.423536\n75.469963 98.022482\n", "88.653021 18.024220\n51.942488 -2.527850\n76.164701 24.553012\n", "1.514204 81.400629\n32.168797 100.161401\n7.778734 46.010993\n", "12.272903 101.825792\n-51.240438 -12.708472\n-29.729299 77.882032\n", "-46.482632 -31.161247\n19.689679 -70.646972\n-17.902656 -58.455808\n", "-18.643272 56.008305\n9.107608 -22.094058\n-6.456146 70.308320\n", "18.716839 40.852752\n66.147248 -4.083161\n111.083161 43.347248\n", "122.381894 -48.763263\n163.634346 -22.427845\n26.099674 73.681862\n", "119.209229 133.905087\n132.001535 22.179509\n96.096673 0.539763\n", "55.957968 -72.765994\n39.787413 -75.942282\n24.837014 128.144762\n", "34.236058 108.163949\n28.639345 104.566515\n25.610069 86.002927\n", "103.967164 63.475916\n86.466163 59.341930\n69.260229 73.258917\n", "80.181999 -38.076894\n23.381778 122.535736\n47.118815 140.734014\n", "77.145533 85.041789\n67.452820 52.513188\n80.503843 85.000149\n", "139.847022 19.153937\n104.096879 75.379874\n49.164271 46.404632\n", "93.583067 132.858352\n63.834975 19.353720\n33.677824 102.529376\n", "17.288379 68.223317\n48.776683 71.688379\n23.170559 106.572762\n", "104.636703 49.583778\n85.940583 95.426299\n69.375168 93.234795\n", "25.428124 39.407248\n17.868098 39.785933\n11.028461 43.028890\n", "31.312532 151.532355\n182.646053 56.534075\n15.953947 127.065925\n", "-56.880888 172.997993\n81.126977 42.144034\n-51.413417 17.057807\n", "109.515505 37.575315\n5.377080 101.729711\n17.501630 103.324931\n", "51.679280 56.072393\n-35.819256 73.390532\n-10.661374 129.756454\n", "35.661751 27.283571\n96.513550 51.518022\n97.605986 131.258287\n", "165.094169 94.574129\n46.867578 147.178855\n174.685774 62.705213\n", "20.965151 74.716562\n167.264364 81.864800\n5.931644 48.813212\n", "28.420253 0.619862\n10.966628 21.724132\n14.618862 10.754642\n", "28.718442 36.116251\n36.734593 35.617015\n76.193973 99.136077\n", "84.409605 38.496141\n77.788313 39.553807\n75.248391 59.413884\n", "-16.356805 109.310423\n124.529388 25.066276\n-37.892043 80.604904\n", "129.400249 -44.695226\n122.278798 -53.696996\n44.828427 -83.507917\n", "-13.242302 -45.014124\n-33.825369 51.083964\n84.512928 -55.134407\n", "40.562163 -47.610606\n10.073051 -54.490068\n54.625875 -40.685797\n", "0.376916 17.054676\n100.187614 85.602831\n1.425829 132.750915\n", "46.172435 -22.819705\n17.485134 -1.663888\n101.027565 111.619705\n", "-21.925928 -24.623076\n-33.673619 -11.677794\n4.692348 52.266292\n", "146.604506 -3.502359\n24.935572 44.589981\n106.160918 -51.162271\n", "97.326813 61.492460\n100.982131 57.717635\n68.385216 22.538372\n", "105.530943 80.920069\n40.206723 125.323331\n40.502256 -85.455877\n", "72.873708 -59.083734\n110.911118 -6.206576\n-44.292395 13.106202\n", "-20.003518 -4.671086\n93.588632 6.362759\n-24.748109 24.792124\n", "115.715093 141.583620\n136.158119 -23.780834\n173.673212 64.802787\n", "49.320630 48.119616\n65.888396 93.514980\n27.342377 97.600590\n", "71.756151 7.532275\n-48.634784 100.159986\n91.778633 158.107739\n", "42.147045 64.165917\n70.260284 4.962470\n10.532991 76.277713\n", "80.895061 94.491414\n42.361631 65.191687\n77.556800 76.694829\n"], "output": ["6503.447626933695\n", "372.09307031987635\n", "5339.3557882968025\n", "8977.833484970313\n", "1452.528513089955\n", "3149.431051257893\n", "24908.67502617584\n", "23949.55216407467\n", "9009.251429090584\n", "4268.879975050851\n", "22182.518984357506\n", "16459.528310930757\n", "32799.66695953821\n", "780.9342627768211\n", "1621.9669769277139\n", "28242.175121024655\n", "1034.7083664592533\n", "7083.2627202884305\n", "10866.493779478897\n", "1505.2799595846766\n", "2632.6875331736164\n", "1152.2133094781955\n", "25712.80489679047\n", "29051.568195010594\n", "25142.855908815025\n", "7441.865442995507\n", "13324.780827104052\n", "32087.470955635552\n", "30115.262801422195\n", "1760.1399761299842\n", "6271.489414840133\n", "438.85759293951406\n", "22719.363428226687\n", "26227.478504758346\n", "16617.239984651296\n", "31224.346506350343\n", "13947.477130657318\n", "16483.23326494948\n", "5669.994350227445\n", "13799.610313821031\n", "1840.5994520719753\n", "36574.646037624385\n", "19244.42729087099\n", "11191.04486039333\n", "24043.740341410277\n", "2437.508955378253\n", "9991.278791809824\n", "14261.922426266443\n", "2386.017904947473\n"]}, "index": 8077}, {"input": "A subsequence of length |x| of string s = s1s2... s|s| (where |s| is the length of string s) is a string x = sk1sk2... sk|x| (1 \u2264 k1 < k2 < ... < k|x| \u2264 |s|).\n\nYou've got two strings \u2014 s and t. Let's consider all subsequences of string s, coinciding with string t. Is it true that each character of string s occurs in at least one of these subsequences? In other words, is it true that for all i (1 \u2264 i \u2264 |s|), there is such subsequence x = sk1sk2... sk|x| of string s, that x = t and for some j (1 \u2264 j \u2264 |x|) kj = i.\n\nInput\n\nThe first line contains string s, the second line contains string t. Each line consists only of lowercase English letters. The given strings are non-empty, the length of each string does not exceed 2\u00b7105.\n\nOutput\n\nPrint \"Yes\" (without the quotes), if each character of the string s occurs in at least one of the described subsequences, or \"No\" (without the quotes) otherwise.\n\n", "output": "import bisect\nimport string\n\ns = input()\nt = input()\n\nmax_match = [0 for i in range(len(s))]\nmin_match = [0 for i in range(len(s))]\nchar_idx = [0 for i in range(30)]\nchar_occur = [ [] for i in range(30) ]\n\nfor (i, ch) in enumerate(t):\n    idx = ord(ch) - ord('a')\n    char_occur[idx].append(i)\n\nfor ch in string.ascii_lowercase:\n    idx = ord(ch) - ord('a')\n    char_occur[idx].append(len(t)+1)\n\nmatched = -1\nfor (i, ch) in enumerate(s):\n    if matched==len(t)-1:\n        max_match[i] = matched\n    else:\n        if ch == t[matched+1]:\n            matched += 1\n        max_match[i] = matched\n\nmatched = len(t)\nfor (i, ch) in enumerate(s[::-1]):\n    i = len(s) - i - 1\n    if matched==0:\n        min_match[i] = matched\n    else:\n        if ch == t[matched-1]:\n            matched -= 1\n        min_match[i] = matched\n\nfor (i, ch) in enumerate(s):\n    low = min_match[i]\n    high = max_match[i]\n    \n    ch = ord(ch) - ord('a')\n    idx = char_idx[ch]\n    while idx<len(char_occur[ch]) and char_occur[ch][idx]<low:\n        idx += 1\n    char_idx[ch] = idx\n    \n    if idx == len(char_occur[ch]):\n        print(\"No\")\n        exit()\n    if char_occur[ch][idx] > high:\n        print(\"No\")\n        exit()\n\nprint(\"Yes\")", "public_tests": {"input": ["abc\nba\n", "abacaba\naba\n", "abab\nab\n"], "output": ["No\n", "No\n", "Yes\n"]}, "private_tests": {"input": ["babaabaabb\nbbccb\n", "aaaaaa\naaaaaaa\n", "abcdadbcd\nabcd\n", "abaaaaba\nabba\n", "aa\naaa\n", "iqqiaiiffiqlqfaaflfieflfillkkhqfolhehedqdqqfddlheifeoqeohhoadqkfiqeleeqdekhhahkaqqqiaqliiqlelkhdfodeafqfhogihlgoqafdiffkaekhqhgqfkcqiaaoodkkfeqkciqfeihkifeodhahdhddghaihkhahghlkcckicehechocfhfcdfeldelgaqhqfepipegklqiafhqglcdfaflekhodliaaoglfcpdcbbkfipcnnkqpeembaflj\niqaflekhodliaaoglfcpdcbbkfipcnnkqpeembaflj\n", "aaa\naaaa\n", "ab\nabcd\n", "babbbbbaba\nab\n", "abc\nbac\n", "abaca\nabca\n", "ababa\nab\n", "iqqiaiiffiqlqfaaflfieflfillkkhqfolhehedqdqqfddlheifeoqeohhoadqkfiqeleeqdekhhahkaqqqiaqliiqlelkhdfodeafqfhogihlgoqafdiffkaekhqhgqfkcqiaaoodkkfeqkciqfeihkifeodhahdhddghaihkhahghlkcckicehechocfhfcdfeldelgaqhqfepipegklqiafhqglcdfgkfpoggldgfcglfbbpkkkfipipcnnkqpeembaflj\niqaflekhodliaaoglfcpdcbbkfipcnnkqpeembaflj\n", "abcbab\nabcab\n", "ctkhagrifaztmnxhmqztzibnmzzkojiztvrkfeoqegvwtbxlvvjhebshqaicsovtkcdovytimjggglyxlvglgunbohnkxargymbqvzgsnvjzgxivdgnaesgxqcruaopjuqsyyorrobnelehjnxcetveehlbmeskptivsuhuqupbieumycwczxyqjtwfofehfkpqmjngygwxkaviuyouiippgvlxjgtkxmhcwtzacbllsybgiujyryngapfwjkkyapfgxtcdpc\nctkhagrifaztmnxhmqztzibnmzzkojiztvrkfeoqegvwtbxlvvjhebshqaicsovtkcdovytimjggglyxlvglgunbohnkxargymbqvzgsnvjzgxivdgnaesgxcetveehlbmeskptivsuhuqupbieumycwczxyqjtwfofehfkpqmjngygwxkaviuyouiippgvlxjgtkxmhcwtzacbllsybgiujyryngapfwjkkyapfgxtcdpc\n", "adbecbeaddbbebdaa\nadbecbeaddbbebdaa\n", "cccbbiiiiiqqvvgggwwwwxxxxxxxxoooondddkkkpvvvdddddooqqxxxxxqqqqllllkkkkkkggggfwwwwwkkkfffeeeemmmmmmmqwwwwwwxxxxxxxdddddqqqqqqq\ncbiqvgwxxondkpvdoqxqlkgfwkfemqwxdq\n", "aaaa\naaa\n", "abebea\nabeba\n", "ababcab\nabbcab\n", "bacbbcbcacaacbabacbcbacaaaabbabaaccccacbcbbbabcacbacacabaabacacbaaacacbbccbcccbabccaacccccbbcabacbaacabaccccccacbbaccbabaaabaaccabcaaabcccccbbabccccccabacbaaababcbbbccbbabcabbbbaaabbccccbacbaacbcacbbaaccbaabcaaacbccccbcbababccbcccabbbabbba\nbacbbcbcacaacbabacbcbacaaaabbabaaccccacbcbbbabcacbacacabaabacacbaaacacbbccbcccbabccaacccccbbcabacbaacabaccccccacbbaccbabaaabaaccabcaaabcccccbbabccccccabacbaaababcbbbccbbabcabbbbaaabbccccbacbaacbcacbbaaccbaabcaaacbccccbcbababccbcccabbbabbba\n", "accbacabaa\nbada\n", "cctckkhatkgrhktihcgififfgfctctkrgiakrifazzggfzczfkkahhafhcfgacccfakkarcatkfiktczkficahgiriakccfiztkhkgrfkrimgamighhtamrhxftaadwxgfggytwjccgkdpyyatctfdygxggkyycpjyfxyfdwtgytcacawjddjdctyfgddkfkypyxftxxtaddcxxpgfgxgdfggfdggdcddtgpxpctpddcdcpc\nctkhagrifaztmnxhmqztzibnmzzkojiztvrkfeoqegvwtbxlvvjhebshqaicsovtkcdovytimjggglyxlvglgunbohnkxargymbqvzgsnvjzgxivdgnaesgxcetveehlbmeskptivsuhuqupbieumycwczxyqjtwfofehfkpqmjngygwxkaviuyouiippgvlxjgtkxmhcwtzacbllsybgiujyryngapfwjkkyapfgxtcdpc\n", "cabcbac\ncabac\n", "hqxibotrjfqrgwrydtlpkzeqrkfgzdylfokmaguwafdgwltgvqobnouttrrfuavfkqcoqxkfwsuseomraigoljzzbjukwaxcftvlhfzdypuinnxbluzfxajkabirvyawtxzcrxpoghucjypwinspnnbptsuamkbjqgttooxwcsqxrukwwtgrkxdujioqywqlugkjngfxrybvxjmlwszszljfgyouvgdilzseekxlsiujhod\nnghetuvcotztgttmr\n", "adedadcababceeeaddadedddaeaccccbcccdaeeecaaeaebccebddddeedabbddeaaccdacebaeeccdeeddbecbdecddebe\nadedcceecebdccdbe\n", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "abaaaba\nabba\n", "iiiiiiqqqqqqqqqqaaaaffffllllleeeeeeeekkkkkkkhhhhhhhhhhooooooddddddddlllllllliiiaaaaaaaaaaaaaaaaaooggggggggggllllllffffffcccccccpppppppdddddddddddccccbbbbbbbbbbkkkkfffffiiiiiiipppppppppccccnnnnnnnnnnnnnnkkkkkkkkkkqqqqppppppeeeeeeeeemmmmmmmmbbbbbbbaaaaaaffffllllljjjj\niqaflekhodliaaoglfcpdcbbkfipcnnkqpeembaflj\n", "abcdad\nabcd\n", "aa\naaaaaaaa\n", "aaaaaaaa\naaaaa\n", "abaaaaaaba\nabba\n"], "output": ["No\n", "No\n", "Yes\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "Yes\n", "Yes\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "Yes\n", "No\n", "No\n", "Yes\n", "No\n"]}, "index": 8078}, {"input": "For he knew every Who down in Whoville beneath, Was busy now, hanging a mistletoe wreath. \"And they're hanging their stockings!\" he snarled with a sneer, \"Tomorrow is Christmas! It's practically here!\"\n\nDr. Suess, How The Grinch Stole Christmas\n\nChristmas celebrations are coming to Whoville. Cindy Lou Who and her parents Lou Lou Who and Betty Lou Who decided to give sweets to all people in their street. They decided to give the residents of each house on the street, one kilogram of sweets. So they need as many kilos of sweets as there are homes on their street.\n\nThe street, where the Lou Who family lives can be represented as n consecutive sections of equal length. You can go from any section to a neighbouring one in one unit of time. Each of the sections is one of three types: an empty piece of land, a house or a shop. Cindy Lou and her family can buy sweets in a shop, but no more than one kilogram of sweets in one shop (the vendors care about the residents of Whoville not to overeat on sweets).\n\nAfter the Lou Who family leave their home, they will be on the first section of the road. To get to this section of the road, they also require one unit of time. We can assume that Cindy and her mom and dad can carry an unlimited number of kilograms of sweets. Every time they are on a house section, they can give a kilogram of sweets to the inhabitants of the house, or they can simply move to another section. If the family have already given sweets to the residents of a house, they can't do it again. Similarly, if they are on the shop section, they can either buy a kilo of sweets in it or skip this shop. If they've bought a kilo of sweets in a shop, the seller of the shop remembered them and the won't sell them a single candy if they come again. The time to buy and give sweets can be neglected. The Lou Whos do not want the people of any house to remain without food.\n\nThe Lou Whos want to spend no more than t time units of time to give out sweets, as they really want to have enough time to prepare for the Christmas celebration. In order to have time to give all the sweets, they may have to initially bring additional k kilos of sweets.\n\nCindy Lou wants to know the minimum number of k kilos of sweets they need to take with them, to have time to give sweets to the residents of each house in their street.\n\nYour task is to write a program that will determine the minimum possible value of k.\n\nInput\n\nThe first line of the input contains two space-separated integers n and t (2 \u2264 n \u2264 5\u00b7105, 1 \u2264 t \u2264 109). The second line of the input contains n characters, the i-th of them equals \"H\" (if the i-th segment contains a house), \"S\" (if the i-th segment contains a shop) or \".\" (if the i-th segment doesn't contain a house or a shop). \n\nIt is guaranteed that there is at least one segment with a house.\n\nOutput\n\nIf there isn't a single value of k that makes it possible to give sweets to everybody in at most t units of time, print in a single line \"-1\" (without the quotes). Otherwise, print on a single line the minimum possible value of k.\n\n", "output": "def check(n, casas):\n    #print('n:',n)\n    global T,N,street\n    current = n\n    time = T\n    need = 0\n    last_house = 0\n    \n    for ind, i in enumerate(street):\n        time -= 1\n        \n        if i == 'S':\n            current += 1\n             \n        elif i == 'H':\n            need += 1\n            if need == 1:\n                last_house = ind\n        \n        if need > 0 and current >= need:\n            #print('p',time, ind-last_house)\n            current -= need\n            casas -= need\n            need = 0\n                        \n            if casas > 0:\n                if (ind-last_house)*2 >= N-last_house-1:\n                    time -= N-last_house-1 + N-ind-1\n                    \n                    return time >= 0\n                    \n                time -= (ind-last_house)*2\n            else:\n                time -= ind-last_house\n                    \n        #print('lugar:',i,ind,current, time, need, last_house)\n        \n        if casas == 0:\n            break\n        \n    #print(time)\n    return time >= 0 and casas == 0\n    \nN,T = [int(i) for i in input().split()]\n\nstreet = input().rstrip('.')\nN = len(street)\nC = street.count('H')\nS = street.count('S')\nl = max(C-S, 0)\nr = 500005\n#print(N, C)\nwhile l < r:\n    mid = (l+r)//2\n    if check(mid, C):\n        r = mid\n    else:\n        l = mid + 1\n\nprint(l if l < 500005 else -1)", "public_tests": {"input": ["23 50\nHHSS.......SSHHHHHHHHHH\n", "14 100\n...HHHSSS...SH\n", "6 6\nHSHSHS\n"], "output": ["8\n", "0\n", "1\n"]}, "private_tests": {"input": ["336 400\nHSSHHSSHHS..S..SS..H.S.H..SSH.H.H.H.S.H.S.S.H.S..SS..H.SS.H.SS.SS..SS.H...H.H.H.HSS..H...SS..SS.H..H.S.S....S.H.SS..HS..S.S.S.H.H.S..S.H.SS.SS..SS.SS.HS.SS.HSSSSHSSSSSS.H.SS..HHH.H.H.S..H.SS.S.H..SS.HS.SS.S.H.H.H..H.SS.HS.HHHSS.SS.S.SSS.S.S.SS.HS.H.S.SS.H.SS.H.S.SS.HS.SS..SS.H.S.H.SSH.HSSS.SS..SS.SS.HS.H.S.SS.SS..SS.HHHS.H.SS.SS.SS.SS\n", "8 8\nHH.SSSS.\n", "66 3\nHS................................................................\n", "37 37\n..H..S..H..S..SSHHHHHSSSSSSSSSSSSS...\n", "66 1\nHS................................................................\n", "336 336\nHSHHHSHHHS..S..SH..H.S.H..SHH.H.H.H.S.H.S.S.H.S..SS..H.SS.H.SH.SH..SH.H...H.H.H.HSS..H...SH..SH.H..H.S.S....S.H.SH..HS..S.S.S.H.H.S..S.H.SH.SH..SH.SH.HS.SH.HSSSHHSHSHSH.H.SH..HHH.H.H.S..H.SH.S.H..SH.HS.SH.S.H.H.H..H.SH.HS.HHHSH.SH.S.SSS.S.S.SH.HS.H.S.SH.H.SH.H.S.SH.HS.SH..SH.H.S.H.SHH.HSSH.SH..SH.SH.HS.H.S.SH.SH..SH.HHHS.H.SH.SH.SH.S.\n", "6 3\nSHSHHH\n", "34 32\n.HHHSSS.........................HS\n", "34 44\n.HHHSSS.........................HS\n", "6 11\nH..SSH\n", "162 108\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH............................................................SSSSSSSSSSSSSS\n", "336 336\nHSHHHSHHHS..S..SH..H.S.H..SHH.H.H.H.S.H.S.S.H.S..SS..H.SS.H.SH.SH..SH.H...H.H.H.HSS..H...SH..SH.H..H.S.S....S.H.SH..HS..S.S.S.H.H.S..S.H.SH.SH..SH.SH.HS.SH.HSSSHHSHSHSH.H.SH..HHH.H.H.S..H.SH.S.H..SH.HS.SH.S.H.H.H..H.SH.HS.HHHSH.SH.S.SSS.S.S.SH.HS.H.S.SH.H.SH.H.S.SH.HS.SH..SH.H.S.H.SHH.HSSH.SH..SH.SH.HS.H.S.SH.SH..SH.HHHS.H.SH.SH.SH.SH\n", "162 50\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH............................................................SSSSSSSSSSSSSS\n", "162 162\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH............................................................SSSSSSSSSSSSSH\n", "162 209\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH............................................................SSSSSSSSSSSSSS\n", "162 300\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH............................................................SSSSSSSSSSSSSS\n", "336 400\nHSHHHSHHHS..S..SH..H.S.H..SHH.H.H.H.S.H.S.S.H.S..SS..H.SS.H.SH.SH..SH.H...H.H.H.HSS..H...SH..SH.H..H.S.S....S.H.SH..HS..S.S.S.H.H.S..S.H.SH.SH..SH.SH.HS.SH.HSSSHHSHSHSH.H.SH..HHH.H.H.S..H.SH.S.H..SH.HS.SH.S.H.H.H..H.SH.HS.HHHSH.SH.S.SSS.S.S.SH.HS.H.S.SH.H.SH.H.S.SH.HS.SH..SH.H.S.H.SHH.HSSH.SH..SH.SH.HS.H.S.SH.SH..SH.HHHS.H.SH.SH.SH.SH\n", "2 2\nHS\n", "162 210\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH............................................................SSSSSSSSSSSSSH\n", "336 336\nHSSHHSSHHS..S..SS..H.S.H..SSH.H.H.H.S.H.S.S.H.S..SS..H.SS.H.SS.SS..SS.H...H.H.H.HSS..H...SS..SS.H..H.S.S....S.H.SS..HS..S.S.S.H.H.S..S.H.SS.SS..SS.SS.HS.SS.HSSSSHSSSSSS.H.SS..HHH.H.H.S..H.SS.S.H..SS.HS.SS.S.H.H.H..H.SS.HS.HHHSS.SS.S.SSS.S.S.SS.HS.H.S.SS.H.SS.H.S.SS.HS.SS..SS.H.S.H.SSH.HSSS.SS..SS.SS.HS.H.S.SS.SS..SS.HHHS.H.SS.SS.SS.SS\n", "4 7\nHHSS\n", "2 3\nHS\n", "34 34\n.HHHSSS.........................HS\n", "34 45\n.HHHSSS.........................HS\n", "34 33\n.HHHSSS.........................HS\n", "336 336\nHHHHHHHHHS..S..HH..H.S.H..HHH.H.H.H.S.H.S.S.H.S..SS..H.SS.H.HH.HH..HH.H...H.H.H.HSS..H...HH..HH.H..H.S.S....S.H.HH..HS..S.S.S.H.H.S..S.H.HH.HH..HH.HH.HS.HH.HSSHHHHHHHHH.H.HH..HHH.H.H.S..H.HH.S.H..HH.HS.HH.S.H.H.H..H.HH.HS.HHHHH.HH.S.SSS.S.S.HH.HS.H.S.HH.H.HH.H.S.HH.HS.HH..HH.H.S.H.HHH.HSHH.HH..HH.HH.HS.H.S.HH.HH..HH.HHHS.H.HH.HH.HH.HH\n", "162 210\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH............................................................SSSSSSSSSSSSSS\n", "162 108\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH............................................................SSSSSSSSSSSSSH\n"], "output": ["0\n", "1\n", "0\n", "1\n", "1\n", "18\n", "-1\n", "-1\n", "1\n", "0\n", "88\n", "18\n", "-1\n", "88\n", "88\n", "74\n", "18\n", "1\n", "88\n", "0\n", "0\n", "0\n", "3\n", "0\n", "3\n", "106\n", "87\n", "-1\n"]}, "index": 8079}, {"input": "One day Greg and his friends were walking in the forest. Overall there were n people walking, including Greg. Soon he found himself in front of a river. The guys immediately decided to get across the river. Luckily, there was a boat by the river bank, just where the guys were standing. We know that the boat can hold people with the total weight of at most k kilograms.\n\nGreg immediately took a piece of paper and listed there the weights of all people in his group (including himself). It turned out that each person weights either 50 or 100 kilograms. Now Greg wants to know what minimum number of times the boat needs to cross the river to transport the whole group to the other bank. The boat needs at least one person to navigate it from one bank to the other. As the boat crosses the river, it can have any non-zero number of passengers as long as their total weight doesn't exceed k.\n\nAlso Greg is wondering, how many ways there are to transport everybody to the other side in the minimum number of boat rides. Two ways are considered distinct if during some ride they have distinct sets of people on the boat.\n\nHelp Greg with this problem.\n\nInput\n\nThe first line contains two integers n, k (1 \u2264 n \u2264 50, 1 \u2264 k \u2264 5000) \u2014 the number of people, including Greg, and the boat's weight limit. The next line contains n integers \u2014 the people's weights. A person's weight is either 50 kilos or 100 kilos.\n\nYou can consider Greg and his friends indexed in some way.\n\nOutput\n\nIn the first line print an integer \u2014 the minimum number of rides. If transporting everyone to the other bank is impossible, print an integer -1.\n\nIn the second line print the remainder after dividing the number of ways to transport the people in the minimum number of rides by number 1000000007 (109 + 7). If transporting everyone to the other bank is impossible, print integer 0.\n\n", "output": "from collections import deque\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nc50 = sum([1 for i in a if i == 50])\nc100 = sum([1 for i in a if i == 100])\nc = [[0] * 51 for i in range(51)]\nc[0][0] = 1\nc[1][0] = 1\nc[1][1] = 1\nfor x in range(2, 51):\n    for y in range(x + 1):\n        c[x][y] = c[x - 1][y - 1] + c[x - 1][y]\nd = [[[[0, float('inf')] for l in range(2)] for i in range(c100 + 1)] for j in range(c50 + 1)]\n# d[i][j][c] \u043e\u0442\u0432\u0435\u0442, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043f\u0435\u0440\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u0438 i \u043f\u043e 50 \u043a\u0433 \u0438 j \u043f\u043e 100 \u043a\u0433 \u0438 \u043b\u043e\u0434\u043a\u0430 \u043d\u0430 \u0431\u0435\u0440\u0435\u0433\u0443 c\nd[0][0][0][0] = 1\nd[0][0][0][1] = 0\nq = deque()\nq.append([0, 0, 0])\nwhile len(q) > 0:\n    i, j, shore = q.popleft()\n    for fifty in range(c50 - i + 1 if shore == 0 else i + 1):\n        for hundreds in range(c100 - j + 1 if shore == 0 else j + 1):\n            if fifty * 50 + hundreds * 100 > k or fifty + hundreds == 0:\n                continue\n            i1 = i + fifty if shore == 0 else i - fifty\n            j1 = j + hundreds if shore == 0 else j - hundreds\n            if d[i1][j1][1 ^ shore][1] > d[i][j][shore][1] + 1:\n                d[i1][j1][1 ^ shore][1] = d[i][j][shore][1] + 1\n                d[i1][j1][1 ^ shore][0] = 0\n                q.append((i1, j1, 1 ^ shore))\n            if d[i1][j1][1 ^ shore][1] < d[i][j][shore][1] + 1:\n                continue\n            koeff = (c[c50 - i][fifty] if shore == 0 else c[i][fifty]) * (\n                c[c100 - j][hundreds] if shore == 0 else c[j][hundreds])\n            d[i1][j1][1 ^ shore][0] += d[i][j][shore][0] * koeff\n            d[i1][j1][1 ^ shore][0] %= 10 ** 9 + 7\nif d[c50][c100][1][1] == float('inf'):\n    print(-1)\n    print(0)\nelse:\n    print(d[c50][c100][1][1])\n    print(d[c50][c100][1][0])\n\n", "public_tests": {"input": ["1 50\n50\n", "3 100\n50 50 100\n", "2 50\n50 50\n"], "output": ["1\n1", "5\n2", "-1\n0"]}, "private_tests": {"input": ["1 204\n50\n", "5 123\n50 100 50 50 50\n", "3 99\n100 50 50\n", "32 121\n100 100 100 100 100 50 100 100 50 100 50 100 50 100 50 100 50 50 50 100 100 50 100 100 100 100 50 100 50 100 100 50\n", "23 100\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "41 218\n50 50 100 50 100 100 50 100 100 50 50 100 50 50 50 50 100 50 100 50 50 50 100 50 50 50 50 100 100 100 100 100 100 50 100 50 100 100 100 50 50\n", "5 258\n100 100 50 50 50\n", "5 188\n50 50 50 50 50\n", "50 185\n100 50 50 50 50 50 100 50 100 50 100 100 50 50 100 100 100 50 50 100 50 100 50 50 100 100 100 100 100 50 50 100 100 100 50 100 50 100 50 50 100 50 100 50 50 100 50 50 100 100\n", "3 50\n50 50 50\n", "43 178\n50 50 100 100 100 50 100 100 50 100 100 100 50 100 50 100 50 50 100 100 50 100 100 50 50 50 100 50 50 50 100 50 100 100 100 50 100 50 50 50 50 100 100\n", "29 129\n50 50 50 100 100 100 50 100 50 50 50 100 50 100 100 100 50 100 100 100 50 50 50 50 50 50 50 50 50\n", "31 161\n100 50 50 50 50 100 50 100 50 100 100 50 50 100 100 50 100 50 50 100 50 100 100 50 50 100 50 50 100 50 100\n", "4 100\n100 100 100 50\n", "49 290\n100 100 100 100 100 100 100 100 50 100 50 100 100 100 50 50 100 50 50 100 100 100 100 100 100 50 100 100 50 100 50 50 100 100 100 50 50 50 50 50 100 100 100 50 100 50 100 50 50\n", "5 257\n50 50 50 50 50\n", "36 250\n50 100 100 50 100 100 100 50 50 100 50 50 50 50 50 50 100 50 100 100 100 100 100 100 100 50 50 100 50 50 100 100 100 100 100 50\n", "3 121\n100 100 50\n", "34 2964\n50 50 50 50 50 100 50 100 50 100 100 50 50 50 50 50 50 100 100 100 50 50 100 100 50 50 50 100 50 100 100 50 100 50\n", "33 123\n50 100 100 100 50 100 50 50 50 50 50 100 100 50 100 50 100 50 50 50 50 50 50 50 100 100 50 50 100 100 100 100 100\n", "27 200\n50 50 50 50 100 100 50 50 100 100 100 50 100 50 100 50 50 100 100 100 50 100 100 50 50 50 100\n", "3 118\n100 100 100\n", "33 226\n50 50 50 50 50 100 100 100 100 50 100 50 100 50 100 50 100 100 50 50 50 100 100 50 50 100 50 100 50 100 50 50 50\n", "48 204\n100 100 100 50 50 50 50 100 100 50 100 100 50 100 50 50 50 100 100 100 50 100 50 50 50 100 50 100 50 100 100 100 50 50 100 100 100 50 100 50 50 50 50 50 100 50 50 50\n", "11 4668\n50 100 100 100 50 100 50 50 100 100 100\n", "8 191\n50 100 50 100 50 100 100 50\n", "50 110\n50 100 100 50 50 50 50 50 50 50 100 100 50 100 50 50 50 50 100 50 100 100 100 100 50 100 100 100 100 50 50 50 50 50 100 100 50 100 50 100 100 50 50 100 50 100 50 50 100 100\n", "31 197\n50 100 50 50 100 50 100 100 100 50 50 100 50 100 50 50 50 50 100 100 50 50 100 50 50 50 50 50 100 50 100\n", "50 125\n50 50 50 100 100 50 100 100 50 50 100 100 100 100 100 100 50 50 100 50 100 100 50 50 50 100 100 50 100 100 100 100 100 100 100 50 50 50 100 50 50 50 50 100 100 100 100 100 50 50\n", "31 291\n50 100 100 50 100 100 100 50 100 100 100 100 50 50 50 100 100 100 50 100 100 50 50 50 50 100 100 50 50 100 100\n", "3 49\n50 50 50\n", "10 4894\n100 50 50 50 100 50 50 100 50 100\n", "50 207\n50 100 100 100 100 50 100 100 100 50 100 100 100 50 100 100 50 100 50 100 50 100 100 100 50 100 50 50 100 50 100 100 50 100 100 100 100 50 100 100 100 100 50 50 50 100 100 50 100 100\n", "2 153\n100 50\n", "43 293\n50 50 100 100 50 100 100 50 100 100 50 100 50 100 50 50 50 50 50 100 100 100 50 50 100 50 100 100 100 50 100 100 100 50 50 50 100 50 100 100 50 100 50\n", "8 271\n100 50 100 50 50 50 100 50\n", "28 183\n50 100 100 50 100 50 100 100 50 100 50 100 100 100 50 50 100 50 50 50 100 50 100 50 50 100 100 100\n", "29 108\n100 50 100 100 100 100 100 50 50 100 100 100 50 100 50 50 100 50 100 50 50 100 100 50 50 50 100 100 50\n", "2 233\n50 100\n", "50 2263\n50 100 50 100 50 100 100 100 50 50 50 100 100 100 100 100 100 50 50 100 50 100 50 50 100 50 50 100 100 50 100 100 100 50 50 50 100 50 100 50 50 50 50 50 100 100 50 50 100 50\n", "1 2994\n100\n"], "output": ["1\n1", "9\n4536", "-1\n0", "101\n245361086", "43\n689584957", "39\n298372053", "3\n72", "3\n30", "73\n930170107", "-1\n0", "63\n503334985", "77\n37050209", "43\n670669365", "-1\n0", "39\n99624366", "1\n1", "27\n77447096", "-1\n0", "1\n1", "93\n337243149", "25\n271877303", "-1\n0", "31\n370884215", "45\n538567333", "1\n1", "11\n19318272", "143\n105841088", "41\n24368657", "153\n971933773", "23\n393964729", "-1\n0", "1\n1", "55\n833060250", "1\n1", "31\n658920847", "5\n78090", "41\n844409785", "87\n417423429", "1\n1", "3\n211048352", "1\n1"]}, "index": 8080}, {"input": "At the beginning of the new semester there is new schedule in the Berland State University. According to this schedule, n groups have lessons at the room 31. For each group the starting time of the lesson and the finishing time of the lesson are known. It has turned out that it is impossible to hold all lessons, because for some groups periods of their lessons intersect. If at some moment of time one groups finishes it's lesson, and the other group starts the lesson, their lessons don't intersect.\n\nThe dean wants to cancel the lesson in one group so that no two time periods of lessons of the remaining groups intersect. You are to find all ways to do that.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 5000) \u2014 amount of groups, which have lessons in the room 31. Then n lines follow, each of them contains two integers li ri (1 \u2264 li < ri \u2264 106) \u2014 starting and finishing times of lesson of the i-th group. It is possible that initially no two lessons intersect (see sample 1).\n\nOutput\n\nOutput integer k \u2014 amount of ways to cancel the lesson in exactly one group so that no two time periods of lessons of the remaining groups intersect. In the second line output k numbers \u2014 indexes of groups, where it is possible to cancel the lesson. Groups are numbered starting from 1 in the order that they were given in the input. Output the numbers in increasing order.\n\n", "output": "n = int(input())\nc=0\nl=[]\nfor i in range(1,n+1):\n    a , b = map(int,input().split())\n    l.append([a,b,i])\nl.sort()\n#print(l)\nright=0\nans=[]\nfor i in range(1,n+1):\n    k=1\n    right=0\n    for j in range(n):\n        if i==l[j][2]:\n            continue\n        if l[j][0]< right:\n            k=0\n            break\n        right=l[j][1]\n    if k:\n        ans.append(i)\nprint(len(ans))        \nprint(*ans)\n\n\n", "public_tests": {"input": ["3\n1 5\n2 6\n3 7\n", "4\n3 10\n20 30\n1 3\n1 39\n", "3\n3 10\n20 30\n1 3\n"], "output": ["0\n", "1\n4 ", "3\n1 2 3 "]}, "private_tests": {"input": ["4\n1 5\n5 7\n6 9\n9 10\n", "16\n203671 381501\n58867 59732\n817520 962123\n125391 163027\n601766 617692\n381501 444610\n761937 817520\n16 10551\n21096 38291\n718073 761937\n583868 601766\n554859 731755\n678098 718073\n962123 992003\n163027 203671\n87917 96397\n", "11\n717170 795210\n866429 970764\n163324 322182\n677099 717170\n241684 393937\n50433 114594\n970764 997956\n393937 664883\n235698 241684\n795210 832346\n114594 232438\n"], "output": ["2\n2 3 ", "1\n12 ", "1\n3 "]}, "index": 8081}, {"input": "Mad scientist Mike is building a time machine in his spare time. To finish the work, he needs a resistor with a certain resistance value.\n\nHowever, all Mike has is lots of identical resistors with unit resistance R0 = 1. Elements with other resistance can be constructed from these resistors. In this problem, we will consider the following as elements: \n\n  1. one resistor; \n  2. an element and one resistor plugged in sequence; \n  3. an element and one resistor plugged in parallel. \n\n<image>\n\nWith the consecutive connection the resistance of the new element equals R = Re + R0. With the parallel connection the resistance of the new element equals <image>. In this case Re equals the resistance of the element being connected.\n\nMike needs to assemble an element with a resistance equal to the fraction <image>. Determine the smallest possible number of resistors he needs to make such an element.\n\nInput\n\nThe single input line contains two space-separated integers a and b (1 \u2264 a, b \u2264 1018). It is guaranteed that the fraction <image> is irreducible. It is guaranteed that a solution always exists.\n\nOutput\n\nPrint a single number \u2014 the answer to the problem.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is recommended to use the cin, cout streams or the %I64d specifier.\n\n", "output": "a,b=map(int,input().split())\nc=0\nwhile (a>0 and b>0):\n    c+=(a//b)\n    a,b=b,a%b\nprint(c)", "public_tests": {"input": ["1 1\n", "199 200\n", "3 2\n"], "output": ["1\n", "200\n", "3\n"]}, "private_tests": {"input": ["36 316049483082136289\n", "1 923438\n", "999999999999999999 2\n", "2 999999999999999999\n", "3 1000000000000000000\n", "60236007668635342 110624799949034113\n", "4 5\n", "288565475053 662099878640\n", "8944394323791464 5527939700884757\n", "4052739537881 6557470319842\n", "44945570212853 72723460248141\n", "1 2\n", "9958408561221547 4644682781404278\n", "13 21\n", "2 5\n", "21 17\n", "5 8\n", "3052460231 856218974\n", "74 99\n", "3 5\n", "18 55\n", "1 4\n", "10000000000 1000000001\n", "123 1000000000000000000\n", "3 1\n", "1 1000000000000000000\n", "2 3\n", "29906716 35911991\n", "15 110897893734203629\n", "752278442523506295 52\n", "645597 134285\n", "2377 1055\n", "13 4\n", "999999999999999999 1000000000000000000\n", "4 43470202936783249\n", "439910263967866789 38\n", "999999999999999993 999999999999999991\n", "999999999999999999 5\n", "3945894354376 1\n", "1000000000000000000 3\n", "2 1\n", "2 1000000001\n", "999999999999999991 1000000000000000000\n", "1 3\n", "16 310139055712567491\n", "11504415412768 12754036168327\n", "498454011879264 806515533049393\n", "679891637638612258 420196140727489673\n", "21 8\n", "5 2\n"], "output": ["8779152307837131\n", "923438\n", "500000000000000001\n", "500000000000000001\n", "333333333333333336\n", "179\n", "5\n", "88\n", "77\n", "62\n", "67\n", "2\n", "196\n", "7\n", "4\n", "9\n", "5\n", "82\n", "28\n", "4\n", "21\n", "4\n", "100000019\n", "8130081300813023\n", "3\n", "1000000000000000000\n", "3\n", "92\n", "7393192915613582\n", "14466893125452056\n", "87\n", "33\n", "7\n", "1000000000000000000\n", "10867550734195816\n", "11576585893891241\n", "499999999999999998\n", "200000000000000004\n", "3945894354376\n", "333333333333333336\n", "2\n", "500000002\n", "111111111111111120\n", "3\n", "19383690982035476\n", "163\n", "72\n", "86\n", "7\n", "4\n"]}, "index": 8082}, {"input": "Inna loves sleeping very much, so she needs n alarm clocks in total to wake up. Let's suppose that Inna's room is a 100 \u00d7 100 square with the lower left corner at point (0, 0) and with the upper right corner at point (100, 100). Then the alarm clocks are points with integer coordinates in this square.\n\nThe morning has come. All n alarm clocks in Inna's room are ringing, so Inna wants to turn them off. For that Inna has come up with an amusing game:\n\n  * First Inna chooses a type of segments that she will use throughout the game. The segments can be either vertical or horizontal. \n  * Then Inna makes multiple moves. In a single move, Inna can paint a segment of any length on the plane, she chooses its type at the beginning of the game (either vertical or horizontal), then all alarm clocks that are on this segment switch off. The game ends when all the alarm clocks are switched off. \n\n\n\nInna is very sleepy, so she wants to get through the alarm clocks as soon as possible. Help her, find the minimum number of moves in the game that she needs to turn off all the alarm clocks!\n\nInput\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 105) \u2014 the number of the alarm clocks. The next n lines describe the clocks: the i-th line contains two integers xi, yi \u2014 the coordinates of the i-th alarm clock (0 \u2264 xi, yi \u2264 100).\n\nNote that a single point in the room can contain any number of alarm clocks and the alarm clocks can lie on the sides of the square that represents the room.\n\nOutput\n\nIn a single line print a single integer \u2014 the minimum number of segments Inna will have to draw if she acts optimally.\n\n", "output": "I=input\na=set()\nb=set()\nfor _ in '0'*int(I()):x,y=I().split();a.add(x);b.add(y)\nprint(min(len(a),len(b)))\n", "public_tests": {"input": ["4\n0 0\n0 1\n1 0\n1 1\n", "4\n0 0\n0 1\n0 2\n1 0\n", "4\n1 1\n1 2\n2 3\n3 3\n"], "output": ["2", "2", "3"]}, "private_tests": {"input": ["42\n28 87\n26 16\n59 90\n47 61\n28 83\n36 30\n67 10\n6 95\n9 49\n86 94\n52 24\n74 9\n86 24\n28 51\n25 99\n40 98\n57 33\n18 96\n43 36\n3 79\n4 86\n38 61\n25 61\n6 100\n58 81\n28 19\n64 4\n3 40\n2 56\n41 49\n97 100\n86 34\n42 36\n44 40\n14 85\n21 60\n76 99\n64 47\n69 13\n49 37\n97 37\n3 70\n", "1\n0 0\n", "21\n54 85\n69 37\n42 87\n53 18\n28 22\n13 3\n62 97\n38 91\n67 19\n100 79\n29 18\n48 40\n68 84\n44 20\n37 34\n73 53\n21 5\n20 73\n24 94\n23 52\n7 55\n", "19\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n", "12\n1 1\n1 3\n1 5\n2 1\n2 2\n2 4\n3 1\n3 3\n3 5\n4 1\n4 2\n4 3\n"], "output": ["31", "1", "20", "1", "4"]}, "index": 8083}, {"input": "Kicker (table football) is a board game based on football, in which players control the footballers' figures mounted on rods by using bars to get the ball into the opponent's goal. When playing two on two, one player of each team controls the goalkeeper and the full-backs (plays defence), the other player controls the half-backs and forwards (plays attack).\n\nTwo teams of company Q decided to battle each other. Let's enumerate players from both teams by integers from 1 to 4. The first and second player play in the first team, the third and the fourth one play in the second team. For each of the four players we know their game skills in defence and attack. The defence skill of the i-th player is ai, the attack skill is bi.\n\nBefore the game, the teams determine how they will play. First the players of the first team decide who will play in the attack, and who will play in the defence. Then the second team players do the same, based on the choice of their opponents.\n\nWe will define a team's defence as the defence skill of player of the team who plays defence. Similarly, a team's attack is the attack skill of the player of the team who plays attack. We assume that one team is guaranteed to beat the other one, if its defence is strictly greater than the opponent's attack and its attack is strictly greater than the opponent's defence.\n\nThe teams of company Q know each other's strengths and therefore arrange their teams optimally. Identify the team that is guaranteed to win (if both teams act optimally) or tell that there is no such team.\n\nInput\n\nThe input contain the players' description in four lines. The i-th line contains two space-separated integers ai and bi (1 \u2264 ai, bi \u2264 100) \u2014 the defence and the attack skill of the i-th player, correspondingly.\n\nOutput\n\nIf the first team can win, print phrase \"Team 1\" (without the quotes), if the second team can win, print phrase \"Team 2\" (without the quotes). If no of the teams can definitely win, print \"Draw\" (without the quotes).\n\n", "output": "def f():\n    a, b = map(int, input().split())\n    A, B = map(int, input().split())\n    return ((a, B), (A, b))\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\nx, y = f(), f()\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\nelse: print('Draw')\n", "public_tests": {"input": ["1 1\n2 2\n3 3\n2 2\n", "3 3\n2 2\n1 1\n2 2\n", "1 100\n100 1\n99 99\n99 99\n"], "output": ["Team 2\n", "Draw\n", "Team 1\n"]}, "private_tests": {"input": ["21 22\n21 16\n32 14\n39 35\n", "12 29\n44 8\n18 27\n43 19\n", "10 3\n2 5\n1 10\n2 10\n", "14 47\n47 42\n21 39\n40 7\n", "6 3\n6 10\n2 5\n4 4\n", "28 46\n50 27\n23 50\n21 45\n", "46 33\n12 3\n11 67\n98 77\n", "10 10\n4 9\n8 9\n7 6\n", "63 4\n18 60\n58 76\n44 93\n", "80 79\n79 30\n80 81\n40 80\n", "8 7\n1 5\n7 4\n8 8\n", "2 7\n8 4\n4 6\n10 8\n", "45 69\n91 96\n72 67\n24 30\n", "8 9\n11 17\n11 6\n5 9\n", "24 19\n18 44\n8 29\n30 39\n", "91 71\n87 45\n28 73\n9 48\n", "11 7\n12 8\n15 14\n14 14\n", "16 22\n11 3\n17 5\n12 27\n", "86 95\n86 38\n59 66\n44 78\n", "12 7\n3 15\n20 18\n20 8\n", "19 56\n59 46\n40 70\n67 34\n", "43 32\n49 48\n42 33\n60 30\n", "70 98\n62 5\n30 50\n66 96\n", "48 41\n15 47\n11 38\n19 31\n", "4 10\n9 9\n9 12\n13 10\n", "47 77\n13 88\n33 63\n75 38\n", "16 7\n9 3\n11 2\n11 4\n", "27 74\n97 22\n87 65\n24 52\n", "4 7\n24 11\n17 30\n21 4\n", "6 5\n10 6\n8 1\n3 2\n", "20 20\n18 8\n15 5\n17 20\n", "22 4\n29 38\n31 43\n47 21\n", "51 54\n95 28\n42 28\n17 48\n", "55 50\n54 23\n85 6\n32 60\n", "30 31\n98 15\n40 62\n10 22\n", "16 15\n19 1\n16 16\n20 9\n", "34 38\n91 17\n2 12\n83 90\n", "64 73\n59 46\n8 19\n57 18\n", "59 35\n10 14\n88 23\n58 16\n", "11 64\n92 47\n88 93\n41 26\n", "20 17\n14 10\n10 7\n19 18\n", "19 9\n47 28\n83 41\n76 14\n", "8 4\n9 10\n7 3\n6 5\n", "4 4\n4 15\n2 4\n10 12\n", "4 1\n4 3\n6 4\n2 8\n", "4 16\n6 28\n12 32\n28 3\n", "8 14\n8 12\n7 20\n14 6\n", "31 67\n8 13\n86 91\n43 12\n", "32 32\n10 28\n14 23\n39 5\n", "23 80\n62 56\n56 31\n9 50\n", "40 6\n9 1\n16 18\n4 23\n", "62 11\n79 14\n46 36\n91 52\n", "36 68\n65 82\n37 6\n21 60\n", "10 2\n9 3\n3 1\n9 4\n", "6 2\n7 5\n5 4\n8 6\n", "1 10\n1 10\n1 1\n7 8\n", "16 48\n16 49\n10 68\n60 64\n", "12 10\n7 3\n10 5\n1 14\n", "10 5\n3 1\n1 9\n1 2\n", "8 3\n4 9\n6 1\n5 6\n", "21 12\n29 28\n16 4\n10 1\n", "12 7\n3 17\n4 15\n2 8\n", "67 90\n63 36\n79 56\n25 56\n", "8 16\n12 10\n13 18\n8 4\n"], "output": ["Team 2\n", "Draw\n", "Draw\n", "Team 1\n", "Team 1\n", "Draw\n", "Team 2\n", "Team 1\n", "Draw\n", "Team 2\n", "Draw\n", "Draw\n", "Draw\n", "Draw\n", "Draw\n", "Team 1\n", "Team 2\n", "Draw\n", "Team 1\n", "Team 2\n", "Team 2\n", "Draw\n", "Draw\n", "Team 1\n", "Team 2\n", "Draw\n", "Draw\n", "Draw\n", "Team 2\n", "Draw\n", "Draw\n", "Team 2\n", "Team 1\n", "Team 2\n", "Draw\n", "Draw\n", "Draw\n", "Team 1\n", "Draw\n", "Draw\n", "Draw\n", "Draw\n", "Team 1\n", "Draw\n", "Team 2\n", "Draw\n", "Draw\n", "Team 2\n", "Draw\n", "Team 1\n", "Draw\n", "Draw\n", "Team 1\n", "Draw\n", "Draw\n", "Draw\n", "Team 2\n", "Draw\n", "Draw\n", "Team 1\n", "Team 1\n", "Draw\n", "Team 1\n", "Draw"]}, "index": 8084}, {"input": "Devu is a dumb guy, his learning curve is very slow. You are supposed to teach him n subjects, the ith subject has ci chapters. When you teach him, you are supposed to teach all the chapters of a subject continuously.\n\nLet us say that his initial per chapter learning power of a subject is x hours. In other words he can learn a chapter of a particular subject in x hours.\n\nWell Devu is not complete dumb, there is a good thing about him too. If you teach him a subject, then time required to teach any chapter of the next subject will require exactly 1 hour less than previously required (see the examples to understand it more clearly). Note that his per chapter learning power can not be less than 1 hour.\n\nYou can teach him the n subjects in any possible order. Find out minimum amount of time (in hours) Devu will take to understand all the subjects and you will be free to do some enjoying task rather than teaching a dumb guy.\n\nPlease be careful that answer might not fit in 32 bit data type.\n\nInput\n\nThe first line will contain two space separated integers n, x (1 \u2264 n, x \u2264 105). The next line will contain n space separated integers: c1, c2, ..., cn (1 \u2264 ci \u2264 105).\n\nOutput\n\nOutput a single integer representing the answer to the problem.\n\n", "output": "n,x=map(int,input().split())\na,s=sorted(map(int,input().split())),0\nfor i in a:\n    s+=i*x\n    if x>1:x-=1\nprint(s)", "public_tests": {"input": ["3 3\n1 1 1\n", "4 2\n5 1 2 1\n", "2 3\n4 1\n"], "output": ["6\n", "10\n", "11\n"]}, "private_tests": {"input": ["1 1\n1\n", "1 1\n9273\n", "20 10\n6 6 1 2 6 4 5 3 6 5 4 5 6 5 4 6 6 2 3 3\n", "1 2\n2\n", "20 4\n1 1 3 5 5 1 3 4 2 5 2 4 3 1 3 3 3 3 4 3\n", "2 1\n1 2\n", "1 2\n1\n"], "output": ["1\n", "9273\n", "196\n", "4\n", "65\n", "3\n", "2\n"]}, "index": 8085}, {"input": "Little Victor adores the sets theory. Let us remind you that a set is a group of numbers where all numbers are pairwise distinct. Today Victor wants to find a set of integers S that has the following properties:\n\n  * for all x <image> the following inequality holds l \u2264 x \u2264 r; \n  * 1 \u2264 |S| \u2264 k; \n  * lets denote the i-th element of the set S as si; value <image> must be as small as possible. \n\n\n\nHelp Victor find the described set.\n\nInput\n\nThe first line contains three space-separated integers l, r, k (1 \u2264 l \u2264 r \u2264 1012; 1 \u2264 k \u2264 min(106, r - l + 1)).\n\nOutput\n\nPrint the minimum possible value of f(S). Then print the cardinality of set |S|. Then print the elements of the set in any order.\n\nIf there are multiple optimal sets, you can print any of them.\n\n", "output": "def f(arr):\n    val = 0\n    for x in arr:\n        val ^= x\n    return val\n \n \ndef solve(l, r, k):\n    ret = [l]\n    if k >= 2:\n        cand = [l, l + 1]\n        if f(cand) < f(ret):\n            ret = cand\n        if l + 2 <= r:\n            cand = [l + 1, l + 2]\n            if f(cand) < f(ret):\n                ret = cand\n    if k >= 3:\n        x = 1\n        while x <= l:\n            x *= 2\n        if x + x // 2 <= r:\n            ret = [x - 1, x + x // 2, x + x // 2 - 1]\n    if k >= 4:\n        cand = [l, l + 1, l + 2, l + 3]\n        if f(cand) < f(ret):\n            ret = cand\n        if l + 4 <= r:\n            cand = [l + 1, l + 2, l + 3, l + 4]\n            if f(cand) < f(ret):\n                ret = cand\n    return ret\n \n \nl, r, k = map(int, input().split())\nans = solve(l, r, k)\nprint(f(ans))\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n\n\n", "public_tests": {"input": ["8 30 7\n", "8 15 3\n"], "output": ["0\n4\n8 9 10 11\n", "1\n2\n8 9\n"]}, "private_tests": {"input": ["999999999996 1000000000000 5\n", "1023 1536 3\n", "1 5 5\n", "1 3 3\n", "137765364256 267196143745 72414\n", "93593884958 917491772445 660\n", "842310243287 842310243288 1\n", "4294967297 12884901887 3\n", "100000000000 900000000000 5\n", "1 1000000000000 1000000\n", "3 7 4\n", "306146510877 306146510879 1\n", "67108863 100663296 3\n", "25676809216 942956612465 3\n", "250479992247 250479992252 4\n", "1023 1026 4\n", "414141414141 414141414143 2\n", "1 1000000000000 3\n", "549755813887 824633720832 3\n", "280336416328 280336416330 2\n", "258301936323 258301936328 2\n", "495378827677 495378827681 2\n", "886657651282 989457651027 4\n", "1 2 2\n", "1 4 2\n", "686725578739 886731078724 4\n", "17179869183 103079215104 3\n", "216252181447 527422131971 3\n", "424 518 34\n", "459818793694 459818793699 2\n", "262143 393216 3\n", "149740783265 149740783269 4\n", "100000000000 1000000000000 3\n", "462032569851 462032569852 2\n", "274877906944 549755813887 3\n", "846876302 846876302 1\n", "720858922694 720858922697 4\n", "884429359576 884429359580 4\n", "2097152 12582911 3\n", "808290922549 808290922551 3\n", "287823578576 287823578579 4\n", "1 1 1\n", "1023 9874156513 999999\n", "34359738367 51539607552 3\n", "549755813887 549755813888 2\n", "1023 1024 2\n", "164985732640 164986732640 1000000\n", "827528862516 827528862519 3\n", "435074698045 435074698045 1\n", "524287 786432 3\n", "10 1000000 100000\n", "646762942896 646762942900 2\n", "2 1000000000 3\n", "176104075742 176104075745 1\n", "991450161441 991450161445 1\n", "34359738365 34359738368 4\n", "15603259690 63210239992 2\n", "9879456 324987645100 5\n", "3 6 3\n", "950041445904 950041447193 4\n", "137438953473 412316860414 3\n", "788605408896 987573504326 3\n", "3 987654321502 1\n", "3 6 4\n", "548222439830 548222439834 4\n", "594093765558 594093765559 2\n", "628920636140 628920636145 1\n", "274877906944 824633720831 3\n", "453615794657 453615794662 4\n", "123452348785 123452348786 2\n", "727182873292 727182873295 2\n", "247946756425 247986106627 4\n"], "output": ["0\n4\n999999999996 999999999997 999999999998 999999999999 \n", "0\n3\n1023 1535 1536\n", "0\n4\n2 3 4 5\n", "0\n3\n1 2 3 \n", "0\n4\n137765364256 137765364257 137765364258 137765364259\n", "0\n4\n93593884958 93593884959 93593884960 93593884961\n", "842310243287\n1\n842310243287 \n", "1\n2\n4294967298 4294967299\n", "0\n4\n100000000000 100000000001 100000000002 100000000003\n", "0\n4\n2 3 4 5\n", "0\n4\n4 5 6 7\n", "306146510877\n1\n306146510877 \n", "0\n3\n67108863 100663295 100663296\n", "0\n3\n34359738367 51539607551 51539607552\n", "0\n4\n250479992248 250479992249 250479992250 250479992251 \n", "1\n2\n1024 1025 \n", "1\n2\n414141414142 414141414143 \n", "0\n3\n1 2 3\n", "0\n3\n549755813887 824633720831 824633720832\n", "1\n2\n280336416328 280336416329 \n", "1\n2\n258301936324 258301936325 \n", "1\n2\n495378827678 495378827679 \n", "0\n4\n886657651282 886657651283 886657651284 886657651285\n", "1\n1\n1 \n", "1\n1\n1 \n", "0\n4\n686725578740 686725578741 686725578742 686725578743\n", "0\n3\n17179869183 25769803775 25769803776\n", "0\n3\n274877906943 412316860415 412316860416\n", "0\n4\n424 425 426 427\n", "1\n2\n459818793694 459818793695 \n", "0\n3\n262143 393215 393216\n", "0\n4\n149740783266 149740783267 149740783268 149740783269 \n", "0\n3\n137438953471 206158430207 206158430208\n", "7\n2\n462032569851 462032569852 \n", "1\n2\n274877906944 274877906945\n", "846876302\n1\n846876302 \n", "0\n4\n720858922694 720858922695 720858922696 720858922697 \n", "0\n4\n884429359576 884429359577 884429359578 884429359579 \n", "0\n3\n4194303 6291455 6291456\n", "1\n2\n808290922550 808290922551 \n", "0\n4\n287823578576 287823578577 287823578578 287823578579 \n", "1\n1\n1 \n", "0\n4\n1024 1025 1026 1027\n", "0\n3\n34359738367 51539607551 51539607552\n", "549755813887\n1\n549755813887 \n", "1023\n1\n1023 \n", "0\n4\n164985732640 164985732641 164985732642 164985732643\n", "1\n2\n827528862516 827528862517 \n", "435074698045\n1\n435074698045 \n", "0\n3\n524287 786431 786432\n", "0\n4\n10 11 12 13\n", "1\n2\n646762942896 646762942897 \n", "0\n3\n3 5 6\n", "176104075742\n1\n176104075742 \n", "991450161441\n1\n991450161441 \n", "1\n2\n34359738366 34359738367 \n", "1\n2\n15603259690 15603259691\n", "0\n4\n9879456 9879457 9879458 9879459\n", "0\n3\n3 5 6 \n", "0\n4\n950041445904 950041445905 950041445906 950041445907\n", "1\n2\n137438953474 137438953475\n", "1\n2\n788605408896 788605408897\n", "3\n1\n3\n", "0\n3\n3 5 6 \n", "0\n4\n548222439830 548222439831 548222439832 548222439833 \n", "1\n2\n594093765558 594093765559 \n", "628920636140\n1\n628920636140 \n", "1\n2\n274877906944 274877906945\n", "0\n4\n453615794658 453615794659 453615794660 453615794661 \n", "3\n2\n123452348785 123452348786 \n", "1\n2\n727182873292 727182873293 \n", "0\n4\n247946756426 247946756427 247946756428 247946756429\n"]}, "index": 8086}, {"input": "Anya loves to watch horror movies. In the best traditions of horror, she will be visited by m ghosts tonight. Anya has lots of candles prepared for the visits, each candle can produce light for exactly t seconds. It takes the girl one second to light one candle. More formally, Anya can spend one second to light one candle, then this candle burns for exactly t seconds and then goes out and can no longer be used.\n\nFor each of the m ghosts Anya knows the time at which it comes: the i-th visit will happen wi seconds after midnight, all wi's are distinct. Each visit lasts exactly one second.\n\nWhat is the minimum number of candles Anya should use so that during each visit, at least r candles are burning? Anya can start to light a candle at any time that is integer number of seconds from midnight, possibly, at the time before midnight. That means, she can start to light a candle integer number of seconds before midnight or integer number of seconds after a midnight, or in other words in any integer moment of time.\n\nInput\n\nThe first line contains three integers m, t, r (1 \u2264 m, t, r \u2264 300), representing the number of ghosts to visit Anya, the duration of a candle's burning and the minimum number of candles that should burn during each visit. \n\nThe next line contains m space-separated numbers wi (1 \u2264 i \u2264 m, 1 \u2264 wi \u2264 300), the i-th of them repesents at what second after the midnight the i-th ghost will come. All wi's are distinct, they follow in the strictly increasing order.\n\nOutput\n\nIf it is possible to make at least r candles burn during each visit, then print the minimum number of candles that Anya needs to light for that.\n\nIf that is impossible, print  - 1.\n\n", "output": "m,t,r=map(int,input().split())\ncand=[];s=0\nfor i in map(int,input().split()):\n    cand=[q for q in cand if q>i ]\n    l=r-len(cand)\n    cand+=[i+t-j for j in range(l)]\n    s+=l\nprint(-1 if t<r else s)", "public_tests": {"input": ["1 1 3\n10\n", "1 8 3\n10\n", "2 10 1\n5 8\n"], "output": ["-1\n", "3\n", "1\n"]}, "private_tests": {"input": ["21 140 28\n40 46 58 67 71 86 104 125 129 141 163 184 193 215 219 222 234 237 241 246 263\n", "100 257 21\n50 56 57 58 59 60 62 66 71 75 81 84 86 90 91 92 94 95 96 97 100 107 110 111 112 114 115 121 123 125 126 127 129 130 133 134 136 137 147 151 152 156 162 167 168 172 176 177 178 179 181 182 185 186 188 189 190 191 193 199 200 201 202 205 209 213 216 218 220 222 226 231 232 235 240 241 244 248 249 250 252 253 254 256 257 258 260 261 263 264 268 270 274 276 278 279 282 294 297 300\n", "2 1 2\n1 2\n", "1 299 300\n300\n", "45 131 15\n14 17 26 31 32 43 45 56 64 73 75 88 89 93 98 103 116 117 119 123 130 131 135 139 140 153 156 161 163 172 197 212 217 230 232 234 239 240 252 256 265 266 272 275 290\n", "1 1 1\n4\n", "9 12 4\n1 2 3 4 5 7 8 9 10\n", "125 92 2\n1 2 3 4 5 7 8 9 10 12 17 18 20 21 22 23 24 25 26 28 30 32 33 34 35 36 37 40 41 42 43 44 45 46 50 51 53 54 55 57 60 61 62 63 69 70 74 75 77 79 80 81 82 83 84 85 86 88 89 90 95 96 98 99 101 103 105 106 107 108 109 110 111 112 113 114 118 119 120 121 122 123 124 126 127 128 129 130 133 134 135 137 139 141 143 145 146 147 148 149 150 151 155 157 161 162 163 165 166 167 172 173 174 176 177 179 181 183 184 185 187 188 189 191 194\n", "11 1 37\n18 48 50 133 141 167 168 173 188 262 267\n", "77 268 24\n2 6 15 18 24 32 35 39 41 44 49 54 59 63 70 73 74 85 90 91 95 98 100 104 105 108 114 119 120 125 126 128 131 137 139 142 148 150 151 153 155 158 160 163 168 171 175 183 195 198 202 204 205 207 208 213 220 224 230 239 240 244 256 258 260 262 264 265 266 272 274 277 280 284 291 299 300\n", "88 82 36\n16 17 36 40 49 52 57 59 64 66 79 80 81 82 87 91 94 99 103 104 105 112 115 117 119 122 123 128 129 134 135 140 146 148 150 159 162 163 164 165 166 168 171 175 177 179 181 190 192 194 196 197 198 202 203 209 211 215 216 223 224 226 227 228 230 231 232 234 235 242 245 257 260 262 263 266 271 274 277 278 280 281 282 284 287 290 296 297\n", "1 300 300\n1\n", "42 100 2\n55 56 57 58 60 61 63 66 71 73 75 76 77 79 82 86 87 91 93 96 97 98 99 100 101 103 108 109 111 113 114 117 119 122 128 129 134 135 137 141 142 149\n", "48 295 12\n203 205 207 208 213 214 218 219 222 223 224 225 228 229 230 234 239 241 243 245 246 247 248 251 252 253 254 255 259 260 261 262 264 266 272 277 278 280 282 285 286 287 289 292 293 296 299 300\n", "2 2 2\n1 3\n", "44 258 19\n3 9 10 19 23 32 42 45 52 54 65 66 69 72 73 93 108 116 119 122 141 150 160 162 185 187 199 205 206 219 225 229 234 235 240 242 253 261 264 268 275 277 286 295\n", "31 23 2\n42 43 44 47 48 49 50 51 52 56 57 59 60 61 64 106 108 109 110 111 114 115 116 117 118 119 120 123 126 127 128\n", "5 3 3\n1 4 5 6 10\n", "63 205 38\n47 50 51 54 56 64 67 69 70 72 73 75 78 81 83 88 91 99 109 114 118 122 136 137 138 143 146 147 149 150 158 159 160 168 171 172 174 176 181 189 192 195 198 201 204 205 226 232 235 238 247 248 253 254 258 260 270 276 278 280 282 284 298\n", "84 55 48\n8 9 10 12 14 17 22 28 31 33 36 37 38 40 45 46 48 50 51 58 60 71 73 74 76 77 78 82 83 87 88 90 92 96 98 99 103 104 105 108 109 111 113 117 124 125 147 148 149 152 156 159 161 163 169 170 171 177 179 180 185 186 190 198 199 201 254 256 259 260 261 262 264 267 273 275 280 282 283 286 288 289 292 298\n", "7 17 3\n1 3 4 5 7 9 10\n", "115 37 25\n1 3 6 8 10 13 14 15 16 17 20 24 28 32 34 36 38 40 41 45 49 58 59 60 62 63 64 77 79 80 85 88 90 91 97 98 100 101 105 109 111 112 114 120 122 123 124 128 132 133 139 144 145 150 151 152 154 155 158 159 160 162 164 171 178 181 182 187 190 191 192 193 194 196 197 198 206 207 213 216 219 223 224 233 235 238 240 243 244 248 249 250 251 252 254 260 261 262 267 268 270 272 273 275 276 278 279 280 283 286 288 289 292 293 300\n", "9 10 4\n1 2 3 4 5 6 8 9 10\n", "2 3 1\n2 5\n", "131 205 23\n1 3 8 9 10 11 12 13 14 17 18 19 23 25 26 27 31 32 33 36 37 39 40 41 43 44 51 58 61 65 68 69 71 72 73 75 79 80 82 87 88 89 90 91 92 93 96 99 100 103 107 109 113 114 119 121 122 123 124 127 135 136 137 139 141 142 143 144 148 149 151 152 153 154 155 157 160 162 168 169 170 171 172 174 176 177 179 182 183 185 186 187 190 193 194 196 197 200 206 209 215 220 224 226 230 232 233 235 237 240 242 243 244 247 251 252 260 264 265 269 272 278 279 280 281 288 290 292 294 296 300\n", "2 3 1\n2 4\n", "21 79 1\n13 42 51 60 69 77 94 103 144 189 196 203 210 215 217 222 224 234 240 260 282\n", "8 18 3\n2 3 4 5 6 7 8 9\n", "9 1 3\n1 2 4 5 6 7 8 9 10\n", "138 245 30\n3 5 6 8 9 13 15 16 19 20 24 25 27 29 30 32 33 34 35 36 37 38 40 42 47 51 52 53 55 56 58 59 63 66 67 68 69 72 73 74 75 77 78 80 81 82 85 86 87 89 91 93 95 96 99 100 102 104 105 108 110 111 112 117 122 124 125 128 129 131 133 136 139 144 145 146 147 148 149 151 153 155 156 159 162 163 164 165 168 174 175 176 183 191 193 194 195 203 204 205 206 211 216 217 218 219 228 229 230 235 237 238 239 242 244 248 249 250 252 253 255 257 258 260 264 265 266 268 270 271 272 277 278 280 285 288 290 291\n", "9 7 1\n2 3 4 5 6 7 8 9 10\n", "2 2 2\n1 2\n", "7 2 2\n1 2 3 4 6 7 9\n", "9 16 2\n1 2 3 4 6 7 8 9 10\n"], "output": ["56\n", "35\n", "-1\n", "-1\n", "45\n", "1\n", "5\n", "6\n", "-1\n", "48\n", "144\n", "300\n", "2\n", "12\n", "4\n", "38\n", "6\n", "11\n", "76\n", "296\n", "3\n", "224\n", "7\n", "2\n", "46\n", "1\n", "4\n", "3\n", "-1\n", "60\n", "2\n", "3\n", "10\n", "2\n"]}, "index": 8087}, {"input": "After Vitaly was expelled from the university, he became interested in the graph theory.\n\nVitaly especially liked the cycles of an odd length in which each vertex occurs at most once.\n\nVitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t \u2014 the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w \u2014 the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.\n\nTwo ways to add edges to the graph are considered equal if they have the same sets of added edges.\n\nSince Vitaly does not study at the university, he asked you to help him with this task.\n\nInput\n\nThe first line of the input contains two integers n and m (<image> \u2014 the number of vertices in the graph and the number of edges in the graph.\n\nNext m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi (1 \u2264 ai, bi \u2264 n) \u2014 the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.\n\nIt is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n\nOutput\n\nPrint in the first line of the output two space-separated integers t and w \u2014 the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n\n", "output": "n, m = [int(x) for x in input().split()]\nE = {i:[] for i in range(n)}\nfor i in range(m):\n    u, v = [int(x)-1 for x in input().split()]\n    E[v].append(u)\n    E[u].append(v)\n\ndef dfs():\n    visited = [False for i in range(n)]\n    colour = [0 for i in range(n)]\n    ans = 0\n    for v in range(n):\n        if visited[v]: continue\n        stack = [(v, 0)]\n        part = [0, 0]\n        while stack:\n            node, c = stack.pop()\n            if not visited[node]:\n                part[c] += 1\n                visited[node] = True\n                colour[node] = c\n                stack.extend((u,c^1) for u in E[node])\n            elif c != colour[node]:\n                return (0, 1)\n        ans += (part[0]*(part[0] - 1) + part[1]*(part[1] - 1)) // 2\n    return (1, ans)\n\nif m == 0:\n    print(3, n*(n-1)*(n-2)//6)\nelif max(len(E[v]) for v in E) == 1:\n    print(2, m*(n-2))\nelse:\n    ans = dfs()\n    print(ans[0], ans[1])\n\n        \n\n    \n", "public_tests": {"input": ["4 4\n1 2\n1 3\n4 2\n4 3\n", "3 0\n", "3 3\n1 2\n2 3\n3 1\n"], "output": ["1 2", "3 1", "0 1"]}, "private_tests": {"input": ["5 4\n1 2\n1 3\n1 4\n1 5\n", "59139 1\n10301 5892\n", "76259 0\n", "9859 1\n1721 9478\n", "25987 0\n", "9411 0\n", "6 4\n1 2\n2 3\n3 1\n4 5\n", "92387 0\n", "59139 0\n", "25539 0\n", "5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n", "6 3\n1 2\n2 3\n4 5\n", "9859 0\n", "6 3\n1 2\n4 3\n6 5\n", "100000 0\n"], "output": ["1 6", "2 59137", "3 73910302948209", "2 9857", "3 2924603876545", "3 138872935265", "0 1", "3 131421748719345", "3 34470584559489", "3 2775935665889", "0 1", "1 1", "3 159667007809", "2 12", "3 166661666700000"]}, "index": 8088}, {"input": "Robot Doc is located in the hall, with n computers stand in a line, numbered from left to right from 1 to n. Each computer contains exactly one piece of information, each of which Doc wants to get eventually. The computers are equipped with a security system, so to crack the i-th of them, the robot needs to collect at least ai any pieces of information from the other computers. Doc can hack the computer only if he is right next to it.\n\nThe robot is assembled using modern technologies and can move along the line of computers in either of the two possible directions, but the change of direction requires a large amount of resources from Doc. Tell the minimum number of changes of direction, which the robot will have to make to collect all n parts of information if initially it is next to computer with number 1.\n\nIt is guaranteed that there exists at least one sequence of the robot's actions, which leads to the collection of all information. Initially Doc doesn't have any pieces of information.\n\nInput\n\nThe first line contains number n (1 \u2264 n \u2264 1000). The second line contains n non-negative integers a1, a2, ..., an (0 \u2264 ai < n), separated by a space. It is guaranteed that there exists a way for robot to collect all pieces of the information.\n\nOutput\n\nPrint a single number \u2014 the minimum number of changes in direction that the robot will have to make in order to collect all n parts of information.\n\n", "output": "n=int(input())\na=list(map(int,input().split()))\ns=0\nr=0\ni=0\nk=1\nf=0\nwhile s!=n:\n\tif a[i]<=s:\n\t\ts+=1\n\t\ta[i]=9999\n\tif (s!=n)and((i==n-1)or((i==0)and(f))):\n\t\tr+=1\n\t\tk*=-1\n\t\tf=1\n\ti+=k\nprint(r)\n", "public_tests": {"input": ["3\n0 2 0\n", "7\n0 3 1 0 5 2 6\n", "5\n4 2 3 0 1\n"], "output": ["1", "2", "3"]}, "private_tests": {"input": ["9\n1 3 5 7 8 6 4 2 0\n", "9\n3 1 5 6 0 3 2 0 0\n", "10\n0 0 0 0 0 0 0 0 0 0\n", "9\n6 2 3 7 4 8 5 1 0\n", "10\n3 4 8 9 5 1 2 0 6 7\n", "100\n1 3 5 7 58 11 13 15 17 19 45 23 25 27 29 31 33 35 37 39 41 43 21 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 81 79 83 85 87 89 91 93 95 97 48 98 96 94 92 90 88 44 84 82 80 78 76 74 72 70 68 66 64 62 60 9 56 54 52 50 99 46 86 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0\n", "99\n28 59 73 89 52 27 0 20 36 12 83 95 31 24 54 94 49 14 51 34 50 93 13 1 2 68 63 48 41 81 23 43 18 9 16 38 33 60 62 3 40 85 72 69 90 98 11 37 22 44 35 6 21 39 82 10 64 66 96 42 74 30 8 67 97 46 84 32 17 57 75 71 5 26 4 55 58 29 7 15 45 19 92 91 78 65 88 25 86 80 77 87 79 53 47 70 56 76 61\n", "100\n35 53 87 49 13 24 93 20 5 11 31 32 40 52 96 46 1 25 66 69 28 88 84 82 70 9 75 39 26 21 18 29 23 57 90 16 48 22 95 0 58 43 7 73 8 62 63 30 64 92 79 3 6 94 34 12 76 99 67 55 56 97 14 91 68 36 44 78 41 71 86 89 47 74 4 45 98 37 80 33 83 27 42 59 72 54 17 60 51 81 15 77 65 50 10 85 61 19 38 2\n", "99\n1 51 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 42 43 45 47 49 3 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 98 96 94 92 90 88 86 84 82 80 8 76 74 72 70 68 66 22 62 60 58 56 54 52 0 48 46 44 41 40 38 36 34 32 30 28 26 24 64 20 18 16 14 12 10 78 6 4 2 50\n", "99\n22 3 19 13 65 87 28 17 41 40 31 21 8 37 29 65 65 53 16 33 13 5 76 4 72 9 2 76 57 72 50 15 75 0 30 13 83 36 12 31 49 51 65 22 48 31 60 15 2 17 6 1 8 0 1 63 3 16 7 7 2 1 47 28 26 21 2 36 1 5 20 25 44 0 2 39 46 30 33 11 15 34 34 4 84 52 0 39 7 3 17 15 6 38 52 64 26 1 0\n", "100\n32 47 74 8 14 4 12 68 18 0 44 80 14 38 6 57 4 72 69 3 21 78 74 22 39 32 58 63 34 33 23 6 39 11 6 12 18 4 0 11 20 28 16 1 22 12 57 55 13 48 43 1 50 18 87 6 11 45 38 67 37 14 7 56 6 41 1 55 5 73 78 64 38 18 38 8 37 0 18 61 37 58 58 62 86 5 0 2 15 43 34 61 2 21 15 9 69 1 11 24\n", "10\n1 2 4 5 0 1 3 7 1 4\n", "10\n7 1 9 3 5 8 6 0 2 4\n", "10\n5 0 0 1 3 2 2 2 5 7\n", "99\n22 14 0 44 6 17 6 6 37 45 0 48 19 8 57 8 10 0 3 12 25 2 5 53 9 49 15 6 38 14 9 40 38 22 27 12 64 10 11 35 89 19 46 39 12 24 48 0 52 1 27 27 24 4 64 24 5 0 67 3 5 39 0 1 13 37 2 8 46 1 28 70 6 79 14 15 33 6 7 34 6 18 4 71 1 55 33 71 18 11 47 23 72 53 65 32 2 7 28\n", "99\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 98 96 94 92 90 88 86 84 82 80 78 76 74 72 70 68 66 64 62 60 58 56 54 52 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0\n", "9\n2 6 4 1 0 8 5 3 7\n", "100\n34 16 42 21 84 27 11 7 82 16 95 39 36 64 26 0 38 37 2 2 16 56 16 61 55 42 26 5 61 8 30 20 19 15 9 78 5 34 15 0 3 17 36 36 1 5 4 26 18 0 14 25 7 5 91 7 43 26 79 37 17 27 40 55 66 7 0 2 16 23 68 35 2 5 9 21 1 7 2 9 4 3 22 15 27 6 0 47 5 0 12 9 20 55 36 10 6 8 5 1\n", "100\n40 3 55 7 6 77 13 46 17 64 21 54 25 27 91 41 1 15 37 82 23 43 42 47 26 95 53 5 11 59 61 9 78 67 69 58 73 0 36 79 60 83 2 87 63 33 71 89 97 99 98 93 56 92 19 88 86 84 39 28 65 20 34 76 51 94 66 12 62 49 96 72 24 52 48 50 44 35 74 31 38 57 81 32 22 80 70 29 30 18 68 16 14 90 10 8 85 4 45 75\n", "99\n89 96 56 31 32 14 9 66 87 34 69 5 92 54 41 52 46 30 22 26 16 18 20 68 62 73 90 43 79 33 58 98 37 45 10 78 94 51 19 0 91 39 28 47 17 86 3 61 77 7 15 64 55 83 65 71 97 88 6 48 24 11 8 42 81 4 63 93 50 74 35 12 95 27 53 82 29 85 84 60 72 40 36 57 23 13 38 59 49 1 75 44 76 2 21 25 70 80 67\n", "10\n8 6 5 3 9 7 1 4 2 0\n", "3\n0 2 1\n", "9\n2 0 8 1 0 3 0 5 3\n", "10\n1 3 5 7 9 8 6 4 2 0\n", "2\n0 1\n", "9\n1 3 8 6 2 4 5 0 7\n", "10\n1 7 5 3 2 6 0 8 4 9\n", "100\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 98 96 94 92 90 88 86 84 82 80 78 76 74 72 70 68 66 64 62 60 58 56 54 52 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0\n", "100\n13 89 81 0 62 1 59 92 29 13 1 37 2 8 53 15 20 34 12 70 0 85 97 55 84 60 37 54 14 65 22 69 30 22 95 44 59 85 50 80 9 71 91 93 74 21 11 78 28 21 40 81 76 24 26 60 48 85 61 68 89 76 46 73 34 52 98 29 4 38 94 51 5 55 6 27 74 27 38 37 82 70 44 89 51 59 30 37 15 55 63 78 42 39 71 43 4 10 2 13\n", "1\n0\n", "10\n2 2 0 0 6 2 9 0 2 0\n", "9\n2 4 3 1 3 0 5 4 3\n", "9\n3 5 6 8 7 0 4 2 1\n", "99\n24 87 25 82 97 11 37 15 23 19 34 17 76 13 45 89 33 1 27 78 63 43 54 47 49 2 42 41 75 83 61 90 65 67 21 71 60 57 77 62 81 58 85 69 3 91 68 55 72 93 29 94 66 16 88 86 84 53 14 39 35 44 9 70 80 92 56 79 74 5 64 31 52 50 48 46 51 59 40 38 36 96 32 30 28 95 7 22 20 18 26 73 12 10 8 6 4 98 0\n", "100\n27 20 18 78 93 38 56 2 48 75 36 88 96 57 69 10 25 74 68 86 65 85 66 14 22 12 43 80 99 34 42 63 61 71 77 15 37 54 21 59 23 94 28 30 50 84 62 76 47 16 26 64 82 92 72 53 17 11 41 91 35 83 79 95 67 13 1 7 3 4 73 90 8 19 33 58 98 32 39 45 87 52 60 46 6 44 49 70 51 9 5 29 31 24 40 97 81 0 89 55\n", "99\n82 7 6 77 17 28 90 3 68 12 63 60 24 20 4 81 71 85 57 45 11 84 3 91 49 34 89 82 0 50 48 88 36 76 36 5 62 48 20 2 20 45 69 27 37 62 42 31 57 51 92 84 89 25 7 62 12 23 23 56 30 90 27 10 77 58 48 38 56 68 57 15 33 1 34 67 16 47 75 70 69 28 38 16 5 61 85 76 44 90 37 22 77 94 55 1 97 8 69\n"], "output": ["8", "2", "0", "4", "6", "96", "63", "67", "96", "3", "4", "2", "9", "1", "3", "98", "7", "3", "75", "75", "8", "1", "2", "9", "0", "7", "8", "99", "21", "0", "2", "3", "5", "74", "69", "22"]}, "index": 8089}, {"input": "Student Vladislav came to his programming exam completely unprepared as usual. He got a question about some strange algorithm on a graph \u2014 something that will definitely never be useful in real life. He asked a girl sitting next to him to lend him some cheat papers for this questions and found there the following definition:\n\nThe minimum spanning tree T of graph G is such a tree that it contains all the vertices of the original graph G, and the sum of the weights of its edges is the minimum possible among all such trees.\n\nVladislav drew a graph with n vertices and m edges containing no loops and multiple edges. He found one of its minimum spanning trees and then wrote for each edge its weight and whether it is included in the found tree or not. Unfortunately, the piece of paper where the graph was painted is gone and the teacher is getting very angry and demands to see the original graph. Help Vladislav come up with a graph so that the information about the minimum spanning tree remains correct.\n\nInput\n\nThe first line of the input contains two integers n and m (<image>) \u2014 the number of vertices and the number of edges in the graph.\n\nEach of the next m lines describes an edge of the graph and consists of two integers aj and bj (1 \u2264 aj \u2264 109, bj = {0, 1}). The first of these numbers is the weight of the edge and the second number is equal to 1 if this edge was included in the minimum spanning tree found by Vladislav, or 0 if it was not.\n\nIt is guaranteed that exactly n - 1 number {bj} are equal to one and exactly m - n + 1 of them are equal to zero.\n\nOutput\n\nIf Vladislav has made a mistake and such graph doesn't exist, print  - 1.\n\nOtherwise print m lines. On the j-th line print a pair of vertices (uj, vj) (1 \u2264 uj, vj \u2264 n, uj \u2260 vj), that should be connected by the j-th edge. The edges are numbered in the same order as in the input. The graph, determined by these edges, must be connected, contain no loops or multiple edges and its edges with bj = 1 must define the minimum spanning tree. In case there are multiple possible solutions, print any of them.\n\n", "output": "f = lambda: map(int, input().split())\nn, m = f()\np = []\nfor i in range(m):\n    a, b = f()\n    p.append((a, 1 - b, i))\np.sort()\nk = j = 0\ns = [0] * m\nu, v = 1, 3\nfor a, b, i in p:\n    if not b:\n        k += j\n        s[i] = (j + 1, j + 2)\n        j += 1\n    elif k:\n        k -= 1\n        s[i] = (u, v)\n        if v - u - 2: u += 1\n        else: u, v = 1, v + 1\n    else:\n        print(-1)\n        exit(0)\nfor x, y in s: print(x, y)", "public_tests": {"input": ["3 3\n1 0\n2 1\n3 1\n", "4 5\n2 1\n3 1\n4 0\n1 1\n5 0\n"], "output": ["-1\n", "1 3\n1 4\n2 3\n1 2\n2 4\n"]}, "private_tests": {"input": ["10 15\n752087443 1\n537185872 1\n439895449 1\n494086747 1\n718088132 1\n93444012 0\n670136349 1\n545547453 0\n718088132 0\n853059674 0\n853059674 1\n762928724 1\n762928724 0\n853059674 0\n156495293 1\n", "3 3\n4 1\n5 1\n7 0\n", "3 2\n8 1\n9 1\n", "5 10\n1 1\n1 1\n1 0\n1 1\n2 0\n2 0\n3 1\n2 0\n3 0\n3 0\n", "10 15\n900000001 1\n900000001 1\n900000001 0\n900000000 1\n900000001 0\n900000002 1\n900000000 1\n900000002 1\n900000001 0\n900000001 0\n900000001 0\n900000002 1\n900000000 0\n900000002 1\n900000000 1\n", "4 5\n4 1\n4 1\n4 0\n4 0\n6 1\n", "4 4\n2 1\n6 0\n7 1\n7 1\n", "10 15\n417559883 0\n300974070 1\n292808458 1\n469395226 0\n469395226 1\n564721882 1\n125636288 1\n417559883 0\n417559883 1\n469395226 0\n376390930 1\n233782394 1\n780369860 1\n564721882 0\n417559883 0\n", "2 1\n7 1\n", "4 5\n7 0\n3 0\n1 1\n5 1\n7 1\n", "10 15\n900000007 1\n900000002 1\n900000004 0\n900000002 1\n900000006 1\n900000000 1\n900000006 1\n900000008 1\n900000002 0\n900000003 0\n900000002 0\n900000005 0\n900000001 0\n900000000 1\n900000008 1\n", "10 15\n900000001 1\n900000001 1\n900000002 1\n900000001 1\n900000001 0\n900000001 1\n900000001 0\n900000001 0\n900000001 0\n900000001 1\n900000001 0\n900000001 0\n900000004 1\n900000000 1\n900000001 1\n", "10 15\n900000000 1\n900000003 1\n900000000 1\n900000000 0\n900000003 0\n900000005 1\n900000005 1\n900000005 1\n900000001 0\n900000002 0\n900000002 0\n900000004 1\n900000002 0\n900000000 1\n900000004 1\n", "10 15\n900000012 1\n900000010 1\n900000007 0\n900000005 0\n900000014 1\n900000000 1\n900000004 0\n900000006 1\n900000009 0\n900000002 0\n900000008 0\n900000001 1\n900000011 1\n900000003 1\n900000013 1\n", "4 5\n3 1\n4 1\n4 0\n6 0\n6 1\n", "5 5\n1 1\n2 1\n3 0\n4 1\n5 1\n", "10 15\n900000004 0\n900000006 1\n900000001 1\n900000004 1\n900000007 1\n900000007 1\n900000004 1\n900000008 1\n900000004 0\n900000004 0\n900000007 1\n900000005 0\n900000004 0\n900000002 0\n900000000 1\n", "3 3\n5 0\n4 1\n5 1\n", "4 4\n2 1\n8 0\n8 1\n8 1\n", "4 4\n2 1\n3 0\n3 1\n4 1\n", "4 4\n2 1\n3 1\n1 1\n4 0\n", "10 15\n900000006 1\n900000000 1\n900000004 0\n900000000 1\n900000004 0\n900000006 1\n900000000 1\n900000006 1\n900000005 1\n900000001 0\n900000003 1\n900000006 1\n900000000 0\n900000003 0\n900000000 0\n", "5 6\n1 1\n2 1\n3 0\n4 1\n5 0\n6 1\n", "4 4\n2 0\n2 1\n8 1\n2 1\n", "3 3\n4 1\n5 0\n7 1\n", "4 6\n1 1\n4 1\n2 0\n2 1\n4 0\n3 0\n", "5 8\n1 0\n1 1\n1 1\n2 0\n1 0\n2 1\n1 0\n1 1\n", "5 6\n1 1\n2 1\n3 0\n4 0\n5 1\n6 1\n", "10 15\n761759620 0\n761759620 1\n787655728 1\n761759620 0\n294001884 1\n465325912 1\n787655728 0\n683571303 1\n683571303 0\n761759620 0\n787655728 0\n391499930 1\n758807870 1\n611782565 1\n132266542 1\n", "5 9\n1 1\n2 1\n3 0\n4 1\n5 0\n6 0\n7 0\n8 1\n9 0\n", "5 9\n1 1\n2 1\n3 0\n4 1\n5 0\n6 0\n7 1\n8 0\n9 0\n", "5 8\n1 0\n1 1\n1 1\n3 0\n1 0\n3 1\n2 0\n1 1\n", "5 8\n1 0\n1 1\n1 1\n3 0\n1 0\n4 1\n2 0\n1 1\n", "3 3\n4 1\n4 0\n4 1\n", "3 3\n4 0\n5 1\n4 1\n", "5 7\n1 1\n1 1\n1 0\n2 0\n1 0\n2 1\n2 1\n", "4 6\n2 1\n7 1\n3 0\n1 1\n7 0\n6 0\n", "4 6\n1 1\n3 1\n2 0\n2 1\n3 0\n3 0\n", "4 6\n2 1\n4 0\n3 0\n1 1\n4 1\n5 0\n", "5 10\n1 1\n1 1\n1 0\n1 1\n2 0\n2 0\n2 1\n2 0\n2 0\n2 0\n"], "output": ["-1\n", "1 2\n2 3\n1 3\n", "1 2\n2 3\n", "-1\n", "4 5\n5 6\n1 4\n1 2\n2 4\n6 7\n2 3\n7 8\n1 5\n2 5\n3 5\n8 9\n1 3\n9 10\n3 4\n", "-1\n", "-1\n", "1 3\n4 5\n3 4\n1 5\n7 8\n8 9\n1 2\n1 4\n6 7\n2 5\n5 6\n2 3\n9 10\n3 5\n2 4\n", "1 2\n", "-1\n", "7 8\n3 4\n2 5\n4 5\n5 6\n1 2\n6 7\n8 9\n1 4\n1 5\n2 4\n3 5\n1 3\n2 3\n9 10\n", "2 3\n3 4\n8 9\n4 5\n1 3\n5 6\n1 4\n2 4\n1 5\n6 7\n2 5\n3 5\n9 10\n1 2\n7 8\n", "-1\n", "1 8\n1 6\n2 5\n3 4\n1 10\n1 2\n2 4\n1 5\n4 5\n2 3\n3 5\n1 3\n1 7\n1 4\n1 9\n", "1 2\n1 3\n2 3\n2 4\n1 4\n", "1 2\n2 3\n1 3\n3 4\n4 5\n", "1 4\n5 6\n2 3\n3 4\n6 7\n7 8\n4 5\n9 10\n2 4\n1 5\n8 9\n3 5\n2 5\n1 3\n1 2\n", "1 3\n1 2\n2 3\n", "1 2\n1 3\n2 3\n3 4\n", "1 2\n1 3\n2 3\n3 4\n", "2 3\n3 4\n1 2\n1 3\n", "6 7\n1 2\n2 5\n2 3\n3 5\n7 8\n3 4\n8 9\n5 6\n2 4\n4 5\n9 10\n1 3\n1 5\n1 4\n", "1 2\n1 3\n2 3\n1 4\n2 4\n1 5\n", "1 3\n1 2\n3 4\n2 3\n", "-1\n", "-1\n", "1 3\n1 2\n2 3\n1 5\n1 4\n4 5\n2 4\n3 4\n", "-1\n", "1 4\n8 9\n9 10\n2 4\n2 3\n4 5\n2 5\n6 7\n1 3\n1 5\n3 5\n3 4\n7 8\n5 6\n1 2\n", "-1\n", "1 2\n1 3\n2 3\n1 4\n2 4\n3 4\n1 5\n2 5\n3 5\n", "1 3\n1 2\n2 3\n1 5\n1 4\n4 5\n2 4\n3 4\n", "-1\n", "1 2\n1 3\n2 3\n", "-1\n", "-1\n", "-1\n", "1 2\n3 4\n1 3\n2 3\n1 4\n2 4\n", "1 3\n2 4\n2 3\n1 2\n1 4\n3 4\n", "1 2\n2 3\n1 3\n3 4\n1 4\n2 4\n4 5\n1 5\n2 5\n3 5\n"]}, "index": 8090}, {"input": "Johnny drives a truck and must deliver a package from his hometown to the district center. His hometown is located at point 0 on a number line, and the district center is located at the point d.\n\nJohnny's truck has a gas tank that holds exactly n liters, and his tank is initially full. As he drives, the truck consumes exactly one liter per unit distance traveled. Moreover, there are m gas stations located at various points along the way to the district center. The i-th station is located at the point xi on the number line and sells an unlimited amount of fuel at a price of pi dollars per liter. Find the minimum cost Johnny must pay for fuel to successfully complete the delivery.\n\nInput\n\nThe first line of input contains three space separated integers d, n, and m (1 \u2264 n \u2264 d \u2264 109, 1 \u2264 m \u2264 200 000) \u2014 the total distance to the district center, the volume of the gas tank, and the number of gas stations, respectively.\n\nEach of the next m lines contains two integers xi, pi (1 \u2264 xi \u2264 d - 1, 1 \u2264 pi \u2264 106) \u2014 the position and cost of gas at the i-th gas station. It is guaranteed that the positions of the gas stations are distinct.\n\nOutput\n\nPrint a single integer \u2014 the minimum cost to complete the delivery. If there is no way to complete the delivery, print -1.\n\n", "output": "destination, max_gas_tank_volume, gas_prices_number = map(int, input().split())\nstart_point = 0\ngas_prices = {start_point:0}\nfor i in range(gas_prices_number):\n    coordinate, price = map(int, input().split())\n    gas_prices[coordinate] = price\npoints = sorted(gas_prices.keys(), reverse = True)\ncurrent_point = start_point\ncount = 0\ngas_tank_volume = max_gas_tank_volume\nreachable_points = []\nwhile current_point != destination:\n    farthest_reachable_point = current_point + max_gas_tank_volume\n    while points and points[-1] <= farthest_reachable_point:\n        reachable_points.append(points.pop())\n    if reachable_points:\n        cheaper_reachable_points = sorted(filter(lambda point: gas_prices[point] < gas_prices[current_point], reachable_points))\n        next_point = cheaper_reachable_points[0] if cheaper_reachable_points else min(reachable_points, key = lambda point: gas_prices[point])\n        if farthest_reachable_point >= destination and (current_point == start_point or gas_prices[next_point] >= gas_prices[current_point]):\n            next_point = destination\n        else:\n            reachable_points = [point for point in reachable_points if point > next_point]\n    else:\n        if farthest_reachable_point >= destination:\n            next_point = destination\n        else:\n            count = -1\n            break\n    distantion = next_point - current_point\n    if next_point != destination and gas_prices[current_point] <= gas_prices[next_point]:\n        required_gas_volume = max_gas_tank_volume\n    else:\n        required_gas_volume = distantion\n    if required_gas_volume > gas_tank_volume:\n        count += (required_gas_volume - gas_tank_volume)*gas_prices[current_point]\n        gas_tank_volume = required_gas_volume\n    current_point = next_point\n    gas_tank_volume -= distantion\nprint(count)\n", "public_tests": {"input": ["16 5 2\n8 2\n5 1\n", "10 4 4\n3 5\n5 8\n6 3\n8 4\n"], "output": ["-1\n", "22\n"]}, "private_tests": {"input": ["400000000 400000000 3\n1 139613\n19426 13509\n246298622 343529\n", "153 105 1\n96 83995\n", "229 123 2\n170 270968\n76 734741\n", "281 12 23\n178 650197\n129 288456\n34 924882\n43 472160\n207 957083\n103 724815\n167 308008\n135 906958\n74 242828\n229 146026\n85 241042\n22 39127\n62 47524\n113 760274\n156 562141\n10 209057\n50 714473\n201 164128\n97 624021\n120 102709\n147 388268\n219 933977\n190 950684\n"], "output": ["0\n", "4031760\n", "50519939\n", "-1"]}, "index": 8091}, {"input": "Watchmen are in a danger and Doctor Manhattan together with his friend Daniel Dreiberg should warn them as soon as possible. There are n watchmen on a plane, the i-th watchman is located at point (xi, yi).\n\nThey need to arrange a plan, but there are some difficulties on their way. As you know, Doctor Manhattan considers the distance between watchmen i and j to be |xi - xj| + |yi - yj|. Daniel, as an ordinary person, calculates the distance using the formula <image>.\n\nThe success of the operation relies on the number of pairs (i, j) (1 \u2264 i < j \u2264 n), such that the distance between watchman i and watchmen j calculated by Doctor Manhattan is equal to the distance between them calculated by Daniel. You were asked to compute the number of such pairs.\n\nInput\n\nThe first line of the input contains the single integer n (1 \u2264 n \u2264 200 000) \u2014 the number of watchmen.\n\nEach of the following n lines contains two integers xi and yi (|xi|, |yi| \u2264 109).\n\nSome positions may coincide.\n\nOutput\n\nPrint the number of pairs of watchmen such that the distance between them calculated by Doctor Manhattan is equal to the distance calculated by Daniel.\n\n", "output": "from collections import Counter\nc = Counter\nx = c()\ny = c()\nxy = c()\nans=0\nfor _ in range(int(input())):\n\ta,b = map(int,input().split())\n\tans += x[a]+y[b]-xy[(a,b)]\n\tx[a]+=1\n\ty[b]+=1\n\txy[(a,b)]+=1\nprint(ans)\t", "public_tests": {"input": ["3\n1 1\n7 5\n1 5\n", "6\n0 0\n0 1\n0 2\n-1 1\n0 1\n1 1\n"], "output": ["2\n", "11\n"]}, "private_tests": {"input": ["2\n2 1\n1 2\n", "2\n1 4\n2 1\n", "10\n46 -55\n46 45\n46 45\n83 -55\n46 45\n83 -55\n46 45\n83 45\n83 45\n46 -55\n", "2\n1 1000000000\n2 -1000000000\n", "1\n-5 -90\n", "2\n1000000000 0\n-7 1\n", "2\n1 0\n0 2333333\n", "2\n-1 1000000000\n0 -1\n", "2\n0 1000000000\n1 -7\n", "2\n1 0\n0 19990213\n", "3\n8911 7861\n-6888 7861\n8911 7861\n", "2\n315 845\n-669 -762\n"], "output": ["0\n", "0\n", "33\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "3\n", "0\n"]}, "index": 8092}, {"input": "Vanya and his friends are walking along the fence of height h and they do not want the guard to notice them. In order to achieve this the height of each of the friends should not exceed h. If the height of some person is greater than h he can bend down and then he surely won't be noticed by the guard. The height of the i-th person is equal to ai.\n\nConsider the width of the person walking as usual to be equal to 1, while the width of the bent person is equal to 2. Friends want to talk to each other while walking, so they would like to walk in a single row. What is the minimum width of the road, such that friends can walk in a row and remain unattended by the guard?\n\nInput\n\nThe first line of the input contains two integers n and h (1 \u2264 n \u2264 1000, 1 \u2264 h \u2264 1000) \u2014 the number of friends and the height of the fence, respectively.\n\nThe second line contains n integers ai (1 \u2264 ai \u2264 2h), the i-th of them is equal to the height of the i-th person.\n\nOutput\n\nPrint a single integer \u2014 the minimum possible valid width of the road.\n\n", "output": "l=lambda:map(int,input().split())\nn,h=l()\nprint(n+sum(i>h for i in l()))", "public_tests": {"input": ["3 7\n4 5 14\n", "6 1\n1 1 1 1 1 1\n", "6 5\n7 6 8 9 10 5\n"], "output": ["4\n", "6\n", "11\n"]}, "private_tests": {"input": ["10 561\n657 23 1096 487 785 66 481 554 1000 821\n", "10 420\n214 614 297 675 82 740 174 23 255 15\n", "46 71\n30 26 56 138 123 77 60 122 73 45 79 10 130 3 14 1 38 46 128 50 82 16 32 68 28 98 62 106 2 49 131 11 114 39 139 70 40 50 45 137 33 30 35 136 135 19\n", "1 1\n1\n", "75 940\n1620 1745 1599 441 64 1466 1496 1239 1716 1475 778 106 1136 1212 1261 444 781 257 1071 747 626 232 609 1544 682 1326 469 1361 1460 1450 1207 1319 922 625 1737 1057 1698 592 692 80 1016 541 1254 201 682 1007 847 206 1066 809 259 109 240 1611 219 1455 1326 1377 1827 786 42 1002 1382 1592 543 1866 1198 334 1524 1760 340 1566 955 257 1118\n", "20 723\n212 602 293 591 754 91 1135 640 80 495 845 928 1399 498 926 1431 1226 869 814 1386\n", "26 708\n549 241 821 734 945 1161 566 1268 216 30 1142 730 529 1014 255 168 796 1148 89 113 1328 286 743 871 1259 1397\n", "100 290\n244 49 276 77 449 261 468 458 201 424 9 131 300 88 432 394 104 77 13 289 435 259 111 453 168 394 156 412 351 576 178 530 81 271 228 564 125 328 42 372 205 61 180 471 33 360 567 331 222 318 241 117 529 169 188 484 202 202 299 268 246 343 44 364 333 494 59 236 84 485 50 8 428 8 571 227 205 310 210 9 324 472 368 490 114 84 296 305 411 351 569 393 283 120 510 171 232 151 134 366\n", "48 864\n843 1020 751 1694 18 1429 1395 1174 272 1158 1628 1233 1710 441 765 561 778 748 1501 1200 563 1263 1398 1687 1518 1640 1591 839 500 466 1603 1587 1201 1209 432 868 1159 639 649 628 9 91 1036 147 896 1557 941 518\n", "100 342\n478 143 359 336 162 333 385 515 117 496 310 538 469 539 258 676 466 677 1 296 150 560 26 213 627 221 255 126 617 174 279 178 24 435 70 145 619 46 669 566 300 67 576 251 58 176 441 564 569 194 24 669 73 262 457 259 619 78 400 579 222 626 269 47 80 315 160 194 455 186 315 424 197 246 683 220 68 682 83 233 290 664 273 598 362 305 674 614 321 575 362 120 14 534 62 436 294 351 485 396\n", "1 1\n2\n"], "output": ["15\n", "13\n", "63\n", "1\n", "116\n", "31\n", "41\n", "145\n", "75\n", "144\n", "2\n"]}, "index": 8093}, {"input": "Johnny has a younger sister Anne, who is very clever and smart. As she came home from the kindergarten, she told his brother about the task that her kindergartener asked her to solve. The task was just to construct a triangle out of four sticks of different colours. Naturally, one of the sticks is extra. It is not allowed to break the sticks or use their partial length. Anne has perfectly solved this task, now she is asking Johnny to do the same.\n\nThe boy answered that he would cope with it without any difficulty. However, after a while he found out that different tricky things can occur. It can happen that it is impossible to construct a triangle of a positive area, but it is possible to construct a degenerate triangle. It can be so, that it is impossible to construct a degenerate triangle even. As Johnny is very lazy, he does not want to consider such a big amount of cases, he asks you to help him.\n\nInput\n\nThe first line of the input contains four space-separated positive integer numbers not exceeding 100 \u2014 lengthes of the sticks.\n\nOutput\n\nOutput TRIANGLE if it is possible to construct a non-degenerate triangle. Output SEGMENT if the first case cannot take place and it is possible to construct a degenerate triangle. Output IMPOSSIBLE if it is impossible to construct any triangle. Remember that you are to use three sticks. It is not allowed to break the sticks or use their partial length.\n\n", "output": "p,q,r,s=sorted(map(int,input().split()))\ny=min(s-q-r,r-p-q)\nprint([\"SEGMENT\",\"IMPOSSIBLE\",\"TRIANGLE\"][(y>0)-(y<0)])\n", "public_tests": {"input": ["3 5 9 1\n", "7 2 2 4\n", "4 2 1 3\n"], "output": ["IMPOSSIBLE\n", "SEGMENT\n", "TRIANGLE\n"]}, "private_tests": {"input": ["7 7 10 7\n", "4 4 4 5\n", "50 1 50 100\n", "11 30 79 43\n", "49 51 100 1\n", "3 1 2 1\n", "27 53 7 97\n", "1 5 1 3\n", "10 20 30 40\n", "3 5 1 1\n", "22 80 29 7\n", "1 5 5 5\n", "4 4 10 10\n", "4 8 16 2\n", "49 24 9 74\n", "10 100 7 3\n", "13 25 12 1\n", "16 99 9 35\n", "6 19 32 61\n", "5 11 2 25\n", "8 4 3 1\n", "10 6 4 1\n", "13 49 69 15\n", "11 19 5 77\n", "3 3 3 1\n", "2 10 7 3\n", "1 1 2 1\n", "5 4 5 5\n", "3 3 3 6\n", "7 2 3 2\n", "3 2 9 1\n", "2 6 1 8\n", "5 2 3 9\n", "1 2 4 1\n", "52 10 19 71\n", "85 16 61 9\n", "3 6 3 3\n", "3 2 3 2\n", "1 10 9 2\n", "50 1 100 49\n", "4 1 2 1\n", "7 2 2 7\n", "8 7 8 8\n", "8 1 3 2\n", "4 10 4 4\n", "4 3 2 8\n", "3 4 7 1\n", "10 30 7 20\n", "3 1 5 1\n", "45 25 5 15\n", "57 88 17 8\n", "95 20 21 43\n", "1 8 2 7\n", "5 9 5 3\n", "1 1 5 3\n", "1 1 1 1\n", "2 3 7 10\n", "70 10 100 30\n", "1 2 6 3\n", "2 6 3 9\n", "1 9 1 9\n", "4 10 6 2\n", "2 8 3 5\n", "10 10 10 10\n", "21 94 61 31\n", "3 3 3 10\n", "6 2 1 8\n", "20 5 8 13\n", "4 10 3 5\n", "27 6 18 53\n", "91 50 9 40\n", "11 5 6 11\n", "6 1 4 10\n", "100 21 30 65\n", "65 10 36 17\n", "1 1 6 6\n", "51 90 24 8\n", "5 6 19 82\n", "81 64 9 7\n"], "output": ["TRIANGLE\n", "TRIANGLE\n", "TRIANGLE\n", "IMPOSSIBLE\n", "SEGMENT\n", "SEGMENT\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "TRIANGLE\n", "IMPOSSIBLE\n", "SEGMENT\n", "TRIANGLE\n", "TRIANGLE\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "SEGMENT\n", "SEGMENT\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "SEGMENT\n", "SEGMENT\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "TRIANGLE\n", "SEGMENT\n", "TRIANGLE\n", "TRIANGLE\n", "TRIANGLE\n", "TRIANGLE\n", "SEGMENT\n", "SEGMENT\n", "SEGMENT\n", "SEGMENT\n", "SEGMENT\n", "IMPOSSIBLE\n", "TRIANGLE\n", "TRIANGLE\n", "TRIANGLE\n", "SEGMENT\n", "SEGMENT\n", "TRIANGLE\n", "TRIANGLE\n", "SEGMENT\n", "TRIANGLE\n", "TRIANGLE\n", "SEGMENT\n", "SEGMENT\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "TRIANGLE\n", "TRIANGLE\n", "IMPOSSIBLE\n", "TRIANGLE\n", "SEGMENT\n", "SEGMENT\n", "SEGMENT\n", "SEGMENT\n", "TRIANGLE\n", "SEGMENT\n", "SEGMENT\n", "TRIANGLE\n", "IMPOSSIBLE\n", "TRIANGLE\n", "SEGMENT\n", "TRIANGLE\n", "TRIANGLE\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "TRIANGLE\n", "SEGMENT\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "TRIANGLE\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n"]}, "index": 8094}, {"input": "Recently Irina arrived to one of the most famous cities of Berland \u2014 the Berlatov city. There are n showplaces in the city, numbered from 1 to n, and some of them are connected by one-directional roads. The roads in Berlatov are designed in a way such that there are no cyclic routes between showplaces.\n\nInitially Irina stands at the showplace 1, and the endpoint of her journey is the showplace n. Naturally, Irina wants to visit as much showplaces as she can during her journey. However, Irina's stay in Berlatov is limited and she can't be there for more than T time units.\n\nHelp Irina determine how many showplaces she may visit during her journey from showplace 1 to showplace n within a time not exceeding T. It is guaranteed that there is at least one route from showplace 1 to showplace n such that Irina will spend no more than T time units passing it.\n\nInput\n\nThe first line of the input contains three integers n, m and T (2 \u2264 n \u2264 5000, 1 \u2264 m \u2264 5000, 1 \u2264 T \u2264 109) \u2014 the number of showplaces, the number of roads between them and the time of Irina's stay in Berlatov respectively.\n\nThe next m lines describes roads in Berlatov. i-th of them contains 3 integers ui, vi, ti (1 \u2264 ui, vi \u2264 n, ui \u2260 vi, 1 \u2264 ti \u2264 109), meaning that there is a road starting from showplace ui and leading to showplace vi, and Irina spends ti time units to pass it. It is guaranteed that the roads do not form cyclic routes.\n\nIt is guaranteed, that there is at most one road between each pair of showplaces.\n\nOutput\n\nPrint the single integer k (2 \u2264 k \u2264 n) \u2014 the maximum number of showplaces that Irina can visit during her journey from showplace 1 to showplace n within time not exceeding T, in the first line.\n\nPrint k distinct integers in the second line \u2014 indices of showplaces that Irina will visit on her route, in the order of encountering them.\n\nIf there are multiple answers, print any of them.\n\n", "output": "n, m, T = map(int, input().split())\nadj = [[] for _ in range(n+1)]\nadw = [[] for _ in range(n+1)]\ndp = [[0 for _ in range(n+1)] for _ in range(n+1)]\npv = [[0 for _ in range(n+1)] for _ in range(n+1)]\n \nfor i in range(m):\n    a, b, t = map(int, input().split())\n    adj[b].append(a)\n    adw[b].append(t)\n    if a == 1:\n        dp[b][2] = t\n        pv[b][2] = 1\n \nfor c in range(3, n+1):\n    for v in range(2, n+1):\n        for i, nx in enumerate(adj[v]):\n            if dp[nx][c-1]:\n                dist = dp[nx][c-1] + adw[v][i]\n                if dist <= T and (not dp[v][c] or dist < dp[v][c]):\n                    dp[v][c] = dist\n                    pv[v][c] = nx\n \nfor i in range(n,0,-1):\n    if pv[n][i]:\n        break\n \nres = [n]\nwhile pv[res[-1]][i] != 1:\n    res.append(pv[res[-1]][i])\n    i -= 1\nres += [1]\nprint(len(res))\nprint(' '.join(map(str, res[::-1])))", "public_tests": {"input": ["4 3 13\n1 2 5\n2 3 7\n2 4 8\n", "6 6 7\n1 2 2\n1 3 3\n3 6 3\n2 4 2\n4 6 2\n6 5 1\n", "5 5 6\n1 3 3\n3 5 3\n1 2 2\n2 4 3\n4 5 2\n"], "output": ["3\n1 2 4 ", "4\n1 2 4 6 ", "3\n1 3 5 "]}, "private_tests": {"input": ["4 4 120\n1 2 11\n1 3 20\n2 3 10\n3 4 100\n", "4 4 1000000000\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n1 4 1000000000\n", "12 12 8\n1 2 2\n2 3 5\n3 12 1\n4 5 1000000000\n1 7 1\n7 6 3\n6 12 1\n1 9 1\n9 10 1\n10 11 1\n11 8 1\n8 12 1\n", "12 12 9\n1 2 1\n2 3 1\n1 4 1\n4 5 1\n5 6 1\n6 3 1\n3 7 1\n7 8 1\n8 12 1\n12 10 1\n10 9 1\n11 1 1\n", "4 4 2\n1 2 1\n2 3 1\n3 4 1\n1 3 1\n", "12 12 4\n1 2 2\n2 3 5\n3 12 1\n4 5 1000000000\n1 7 1\n7 6 2\n6 12 1\n1 9 1\n9 10 1\n10 11 1\n11 8 1\n8 12 1\n", "10 10 100\n1 4 1\n6 4 1\n9 3 2\n2 7 2\n5 8 11\n1 2 8\n4 10 10\n8 9 2\n7 5 8\n3 6 4\n", "11 11 6\n1 2 1\n2 3 1\n1 4 1\n4 5 1\n5 6 1\n6 3 1\n3 7 1\n7 8 1\n8 11 1\n11 10 1\n10 9 1\n", "10 10 56\n4 8 5\n9 3 11\n2 5 5\n5 9 9\n3 6 1\n1 4 9\n8 7 7\n6 10 1\n1 6 12\n7 2 9\n", "10 45 8\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n1 7 1\n1 8 1\n1 9 1\n1 10 1\n2 3 1\n2 4 1\n2 5 1\n2 6 1\n2 7 1\n2 8 1\n2 9 1\n2 10 1\n3 4 1\n3 5 1\n3 6 1\n3 7 1\n3 8 1\n3 9 1\n3 10 1\n4 5 1\n4 6 1\n4 7 1\n4 8 1\n4 9 1\n4 10 1\n5 6 1\n5 7 1\n5 8 1\n5 9 1\n5 10 1\n6 7 1\n6 8 1\n6 9 1\n6 10 1\n7 8 1\n7 9 1\n7 10 1\n8 9 1\n8 10 1\n9 10 1\n", "5 5 2\n1 2 1\n1 3 1\n3 4 1\n2 5 1\n4 2 1\n", "4 4 10\n2 1 1\n2 3 1\n1 3 1\n3 4 1\n", "11 11 7\n1 2 1\n2 3 1\n1 4 1\n4 5 1\n5 6 1\n6 3 1\n3 7 1\n7 8 1\n8 11 1\n11 10 1\n10 9 1\n", "4 4 3\n1 2 1\n2 3 1\n3 4 1\n1 3 1\n", "12 12 5\n1 2 2\n2 3 5\n3 12 1\n4 5 1000000000\n1 7 1\n7 6 3\n6 12 1\n1 9 1\n9 10 1\n10 11 1\n11 8 1\n8 12 1\n", "2 1 1\n1 2 1\n", "11 11 9\n1 2 1\n2 3 1\n1 4 1\n4 5 1\n5 6 1\n6 3 1\n3 7 1\n7 8 1\n8 11 1\n11 10 1\n10 9 1\n", "5 5 200\n1 2 100\n2 4 100\n1 3 1\n3 4 1\n4 5 1\n"], "output": ["3\n1 3 4 ", "2\n1 4 ", "6\n1 9 10 11 8 12 ", "8\n1 4 5 6 3 7 8 12 ", "3\n1 3 4 ", "4\n1 7 6 12 ", "10\n1 2 7 5 8 9 3 6 4 10 ", "6\n1 2 3 7 8 11 ", "3\n1 6 10 ", "9\n1 2 3 4 5 6 7 8 10 ", "3\n1 2 5 ", "3\n1 3 4 ", "8\n1 4 5 6 3 7 8 11 ", "4\n1 2 3 4 ", "6\n1 9 10 11 8 12 ", "2\n1 2 ", "8\n1 4 5 6 3 7 8 11 ", "4\n1 3 4 5 "]}, "index": 8095}, {"input": "Vladik is a competitive programmer. This year he is going to win the International Olympiad in Informatics. But it is not as easy as it sounds: the question Vladik face now is to find the cheapest way to get to the olympiad.\n\nVladik knows n airports. All the airports are located on a straight line. Each airport has unique id from 1 to n, Vladik's house is situated next to the airport with id a, and the place of the olympiad is situated next to the airport with id b. It is possible that Vladik's house and the place of the olympiad are located near the same airport. \n\nTo get to the olympiad, Vladik can fly between any pair of airports any number of times, but he has to start his route at the airport a and finish it at the airport b.\n\nEach airport belongs to one of two companies. The cost of flight from the airport i to the airport j is zero if both airports belong to the same company, and |i - j| if they belong to different companies.\n\nPrint the minimum cost Vladik has to pay to get to the olympiad.\n\nInput\n\nThe first line contains three integers n, a, and b (1 \u2264 n \u2264 105, 1 \u2264 a, b \u2264 n) \u2014 the number of airports, the id of the airport from which Vladik starts his route and the id of the airport which he has to reach. \n\nThe second line contains a string with length n, which consists only of characters 0 and 1. If the i-th character in this string is 0, then i-th airport belongs to first company, otherwise it belongs to the second.\n\nOutput\n\nPrint single integer \u2014 the minimum cost Vladik has to pay to get to the olympiad.\n\n", "output": "a,b,c=map(int,input().split())\nz=input()\nprint((z[b-1]!=z[c-1])+0)", "public_tests": {"input": ["4 1 4\n1010\n", "5 5 2\n10110\n"], "output": ["1\n", "0\n"]}, "private_tests": {"input": ["6 1 6\n111000\n", "10 5 8\n1000001110\n", "5 1 5\n11010\n", "8 4 5\n00001111\n", "5 1 5\n10000\n", "8 1 8\n11110000\n", "10 3 3\n1001011011\n", "10 1 10\n0000011111\n", "6 1 6\n011111\n", "10 3 7\n0000011111\n", "4 1 4\n0011\n", "1 1 1\n1\n", "16 4 12\n0000000011111111\n", "2 1 2\n01\n", "10 2 10\n0000011111\n", "10 1 10\n1111100000\n", "10 9 5\n1011111001\n", "2 1 2\n10\n", "6 1 5\n111000\n", "4 4 1\n0111\n", "4 2 4\n0001\n", "6 2 5\n111000\n", "6 1 5\n100000\n", "6 1 6\n000111\n", "9 9 1\n111000000\n", "5 2 5\n00001\n", "8 1 8\n00101001\n", "7 3 7\n1110111\n", "2 2 1\n01\n", "1 1 1\n0\n", "8 2 7\n11110000\n", "10 10 1\n0000011111\n", "5 5 1\n11110\n"], "output": ["1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "0\n", "1\n", "1\n", "1\n"]}, "index": 8096}, {"input": "Mahmoud wrote a message s of length n. He wants to send it as a birthday present to his friend Moaz who likes strings. He wrote it on a magical paper but he was surprised because some characters disappeared while writing the string. That's because this magical paper doesn't allow character number i in the English alphabet to be written on it in a string of length more than ai. For example, if a1 = 2 he can't write character 'a' on this paper in a string of length 3 or more. String \"aa\" is allowed while string \"aaa\" is not.\n\nMahmoud decided to split the message into some non-empty substrings so that he can write every substring on an independent magical paper and fulfill the condition. The sum of their lengths should be n and they shouldn't overlap. For example, if a1 = 2 and he wants to send string \"aaa\", he can split it into \"a\" and \"aa\" and use 2 magical papers, or into \"a\", \"a\" and \"a\" and use 3 magical papers. He can't split it into \"aa\" and \"aa\" because the sum of their lengths is greater than n. He can split the message into single string if it fulfills the conditions.\n\nA substring of string s is a string that consists of some consecutive characters from string s, strings \"ab\", \"abc\" and \"b\" are substrings of string \"abc\", while strings \"acb\" and \"ac\" are not. Any string is a substring of itself.\n\nWhile Mahmoud was thinking of how to split the message, Ehab told him that there are many ways to split it. After that Mahmoud asked you three questions: \n\n  * How many ways are there to split the string into substrings such that every substring fulfills the condition of the magical paper, the sum of their lengths is n and they don't overlap? Compute the answer modulo 109 + 7. \n  * What is the maximum length of a substring that can appear in some valid splitting? \n  * What is the minimum number of substrings the message can be spit in? \n\n\n\nTwo ways are considered different, if the sets of split positions differ. For example, splitting \"aa|a\" and \"a|aa\" are considered different splittings of message \"aaa\".\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 103) denoting the length of the message.\n\nThe second line contains the message s of length n that consists of lowercase English letters.\n\nThe third line contains 26 integers a1, a2, ..., a26 (1 \u2264 ax \u2264 103) \u2014 the maximum lengths of substring each letter can appear in.\n\nOutput\n\nPrint three lines.\n\nIn the first line print the number of ways to split the message into substrings and fulfill the conditions mentioned in the problem modulo 109 + 7.\n\nIn the second line print the length of the longest substring over all the ways.\n\nIn the third line print the minimum number of substrings over all the ways.\n\n", "output": "n=int(input())\ns=input()\nl=list(map(int,input().split()))\ndp=[0]*(n+2)\nmn=[10**4]*(n+2)\ndp[0]=dp[n+1]=1\nmn[0]=1\nmn[n+1]=0\nmod=10**9+7\nmaxx=1\nfor i in range(1,n):\n  cur=10**4\n\n  for j in range(i,-1,-1):\n    c=ord(s[j])-ord('a')\n    cur=min(cur,l[c])\n    if cur<(i-j+1):\n      break\n    dp[i]=(dp[i]+dp[j-1])%mod\n    mn[i]=min(mn[i],mn[j-1]+1)\n    maxx=max(maxx,i-j+1)\n#print(dp)\nprint(dp[n-1])\nprint(maxx)\nprint(mn[n-1])\n", "public_tests": {"input": ["3\naab\n2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\nabcdeabcde\n5 5 5 5 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"], "output": ["3\n2\n2\n", "401\n4\n3\n"]}, "private_tests": {"input": ["10\naabaabaaba\n3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\naaaaaaaaaa\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "8\naaaaaaab\n8 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "100\nygdbmqpyofbcoqomztbjkutjwkkxkkmoyjrqteikqxrkcgqcfrbujupiegumelsmqkdadtcfvyoywuhqthqlioxcveskifuormfo\n94 20 86 40 16 38 63 32 36 95 7 32 68 21 68 67 70 23 24 78 45 80 30 35 9 4\n", "10\naabaaaaaba\n10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "99\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n96 12 22 33 50 96 95 25 34 40 61 37 54 12 46 84 62 17 35 38 76 47 85 85 9 61\n", "7\nzzzxxyy\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2\n", "99\nnupctndqkhgouriwrrbhxwynnkclwtfrraontjuvjdumzigxyandxrsrmosvtbtropggtlkqjmrffgnacsafbulvbuxthjqhtxj\n61 1 47 67 64 66 44 39 55 23 68 94 47 2 50 26 92 31 93 6 92 67 41 12 15 91\n", "7\nbaaaccc\n6 4 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "1\na\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10\naabaabaaba\n10 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "55\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n", "100\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 3 3 3\n"], "output": ["8\n2\n7\n", "1\n1\n10\n", "64\n7\n2\n", "962845356\n16\n13\n", "32\n5\n5\n", "494092815\n96\n2\n", "21\n2\n4\n", "61873945\n12\n25\n", "60\n6\n2\n", "1\n1\n1\n", "511\n9\n2\n", "383381198\n55\n1\n", "750728890\n4\n27\n"]}, "index": 8097}, {"input": "The Easter Rabbit laid n eggs in a circle and is about to paint them. \n\nEach egg should be painted one color out of 7: red, orange, yellow, green, blue, indigo or violet. Also, the following conditions should be satisfied:\n\n  * Each of the seven colors should be used to paint at least one egg. \n  * Any four eggs lying sequentially should be painted different colors. \n\n\n\nHelp the Easter Rabbit paint the eggs in the required manner. We know that it is always possible.\n\nInput\n\nThe only line contains an integer n \u2014 the amount of eggs (7 \u2264 n \u2264 100).\n\nOutput\n\nPrint one line consisting of n characters. The i-th character should describe the color of the i-th egg in the order they lie in the circle. The colors should be represented as follows: \"R\" stands for red, \"O\" stands for orange, \"Y\" stands for yellow, \"G\" stands for green, \"B\" stands for blue, \"I\" stands for indigo, \"V\" stands for violet.\n\nIf there are several answers, print any of them.\n\n", "output": "k=int(input())\ns=\"ROY\"+\"GBIV\"*k\nprint(s[:k])\n", "public_tests": {"input": ["8\n", "13\n"], "output": ["ROYGBIVG", "ROYGBIVGBIVGB"]}, "private_tests": {"input": ["21\n", "24\n", "61\n", "10\n", "9\n", "17\n", "16\n", "97\n", "11\n", "29\n", "14\n", "22\n", "23\n", "34\n", "25\n", "100\n", "8\n", "7\n", "81\n", "15\n", "20\n", "95\n", "92\n", "19\n", "98\n", "96\n", "28\n", "99\n", "79\n", "12\n", "43\n", "50\n", "18\n", "13\n"], "output": ["ROYGBIVROYGBIVROYGBIV\n", "ROYGBIVGBIVGBIVGBIVGBIVG", "ROYGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGB", "ROYGBIVGBI", "ROYGBIVGB", "ROYGBIVGBIVGBIVGB", "ROYGBIVGBIVGBIVG", "ROYGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGB", "ROYGBIVGBIV", "ROYGBIVROYGBIVROYGBIVROYGBIVG\n", "ROYGBIVROYGBIV\n", "ROYGBIVROYGBIVROYGBIVG\n", "ROYGBIVGBIVGBIVGBIVGBIV", "ROYGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBI", "ROYGBIVGBIVGBIVGBIVGBIVGB", "ROYGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVG", "ROYGBIVG", "ROYGBIV", "ROYGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGB", "ROYGBIVROYGBIVG\n", "ROYGBIVGBIVGBIVGBIVG", "ROYGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIV", "ROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVG\n", "ROYGBIVGBIVGBIVGBIV", "ROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIV\n", "ROYGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVG", "ROYGBIVROYGBIVROYGBIVROYGBIV\n", "ROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVG\n", "ROYGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIVGBIV", "ROYGBIVGBIVG", "ROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVG\n", "ROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVROYGBIVG\n", "ROYGBIVGBIVGBIVGBI", "ROYGBIVGBIVGB"]}, "index": 8098}, {"input": "You are given a text of single-space separated words, consisting of small and capital Latin letters.\n\nVolume of the word is number of capital letters in the word. Volume of the text is maximum volume of all words in the text.\n\nCalculate the volume of the given text.\n\nInput\n\nThe first line contains one integer number n (1 \u2264 n \u2264 200) \u2014 length of the text.\n\nThe second line contains text of single-space separated words s1, s2, ..., si, consisting only of small and capital Latin letters.\n\nOutput\n\nPrint one integer number \u2014 volume of text.\n\n", "output": "input()\nprint(max(sum(map(str.isupper,s))for s in input().split()))", "public_tests": {"input": ["24\nthis is zero answer text\n", "7\nNonZERO\n", "24\nHarbour Space University\n"], "output": ["0\n", "5\n", "1\n"]}, "private_tests": {"input": ["15\naAb ABCDFGRHTJS\n", "24\nHarbour Space UniversitY\n", "5\naA AA\n", "10\nas AS ASDA\n", "200\nhCyIdivIiISmmYIsCLbpKcTyHaOgTUQEwnQACXnrLdHAVFLtvliTEMlzBVzTesQbhXmcqvwPDeojglBMIjOXANfyQxCSjOJyO SIqOTnRzVzseGIDDYNtrwIusScWSuEhPyEmgQIVEzXofRptjeMzzhtUQxJgcUWILUhEaaRmYRBVsjoqgmyPIKwSajdlNPccOOtWrez\n", "200\nABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ ABCDEFGHIJ KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU VWXYZABCDE KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU KLMNOPRSTU KZ\n", "10\nas AS ASAa\n", "2\nWM\n", "200\nffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n", "24\nHarbour space UniversitY\n", "3\nA a\n", "4\nA AB\n", "6\nA B CA\n", "10\nas AS ASDZ\n", "13\na b c d e f A\n", "18\nHARbour Space UNIV\n", "200\nLBmJKQLCKUgtTxMoDsEerwvLOXsxASSydOqWyULsRcjMYDWdDCgaDvBfATIWPVSXlbcCLHPYahhxMEYUiaxoCebghJqvmRnaNHYTKLeOiaLDnATPZAOgSNfBzaxLymTGjfzvTegbXsAthTxyDTcmBUkqyGlVGZhoazQzVSoKbTFcCRvYsgSCwjGMxBfWEwMHuagTBxkz\n", "1\ne\n", "10\nABC ABc AB\n", "53\nsdfAZEZR AZE dfdf dsdRFGSDF ZZDZSD dfsd ERBGF dsfsdfR\n", "199\no A r v H e J q k J k v w Q F p O R y R Z o a K R L Z E H t X y X N y y p b x B m r R S q i A x V S u i c L y M n N X c C W Z m S j e w C w T r I S X T D F l w o k f t X u n W w p Z r A k I Y E h s g\n", "3\na A\n", "10\nA c de CDE\n", "200\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n", "4\naa A\n", "1\nA\n"], "output": ["11\n", "2\n", "2\n", "4\n", "50\n", "10\n", "3\n", "2\n", "0\n", "2\n", "1\n", "2\n", "2\n", "4\n", "1\n", "4\n", "105\n", "0\n", "3\n", "6\n", "1\n", "1\n", "3\n", "200\n", "1\n", "1\n"]}, "index": 8099}, {"input": "Arseny likes to organize parties and invite people to it. However, not only friends come to his parties, but friends of his friends, friends of friends of his friends and so on. That's why some of Arseny's guests can be unknown to him. He decided to fix this issue using the following procedure.\n\nAt each step he selects one of his guests A, who pairwise introduces all of his friends to each other. After this action any two friends of A become friends. This process is run until all pairs of guests are friends.\n\nArseny doesn't want to spend much time doing it, so he wants to finish this process using the minimum number of steps. Help Arseny to do it.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 22; <image>) \u2014 the number of guests at the party (including Arseny) and the number of pairs of people which are friends.\n\nEach of the next m lines contains two integers u and v (1 \u2264 u, v \u2264 n; u \u2260 v), which means that people with numbers u and v are friends initially. It's guaranteed that each pair of friends is described not more than once and the graph of friendship is connected.\n\nOutput\n\nIn the first line print the minimum number of steps required to make all pairs of guests friends.\n\nIn the second line print the ids of guests, who are selected at each step.\n\nIf there are multiple solutions, you can output any of them.\n\n", "output": "from collections import defaultdict\ndef count(x):\n    c=0\n    while x > 0:\n        c+=1\n        x &= (x-1)\n    return c\n\nn,m=map(int,input().split())\ng=defaultdict(list)\nfor _ in range(m):\n    u, v = map(int,input().split())\n    u-=1;v-=1\n    g[u].append(v)\n    g[v].append(u)\n\nmask1=0;mask2=0;MAX=(1<<n)-1\na=[0]*(1 << n)\ndp=[MAX]*(1 << n)\nif m == (n*(n-1))//2:\n    print(0)\n    exit(0)\nfor i,j in g.items():\n    mask1  = (1 << i);mask2=0;mask2 |= mask1\n    for k in j:\n        mask2 |= (1 << k)\n        \n    dp[mask2]=mask1\n    a[mask1]=mask2\n    \nfor i in range(0,(1 << n)-1):\n    if dp[i] != MAX:\n        #print('HEllo')\n        temp = dp[i] ^ i \n        for j in range(n):\n            if temp & (1 << j) != 0:\n                nmask = i | a[(1 << j)]\n                dp[nmask]=dp[i] | (1 << j) if count(dp[i] | (1 << j)) < count(dp[nmask]) else dp[nmask]\n                \nans = []\nfor i in range(n):\n    if dp[-1] & (1 << i) != 0:\n        ans.append(i+1)\nprint(len(ans))\nprint(*ans)\n", "public_tests": {"input": ["4 4\n1 2\n1 3\n1 4\n3 4\n", "5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n"], "output": ["1\n1 \n", "2\n2 3 \n"]}, "private_tests": {"input": ["22 66\n15 20\n15 4\n2 22\n8 22\n2 4\n8 2\n5 7\n18 8\n10 21\n22 20\n18 7\n2 20\n5 1\n20 19\n21 4\n8 4\n20 5\n7 8\n7 4\n21 15\n21 22\n7 20\n5 22\n21 7\n5 18\n18 21\n19 7\n15 7\n21 8\n18 15\n18 16\n21 19\n19 5\n21 2\n5 15\n8 3\n7 22\n2 15\n9 2\n20 4\n15 22\n19 18\n19 15\n15 13\n7 2\n15 8\n21 5\n18 2\n5 8\n19 2\n5 4\n19 8\n12 7\n8 20\n4 11\n20 18\n5 2\n21 20\n19 17\n4 18\n22 19\n22 14\n4 22\n20 6\n18 22\n19 4\n", "22 21\n7 8\n10 14\n21 2\n5 18\n22 8\n2 4\n2 3\n3 13\n11 10\n19 2\n17 20\n10 5\n15 11\n7 4\n17 13\n5 1\n6 4\n16 14\n9 2\n2 1\n10 12\n", "3 2\n1 3\n2 3\n", "22 44\n3 22\n1 9\n14 21\n10 17\n3 19\n12 20\n14 17\n6 4\n16 1\n8 22\n2 5\n15 2\n10 14\n7 14\n12 4\n21 16\n1 6\n18 8\n22 19\n22 7\n15 5\n16 9\n21 1\n13 2\n13 15\n8 3\n20 15\n19 10\n19 7\n9 12\n11 8\n6 12\n7 10\n5 11\n4 13\n18 11\n17 16\n11 3\n20 13\n5 18\n9 6\n17 21\n2 18\n4 20\n", "22 66\n5 7\n18 15\n21 10\n12 8\n21 22\n17 2\n13 18\n11 6\n7 1\n5 1\n15 6\n13 17\n6 21\n5 4\n19 4\n14 11\n15 11\n4 13\n2 11\n2 6\n10 22\n17 18\n7 4\n19 5\n22 12\n1 13\n11 21\n10 9\n17 14\n3 7\n18 2\n4 17\n20 19\n16 21\n9 20\n3 19\n2 15\n8 19\n21 12\n16 22\n3 5\n10 12\n22 20\n1 18\n16 10\n4 1\n9 3\n8 5\n12 20\n22 9\n6 16\n18 14\n8 3\n15 16\n11 16\n12 9\n7 13\n6 10\n14 15\n9 8\n19 7\n1 17\n13 14\n14 2\n20 3\n20 8\n", "22 66\n11 19\n11 22\n2 22\n6 21\n6 1\n22 5\n13 2\n13 19\n13 22\n6 10\n1 21\n19 17\n6 17\n16 21\n22 19\n19 16\n17 13\n21 19\n16 11\n15 16\n1 11\n21 10\n12 11\n22 6\n1 22\n13 11\n10 16\n11 10\n19 1\n10 19\n10 2\n6 16\n13 21\n17 11\n7 1\n21 2\n22 16\n21 8\n17 10\n21 11\n1 2\n10 1\n10 22\n19 20\n17 18\n1 17\n13 10\n16 13\n2 11\n22 17\n1 16\n2 14\n10 9\n16 2\n21 17\n4 6\n19 6\n22 21\n17 2\n13 6\n6 11\n6 2\n13 1\n3 13\n17 16\n2 19\n", "22 40\n2 3\n11 13\n7 10\n6 8\n2 4\n14 16\n7 9\n13 16\n10 11\n1 4\n19 21\n18 19\n6 7\n5 8\n14 15\n9 11\n11 14\n8 9\n3 5\n3 6\n18 20\n10 12\n9 12\n17 20\n17 19\n1 3\n16 18\n4 6\n4 5\n12 14\n19 22\n13 15\n5 7\n20 22\n15 18\n12 13\n8 10\n15 17\n16 17\n20 21\n", "22 22\n19 20\n11 21\n7 4\n14 3\n22 8\n13 6\n8 6\n16 13\n18 14\n17 9\n19 4\n21 1\n16 3\n12 20\n11 18\n5 15\n10 15\n1 10\n5 17\n22 2\n7 2\n9 12\n", "22 66\n1 13\n12 21\n15 21\n5 15\n16 12\n8 13\n3 20\n13 9\n15 2\n2 5\n3 17\n1 2\n11 20\n11 2\n3 12\n15 12\n2 3\n20 13\n18 21\n20 2\n15 3\n3 21\n20 22\n9 20\n20 12\n12 5\n9 11\n21 2\n20 5\n15 9\n13 11\n20 21\n12 11\n13 15\n15 20\n5 19\n13 5\n11 7\n3 11\n21 11\n12 13\n10 9\n21 13\n1 15\n13 3\n1 3\n12 1\n5 1\n1 20\n21 9\n21 1\n12 9\n21 5\n11 15\n3 5\n2 9\n3 9\n5 11\n11 1\n14 15\n2 4\n5 9\n6 1\n2 12\n9 1\n2 13\n", "22 72\n2 5\n6 9\n9 14\n16 19\n14 19\n15 20\n12 15\n10 16\n8 10\n4 7\n10 13\n15 18\n3 5\n2 7\n16 18\n1 6\n6 11\n11 14\n15 19\n19 22\n5 9\n7 12\n13 19\n2 6\n11 16\n11 13\n6 10\n11 15\n12 16\n9 16\n5 10\n1 8\n12 13\n8 12\n3 7\n16 20\n4 6\n3 6\n7 10\n20 22\n18 22\n5 12\n17 22\n14 18\n4 8\n14 17\n9 15\n3 8\n5 11\n7 9\n10 14\n4 5\n1 5\n18 21\n8 9\n8 11\n19 21\n9 13\n2 8\n10 15\n1 7\n14 20\n12 14\n13 18\n20 21\n15 17\n16 17\n6 12\n13 20\n7 11\n17 21\n13 17\n", "2 1\n2 1\n", "22 60\n14 6\n16 12\n6 21\n11 16\n2 17\n4 8\n18 11\n3 5\n13 3\n18 9\n8 19\n3 16\n19 13\n22 13\n10 15\n3 1\n15 4\n5 18\n8 17\n2 20\n15 19\n15 12\n14 2\n7 18\n5 19\n10 5\n22 8\n9 8\n14 7\n1 4\n12 6\n9 14\n4 11\n11 2\n16 1\n5 12\n13 4\n22 9\n22 15\n22 10\n11 19\n10 2\n11 5\n2 9\n5 4\n9 3\n21 22\n10 19\n16 8\n13 17\n8 7\n18 20\n10 12\n12 3\n4 10\n14 13\n3 6\n12 2\n1 8\n15 5\n", "1 0\n", "22 80\n8 22\n5 18\n17 18\n10 22\n9 15\n12 10\n4 21\n2 12\n21 16\n21 7\n13 6\n5 21\n20 1\n11 4\n19 16\n18 16\n17 5\n22 20\n18 4\n6 14\n3 4\n16 11\n1 12\n16 20\n19 4\n17 8\n1 9\n12 3\n8 6\n8 9\n7 1\n7 2\n14 8\n4 12\n20 21\n21 13\n11 7\n15 19\n12 20\n17 13\n13 22\n15 4\n19 12\n18 11\n20 8\n12 6\n20 14\n7 4\n22 11\n11 2\n9 7\n22 1\n10 9\n10 4\n12 7\n17 7\n11 1\n8 16\n20 19\n20 6\n11 10\n4 22\n7 8\n4 9\n17 19\n5 11\n13 10\n6 2\n13 9\n6 19\n19 9\n7 22\n15 7\n15 22\n2 4\n3 16\n13 18\n10 2\n7 16\n2 3\n", "22 21\n10 15\n22 8\n21 1\n16 13\n16 3\n7 2\n5 15\n1 10\n17 9\n11 18\n7 4\n18 14\n5 17\n14 3\n19 20\n8 6\n12 20\n11 21\n19 4\n13 6\n22 2\n", "22 57\n5 7\n11 15\n18 19\n9 12\n18 20\n10 15\n9 11\n15 16\n6 8\n5 9\n14 17\n9 10\n16 20\n5 8\n4 9\n12 15\n14 16\n7 11\n13 17\n13 18\n19 22\n10 13\n6 7\n4 7\n16 21\n8 10\n15 18\n21 22\n10 14\n3 6\n11 14\n7 12\n1 6\n17 19\n12 13\n3 4\n13 16\n2 5\n18 21\n17 21\n3 5\n20 22\n1 5\n8 12\n17 20\n7 10\n1 4\n2 6\n8 11\n12 14\n16 19\n11 13\n2 4\n14 18\n15 17\n4 8\n6 9\n", "22 31\n5 11\n6 3\n10 1\n18 20\n3 21\n12 10\n15 19\n1 17\n17 18\n2 21\n21 7\n2 15\n3 2\n19 6\n2 19\n13 16\n21 19\n13 5\n19 3\n12 22\n9 20\n14 11\n15 21\n7 8\n2 6\n15 6\n6 21\n15 3\n4 22\n14 8\n16 9\n", "22 66\n9 20\n16 1\n1 12\n20 17\n14 17\n1 3\n13 20\n1 17\n17 8\n3 12\n15 20\n6 1\n13 9\n20 3\n9 21\n3 11\n15 19\n22 13\n13 12\n21 10\n17 21\n8 13\n3 9\n16 12\n5 20\n20 21\n16 21\n15 1\n15 3\n1 21\n8 2\n16 20\n20 8\n12 9\n21 15\n7 9\n8 15\n8 1\n12 21\n17 16\n15 9\n17 9\n3 17\n1 9\n13 3\n15 13\n15 17\n3 8\n21 13\n8 9\n15 12\n21 3\n16 18\n16 13\n1 20\n12 20\n16 8\n8 21\n17 13\n4 12\n8 12\n15 16\n12 17\n13 1\n9 16\n3 16\n", "22 38\n19 21\n19 6\n1 7\n8 17\n5 1\n14 13\n15 4\n20 3\n19 8\n22 6\n11 16\n9 15\n22 20\n21 15\n12 13\n18 7\n19 5\n1 22\n3 8\n19 1\n22 13\n19 17\n4 2\n5 3\n21 7\n12 10\n7 15\n20 21\n18 17\n10 5\n8 9\n13 20\n18 9\n18 22\n15 1\n5 15\n2 8\n11 21\n", "22 66\n15 9\n22 8\n12 22\n12 15\n14 11\n11 17\n5 15\n14 10\n12 17\n14 18\n18 12\n14 22\n19 8\n12 11\n12 21\n22 13\n15 11\n6 17\n18 15\n22 19\n8 4\n2 13\n19 12\n19 14\n18 17\n22 1\n11 19\n15 22\n19 17\n5 12\n11 5\n8 18\n15 19\n8 15\n13 18\n14 13\n5 14\n5 17\n13 17\n13 19\n17 15\n18 22\n13 15\n11 13\n12 13\n8 5\n19 18\n8 12\n11 18\n18 5\n14 17\n5 19\n14 12\n13 8\n17 22\n11 22\n8 14\n16 5\n3 19\n15 14\n17 8\n18 20\n5 13\n11 8\n11 7\n22 5\n", "22 45\n4 1\n8 6\n12 13\n15 22\n20 8\n16 4\n3 20\n13 9\n6 5\n18 20\n16 22\n14 3\n1 14\n7 17\n7 3\n17 6\n11 19\n19 22\n5 11\n13 11\n17 11\n8 15\n10 17\n6 2\n2 22\n18 13\n18 9\n16 11\n10 7\n2 18\n22 4\n1 16\n9 3\n9 8\n9 11\n3 15\n14 4\n13 16\n7 15\n6 3\n4 20\n2 19\n10 1\n16 9\n21 14\n", "22 66\n9 13\n7 8\n7 22\n1 12\n10 13\n18 9\n14 13\n18 17\n12 18\n19 7\n1 10\n17 16\n15 9\n7 10\n19 17\n8 9\n17 14\n6 14\n19 10\n9 7\n18 19\n10 17\n17 7\n14 9\n1 19\n10 9\n9 17\n10 12\n13 21\n8 18\n10 14\n13 19\n4 8\n8 12\n19 3\n14 8\n12 13\n19 8\n18 13\n7 18\n7 1\n12 7\n12 19\n18 20\n11 1\n13 8\n13 17\n1 8\n17 12\n19 14\n13 7\n5 12\n1 17\n12 14\n14 18\n8 17\n8 10\n18 1\n9 19\n14 1\n13 1\n1 9\n7 14\n9 12\n18 10\n10 2\n", "22 36\n6 15\n6 9\n14 18\n8 6\n5 18\n3 12\n16 22\n11 2\n7 1\n17 3\n10 20\n8 11\n5 21\n4 11\n9 11\n20 1\n12 4\n8 19\n8 9\n15 2\n6 19\n13 17\n8 2\n11 15\n9 15\n15 19\n16 13\n15 8\n19 11\n6 2\n9 19\n6 11\n9 2\n19 2\n10 14\n22 21\n", "22 66\n9 22\n9 7\n18 3\n4 1\n4 8\n22 7\n4 7\n16 8\n22 12\n17 3\n20 17\n9 1\n16 20\n4 3\n12 7\n22 16\n16 17\n3 7\n22 13\n1 8\n8 22\n9 16\n9 4\n8 17\n8 20\n7 17\n8 15\n20 7\n16 3\n8 7\n9 17\n7 16\n8 12\n16 4\n2 4\n16 1\n3 22\n1 12\n20 4\n22 1\n20 9\n17 12\n12 9\n14 20\n20 1\n4 22\n12 20\n11 17\n5 9\n20 22\n12 19\n10 1\n17 22\n20 3\n7 6\n12 3\n21 16\n8 9\n17 1\n17 4\n7 1\n3 1\n16 12\n9 3\n3 8\n12 4\n", "22 66\n12 18\n4 12\n15 21\n12 1\n1 18\n2 5\n9 10\n20 15\n18 10\n2 1\n1 14\n20 5\n12 9\n5 12\n14 9\n1 5\n2 20\n15 2\n5 14\n15 1\n17 2\n17 9\n20 18\n3 9\n2 9\n15 5\n14 17\n14 16\n12 14\n2 14\n12 10\n7 2\n20 22\n5 10\n17 19\n14 15\n15 9\n20 1\n15 17\n20 10\n20 9\n2 10\n11 10\n17 10\n12 20\n5 13\n17 1\n15 10\n1 8\n18 15\n5 17\n12 15\n14 20\n12 2\n17 12\n17 20\n14 10\n18 2\n9 18\n18 14\n18 6\n18 17\n9 5\n18 5\n1 9\n10 1\n", "22 66\n17 7\n2 11\n19 17\n14 17\n7 14\n9 1\n12 19\n7 9\n14 18\n15 20\n7 12\n14 21\n6 15\n4 2\n6 22\n7 19\n12 9\n14 19\n10 18\n9 2\n14 12\n18 2\n15 14\n7 2\n17 13\n6 18\n14 2\n4 7\n9 19\n3 12\n17 12\n2 12\n18 7\n17 15\n4 6\n17 4\n4 8\n4 19\n7 5\n15 9\n7 15\n18 4\n14 4\n4 12\n4 9\n2 19\n14 6\n16 19\n9 14\n18 9\n19 15\n15 12\n4 15\n2 15\n7 6\n9 6\n15 18\n19 6\n17 6\n17 18\n6 12\n18 19\n17 9\n12 18\n6 2\n2 17\n", "22 21\n14 2\n7 8\n17 6\n11 20\n5 16\n1 2\n22 8\n4 3\n13 18\n3 2\n6 1\n21 3\n11 4\n6 9\n3 12\n4 5\n15 2\n14 19\n11 13\n5 7\n1 10\n", "22 66\n16 14\n10 22\n13 15\n3 18\n18 15\n21 13\n7 2\n21 22\n4 14\n15 4\n16 3\n3 10\n4 20\n4 16\n19 14\n18 14\n10 14\n16 7\n21 15\n13 3\n10 15\n22 7\n3 15\n18 11\n13 10\n22 4\n13 12\n1 10\n3 17\n4 21\n13 22\n4 13\n22 14\n18 21\n13 16\n3 22\n22 18\n13 18\n7 10\n14 3\n10 21\n22 9\n21 16\n21 7\n3 4\n22 16\n16 10\n18 10\n6 21\n8 16\n22 15\n21 14\n7 13\n7 3\n18 7\n4 10\n7 4\n14 7\n4 18\n16 15\n14 15\n18 16\n15 5\n13 14\n21 3\n15 7\n", "22 66\n10 19\n15 6\n2 10\n9 19\n6 5\n14 10\n15 19\n3 14\n10 9\n11 2\n6 8\n18 8\n18 7\n19 14\n18 5\n1 15\n18 2\n21 8\n10 18\n9 18\n19 5\n19 18\n9 15\n6 16\n5 12\n21 5\n21 2\n6 19\n14 6\n10 13\n14 9\n2 14\n6 9\n10 15\n8 5\n9 2\n18 21\n15 2\n21 10\n8 2\n9 8\n6 21\n6 10\n5 2\n8 19\n18 15\n5 9\n14 21\n14 18\n19 21\n8 14\n15 21\n14 15\n8 10\n6 2\n14 5\n5 15\n20 8\n10 5\n15 8\n19 2\n22 21\n4 9\n9 21\n19 17\n18 6\n", "22 66\n22 7\n22 3\n16 6\n16 1\n8 17\n15 18\n13 18\n8 1\n12 15\n12 5\n16 7\n8 6\n22 12\n5 17\n10 7\n15 6\n6 18\n17 19\n18 16\n16 5\n22 17\n15 17\n22 16\n6 7\n1 11\n16 12\n8 12\n7 12\n17 6\n17 1\n6 5\n7 17\n1 5\n15 5\n17 18\n15 7\n15 22\n12 4\n16 15\n6 21\n7 18\n8 15\n12 1\n15 1\n16 8\n1 6\n7 5\n1 18\n8 18\n15 2\n7 8\n22 5\n22 18\n1 7\n16 20\n18 5\n5 8\n14 8\n17 12\n18 12\n9 5\n1 22\n6 22\n6 12\n16 17\n22 8\n", "22 66\n20 9\n3 10\n2 14\n19 14\n16 20\n14 18\n15 10\n21 2\n7 14\n10 2\n14 11\n3 2\n15 20\n20 18\n3 14\n9 7\n18 2\n3 9\n14 10\n7 11\n20 14\n14 15\n2 7\n14 9\n21 1\n18 12\n21 15\n10 18\n18 11\n21 7\n3 21\n18 15\n10 20\n2 8\n15 7\n9 10\n4 11\n3 7\n10 17\n9 18\n20 3\n18 21\n10 7\n9 11\n10 11\n3 15\n10 21\n6 3\n20 2\n3 11\n7 18\n21 14\n21 9\n11 20\n15 13\n21 20\n2 15\n11 15\n7 5\n9 22\n9 15\n3 18\n9 2\n21 11\n20 7\n11 2\n"], "output": ["11\n2 4 5 7 8 15 18 19 20 21 22 \n", "12\n1 2 3 4 5 7 8 10 11 13 14 17 \n", "1\n3 \n", "10\n1 2 4 6 8 10 13 16 17 18 \n", "6\n2 3 6 7 9 10 \n", "11\n1 2 6 10 11 13 16 17 19 21 22 \n", "9\n3 5 7 9 11 13 15 17 19 ", "20\n1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 \n", "11\n1 2 3 5 9 11 12 13 15 20 21 \n", "4\n5 9 13 17 ", "0\n\n", "5\n2 3 8 9 22 \n", "0\n\n", "4\n2 6 7 11 \n", "20\n1 2 3 4 5 6 7 8 10 11 13 14 15 16 17 18 19 20 21 22 \n", "6\n4 7 10 13 16 19 ", "16\n1 5 7 8 9 10 11 12 13 14 16 17 18 20 21 22 \n", "11\n1 3 8 9 12 13 15 16 17 20 21 \n", "9\n2 5 7 8 11 13 19 20 21 \n", "11\n5 8 11 12 13 14 15 17 18 19 22 \n", "7\n1 2 3 6 9 13 14 \n", "11\n1 7 8 9 10 12 13 14 17 18 19 \n", "15\n1 3 4 5 10 11 12 13 14 16 17 18 20 21 22 \n", "11\n1 3 4 7 8 9 12 16 17 20 22 \n", "11\n1 2 5 9 10 12 14 15 17 18 20 \n", "11\n2 4 6 7 9 12 14 15 17 18 19 \n", "11\n1 2 3 4 5 6 7 8 11 13 14 \n", "11\n3 4 7 10 13 14 15 16 18 21 22 \n", "11\n2 5 6 8 9 10 14 15 18 19 21 \n", "11\n1 5 6 7 8 12 15 16 17 18 22 \n", "11\n2 3 7 9 10 11 14 15 18 20 21 \n"]}, "index": 8100}, {"input": "You are given a sequence of positive integers a1, a2, ..., an. \n\nWhile possible, you perform the following operation: find a pair of equal consecutive elements. If there are more than one such pair, find the leftmost (with the smallest indices of elements). If the two integers are equal to x, delete both and insert a single integer x + 1 on their place. This way the number of elements in the sequence is decreased by 1 on each step. \n\nYou stop performing the operation when there is no pair of equal consecutive elements.\n\nFor example, if the initial sequence is [5, 2, 1, 1, 2, 2], then after the first operation you get [5, 2, 2, 2, 2], after the second \u2014 [5, 3, 2, 2], after the third \u2014 [5, 3, 3], and finally after the fourth you get [5, 4]. After that there are no equal consecutive elements left in the sequence, so you stop the process.\n\nDetermine the final sequence after you stop performing the operation.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 2\u00b7105) \u2014 the number of elements in the sequence.\n\nThe second line contains the sequence of integers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nOutput\n\nIn the first line print a single integer k \u2014 the number of elements in the sequence after you stop performing the operation. \n\nIn the second line print k integers \u2014 the sequence after you stop performing the operation.\n\n", "output": "n, m = int(input()), 0\nb = [int(t) for t in input().split()]\na = []\nfor i in range(n):\n\ta.append(b[i])\n\twhile len(a) > 1 and a[-2] == a[-1]:\n\t\tdel a[-1]\n\t\ta[-1] += 1\nprint(len(a))\nprint(\" \".join([str(t) for t in a]))", "public_tests": {"input": ["7\n4 10 22 11 12 5 6\n", "6\n5 2 1 1 2 2\n", "4\n1000000000 1000000000 1000000000 1000000000\n"], "output": ["7\n4 10 22 11 12 5 6\n", "2\n5 4\n", "1\n1000000002\n"]}, "private_tests": {"input": ["2\n1 1\n", "3\n2 1 1\n", "7\n5 5 4 4 5 6 7\n", "4\n3 2 1 1\n"], "output": ["1\n2\n", "1\n3\n", "3\n7 6 7\n", "1\n4\n"]}, "index": 8101}, {"input": "You're given Q queries of the form (L, R). \n\nFor each query you have to find the number of such x that L \u2264 x \u2264 R and there exist integer numbers a > 0, p > 1 such that x = ap.\n\nInput\n\nThe first line contains the number of queries Q (1 \u2264 Q \u2264 105).\n\nThe next Q lines contains two integers L, R each (1 \u2264 L \u2264 R \u2264 1018).\n\nOutput\n\nOutput Q lines \u2014 the answers to the queries.\n\nExample\n\nInput\n\n6\n1 4\n9 9\n5 7\n12 29\n137 591\n1 1000000\n\n\nOutput\n\n2\n1\n0\n3\n17\n1111\n\nNote\n\nIn query one the suitable numbers are 1 and 4.", "output": "import sys\nreadline = sys.stdin.buffer.readline\n\n\n\nJ = set()\nfor i in range(2000):\n    J.add(i**2)\n    J.add(i**3)\n\nRi = set()\nfor p in range(5, 61, 2):\n    if p%3 == 0:\n        continue\n    for base in range(2, 10**9):     \n        if base in J:\n            continue\n        bp = pow(base, p)\n        if bp > 10**18:\n            break\n        Ri.add(bp)\n\nRi = list(Ri)\nRi.sort()\nLL = len(Ri)\n\ndef calc(x):\n    res = 0\n    ng = 10**9+1\n    ok = 0\n    while abs(ok-ng) > 1:\n        med = (ok+ng)//2\n        if med*med <= x:\n            ok = med\n        else:\n            ng = med\n    \n    res += ok\n    ng = 10**6+1\n    ok = 0\n    while abs(ok-ng) > 1:\n        med = (ok+ng)//2\n        if med*med*med <= x:\n            ok = med\n        else:\n            ng = med\n    res += ok\n    \n    ng = 10**3+1\n    ok = 0\n    while abs(ok-ng) > 1:\n        med = (ok+ng)//2\n        if med*med*med*med*med*med <= x:\n            ok = med\n        else:\n            ng = med\n    res -= ok\n    \n    ng = LL\n    ok = -1\n    while abs(ok-ng) > 1:\n        med = (ok+ng)//2\n        if Ri[med] <= x:\n            ok = med\n        else:\n            ng = med\n    res += ok+1\n    return res\n\n\n\n\n\nQ = int(readline())\nAns = [None]*Q\nfor qu in range(Q):\n    L, R = map(int, readline().split())\n    Ans[qu] = calc(R) - calc(L-1)\n\nprint('\\n'.join(map(str, Ans)))", "public_tests": {"input": ["6\n1 4\n9 9\n5 7\n12 29\n137 591\n1 1000000\n"], "output": ["2\n1\n0\n3\n17\n1111\n"]}, "private_tests": {"input": ["20\n862 928\n758 964\n541 789\n622 943\n328 900\n14 764\n217 972\n461 847\n442 468\n900 986\n518 529\n938 993\n549 851\n690 944\n484 601\n320 910\n98 868\n816 915\n765 880\n551 770\n"], "output": ["1\n4\n5\n6\n14\n32\n20\n9\n0\n2\n1\n1\n6\n4\n4\n15\n26\n2\n2\n4\n"]}, "index": 8102}, {"input": "How many integer sequences A_1,A_2,\\ldots,A_N of length N satisfy all of the following conditions?\n\n* 0 \\leq A_i \\leq 9\n* There exists some i such that A_i=0 holds.\n* There exists some i such that A_i=9 holds.\n\n\n\nThe answer can be very large, so output it modulo 10^9 + 7.\n\nConstraints\n\n* 1 \\leq N \\leq 10^6\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the answer modulo 10^9 + 7.\n\n", "output": "N=int(input())\nprint((10**N-9**N*2+8**N)%(10**9+7))", "public_tests": {"input": ["869121", "1", "2"], "output": ["2511445", "0", "2"]}, "private_tests": {"input": [], "output": []}, "index": 8103}, {"input": "There are N blocks arranged in a row. Let us paint these blocks.\n\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\n\nFind the number of ways to paint the blocks under the following conditions:\n\n* For each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\n* There may be at most K pairs of adjacent blocks that are painted in the same color.\n\n\n\nSince the count may be enormous, print it modulo 998244353.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, M \\leq 2 \\times 10^5\n* 0 \\leq K \\leq N - 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K\n\n\nOutput\n\nPrint the answer.\n\n", "output": "M=998244353\nn,m,k=map(int,input().split())\na=0\nc=1\nfor i in range(k+1):\n  a+=c*m*pow(m-1,n-i-1,M)\n  c=c*(n-i-1)*pow(i+1,M-2,M)%M\nprint(a%M)", "public_tests": {"input": ["100 100 0", "3 2 1", "60522 114575 7559"], "output": ["73074801", "6", "479519525"]}, "private_tests": {"input": [], "output": []}, "index": 8104}, {"input": "Given are a sequence A= {a_1,a_2,......a_N} of N positive even numbers, and an integer M.\n\nLet a semi-common multiple of A be a positive integer X that satisfies the following condition for every k (1 \\leq k \\leq N):\n\n* There exists a non-negative integer p such that X= a_k \\times (p+0.5).\n\n\n\nFind the number of semi-common multiples of A among the integers between 1 and M (inclusive).\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^9\n* 2 \\leq a_i \\leq 10^9\n* a_i is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the number of semi-common multiples of A among the integers between 1 and M (inclusive).\n\n", "output": "f=lambda:map(int,input().split())\nn,m=f(); a=list(f())\nfrom fractions import *\nl=1\nfor i in a:\n  i//=2; l=l*i//gcd(l,i)\n  if (l//i)%2<1 or l>m: print(0); exit()\nprint(m//l-m//(l*2))", "public_tests": {"input": ["3 100\n14 22 40", "2 50\n6 10", "5 1000000000\n6 6 2 6 2"], "output": ["0", "2", "166666667"]}, "private_tests": {"input": [], "output": []}, "index": 8105}, {"input": "Given are a prime number p and a sequence of p integers a_0, \\ldots, a_{p-1} consisting of zeros and ones.\n\nFind a polynomial of degree at most p-1, f(x) = b_{p-1} x^{p-1} + b_{p-2} x^{p-2} + \\ldots + b_0, satisfying the following conditions:\n\n* For each i (0 \\leq i \\leq p-1), b_i is an integer such that 0 \\leq b_i \\leq p-1.\n* For each i (0 \\leq i \\leq p-1), f(i) \\equiv a_i \\pmod p.\n\nConstraints\n\n* 2 \\leq p \\leq 2999\n* p is a prime number.\n* 0 \\leq a_i \\leq 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\np\na_0 a_1 \\ldots a_{p-1}\n\n\nOutput\n\nPrint b_0, b_1, \\ldots, b_{p-1} of a polynomial f(x) satisfying the conditions, in this order, with spaces in between.\n\nIt can be proved that a solution always exists. If multiple solutions exist, any of them will be accepted.\n\n", "output": "p = int(input())\na = list(map(int,input().split()))\n\nans = [0]*p\n\nfor i in range(p):\n    if a[i] == 0:\n        continue\n    ans[0] -= p-1\n    m = 1\n    for k in range(p):\n        ans[p-1-k] -= m\n        ans[p-1-k] %= p\n        m *= i\n        m %= p\n\nprint(*ans)\n", "public_tests": {"input": ["2\n1 0", "3\n0 0 0", "5\n0 1 0 1 0"], "output": ["1 1", "0 0 0", "0 2 0 1 3"]}, "private_tests": {"input": [], "output": []}, "index": 8106}, {"input": "You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\n\nHere, a ACGT string is a string that contains no characters other than `A`, `C`, `G` and `T`.\n\nConstraints\n\n* S is a string of length between 1 and 10 (inclusive).\n* Each character in S is an uppercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint the length of the longest ACGT string that is a substring of S.\n\n", "output": "import re\nprint(max(map(len,re.split(\"[^ATCG]\",input()))))", "public_tests": {"input": ["SHINJUKU", "ATCODER", "HATAGAYA"], "output": ["0", "3", "5"]}, "private_tests": {"input": [], "output": []}, "index": 8107}, {"input": "You are given a string S of length N and another string T of length M. These strings consist of lowercase English letters.\n\nA string X is called a good string when the following conditions are all met:\n\n* Let L be the length of X. L is divisible by both N and M.\n* Concatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\n* Concatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\n\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.\n\nConstraints\n\n* 1 \\leq N,M \\leq 10^5\n* S and T consist of lowercase English letters.\n* |S|=N\n* |T|=M\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS\nT\n\n\nOutput\n\nIf a good string does not exist, print `-1`; if it exists, print the length of the shortest such string.\n\n", "output": "i=input;n,m=map(int,i().split());g=m-max(a*n%m for a in range(m));print([n*m//g,-1][i()[::n//g]!=i()[::m//g]])", "public_tests": {"input": ["3 2\nacp\nae", "6 3\nabcdef\nabc", "15 9\ndnsusrayukuaiia\ndujrunuma"], "output": ["6", "-1", "45"]}, "private_tests": {"input": [], "output": []}, "index": 8108}, {"input": "When l is an odd number, the median of l numbers a_1, a_2, ..., a_l is the (\\frac{l+1}{2})-th largest value among a_1, a_2, ..., a_l.\n\nYou are given N numbers X_1, X_2, ..., X_N, where N is an even number. For each i = 1, 2, ..., N, let the median of X_1, X_2, ..., X_N excluding X_i, that is, the median of X_1, X_2, ..., X_{i-1}, X_{i+1}, ..., X_N be B_i.\n\nFind B_i for each i = 1, 2, ..., N.\n\nConstraints\n\n* 2 \\leq N \\leq 200000\n* N is even.\n* 1 \\leq X_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX_1 X_2 ... X_N\n\n\nOutput\n\nPrint N lines. The i-th line should contain B_i.\n\n", "output": "n,*x=map(int,open(0).read().split())\ny=sorted(x)[n//2-1:n//2+1]\nfor i in x:print(y[i<=y[0]])", "public_tests": {"input": ["6\n5 5 4 4 3 3", "4\n2 4 4 3", "2\n1 2"], "output": ["4\n4\n4\n4\n4\n4", "4\n3\n3\n4", "2\n1"]}, "private_tests": {"input": [], "output": []}, "index": 8109}, {"input": "Joisino the magical girl has decided to turn every single digit that exists on this world into 1.\n\nRewriting a digit i with j (0\u2264i,j\u22649) costs c_{i,j} MP (Magic Points).\n\nShe is now standing before a wall. The wall is divided into HW squares in H rows and W columns, and at least one square contains a digit between 0 and 9 (inclusive).\n\nYou are given A_{i,j} that describes the square at the i-th row from the top and j-th column from the left, as follows:\n\n* If A_{i,j}\u2260-1, the square contains a digit A_{i,j}.\n* If A_{i,j}=-1, the square does not contain a digit.\n\n\n\nFind the minimum total amount of MP required to turn every digit on this wall into 1 in the end.\n\nConstraints\n\n* 1\u2264H,W\u2264200\n* 1\u2264c_{i,j}\u226410^3 (i\u2260j)\n* c_{i,j}=0 (i=j)\n* -1\u2264A_{i,j}\u22649\n* All input values are integers.\n* There is at least one digit on the wall.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nc_{0,0} ... c_{0,9}\n:\nc_{9,0} ... c_{9,9}\nA_{1,1} ... A_{1,W}\n:\nA_{H,1} ... A_{H,W}\n\n\nOutput\n\nPrint the minimum total amount of MP required to turn every digit on the wall into 1 in the end.\n\n", "output": "f=lambda:[*map(int,input().split())]\nh,w=f()\nr=range(10)\nc=[f() for _ in r]\nC=[0]*10\nfor _ in range(h):\n  for i in f():\n    if i>=0: C[i]+=1\nfor k in r:\n  for i in r:\n    for j in r:\n      c[i][j]=min(c[i][j],c[i][k]+c[k][j])\nprint(sum(c[i][1]*C[i] for i in r))", "public_tests": {"input": ["2 4\n0 9 9 9 9 9 9 9 9 9\n9 0 9 9 9 9 9 9 9 9\n9 9 0 9 9 9 9 9 9 9\n9 9 9 0 9 9 9 9 9 9\n9 9 9 9 0 9 9 9 9 2\n9 9 9 9 9 0 9 9 9 9\n9 9 9 9 9 9 0 9 9 9\n9 9 9 9 9 9 9 0 9 9\n9 9 9 9 2 9 9 9 0 9\n9 2 9 9 9 9 9 9 9 0\n-1 -1 -1 -1\n8 1 1 8", "3 5\n0 4 3 6 2 7 2 5 3 3\n4 0 5 3 7 5 3 7 2 7\n5 7 0 7 2 9 3 2 9 1\n3 6 2 0 2 4 6 4 2 3\n3 5 7 4 0 6 9 7 6 7\n9 8 5 2 2 0 4 7 6 5\n5 4 6 3 2 3 0 5 4 3\n3 6 2 3 4 2 4 0 8 9\n4 6 5 4 3 5 3 2 0 8\n2 1 3 4 5 7 8 6 4 0\n3 5 2 6 1\n2 5 3 2 1\n6 9 2 5 6", "5 5\n0 999 999 999 999 999 999 999 999 999\n999 0 999 999 999 999 999 999 999 999\n999 999 0 999 999 999 999 999 999 999\n999 999 999 0 999 999 999 999 999 999\n999 999 999 999 0 999 999 999 999 999\n999 999 999 999 999 0 999 999 999 999\n999 999 999 999 999 999 0 999 999 999\n999 999 999 999 999 999 999 0 999 999\n999 999 999 999 999 999 999 999 0 999\n999 999 999 999 999 999 999 999 999 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1"], "output": ["12", "47", "0"]}, "private_tests": {"input": [], "output": []}, "index": 8110}, {"input": "You are going out for a walk, when you suddenly encounter N monsters. Each monster has a parameter called health, and the health of the i-th monster is h_i at the moment of encounter. A monster will vanish immediately when its health drops to 0 or below.\n\nFortunately, you are a skilled magician, capable of causing explosions that damage monsters. In one explosion, you can damage monsters as follows:\n\n* Select an alive monster, and cause an explosion centered at that monster. The health of the monster at the center of the explosion will decrease by A, and the health of each of the other monsters will decrease by B. Here, A and B are predetermined parameters, and A > B holds.\n\n\n\nAt least how many explosions do you need to cause in order to vanish all the monsters?\n\nConstraints\n\n* All input values are integers.\n* 1 \u2264 N \u2264 10^5\n* 1 \u2264 B < A \u2264 10^9\n* 1 \u2264 h_i \u2264 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B\nh_1\nh_2\n:\nh_N\n\n\nOutput\n\nPrint the minimum number of explosions that needs to be caused in order to vanish all the monsters.\n\n", "output": "_,a,b,*H=map(int,open(0).read().split())\nl,r=0,10**9\nwhile r-l>1:\n\tm=(l+r)//2\n\tif-sum(min(0,(h-m*b)//(b-a))for h in H)>m:l=m\n\telse:r=m\nprint(r)\n", "public_tests": {"input": ["5 2 1\n900000000\n900000000\n1000000000\n1000000000\n1000000000", "4 5 3\n8\n7\n4\n2", "2 10 4\n20\n20"], "output": ["800000000", "2", "4"]}, "private_tests": {"input": [], "output": []}, "index": 8111}, {"input": "There are N cities. There are also K roads and L railways, extending between the cities. The i-th road bidirectionally connects the p_i-th and q_i-th cities, and the i-th railway bidirectionally connects the r_i-th and s_i-th cities. No two roads connect the same pair of cities. Similarly, no two railways connect the same pair of cities.\n\nWe will say city A and B are connected by roads if city B is reachable from city A by traversing some number of roads. Here, any city is considered to be connected to itself by roads. We will also define connectivity by railways similarly.\n\nFor each city, find the number of the cities connected to that city by both roads and railways.\n\nConstraints\n\n* 2 \u2266 N \u2266 2*10^5\n* 1 \u2266 K, L\u2266 10^5\n* 1 \u2266 p_i, q_i, r_i, s_i \u2266 N\n* p_i < q_i\n* r_i < s_i\n* When i \u2260 j, (p_i, q_i) \u2260 (p_j, q_j)\n* When i \u2260 j, (r_i, s_i) \u2260 (r_j, s_j)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN K L\np_1 q_1\n:\np_K q_K\nr_1 s_1\n:\nr_L s_L\n\n\nOutput\n\nPrint N integers. The i-th of them should represent the number of the cities connected to the i-th city by both roads and railways.\n\n", "output": "from collections import defaultdict as dd\ndef find(u,x):\n    if u[x]<0:\n        return x\n    u[x] = find(u,u[x])\n    return u[x]\n\ndef unite(u,a,b):\n    a = find(u,a)\n    b = find(u,b)\n    if a == b:\n        return False\n    if u[b] < u[a]:\n        a,b = b,a\n    u[a] += u[b]\n    u[b] = a\n    return True\nn,k,l = map(int, input().split())\nufr = [-1]*(n+1)\nuft = [-1]*(n+1)\nfor _ in range(k):\n    a,b = map(int, input().split())\n    unite(ufr,a,b)\nfor _ in range(l):\n    a,b = map(int, input().split())\n    unite(uft,a,b)\ntot = dd(int)\nfor i in range(1,n+1):\n  tot[(find(ufr,i),find(uft,i))] += 1\nprint(\" \".join([str(tot[(find(ufr,i),find(uft,i))]) for i in range(1,n+1)]))", "public_tests": {"input": ["7 4 4\n1 2\n2 3\n2 5\n6 7\n3 5\n4 5\n3 4\n6 7", "4 3 1\n1 2\n2 3\n3 4\n2 3", "4 2 2\n1 2\n2 3\n1 4\n2 3"], "output": ["1 1 2 1 2 2 2", "1 2 2 1", "1 2 2 1"]}, "private_tests": {"input": [], "output": []}, "index": 8112}, {"input": "Snuke got positive integers s_1,...,s_N from his mother, as a birthday present. There may be duplicate elements.\n\nHe will circle some of these N integers. Since he dislikes cubic numbers, he wants to ensure that if both s_i and s_j (i \u2260 j) are circled, the product s_is_j is not cubic. For example, when s_1=1,s_2=1,s_3=2,s_4=4, it is not possible to circle both s_1 and s_2 at the same time. It is not possible to circle both s_3 and s_4 at the same time, either.\n\nFind the maximum number of integers that Snuke can circle.\n\nConstraints\n\n* 1 \u2266 N \u2266 10^5\n* 1 \u2266 s_i \u2266 10^{10}\n* All input values are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\ns_1\n:\ns_N\n\n\nOutput\n\nPrint the maximum number of integers that Snuke can circle.\n\n", "output": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nnmax = 10**5+10\neratos = [0 for i in range(nmax+1)]\nprime = []\ncnt = 2\nwhile True:\n  while cnt <= nmax and eratos[cnt]:\n    cnt += 1\n  if cnt > nmax:\n    break\n  eratos[cnt] = 1\n  prime.append(cnt)\n  for i in range(cnt**2,nmax+1,cnt):\n    eratos[i] = 1\ncbls = []\nsqst = set()\nfor i in prime:\n  if i**3 <= 10**10:\n    cbls.append(i**3)\n  else:\n    sqst.add(i**2)\nn = int(input())\na = [int(input()) for i in range(n)]\ndc = defaultdict(int)\nfor i in a:\n  for p in cbls:\n    while i%p == 0:\n      i //= p\n  dc[i] += 1\nans = n\nfor i,v in dc.items():\n  if i == 1:\n    ans -= v-1\n    continue\n  if v == 0:\n    continue\n  x = 1\n  for p in prime:\n    if p**3 > 10**10:\n      break\n    if i%(p*p) == 0:\n      x *= p\n      i //= p*p\n    elif i%p == 0:\n      x *= p**2\n      i //= p\n  if i in sqst:\n    x *= int(i**0.5+0.5)\n    i //= i\n  if i != 1:\n    continue\n  if x in dc:\n    ans -= min(dc[x],v)\n    dc[x] = 0\nprint(ans)", "public_tests": {"input": ["10\n1\n10\n100\n1000000007\n10000000000\n1000000009\n999999999\n999\n999\n999", "6\n2\n4\n8\n16\n32\n64", "8\n1\n2\n3\n4\n5\n6\n7\n8"], "output": ["9", "3", "6"]}, "private_tests": {"input": [], "output": []}, "index": 8113}, {"input": "Aizu is famous for its buckwheat. There are many people who make buckwheat noodles by themselves.\n\nOne day, you went shopping to buy buckwheat flour. You can visit three shops, A, B and C. The amount in a bag and its unit price for each shop is determined by the follows table. Note that it is discounted when you buy buckwheat flour in several bags.\n\n|  Shop A |  Shop B |  Shop C\n---|---|---|---\nAmount in a bag |  200g|  300g|  500g\nUnit price for a bag (nominal cost)|  380 yen |  550 yen |  850 yen\nDiscounted units |  per 5 bags | per 4 bags | per 3 bags\nDiscount rate|  reduced by 20 %|  reduced by 15 %|  reduced by 12 %\n\n\n\nFor example, when you buy 12 bags of flour at shop A, the price is reduced by 20 % for 10 bags, but not for other 2 bags. So, the total amount shall be (380 \u00d7 10) \u00d7 0.8 + 380 \u00d7 2 = 3,800 yen.\n\nWrite a program which reads the amount of flour, and prints the lowest cost to buy them. Note that you should buy the flour of exactly the same amount as the given input.\n\n\n\nInput\n\nThe input consists of multiple datasets. For each dataset, an integer a (500 \u2264 a \u2264 5000, a is divisible by 100) which represents the amount of flour is given in a line.\n\nThe input ends with a line including a zero. Your program should not process for the terminal symbol. The number of datasets does not exceed 50.\n\nOutput\n\nFor each dataset, print an integer which represents the lowest cost.\n\nExample\n\nInput\n\n500\n2200\n0\n\n\nOutput\n\n850\n339", "output": "a=[1e4]*51\nfor i,j in[(2,380),(3,550),(5,850),(10,1520),(12,1870),(15,2244)]:\n a[i]=j\n for k in range(51-i):a[k+i]=min(a[k]+j,a[k+i])\nfor n in iter(input,'0'):print(a[int(n)//100])\n", "public_tests": {"input": ["500\n2200\n0"], "output": ["850\n3390"]}, "private_tests": {"input": [], "output": []}, "index": 8114}, {"input": "Interest rates are attached to the money deposited in banks, and the calculation method and interest rates vary from bank to bank. The combination of interest and principal is called principal and interest, but as a method of calculating principal and interest, there are \"single interest\" that calculates without incorporating interest into the principal and \"compound interest\" that calculates by incorporating interest into the principal. Yes, you must understand this difference in order to get more principal and interest. The calculation method of principal and interest is as follows.\n\n<image>\n\n<image>\n\n\nEnter the number of banks, the number of years to deposit money, and the information of each bank (bank number, interest rate type, annual interest rate (percentage)), and create a program that outputs the bank number with the highest principal and interest. However, only one bank has the highest principal and interest.\n\n\n\ninput\n\nGiven multiple datasets. The end of the input is indicated by a single zero. Each dataset is given in the following format:\n\n\nn\ny\nb1 r1 t1\nb2 r2 t2\n::\nbn rn tn\n\n\nThe first line gives the number of banks n (1 \u2264 n \u2264 50) and the second line gives the number of years to deposit money y (1 \u2264 y \u2264 30). The next n lines are given the bank number bi of the i-th bank, the integer ri (1 \u2264 ri \u2264 100) representing the annual interest rate, and the interest rate type ti (1 or 2). The interest rate type ti is given as 1 for simple interest and 2 for compound interest.\n\nThe number of datasets does not exceed 100.\n\noutput\n\nFor each dataset, the bank number with the highest principal and interest is output on one line.\n\nExample\n\nInput\n\n2\n8\n1 5 2\n2 6 1\n2\n9\n1 5 2\n2 6 1\n0\n\n\nOutput\n\n2\n", "output": "def S(r,y):return 1+y*r/100\ndef C(r,y):return pow(1+r/100,y)\nwhile 1:\n    n=int(input())\n    if n==0:break\n    y=int(input())\n    a=0.\n    for _ in range(n):\n        b,r,t=map(int,input().split())\n        c=[S(r,y),C(r,y)][t-1]\n        if(a<c): d=b;a=c\n    print(d)", "public_tests": {"input": ["2\n8\n1 5 2\n2 6 1\n2\n9\n1 5 2\n2 6 1\n0"], "output": ["2\n1"]}, "private_tests": {"input": [], "output": []}, "index": 8115}, {"input": "Gas stations in the White Tiger service area have $ N $ lanes assigned numbers from $ 1 $ to $ N $. The first car in each lane can refuel.\n\nCars entering the gas station will choose the lane with the fewest cars in line and line up at the end of the line. If there are multiple such lanes, choose the one with the lowest number. After refueling, the car will leave the lane and the car behind it will refuel. Once you have selected a lane, you cannot move to another lane. Also, the order of the cars in the lane does not change.\n\nWhen given information on the number of lanes, the cars that have entered and the lanes that have been refueled, create a program that outputs the numbers of the cars that have been refueled in order. The entrance information is given as the number of the car entering the stand, and the information on the end of refueling is given as the lane number where the refueling of the first car is completed. However, it is assumed that no cars are lined up in any lane at first.\n\n\n\ninput\n\nThe input is given in the following format.\n\n\n$ N $ $ M $\n$ info_1 $\n$ info_2 $\n::\n$ info_M $\n\n\nThe first line gives the number of lanes $ N $ ($ 1 \\ leq N \\ leq 10 $) and the number of information $ M $ ($ 2 \\ leq M \\ leq 10,000 $). Each information $ info_i $ is given in the following $ M $ line. Each $ info_i $ is given in one of the following formats:\n\n\n0 $ lane $\n\n\nOr\n\n\n1 $ car $\n\n\nIf the first number is 0, it indicates that the first car in the lane with the number $ lane $ ($ 1 \\ leq lane \\ leq N $) has been refueled. A first number of 1 indicates that a car with the number $ car $ ($ 1 \\ leq car \\ leq 9,999 $) has entered the stand.\n\nThe input meets the following constraints.\n\n* The numbers of cars entering the gas station are all different.\n* There must always be at least one piece of information whose first number is 0,1.\n* No information is given that the first number is 0 for lanes without cars.\n\noutput\n\nFor each information on the end of refueling, the number of the car that has finished refueling is output on one line.\n\n", "output": "N, M = map(int, input().split())\nL = [[] for i in range(N)]\nans = []\nfor i in range(M) :\n    info, num = map(int, input().split())\n    \n    if info == 1 :\n        x = 0\n        for j in range(1, N) :\n            if len(L[j]) < len(L[x]) :\n                x = j\n        L[x].append(num)\n    else :\n        ans.append(L[num-1][0])\n        del L[num-1][0]\nprint(*ans, sep='\\n')\n    \n", "public_tests": {"input": ["2 7\n1 999\n1 1000\n0 2\n1 1001\n1 1002\n0 1\n0 1"], "output": ["1000\n999\n1002"]}, "private_tests": {"input": [], "output": []}, "index": 8116}, {"input": "There is a cube which consists of n \u00d7 n \u00d7 n small cubes. Small cubes have marks on their surfaces. An example where n = 4 is shown in the following figure.\n\n\n<image>\n\n\nThen, as shown in the figure above (right), make a hole that penetrates horizontally or vertically from the marked surface to the opposite surface.\n\nYour job is to create a program that reads the positions marked n and counts the number of small cubes with no holes.\n\n\n\nInput\n\nThe input consists of several datasets. Each dataset is given in the following format:\n\n\nn h\nc1 a1 b1\nc2 a2 b2\n..\n..\n..\nch ah bh\n\n\nh is an integer indicating the number of marks. The h lines that follow enter the positions of the h marks. The coordinate axes shown in the figure below will be used to specify the position of the mark. (x, y, z) = (1, 1, 1) is the lower left cube, and (x, y, z) = (n, n, n) is the upper right cube.\n\n\n<image>\n\n\nci is a string indicating the plane marked with the i-th. ci is one of \"xy\", \"xz\", and \"yz\", indicating that the i-th mark is on the xy, xz, and yz planes, respectively.\n\nai and bi indicate the coordinates on the plane indicated by ci. For the xy, xz, and yz planes, ai and bi indicate the plane coordinates (x, y), (x, z), and (y, z), respectively. For example, in the above figure, the values \u200b\u200bof ci, ai, and bi of marks A, B, and C are \"xy 4 4\", \"xz 1 2\", and \"yz 2 3\", respectively.\n\nWhen both n and h are 0, it indicates the end of input.\n\nYou can assume that n \u2264 500 and h \u2264 200.\n\nOutput\n\nFor each dataset, print the number of non-perforated cubes on one line.\n\nExample\n\nInput\n\n4 3\nxy 4 4\nxz 1 2\nyz 2 3\n4 5\nxy 1 1\nxy 3 3\nxz 3 3\nyz 2 1\nyz 3 3\n0 0\n\n\nOutput\n\n52\n4", "output": "while True:\n  n, h = map(int, input().split())\n  if n == 0:\n    break\n  hit = set()\n  for _ in range(h):\n    c, a, b = input().split()\n    if c == \"xy\":\n      add = {(int(a), int(b), z) for z in range(1, n + 1)}\n    elif c == \"xz\":\n      add = {(int(a), y, int(b)) for y in range(1, n + 1)}\n    elif c == \"yz\":\n      add = {(x, int(a), int(b)) for x in range(1, n + 1)}\n    hit = hit | add\n  print(n ** 3 - len(hit))\n\n", "public_tests": {"input": ["4 3\nxy 4 4\nxz 1 2\nyz 2 3\n4 5\nxy 1 1\nxy 3 3\nxz 3 3\nyz 2 1\nyz 3 3\n0 0"], "output": ["52\n46"]}, "private_tests": {"input": [], "output": []}, "index": 8117}, {"input": "A wise king declared a new calendar. \"Tomorrow shall be the first day of the calendar, that is, the day 1 of the month 1 of the year 1. Each year consists of 10 months, from month 1 through month 10, and starts from a big month. A common year shall start with a big month, followed by small months and big months one after another. Therefore the first month is a big month, the second month is a small month, the third a big month, ..., and the 10th and last month a small one. A big month consists of 20 days and a small month consists of 19 days. However years which are multiples of three, that are year 3, year 6, year 9, and so on, shall consist of 10 big months and no small month.\"\n\nMany years have passed since the calendar started to be used. For celebration of the millennium day (the year 1000, month 1, day 1), a royal lottery is going to be organized to send gifts to those who have lived as many days as the number chosen by the lottery. Write a program that helps people calculate the number of days since their birthdate to the millennium day.\n\nInput\n\nThe input is formatted as follows.\n\n> n\n>  Y1 M1 D1\n>  Y2 M2 D2\n>  ...\n>  Yn Mn Dn\n\nHere, the first line gives the number of datasets as a positive integer n, which is less than or equal to 100. It is followed by n datasets. Each dataset is formatted in a line and gives three positive integers, Yi (< 1000), Mi (\u2264 10), and Di (\u2264 20), that correspond to the year, month and day, respectively, of a person's birthdate in the king's calendar. These three numbers are separated by a space.\n\nOutput\n\nFor the birthdate specified in each dataset, print in a line the number of days from the birthdate, inclusive, to the millennium day, exclusive. Output lines should not contain any character other than this number.\n\nSample Input\n\n\n8\n1 1 1\n344 3 1\n696 5 1\n182 9 5\n998 8 7\n344 2 19\n696 4 19\n999 10 20\n\n\nOutput for the Sample Input\n\n\n196470\n128976\n59710\n160715\n252\n128977\n59712\n1\n\n\n\n\n\n\nExample\n\nInput\n\n8\n1 1 1\n344 3 1\n696 5 1\n182 9 5\n998 8 7\n344 2 19\n696 4 19\n999 10 20\n\n\nOutput\n\n196470\n128976\n59710\n160715\n252\n128977\n59712\n", "output": "for _ in range(int(input())):\n    y,m,d=map(int,input().split())\n    y-=1;m-=1\n    print(196471-(y//3*590+y%3*195+(m*20 if y%3==2 else m//2*39+m%2*20)+d))", "public_tests": {"input": ["8\n1 1 1\n344 3 1\n696 5 1\n182 9 5\n998 8 7\n344 2 19\n696 4 19\n999 10 20"], "output": ["196470\n128976\n59710\n160715\n252\n128977\n59712\n1"]}, "private_tests": {"input": [], "output": []}, "index": 8118}, {"input": "Suppose that P1 is an infinite-height prism whose axis is parallel to the z-axis, and P2 is also an infinite-height prism whose axis is parallel to the y-axis. P1 is defined by the polygon C1 which is the cross section of P1 and the xy-plane, and P2 is also defined by the polygon C2 which is the cross section of P2 and the xz-plane.\n\nFigure I.1 shows two cross sections which appear as the first dataset in the sample input, and Figure I.2 shows the relationship between the prisms and their cross sections.\n\n<image>\n\n\nFigure I.1: Cross sections of Prisms\n\n<image>\n\n\nFigure I.2: Prisms and their cross sections\n\n<image>\n\n\nFigure I.3: Intersection of two prisms\n\nFigure I.3 shows the intersection of two prisms in Figure I.2, namely, P1 and P2.\n\nWrite a program which calculates the volume of the intersection of two prisms.\n\n\n\nInput\n\nThe input is a sequence of datasets. The number of datasets is less than 200.\n\nEach dataset is formatted as follows.\n\nm n\nx11 y11\nx12 y12\n.\n.\n.\nx1m y1m\nx21 z21\nx22 z22\n.\n.\n.\nx2n z2n\n\n\nm and n are integers (3 \u2264 m \u2264 100, 3 \u2264 n \u2264 100) which represent the numbers of the vertices of the polygons, C1 and C2, respectively.\n\nx1i, y1i, x2j and z2j are integers between -100 and 100, inclusive. (x1i, y1i) and (x2j , z2j) mean the i-th and j-th vertices' positions of C1 and C2 respectively.\n\nThe sequences of these vertex positions are given in the counterclockwise order either on the xy-plane or the xz-plane as in Figure I.1.\n\nYou may assume that all the polygons are convex, that is, all the interior angles of the polygons are less than 180 degrees. You may also assume that all the polygons are simple, that is, each polygon's boundary does not cross nor touch itself.\n\nThe end of the input is indicated by a line containing two zeros.\n\nOutput\n\nFor each dataset, output the volume of the intersection of the two prisms, P1 and P2, with a decimal representation in a line.\n\nNone of the output values may have an error greater than 0.001. The output should not contain any other extra characters.\n\nExample\n\nInput\n\n4 3\n7 2\n3 3\n0 2\n3 1\n4 2\n0 1\n8 1\n4 4\n30 2\n30 12\n2 12\n2 2\n15 2\n30 8\n13 14\n2 8\n8 5\n13 5\n21 7\n21 9\n18 15\n11 15\n6 10\n6 8\n8 5\n10 12\n5 9\n15 6\n20 10\n18 12\n3 3\n5 5\n10 3\n10 10\n20 8\n10 15\n10 8\n4 4\n-98 99\n-99 -99\n99 -98\n99 97\n-99 99\n-98 -98\n99 -99\n96 99\n0 0\n\n\nOutput\n\n4.708333333333333\n1680.0000000000005\n491.1500000000007\n0.0\n7600258.484771565", "output": "def width(X,Y,x):\n     n = len(X)\n     lb,ub = float('inf'),-float('inf')\n     for i in range(n):\n          x1,y1,x2,y2 = X[i],Y[i],X[(i+1)%n],Y[(i+1)%n]\n          if (x1-x)*(x2-x) <= 0 and x1 != x2:\n               y = y1 + (y2-y1)*(x-x1)/(x2-x1)\n               lb = min(lb,y)\n               ub = max(ub,y)\n     return max(0,ub-lb)\n\nwhile 1:\n     M,N = map(int,input().split())\n     if not (M and N):\n          break\n     X1 = [0]*M\n     Y1 = [0]*M\n     X2 = [0]*N\n     Z2 = [0]*N\n     XS = [0]*N\n     for i in range(M):\n          X1[i],Y1[i] = map(int,input().split())\n     for i in range(N):\n          X2[i],Z2[i] = map(int,input().split())\n     XS = X1+X2\n     XS.sort()\n     min1,max1 = min(X1),max(X1)\n     min2,max2 = min(X2),max(X2)\n     res = 0\n     for i in range(len(XS)-1):\n          a = XS[i]\n          b = XS[i+1]\n          c = (a+b)/2\n          if min1 <= c <= max1 and min2 <= c <= max2:\n               fa = width(X1,Y1,a)*width(X2,Z2,a)\n               fb = width(X1,Y1,b)*width(X2,Z2,b)\n               fc = width(X1,Y1,c)*width(X2,Z2,c)\n               res += (b-a)/6 * (fa+4*fc+fb)\n     print('%.10f'%res)\n\n", "public_tests": {"input": ["4 3\n7 2\n3 3\n0 2\n3 1\n4 2\n0 1\n8 1\n4 4\n30 2\n30 12\n2 12\n2 2\n15 2\n30 8\n13 14\n2 8\n8 5\n13 5\n21 7\n21 9\n18 15\n11 15\n6 10\n6 8\n8 5\n10 12\n5 9\n15 6\n20 10\n18 12\n3 3\n5 5\n10 3\n10 10\n20 8\n10 15\n10 8\n4 4\n-98 99\n-99 -99\n99 -98\n99 97\n-99 99\n-98 -98\n99 -99\n96 99\n0 0"], "output": ["4.708333333333333\n1680.0000000000005\n491.1500000000007\n0.0\n7600258.4847715655"]}, "private_tests": {"input": [], "output": []}, "index": 8119}, {"input": "Champernown constant is an irrational number represented in decimal by \"0.\" followed by concatenation of all positive integers in the increasing order. The first few digits of this constant are: 0.123456789101112...\n\nYour task is to write a program that outputs the K digits of Chapnernown constant starting at the N-th place for given two natural numbers K and N.\n\n\n\nInput\n\nThe input has multiple lines. Each line has two positive integers N and K (N \u2264 109, K \u2264 100) separated by a space.\n\nThe end of input is indicated by a line with two zeros. This line should not be processed.\n\nOutput\n\nFor each line, output a line that contains the K digits.\n\nExample\n\nInput\n\n4 5\n6 7\n0 0\n\n\nOutput\n\n45678\n678910", "output": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**13\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\ndef main():\n    rr = []\n\n    def f(n,m):\n        n -= 1\n        i = 1\n        l = 1\n        for k in range(1,10):\n            if n > 10**(k-1) * 9 * k:\n                n -= 10**(k-1) * 9 * k\n                i = 10 ** k\n                l = k + 1\n            else:\n                break\n        i += n // l\n        n %= l\n        r = ''\n        for j in range(i,i+101):\n            r += str(j)\n        return r[n:n+m]\n\n    while True:\n        n,m = LI()\n        if n == 0 and m == 0:\n            break\n        rr.append(f(n,m))\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n", "public_tests": {"input": ["4 5\n6 7\n0 0"], "output": ["45678\n6789101"]}, "private_tests": {"input": [], "output": []}, "index": 8120}, {"input": "Dr. Akita, who lives in the neighborhood, is a historical researcher in the field and recently discovered a new ancient document about Ono no Komachi.\n\nIt is widely known that Ono no Komachi has given General Fukakusa, who wants to be dating, on condition that he keeps going for 100 nights, but he claims that this discovery is a new game for two people every night. It turned out that he was doing.\n\nThe rules are as follows.\n\n* First the servant decides the number of edits and valid formulas\n* Edit the formulas alternately in the order of Admiral Fukakusa, Ono no Komachi, Admiral Fukakusa, Ono no Komachi, ...\n* The game ends when Admiral Fukakusa and Ono no Komachi edit the number of times decided by the servant.\n* You can either add one character to the formula or delete one character from the formula in one edit of the formula.\n* Do not make edits that invalidate the formula\n\n\n\nSee below for detailed definitions of valid formulas.\n\nIn this game, it seems that the larger the calculation result of the final formula, the less days that General Fukakusa should go. That is, General Fukakusa aims to maximize the result, and Ono no Komachi The purpose is to minimize it.\n\nBy the way, in the old document, there was a record of the number of edits and mathematical formulas decided by the servant, but the important result was worm-eaten and could not be read. I tried to calculate it, but it was too difficult for him who is not good at game theory, so it seems that he asked for help from you in the neighborhood for the time being. So you decided to write a program and cooperate with him.\n\nYou may feel sick of the modern mathematical formulas of the Heian period, but you shouldn't worry about such trifles before the cause of neighborship.\n\nDefinition of valid formulas\n\nValid formulas in this game are \"(\", \")\", \"*\", \"+\", \"-\", \"&\", \"^\", \"|\", \"0\"-\"9\" 18 It is a non-empty string consisting only of types of characters, and is a combination of a finite number of terms with a binary operator.\n\n\n[Term] [Binary operator] [Term] [Binary operator] ... [Binary operator] [Term]\n\n\nbecome that way.\n\nA term is a valid formula in parentheses, such as \"(\" [valid formula] \"\") \", or a positive integer. Positive integers do not have a leading\" 0 \", only numbers. It is a character string consisting of.\n\nFinally, the ternary operator is just one character of \"*\", \"+\", \"-\", \"&\", \"^\", \"|\". See below for a detailed definition. ..\n\nFrom the above rules,\n\n* Not a valid binary operator because it has two characters, such as \"1 + -1\",\n* Not a combination of terms with a binary operator, such as \"+1\",\n* Items that are not valid because the parentheses are not supported, such as \"2)\" and \"(3\",\n* Non-valid positive integer representations starting with 0, such as \"0\", \"01\"\n\n\n\nEtc. are considered invalid formulas.\n\nOn the other hand\n\n* Those with parentheses on the outermost side, such as \"(1 + 2)\",\n* \"((1 + 2)) * 3\" with double parentheses,\n* Only numbers in parentheses, such as \"(1) +3\",\n* Those with the same precedence of binary operators, such as \"(1 * 2) +3\",\n\n\n\nNote that etc. are verbose, but are accepted under the above rules and are considered valid formulas.\n\nTypes of binary operators\n\nIn this game, there are six types of binary operators: \"*\", \"+\", \"-\", \"&\", \"^\", \"|\". Multiply, add, subtract, and bitwise logic, respectively. It is a product, an exclusive OR for each bit, and a logical sum for each bit. When considering bit operations, negative numbers are considered to be represented by a binary complement with a sufficiently large number of digits. That is, they are usually expressed. You can think of it as a signed integer type of.\n\nAlso, from the highest priority,\n\n1. *\n2. +,-\n3. &\n4. ^\n5. |\n\n\n\nIn that order.\n\nNote that * has a higher priority than +.\n\n\n2 * 4 + 3 * 5\n\n\nIn an expression like, * means that it is calculated first, in other words,\n\n\n(2 * 4) + (3 * 5)\n\n\nIs to be.\n\nWe also assume that all binary operators are left-associative.\n\n\n2 ^ 4 ^ 3 ^ 5\n\n\nIt means to calculate in order from the left in the formula like, in other words,\n\n\n((2 ^ 4) ^ 3) ^ 5\n\n\nIs to be.\n\nInput\n\nThe input consists of multiple datasets. Each dataset represents the number of edits and formulas determined by the servant in one game, and the format is as follows.\n\n\nN Expression\n\n\nN is the number of edits decided by the servant, and 1 \u2264 N \u2264 11 can be assumed. Expression is the formula decided by the servant, \"(\", \")\", \"*\", \"+\", It is given as a non-empty string of 7 characters or less, consisting of only 18 characters of \"-\", \"&\", \"^\", \"|\", \"0\"-\"9\". It can be assumed that only valid formulas are given, not invalid formulas.\n\nAt the end of the input,\n\n\n0 #\n\n\nRepresented by.\n\nIt can be assumed that the number of data sets is 99 or less.\n\nOutput\n\nFor each dataset, print the final formula calculation result when both do their best on one line. Do not print any other extra characters.\n\nSample Input\n\n\n1 1\ntwenty two\n3 1 + 2 * 3-4\n3 1 | 2 ^ 3 & 4\n3 (1 + 2) * 3\n3 1-1-1-1\n0 #\n\n\nOutput for Sample Input\n\n\n91\n2\n273\n93\n279\n88\n\n\n\n\n\n\nExample\n\nInput\n\n1 1\n2 2\n3 1+2*3-4\n3 1|2^3&4\n3 (1+2)*3\n3 1-1-1-1\n0 #\n\n\nOutput\n\n91\n2\n273\n93\n279\n8", "output": "# undo \u304c\u51fa\u6765\u308b\u30b2\u30fc\u30e0\u306f\u5168\u30662\u624b\u3060\u3051\u898b\u308c\u3070\u3088\u3044\nops = [\"+\", \"*\", \"-\", \"&\", \"^\", \"|\"]\nnumbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]\n\n\ndef check(x):\n    # +*\n    op = 0\n    for c in x:\n        if c in ops:\n            op += 1\n            if op >= 2:\n                return None\n        else:\n            op = 0\n    # +...\n    for op in ops:\n        if x.startswith(op):\n            return None\n        if (\"(\" + op) in x:\n            return None\n    # 0\u304c\u306a\u3044\u304b\n    zero_ok = False\n    for c in x:\n        if not zero_ok and c == \"0\":\n            return None\n        if c in ops:\n            zero_ok = False\n        elif c in numbers:\n            zero_ok = True\n        else:  # ( )\n            zero_ok = False\n    try:\n        val = int(eval(x))\n        return val\n    except:\n        return None\n\n\ndef get_nexts(x):\n    # \u524a\u9664\n    result = []\n    for i in range(len(x)):\n        y = x[:i] + x[i + 1:]\n        val = check(y)\n        if val != None:\n            result.append((val, y))\n    # \u8ffd\u52a0\n    for i in range(len(x) + 1):\n        add_list = numbers + ops\n        for s in add_list:\n            y = x[:i] + s + x[i:]\n            val = check(y)\n            if val != None:\n                result.append((val, y))\n    return result\n\n\nwhile True:\n    n, x = input().split(\" \")\n    n = int(n)\n    if n == 0:\n        quit()\n    nexts = get_nexts(x)\n    if n % 2 == 1:\n        nexts.sort(key=lambda a: - a[0])\n        print(nexts[0][0])\n        continue\n    minvals = []\n    for (val, y) in nexts:\n        nextss = get_nexts(y)\n        nextss.sort(key=lambda a: a[0])\n        minvals.append(nextss[0][0])\n    print(max(minvals))\n\n", "public_tests": {"input": ["1 1\n2 2\n3 1+2*3-4\n3 1|2^3&4\n3 (1+2)*3\n3 1-1-1-1\n0 #"], "output": ["91\n2\n273\n93\n279\n88"]}, "private_tests": {"input": [], "output": []}, "index": 8121}, {"input": "Range Count Query\n\nGiven the sequence a_1, a_2, .., a_N.\n\nIn the query, answer the number of terms whose value is l or more and r or less.\n\ninput\n\n\nN Q\na_1 a_2 ... a_N\nl_1 r_1\nl_2 r_2\n::\nl_q r_q\n\n\noutput\n\n\nans_1\nans_2\n::\nans_q\n\n\nOn line i, output the answer to the i-th query, that is, the number of j such as l_i \\ leq a_j \\ leq r_i.\n\nConstraint\n\n* 1 \\ leq N, Q \\ leq 10 ^ 5\n* 1 \\ leq a_i \\ leq 10 ^ 9\n* 1 \\ leq l_i \\ leq r_i \\ leq 10 ^ 9\n\n\n\nInput example\n\n\n6 3\n8 6 9 1 2 1\n2 8\n1 7\n3 5\n\n\nOutput example\n\n\n3\nFour\n0\n\n\n\n\n\n\nExample\n\nInput\n\n6 3\n8 6 9 1 2 1\n2 8\n1 7\n3 5\n\n\nOutput\n\n3\n4\n", "output": "def num():\n    return int(input())\ndef nums():\n    return list(map(int,input().split()))\n\"\"\"\nN = num()\nA = nums()\nprint(A.index(min(A))+1)\n\"\"\"\n\"\"\"\nN = num()\nA =  set(nums())\nprint(len(A))\n\"\"\"\n\ndef get_near_index(sorted_l,val,last):\n    left = 0\n    right = len(sorted_l) - 1\n    while left <= right:\n        mid = (right + left) // 2\n        if sorted_l[mid] == val:\n            return mid if last else mid\n        elif sorted_l[mid] > val:\n            right = mid -1\n        else: \n            left = mid + 1\n    return right if last else left \n\nN,Q = nums()\nA = nums()\nA.sort()\nL,R = [],[]\n\nfor i in range(Q):\n    li,ri = nums()\n    L.append(li)\n    R.append(ri)\nfor l,r in zip(L,R):\n    l_idx = get_near_index(A,l,0)\n    r_idx = get_near_index(A,r,1)\n    print(r_idx-l_idx+1)\n", "public_tests": {"input": ["6 3\n8 6 9 1 2 1\n2 8\n1 7\n3 5"], "output": ["3\n4\n0"]}, "private_tests": {"input": [], "output": []}, "index": 8122}, {"input": "Write a program which manipulates a sequence A = {a0, a1, . . . , an-1} with the following operations:\n\n* find(s, t): report the minimum element in as, as+1, . . . ,at.\n* update(i, x): change ai to x.\n\n\n\nNote that the initial values of ai (i = 0, 1, . . . , n\u22121) are 231-1.\n\nConstraints\n\n* 1 \u2264 n \u2264 100000\n* 1 \u2264 q \u2264 100000\n* If comi is 0, then 0 \u2264 xi < n, 0 \u2264 yi < 231-1.\n* If comi is 1, then 0 \u2264 xi < n, 0 \u2264 yi < n.\n\nInput\n\n\nn q\ncom0 x0 y0\ncom1 x1 y1\n...\ncomq\u22121 xq\u22121 yq\u22121\n\n\nIn the first line, n (the number of elements in A) and q (the number of queries) are given. Then, q queries are given where com represents the type of queries. '0' denotes update(xi, yi) and '1' denotes find(xi, yi).\n\nOutput\n\nFor each find operation, print the minimum element.\n\n", "output": "n,q=map(int,input().split())\n#Range Minimum Query\nseg=[]\ncnt=-1\ninf=2**31-1\nwhile 2**cnt<=n:\n\tcnt+=1\n\tseg.append([inf for _ in range(2**cnt)])\n\ndef f(i,j):\n\tRange=(2**(cnt-i)*j,2**(cnt-i)*(j+1)-1)\n\tif Range[0]>y or Range[1]<x:\n\t\treturn inf\n\telif Range[0]>=x and Range[1]<=y:\n\t\treturn seg[i][j]\n\telse:\n\t\treturn min(f(i+1,2*j),f(i+1,2*j+1))\nfor _ in range(q):\n\tc,x,y=map(int,input().split())\n\tif c==0:\n\t\tseg[-1][x]=y\n\t\tx//=2\n\t\tfor j in range(1,cnt+1):\n\t\t\tseg[-j-1][x]=min(seg[-j][x*2],seg[-j][x*2+1])\n\t\t\tx//=2\n\telse:\n\t\tprint(f(0,0))\n\n", "public_tests": {"input": ["3 5\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 2", "1 3\n1 0 0\n0 0 5\n1 0 0"], "output": ["1\n2", "2147483647\n5"]}, "private_tests": {"input": [], "output": []}, "index": 8123}, {"input": "There are n slimes in a row. Each slime has an integer value (possibly negative or zero) associated with it.\n\nAny slime can eat its adjacent slime (the closest slime to its left or to its right, assuming that this slime exists). \n\nWhen a slime with a value x eats a slime with a value y, the eaten slime disappears, and the value of the remaining slime changes to x - y.\n\nThe slimes will eat each other until there is only one slime left. \n\nFind the maximum possible value of the last slime.\n\nInput\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 \u2264 a_i \u2264 10^9), where a_i is the value of i-th slime.\n\nOutput\n\nPrint an only integer \u2014 the maximum possible value of the last slime.\n\n", "output": "if input()=='1':\n print(input())\nelse:\n x,*a,y=sorted(map(int,input().split()))\n print(y-x+sum(map(abs,a)))", "public_tests": {"input": ["5\n0 -1 -1 -1 -1\n", "4\n2 1 2 1\n"], "output": ["4\n", "4\n"]}, "private_tests": {"input": ["2\n-4 -5\n", "10\n-20 0 3 -5 -18 15 -3 -9 -7 9\n", "2\n-2 -2\n", "8\n-1 5 -19 4 -12 20 1 -12\n", "1\n-10\n", "3\n-2 -4 -6\n", "2\n10 8\n", "9\n2 4 -4 15 1 11 15 -7 -20\n", "2\n-2 -3\n", "2\n-1 -5\n", "3\n-1 -2 -3\n", "2\n-1 -1\n", "1\n11\n", "2\n-10 -5\n", "2\n-1 -2\n", "3\n17 4 -1\n", "4\n20 3 -15 7\n", "3\n-1 -1 -1\n", "5\n-7 -1 -1 -1 -1\n", "4\n-1 -2 -3 -4\n", "2\n-2 -1\n", "4\n-1 -1 -1 -1\n", "5\n-14 -2 0 -19 -12\n", "2\n1 2\n", "2\n-5 -5\n", "2\n-2 -4\n", "5\n-1 -2 -3 -2 -1\n", "7\n-8 9 0 -10 -20 -8 3\n", "5\n-1 -1 -1 -1 -1\n", "6\n-15 2 -19 20 0 9\n", "2\n-9 -3\n", "1\n-1000000000\n"], "output": ["1\n", "89\n", "0\n", "74\n", "-10\n", "8\n", "2\n", "79\n", "1\n", "4\n", "4\n", "0\n", "11\n", "5\n", "1\n", "22\n", "45\n", "1\n", "9\n", "8\n", "1\n", "2\n", "47\n", "1\n", "0\n", "2\n", "7\n", "58\n", "3\n", "65\n", "6\n", "-1000000000\n"]}, "index": 8124}, {"input": "You are given an integer sequence 1, 2, ..., n. You have to divide it into two sets A and B in such a way that each element belongs to exactly one set and |sum(A) - sum(B)| is minimum possible.\n\nThe value |x| is the absolute value of x and sum(S) is the sum of elements of the set S.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^9).\n\nOutput\n\nPrint one integer \u2014 the minimum possible value of |sum(A) - sum(B)| if you divide the initial sequence 1, 2, ..., n into two sets A and B.\n\n", "output": "print((int(input())+1)//2%2)", "public_tests": {"input": ["6\n", "5\n", "3\n"], "output": ["1\n", "1\n", "0\n"]}, "private_tests": {"input": ["46369\n", "1000003346\n", "4\n", "1000070102\n", "123214213\n", "999998\n", "199999998\n", "65538\n", "999\n", "1000271094\n", "1244164813\n", "1465465413\n", "1999999999\n", "999999998\n", "1234567889\n", "778778777\n", "1000080110\n", "333333333\n", "46362\n", "99\n", "1000000002\n", "129847189\n", "63245\n", "199999990\n", "2000000000\n", "123124213\n", "46341\n", "1999999993\n", "1000005\n", "1777777\n", "1000001\n", "84457\n", "1777778\n", "1999999929\n", "2\n", "69420\n", "1999999998\n", "1999999990\n", "123456789\n", "27397633\n", "46401\n", "250489\n", "10\n", "46353\n", "1\n", "1999999997\n", "65535\n", "46342\n", "1825468885\n", "7656765\n", "12345\n"], "output": ["1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n"]}, "index": 8125}, {"input": "You are given an array of n integers: a_1, a_2, \u2026, a_n. Your task is to find some non-zero integer d (-10^3 \u2264 d \u2264 10^3) such that, after each number in the array is divided by d, the number of positive numbers that are presented in the array is greater than or equal to half of the array size (i.e., at least \u2308n/2\u2309). Note that those positive numbers do not need to be an integer (e.g., a 2.5 counts as a positive number). If there are multiple values of d that satisfy the condition, you may print any of them. In case that there is no such d, print a single integer 0.\n\nRecall that \u2308 x \u2309 represents the smallest integer that is not less than x and that zero (0) is neither positive nor negative.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n space-separated integers a_1, a_2, \u2026, a_n (-10^3 \u2264 a_i \u2264 10^3).\n\nOutput\n\nPrint one integer d (-10^3 \u2264 d \u2264 10^3 and d \u2260 0) that satisfies the given condition. If there are multiple values of d that satisfy the condition, you may print any of them. In case that there is no such d, print a single integer 0.\n\n", "output": "k=l=(int(input())-1)//2\nfor x in map(int,input().split()):k-=x>0;l-=x<0\nprint((0,1,-1,1)[(k<0)+2*(l<0)])", "public_tests": {"input": ["7\n0 0 1 -1 0 0 2\n", "5\n10 0 -7 2 6"], "output": ["0", "1"]}, "private_tests": {"input": ["100\n-261 613 -14 965 -114 -594 516 -631 -477 -352 -481 0 -224 -524 -841 397 -138 -986 -442 -568 -417 -850 -654 -193 -344 -648 -525 -394 -730 -712 -600 0 188 248 -657 -509 -647 -878 175 -894 -557 0 -367 -458 -35 -560 0 -952 -579 -784 -286 -303 -104 -984 0 0 487 -871 223 -527 0 -776 -675 -933 -669 -41 683 0 508 -443 807 -96 -454 -718 -806 -512 -990 -179 -909 0 421 -414 0 -290 0 -929 -675 611 -658 319 873 -421 876 -393 -289 -47 361 -693 -793 -33\n", "100\n642 -529 -322 -893 -539 -300 -286 -503 -750 0 974 -560 -806 0 294 0 -964 -555 501 -308 -160 -369 -175 0 -257 -361 -976 -6 0 836 915 -353 -134 0 -511 -290 -854 87 190 790 -229 27 -67 -699 -200 -589 443 -534 -621 -265 0 -666 -497 999 -700 -149 -668 94 -623 -160 -385 -422 88 -818 -998 -665 -229 143 133 241 840 0 -764 873 -372 -741 262 -462 -481 -630 0 848 -875 65 302 -231 -514 -275 -874 -447 195 -393 350 678 -991 -904 -251 0 -376 -419\n", "10\n-62 0 94 -49 84 -11 -88 0 -88 94\n", "10\n1 1 1 1 1 -1 -1 -1 -1 -1\n", "8\n-1 -1 -1 -1 0 0 1 1\n", "5\n100 0 0 0 0\n", "100\n-801 -258 -829 0 -839 -920 0 0 979 -896 -581 -132 -945 -274 -538 117 0 27 0 469 129 0 -608 685 0 -915 273 -929 0 -418 -57 517 -230 -775 0 -839 475 -350 882 363 419 0 -120 0 -416 808 0 -726 286 0 0 -777 -80 -331 0 278 -328 0 -534 0 0 -581 -463 0 -244 0 -693 0 0 -754 120 -254 -237 0 -452 0 -478 -509 0 -688 0 911 -219 368 0 0 -598 0 -575 0 0 -897 0 0 0 0 373 0 490 950\n", "9\n1 1 1 0 0 0 -1 -1 -1\n", "50\n-335 775 108 -928 -539 408 390 500 867 951 301 -113 -711 827 -83 422 -465 -355 -891 -957 -261 -507 930 385 745 198 238 33 805 -956 154 627 812 -518 216 785 817 -965 -916 999 986 718 55 698 -864 512 322 442 188 771\n", "50\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n", "100\n-473 517 517 154 -814 -836 649 198 803 -209 -363 759 -44 -242 -473 -715 561 451 -462 -110 -957 -792 462 132 -627 -473 363 572 -176 -935 -704 539 -286 22 374 286 451 748 -198 11 -616 319 264 -198 -638 -77 374 990 506 957 517 -297 -781 979 -121 539 -605 -264 946 869 616 -121 -792 -957 -22 528 715 869 506 -385 -869 121 -220 583 814 -814 33 -858 -121 308 825 55 -495 803 88 -187 -165 869 946 -594 -704 -209 11 770 -825 -44 -946 341 -330 -231\n", "100\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "3\n1 0 -1\n", "50\n-306 -646 -572 -364 -706 796 900 -715 -808 -746 -49 -320 983 -414 -996 659 -439 -280 -913 126 -229 427 -493 -316 -831 -292 -942 707 -685 -82 654 490 -313 -660 -960 971 383 430 -145 -689 -757 -811 656 -419 244 203 -605 -287 44 -583\n", "20\n-918 -369 -810 -162 486 558 459 -792 -153 756 54 279 324 369 -783 828 -522 -333 -288 -612\n", "100\n39 351 -39 663 -312 741 624 -39 -702 897 -234 -624 195 -897 -273 -624 39 -546 -858 390 390 -273 -741 156 -78 624 -117 390 -975 -234 390 897 936 -897 351 351 234 117 -663 -819 390 468 234 234 -78 -351 -897 702 -195 975 273 -429 624 -273 312 39 -117 -702 -507 195 -312 507 -858 -117 -117 858 468 858 546 702 -858 702 117 -702 663 -78 -702 -741 897 585 429 -741 897 546 195 975 -234 -936 78 -156 819 -897 507 -702 -858 975 -507 858 -390 -117\n", "2\n1 -1\n", "100\n-246 -98 -29 -208 -305 -231 -309 -632 -255 -293 -810 -283 -962 -593 -203 -40 -910 -934 -640 -520 -481 -988 -774 -696 -700 -875 -418 -750 -193 -863 -163 -498 -77 -627 -786 -820 -469 -799 -50 -162 -938 -133 -842 -144 -383 -245 -983 -975 -279 -86 -725 -304 -313 -574 -509 -192 -110 -726 -789 -36 -151 -792 -285 -988 -617 -738 -462 -921 -882 -299 -379 -640 -762 -363 -41 -942 -693 -92 -912 -187 -614 -509 -225 -649 -443 -867 -503 -596 -757 -711 -864 -378 -974 -141 -491 -98 -506 -113 -322 -558\n", "7\n1 2 3 0 0 -1 -1\n", "5\n-1 -1 -1 0 0\n", "20\n74 33 43 41 -83 -30 0 -20 84 99 83 0 64 0 57 46 0 18 94 82\n", "5\n0 0 1 1 -1\n", "5\n0 0 0 1 1\n", "5\n1 1 -1 -1 0\n", "6\n-2 -1 0 0 0 0\n", "100\n216 -900 99 198 -945 -936 234 243 990 702 -657 225 -594 414 -36 990 720 -558 774 -927 -234 432 -342 180 522 -225 -936 -945 639 -702 -117 -63 720 747 144 -117 855 396 90 486 828 612 423 90 -423 -486 -729 45 -216 486 -108 -432 459 -351 -504 -639 -72 981 468 -81 -891 -999 297 126 -684 -27 477 -405 828 -72 -729 540 657 -270 -603 -9 864 -738 -954 -378 378 324 693 -225 -783 405 -999 -144 45 -207 999 -846 -63 -945 -135 981 54 360 -135 -261\n", "100\n49 0 -87 -39 0 0 -39 73 1 88 45 0 87 0 0 0 90 54 59 0 0 0 -96 -68 9 -26 0 68 21 59 -21 90 64 0 -62 78 -53 0 0 72 0 0 0 14 -79 87 0 75 0 97 77 0 37 0 1 18 0 0 0 30 47 39 0 -69 0 0 0 71 0 0 0 -85 0 44 0 0 0 -36 0 30 0 0 0 0 0 9 40 0 0 61 -35 0 0 0 0 -32 0 28 0 -100\n", "4\n2 2 -2 -2\n", "100\n-48 842 18 424 -969 -357 -781 -517 -941 -957 -548 23 0 215 0 -649 -509 955 376 824 62 0 -5 674 890 263 -567 585 488 -862 66 961 75 205 838 756 514 -806 0 -884 692 0 301 -722 457 838 -649 -785 0 -775 449 -436 524 792 999 953 470 39 -61 0 860 65 420 382 0 11 0 117 767 171 0 577 185 385 387 -612 0 277 -738 -691 78 396 6 -766 155 119 -588 0 -724 228 580 200 -375 620 615 87 574 740 -398 698\n", "20\n-828 -621 -36 -225 837 126 981 450 522 -522 -684 684 -477 792 -846 -405 639 495 27 -387\n", "100\n0 -927 -527 -306 -667 -229 -489 -194 -701 0 180 -723 0 3 -857 -918 -217 -471 732 -712 329 -40 0 0 -86 -820 -149 636 -260 -974 0 732 764 -769 916 -489 -916 -747 0 -508 -940 -229 -244 -761 0 -425 122 101 -813 -67 0 0 0 707 -272 -435 0 -736 228 586 826 -795 539 -553 -863 -744 -826 355 0 -6 -824 0 0 -588 -812 0 -109 -408 -153 -799 0 -15 -602 0 -874 -681 440 579 -577 0 -545 836 -810 -147 594 124 337 -477 -749 -313\n", "5\n-1 -2 -3 -4 -5\n", "4\n-1 -1 0 1\n", "100\n34 -601 426 -318 -52 -51 0 782 711 0 502 746 -450 1 695 -606 951 942 14 0 -695 806 -195 -643 445 -903 443 523 -940 634 -229 -244 -303 -970 -564 -755 344 469 0 -293 306 496 786 62 0 -110 640 339 630 -276 -286 838 137 -508 811 -385 -784 -834 937 -361 -799 534 368 -352 -702 353 -437 -440 213 56 637 -814 -169 -56 930 720 -100 -696 -749 463 -32 761 -137 181 428 -408 0 727 -78 963 -606 -131 -537 827 951 -753 58 -21 -261 636\n", "6\n1 1 0 0 -1 -1\n", "3\n-1 0 0\n", "100\n-322 -198 -448 -249 -935 614 67 -679 -616 430 -71 818 -595 -22 559 -575 -710 50 -542 -144 -977 672 -826 -927 457 518 603 -287 689 -45 -770 208 360 -498 -884 -161 -831 -793 -991 -102 -706 338 298 -897 236 567 -22 577 -77 -481 376 -152 861 559 190 -662 432 -880 -839 737 857 -614 -670 -423 -320 -451 -733 -304 822 -316 52 46 -438 -427 601 -885 -644 518 830 -517 719 643 216 45 -15 382 411 -424 -649 286 -265 -49 704 661 -2 -992 67 -118 299 -420\n", "100\n-218 113 -746 -267 498 408 116 756 -793 0 -335 -213 593 -467 807 -342 -944 13 637 -82 -16 860 -333 -94 409 -149 -79 -431 -321 974 148 779 -860 -992 -598 0 -300 285 -187 404 -468 0 -586 875 0 0 -26 366 221 -759 -194 -353 -973 -968 -539 0 925 -223 -471 237 208 0 420 688 640 -711 964 661 708 -158 54 864 0 -697 -40 -313 -194 220 -211 108 596 534 148 -137 939 106 -730 -800 -266 433 421 -135 76 -51 -318 0 631 591 46 669\n", "20\n-892 0 -413 742 0 0 754 23 -515 -293 0 918 -711 -362 -15 -776 -442 -902 116 732\n", "4\n-1 -2 0 2\n", "100\n0 0 0 0 0 0 0 0 539 0 0 -957 0 0 0 -220 0 550 0 0 0 660 0 0 -33 0 0 -935 0 0 0 0 0 0 0 0 0 0 0 0 0 -55 297 0 0 0 0 0 836 0 -451 0 0 0 0 0 -176 0 0 0 0 0 0 792 -847 330 0 0 0 715 0 0 0 517 -682 0 0 0 0 0 0 0 0 506 484 0 -396 0 0 429 0 0 0 0 0 0 0 968 0 0\n", "100\n0 0 0 0 0 0 0 0 0 0 0 600 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 900 100 0 0 0 1000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "4\n1 -1 0 0\n", "5\n0 1 2 -1 -2\n", "5\n10 0 -7 2 6\n", "5\n1 1 0 -1 -1\n", "5\n2 2 -2 -2 0\n", "4\n0 0 -1 -1\n", "6\n0 0 1 1 -1 -1\n", "100\n-39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39\n", "100\n0 1000 1000 1000 800 300 -500 900 400 -500 -900 400 400 -300 -300 -600 500 0 -500 600 -500 900 1000 -600 -200 300 -100 800 -800 0 200 400 0 -100 100 100 1000 -400 100 400 -900 -500 -900 400 -700 -400 800 -900 300 -300 -400 500 -900 1000 700 -200 500 400 -200 -300 -200 -600 -600 -800 300 -100 100 -1000 100 -800 -500 -800 0 100 900 -200 -100 -400 -500 0 -400 900 600 400 -200 100 400 800 -800 700 600 -200 1000 -400 -200 -200 100 -1000 700 -600\n", "4\n1 0 -1 -1\n", "50\n-321 -535 -516 -822 -622 102 145 -607 338 -849 -499 892 -23 -120 40 -864 -452 -641 -902 41 745 -291 887 -175 -288 -69 -590 370 -421 195 904 558 886 89 -764 -378 276 -21 -531 668 872 88 -32 -558 230 181 -639 364 -940 177\n", "100\n-900 -700 400 200 -800 500 1000 500 -300 -300 -100 900 -300 -300 900 -200 900 -800 -200 1000 -500 -200 -200 500 100 500 100 -400 -100 400 -500 700 400 -900 -300 -900 -700 1000 -800 1000 700 -200 -400 -900 -1000 400 300 800 -200 300 -500 -700 200 -200 -900 800 100 -700 -800 900 -900 -700 500 600 -700 300 -100 1000 100 -800 -200 -600 200 600 -100 -500 900 800 500 -600 900 600 600 -1000 800 -400 -800 900 500 -300 -300 400 1000 400 -1000 -200 -200 -100 -200 -800\n", "5\n-1 -1 0 0 0\n", "100\n-880 550 -605 -781 297 -748 209 385 429 748 -880 913 -924 -935 517 11 352 -99 -979 462 990 -495 -44 539 528 -22 -451 44 -781 451 792 275 -462 220 968 726 -88 385 55 77 341 715 275 -693 -880 616 440 -924 -451 -308 -770 -836 473 935 -660 957 418 -264 341 385 -55 -22 880 -539 539 -858 -121 165 -385 -198 99 -88 11 -231 -638 -440 814 -198 902 550 209 275 -319 -66 -176 -297 594 781 -33 -242 -385 -308 77 891 -781 0 -858 -22 825 -759\n", "50\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\n", "3\n-1 0 1\n", "3\n-1 -1 0\n", "5\n1 -1 0 0 0\n", "50\n351 -729 -522 -936 -342 -189 -441 -279 -702 -369 864 873 -297 -261 -207 -54 -900 -675 -585 261 27 594 -360 702 -621 -774 729 846 864 -45 639 -216 -18 882 414 630 855 810 -135 783 -765 882 144 -477 -36 180 216 -180 -306 774\n", "3\n0 -1 1\n", "20\n355 -184 -982 -685 581 139 249 -352 -856 -436 679 397 653 325 -639 -722 769 345 -207 -632\n", "5\n1 1 0 0 -1\n", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "9\n0 0 0 1 1 1 1 -1 -1\n", "5\n-1 -2 -3 0 80\n", "4\n1 1 -1 -1\n", "100\n663 -408 -459 -255 204 -510 714 -561 -765 -510 765 -765 -357 -867 204 765 408 -153 255 459 306 -102 969 153 918 153 867 765 357 306 -663 918 408 357 714 561 0 459 255 204 867 -714 459 -51 102 -204 -816 -816 357 765 -459 -255 -357 153 408 510 -663 357 -714 408 867 -561 765 -153 969 663 612 51 867 -51 51 -663 204 153 969 663 -357 510 -714 714 -663 102 714 -255 -969 765 0 918 -612 -459 -204 0 306 102 663 -408 357 -510 -102 -510\n", "100\n621 862 494 -906 906 359 776 0 23 -868 863 -872 273 182 414 675 31 555 0 -423 468 517 577 892 117 664 292 11 105 589 173 455 711 358 229 -666 192 758 6 858 208 628 532 21 69 319 926 988 0 0 0 229 351 708 287 949 429 895 369 0 756 486 2 525 656 -906 742 284 174 510 747 227 274 103 50 -832 656 627 883 -603 927 989 797 463 615 798 832 535 562 517 194 697 661 176 814 -62 0 -886 239 221\n", "50\n40 -84 25 0 21 44 96 2 -49 -15 -58 58 0 -49 4 8 13 28 -78 69 0 35 43 0 41 97 99 0 0 5 71 58 10 15 0 30 49 0 -66 15 64 -51 0 50 0 23 43 -43 15 6\n", "100\n-270 -522 -855 -324 387 -297 126 -387 -927 414 882 945 -459 396 261 -243 234 -270 315 999 477 -315 -972 -396 -81 -207 522 9 477 -459 -18 -234 909 225 -18 396 351 297 -540 -981 648 -657 360 945 -486 -396 288 -567 9 882 -495 -585 729 -405 -864 468 -18 -279 315 -234 9 -963 -639 -540 783 279 -27 486 441 -522 -441 675 -495 -918 405 63 324 -81 -198 216 189 234 -414 -828 -675 144 -954 288 810 90 -918 63 -117 594 -846 972 873 72 504 -756\n", "2\n1 0\n", "2\n-1 1\n", "100\n303 599 954 131 507 906 227 111 187 395 959 509 891 669 677 246 430 582 326 235 331 395 550 224 410 278 385 371 -829 514 600 451 337 786 508 939 548 23 583 342 870 585 16 914 482 619 781 583 683 913 663 727 329 170 475 557 356 8 342 536 821 348 942 486 497 732 213 659 351 -727 471 593 399 582 608 799 922 618 752 861 206 530 513 259 185 435 437 15 451 919 42 549 14 25 599 454 407 53 382 -540\n", "9\n2 2 2 2 -3 -3 -3 -3 0\n", "1\n1000\n", "9\n1 2 3 -1 -2 -3 0 0 0\n", "7\n1 1 1 0 -1 -1 -1\n", "7\n-1 -1 -1 1 1 0 0\n", "4\n0 1 0 -1\n", "50\n-675 468 324 909 -621 918 954 846 369 -243 207 -756 225 -513 198 603 234 612 585 963 -396 801 -612 720 -432 -774 522 72 -747 -909 513 324 -27 846 -405 -252 -531 189 -36 -927 198 900 558 -711 702 -423 621 -945 -441 -783\n", "1\n0\n", "50\n-81 -405 630 0 0 0 0 0 891 0 0 0 0 0 -18 0 0 0 0 0 243 -216 0 702 0 -909 -972 0 0 0 -450 0 0 882 0 0 0 0 0 -972 0 0 0 0 -333 -261 945 -720 0 -882\n", "50\n-657 0 -595 -527 -354 718 919 -770 -775 943 -23 0 -428 -322 -68 -429 -784 -981 -294 -260 533 0 0 -96 -839 0 -981 187 248 -56 -557 0 510 -824 -850 -531 -92 386 0 -952 519 -417 811 0 -934 -495 -813 -810 -733 0\n", "100\n41 95 -57 5 -37 -58 61 0 59 42 45 64 35 84 11 53 5 -73 99 0 59 68 82 32 50 0 92 0 17 0 -2 82 86 -63 96 -7 0 0 -6 -86 96 88 81 82 0 41 9 0 67 88 80 84 78 0 16 66 0 17 56 46 82 0 11 -79 53 0 -94 73 12 93 30 75 89 0 56 90 79 -39 45 -18 38 52 82 8 -30 0 69 50 22 0 41 0 0 33 17 8 97 79 30 59\n", "6\n1 1 -1 -1 0 0\n", "1\n-1\n", "100\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\n", "1\n777\n", "6\n-1 -1 -1 0 0 0\n", "3\n0 0 -1\n", "100\n-711 632 -395 79 -474 -237 -632 -632 316 -948 0 474 -79 -711 869 869 -948 -79 -316 474 237 -395 948 395 -158 -158 -632 237 -711 -632 -395 0 -316 474 -474 395 -474 79 0 -553 395 -948 -553 474 632 -237 -316 -711 553 948 790 237 -79 -553 -632 553 158 158 158 -79 948 -553 -474 632 395 79 -632 632 -869 -158 632 -553 -553 237 395 -237 711 -316 -948 -474 -632 316 869 869 948 -632 0 -237 -395 -474 79 553 -79 -158 553 711 474 632 711 0\n", "100\n-972 0 -747 0 0 -918 396 0 0 -144 0 0 0 0 774 0 0 0 0 0 0 0 0 0 0 0 387 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 855 0 603 0 0 0 675 -675 621 0 0 0 -45 612 -549 -153 0 0 0 0 0 -486 0 0 0 0 0 0 -594 0 0 0 -225 0 -54 693 0 0 0 0 0 0 0 873 0 0 -198 0 0 0 0 558 0 918\n", "5\n-1 -1 -1 -1 -1\n", "6\n1 1 1 -1 -1 -1\n", "4\n0 0 -1 1\n", "8\n1 2 3 4 -1 -2 -3 -4\n", "8\n-1 -1 1 0 0 0 0 0\n", "50\n-9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9\n", "4\n-1 -1 0 0\n", "6\n1 2 3 -1 -2 -3\n", "5\n-2 -2 -2 1 1\n", "2\n-1 0\n", "20\n0 0 0 -576 0 -207 0 -639 0 0 468 0 0 873 0 0 0 0 81 0\n"], "outputn"]}, "index": 8126}, {"input": "One day Alice was cleaning up her basement when she noticed something very curious: an infinite set of wooden pieces! Each piece was made of five square tiles, with four tiles adjacent to the fifth center tile: \n\n<image> By the pieces lay a large square wooden board. The board is divided into n^2 cells arranged into n rows and n columns. Some of the cells are already occupied by single tiles stuck to it. The remaining cells are free.\n\nAlice started wondering whether she could fill the board completely using the pieces she had found. Of course, each piece has to cover exactly five distinct cells of the board, no two pieces can overlap and every piece should fit in the board entirely, without some parts laying outside the board borders. The board however was too large for Alice to do the tiling by hand. Can you help determine if it's possible to fully tile the board?\n\nInput\n\nThe first line of the input contains a single integer n (3 \u2264 n \u2264 50) \u2014 the size of the board.\n\nThe following n lines describe the board. The i-th line (1 \u2264 i \u2264 n) contains a single string of length n. Its j-th character (1 \u2264 j \u2264 n) is equal to \".\" if the cell in the i-th row and the j-th column is free; it is equal to \"#\" if it's occupied.\n\nYou can assume that the board contains at least one free cell.\n\nOutput\n\nOutput YES if the board can be tiled by Alice's pieces, or NO otherwise. You can print each letter in any case (upper or lower).\n\n", "output": "n=int(input())\nh='#'\nf=[[h]*(n+2)]\na=f+[[h,*input(),h]for _ in[0]*n]+f*2\nfor i in range(n):\n for j in range(n):\n  if a[i+1][j+1]>h:\n   for k,l in(2,0),(2,1),(2,2),(3,1):\n    if a[i+k][j+l]==h:print('NO');exit()\n    a[i+k][j+l]=h\nprint('YES')", "public_tests": {"input": ["3\n#.#\n...\n#.#\n", "5\n#.###\n....#\n#....\n....#\n#..##\n", "4\n##.#\n#...\n####\n##.#\n", "5\n#.###\n....#\n#....\n###.#\n#####\n"], "output": ["YES\n", "NO\n", "NO\n", "YES\n"]}, "private_tests": {"input": ["20\n#.##.##.##.##.##.###\n...................#\n#..#..#..#..#..#....\n#................#.#\n#..#..#..#..#......#\n....................\n#..#..#..#..#......#\n#.............#....#\n#..#..#..#......#..#\n....................\n#..#..#..#......#..#\n#..........#.......#\n#..#..#......#..#..#\n....................\n#..#..#......#..#..#\n#.......#..........#\n#..#......#..#..#..#\n....................\n#.##....#.##.##.##.#\n######.#############\n", "7\n#.....#\n.......\n.......\n.......\n.......\n.......\n#.....#\n", "21\n#########.###.#####.#\n#.####.#........##...\n....#............#..#\n#....#....#..##.#...#\n#.#..##..#....####..#\n.............###.#...\n#.##.##..#.###......#\n###.##.....##.......#\n##...........#..##.##\n#...##.###.#......###\n#....###.##..##.....#\n##....#.......##.....\n#.##.##..##.........#\n....##....###.#.....#\n#....##....##......##\n##..#.###.#........##\n#......#.#.....##..##\n##..#.....#.#...#...#\n#........#.##..##..##\n....##.##......#...##\n#.########.##.###.###\n", "3\n###\n#.#\n###\n", "3\n###\n##.\n#..\n", "3\n###\n#.#\n...\n", "5\n#####\n.####\n..###\n.####\n#####\n", "6\n#.##.#\n......\n#.##.#\n......\n##.###\n#...##\n", "3\n##.\n#..\n.#.\n", "5\n#####\n#####\n#####\n####.\n###..\n", "5\n#.#.#\n##...\n###.#\n#####\n#####\n", "3\n.##\n###\n###\n", "5\n#####\n#####\n#####\n#####\n.....\n", "21\n##.######.###.#####.#\n#...##.#.......#.#...\n##..#...#.....#.....#\n#....#..###.###.....#\n....#....####....#.##\n#..#....##.#....#.###\n#...#.###...#.##....#\n#..#.##.##.##.##.....\n..........##......#.#\n#.##.#......#.#..##.#\n#.##.............#...\n..........#.....##..#\n#.#..###..###.##....#\n#....##....##.#.....#\n....#......#...#.#...\n#.#.........#..##.#.#\n#..........##.......#\n....#....#.##..##....\n#.#.##.#.......##.#.#\n##...##....##.##...##\n###.####.########.###\n", "5\n.....\n.....\n.....\n.....\n.....\n", "3\n.#.\n..#\n.##\n", "3\n...\n#.#\n###\n", "3\n.##\n..#\n.##\n", "3\n..#\n...\n#.#\n", "3\n##.\n#..\n##.\n", "17\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n#################\n##.##.##.##.##.##\n", "4\n#..#\n....\n#..#\n####\n", "3\n##.\n###\n###\n", "16\n#####.####.#####\n##.##...##...###\n##....#....#...#\n#..#....#....#..\n#....#....#....#\n#.#....#....#..#\n##..#....#....##\n##....#....#...#\n#..#....#....#..\n#....#....#....#\n#.#....#....#..#\n##..#....#....##\n##....#....#..##\n##.#..#.#..#.###\n####.####.######\n################\n", "3\n..#\n.##\n###\n", "3\n...\n...\n...\n", "4\n####\n####\n##.#\n#...\n", "20\n#####.####.####.####\n##.#....#....#....##\n#....#....#....#...#\n#.#....#....#....###\n....#....#....#....#\n##....#....#....#...\n##.#....#....#....##\n#....#....#....#...#\n#.#....#....#....###\n....#....#....#....#\n##....#....#....#...\n##.#....#....#....##\n#....#....#....#...#\n#.#....#....#....###\n....#....#....#....#\n##....#....#....#...\n##.#....#....#...###\n#...##...##...######\n####################\n####################\n", "4\n####\n####\n####\n##.#\n", "3\n###\n###\n##.\n", "3\n###\n###\n#.#\n", "4\n####\n###.\n##..\n.##.\n"], "output": ["YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "index": 8127}, {"input": "The only difference between easy and hard versions is constraints.\n\nNauuo is a girl who loves random picture websites.\n\nOne day she made a random picture website by herself which includes n pictures.\n\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The i-th picture has a non-negative weight w_i, and the probability of the i-th picture being displayed is \\frac{w_i}{\u2211_{j=1}^nw_j}. That is to say, the probability of a picture to be displayed is proportional to its weight.\n\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \n\nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add 1 to its weight; otherwise, she would subtract 1 from its weight.\n\nNauuo will visit the website m times. She wants to know the expected weight of each picture after all the m visits modulo 998244353. Can you help her?\n\nThe expected weight of the i-th picture can be denoted by \\frac {q_i} {p_i} where \\gcd(p_i,q_i)=1, you need to print an integer r_i satisfying 0\u2264 r_i<998244353 and r_i\u22c5 p_i\u2261 q_i\\pmod{998244353}. It can be proved that such r_i exists and is unique.\n\nInput\n\nThe first line contains two integers n and m (1\u2264 n\u2264 50, 1\u2264 m\u2264 50) \u2014 the number of pictures and the number of visits to the website.\n\nThe second line contains n integers a_1,a_2,\u2026,a_n (a_i is either 0 or 1) \u2014 if a_i=0 , Nauuo does not like the i-th picture; otherwise Nauuo likes the i-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains n integers w_1,w_2,\u2026,w_n (1\u2264 w_i\u226450) \u2014 the initial weights of the pictures.\n\nOutput\n\nThe output contains n integers r_1,r_2,\u2026,r_n \u2014 the expected weights modulo 998244353.\n\n", "output": "P = 998244353\nN, M = map(int, input().split())\nA = [int(a) for a in input().split()]\nB = [int(a) for a in input().split()]\nli = sum([A[i]*B[i] for i in range(N)])\ndi = sum([(A[i]^1)*B[i] for i in range(N)])\nX = [[] for _ in range(M+1)]\n\nX[0] = [1]\ndef calc(L):\n    su = sum(L)\n    pl = 0\n    pd = 0\n    RE = []\n    for i in range(len(L)):\n        a = li + i\n        b = di - (len(L) - 1 - i)\n        pd = b * L[i] * pow(su*(a+b), P-2, P)\n        RE.append((pl+pd)%P)\n        pl = a * L[i] * pow(su*(a+b), P-2, P)\n    RE.append(pl%P)\n    return RE\n\nfor i in range(M):\n    X[i+1] = calc(X[i])\nne = 0\npo = 0\nfor i in range(M+1):\n    po = (po + X[M][i] * (li + i)) % P\n    ne = (ne + X[M][i] * (di - M + i)) % P\nfor i in range(N):\n    print(po * B[i] * pow(li, P-2, P) % P if A[i] else ne * B[i] * pow(di, P-2, P) % P)\n", "public_tests": {"input": ["1 2\n1\n1\n", "2 1\n0 1\n2 1\n", "3 3\n0 1 1\n4 3 5\n"], "output": ["3\n", "332748119\n332748119\n", "160955686\n185138929\n974061117\n"]}, "private_tests": {"input": ["10 10\n0 1 0 0 1 1 1 1 1 1\n12 18 6 18 7 2 9 18 1 9\n", "50 50\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\n1 9 24 8 8 11 21 11 8 5 16 32 31 15 29 14 16 20 5 18 5 10 31 23 21 4 4 20 20 11 1 4 4 15 9 14 5 30 13 16 32 27 19 10 19 24 21 1 21 15\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n", "45 50\n0 1 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0\n4 4 23 23 13 23 9 16 4 18 20 15 21 24 22 20 22 1 15 7 10 17 20 6 15 7 4 10 16 7 14 9 13 17 10 14 22 23 3 5 20 11 4 24 24\n", "47 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n30 32 21 7 15 4 39 36 23 17 13 4 8 18 38 24 13 27 37 27 32 16 8 12 7 23 28 38 11 36 19 33 10 34 4 8 5 22 3 29 21 30 7 32 35 26 23\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n126679203 179924771 16639504 67055540 14134870 36407782 15024189 39367944 121531542 5400023 5834434 8539193 3686913 11287136 36370086 71808281 138206490 59846864 19052959 21446598\n", "10 50\n0 0 0 0 0 0 0 0 1 0\n3 1 3 3 1 3 1 2 2 1\n", "20 30\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n3 4 1 2 1 1 1 2 5 2 1 2 3 1 1 2 3 2 1 2\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1\n2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 2 1 2 1 2 1 1 1 1 2 1\n", "20 20\n1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 1 1 0 1\n1 13 7 11 17 15 19 18 14 11 15 1 12 4 5 16 14 11 18 9\n", "30 30\n0 1 1 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0\n5 20 47 27 17 5 18 30 43 23 44 6 47 8 23 41 2 46 49 33 45 27 33 16 36 2 42 36 8 23\n", "20 30\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n61 849 320 1007 624 441 1332 3939 1176 718 419 634 657 914 858 882 1019 1567 62 2521\n", "20 30\n0 1 0 1 1 1 0 0 1 0 1 1 0 0 1 1 1 0 0 0\n244 1901 938 1350 1010 763 318 2158 1645 534 1356 563 295 1449 2306 224 1302 195 639 810\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n765 451 7275 385 1686 78 554 114 1980 394 776 232 627 760 782 7 486 32 1100 1516\n", "30 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 2 1 2 2 1 2 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2\n", "10 10\n0 0 0 0 0 0 0 1 0 0\n8 33 37 18 30 48 45 34 25 48\n", "30 30\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n2 1 1 2 1 2 2 2 2 2 1 1 2 2 2 1 2 2 2 1 2 1 1 1 1 1 2 1 1 1\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n2 1 1 2 2 1 2 1 1 2 2 2 1 2 2 1 1 1 2 1 2 1 2 2 2 1 2 1 1 2 2 2 2 2 1 2 2 2 2 2 2 1 2 1 2 2 2 1 1 2\n", "50 50\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "20 30\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n128 574 205 490 611 1294 283 1690 1466 1896 272 19 1020 5032 357 1500 36 1749 1202 176\n", "50 50\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 2 1 1 1 1 1 2 1 1 1 2 2 2 1 1 1 1 2 2 1 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 1 1 2 2 2 1\n", "50 50\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n", "10 10\n1 1 1 1 1 1 1 0 1 1\n2 1 2 2 1 1 1 1 1 1\n", "48 50\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\n42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42\n", "10 10\n1 1 1 1 1 1 1 1 1 1\n1 2 2 1 2 2 2 1 1 1\n", "50 50\n0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n12 29 36 24 44 22 38 43 30 19 15 2 39 8 13 50 29 18 37 19 32 39 42 41 20 11 14 25 4 35 14 23 17 29 1 19 3 6 8 31 26 46 9 31 36 49 21 38 17 27\n", "50 50\n0 0 1 0 0 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0 0 1 1 0 1 0 0 0 0\n1 1 1 1 1 2 2 1 1 2 2 2 1 1 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 1 1 2 2 1 1 2 1 1 2 2 2 2 2 2 2 2 2 1 2 1\n", "50 50\n0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0\n45 49 17 22 28 34 24 38 5 46 22 36 11 12 43 21 47 39 38 38 38 27 10 49 19 46 23 7 46 35 11 38 25 16 7 32 12 13 44 14 41 36 7 31 4 46 40 28 28 46\n", "20 30\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661 26210661\n", "30 30\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n41 39 15 34 45 27 18 7 48 33 46 11 24 16 35 43 7 31 26 17 30 15 5 9 29 20 21 37 3 7\n", "10 10\n0 0 1 0 0 0 1 0 0 0\n2 1 2 1 1 2 1 1 1 1\n", "44 50\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n2 6 6 11 2 4 11 10 5 15 15 20 20 7 9 8 17 4 16 19 12 16 12 13 2 11 20 2 6 10 2 18 7 5 18 10 15 6 11 9 7 5 17 11\n", "20 30\n0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0 1 0 1\n66166717 200301718 6725634 95379617 42880832 48874211 64912554 36809296 13248978 58406666 53142218 45080678 19902257 58554006 23570140 14484661 7589423 78746789 11072716 52395211\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n13 18 27 40 3 1 20 11 25 11 2 31 22 15 36 12 11 24 8 39 31 36 19 24 10 39 27 4 10 22 14 3 25 5 24 19 20 33 17 19 30 15 37 33 3 27 26 29 37 34\n", "10 10\n1 0 0 0 1 1 1 0 1 0\n1 2 1 2 1 1 2 2 2 1\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n34095514 37349809 60555988 40280455 19504485 77297461 41415742 66290058 20631093 185280391 7151718 64927972 15611855 4317891 24600598 24588269 60808977 9108470 13217752 191209824\n", "30 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n1 2 1 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 2 1 1 2 2 2\n", "47 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\n", "50 50\n0 0 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 1 0 1\n33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47\n", "30 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\n", "10 10\n0 0 1 0 0 0 0 0 1 0\n47 34 36 9 3 16 17 46 47 1\n", "10 10\n1 1 1 1 1 1 1 1 1 1\n43 43 43 43 43 43 43 43 43 43\n", "20 20\n0 1 0 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0\n109 1 24 122 136 42 25 112 110 15 26 48 35 10 86 13 41 6 24 15\n", "50 50\n1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 1 0 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "49 50\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\n2 3 2 3 4 2 1 1 1 1 1 1 3 1 2 3 2 4 1 2 2 1 1 2 4 3 2 4 1 2 1 1 2 3 1 3 3 2 2 1 4 3 4 1 3 3 4 1 3\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n32 22 24 45 22 17 10 5 27 1 48 15 14 43 11 16 38 31 24 19 5 28 2 4 34 29 18 32 47 11 2 34 39 29 36 11 39 24 23 16 41 45 17 39 30 15 16 3 3 8\n", "50 50\n0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n2 1 1 1 1 2 2 2 1 1 2 2 2 1 2 1 2 2 2 1 1 1 1 2 2 1 1 1 1 2 1 2 2 2 2 1 1 1 2 1 2 1 1 2 2 1 1 2 2 1\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803 5766803\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n144831196 28660251 62050800 52660762 23189000 12771861 73096012 25119113 119648684 16011144 51600638 74708999 6312006 26945863 68746869 58112898 5070 19157938 74351320 60263898\n", "30 30\n1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0\n1 1 1 2 2 1 2 1 2 1 1 2 2 2 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 30\n1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 1 3 1 4 1 5 1 1 2 3 1 1 3 3 2 2 1 2\n", "40 40\n1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n28 13 22 35 22 13 23 35 14 36 30 10 10 15 3 9 35 35 9 29 14 28 8 29 22 30 4 31 39 24 4 19 37 4 20 7 11 17 3 25\n", "49 50\n0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 0 0\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n", "50 50\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n49 34 4 15 32 20 22 35 3 28 15 46 4 46 16 11 45 42 11 4 15 36 29 10 27 32 1 1 23 11 6 34 35 19 11 5 2 37 9 20 39 33 27 4 21 33 6 23 37 50\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n1 2 2 2 2 2 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 2 2 1 1 1 1 2 2 2 1 2 2 1 2 2 1 1 2 2 2 2 2 1 2 2 1\n", "5 5\n0 1 0 0 1\n9 8 3 8 8\n", "10 10\n1 1 1 1 1 1 1 1 1 1\n17 10 8 34 5 4 3 44 20 14\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 3 2 1 3 2 1 1 2 1 1 2 2 4 2 1 5 2 3\n", "5 5\n0 1 0 0 1\n2 4 1 2 1\n", "50 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n25 31 26 45 2 6 25 14 35 23 31 16 24 36 44 8 18 41 36 3 27 21 15 44 45 45 25 8 3 43 7 25 48 45 44 33 25 49 8 46 14 12 12 46 45 43 29 40 1 47\n", "5 50\n1 1 1 1 1\n1 1 4 2 3\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0\n1 1 3 2 3 1 2 2 3 2 2 2 2 2 2 3 3 1 1 2\n", "20 30\n0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1\n1 2 2 2 2 2 1 1 2 1 4 1 2 5 3 4 1 1 2 1\n", "10 3000\n1 1 1 1 1 0 0 0 1 1\n6 22 5 2 4 15 4 7 31 4\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "10 10\n1 1 1 1 1 1 1 1 0 1\n40 36 29 4 36 35 9 38 40 18\n", "42 50\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0\n2 4 6 8 1 3 6 1 4 1 3 4 3 7 6 6 8 7 4 1 7 4 6 9 3 1 9 7 1 2 9 3 1 6 1 5 1 8 2 6 8 8\n", "20 50\n1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1\n1 2 2 1 2 2 2 2 2 2 1 1 2 2 2 1 1 1 2 2\n", "20 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 2 2 2 1 2 1 2 1 2 1 1 2 1 2 2 1\n", "30 30\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n29 38 18 19 46 28 12 5 46 17 31 20 24 33 9 6 47 2 2 41 34 2 50 5 47 10 40 21 49 28\n", "46 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n29 22 30 33 13 31 19 11 12 21 5 4 24 21 20 6 28 16 27 18 21 11 3 24 21 8 8 33 24 7 34 12 13 32 26 33 33 22 18 2 3 7 24 17 9 30\n", "50 50\n0 0 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 1 0 0\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "30 30\n0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\n1 12 9 1 5 32 38 25 34 31 27 43 13 38 48 40 5 42 20 45 1 4 35 38 1 44 31 42 8 37\n", "20 30\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1\n779 1317 1275 234 857 1531 785 265 679 767 1994 11 918 1146 1807 71 813 245 3926 580\n", "43 50\n1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n13 7 13 15 8 9 11 1 15 9 3 7 3 15 4 7 7 16 9 13 12 16 16 1 5 5 14 5 17 2 1 13 4 13 10 17 17 6 11 15 14 3 6\n", "50 50\n0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0\n2 50 37 21 21 2 26 49 15 44 8 27 30 28 26 40 26 45 41 37 27 34 8 35 2 23 2 49 13 1 39 37 12 42 7 11 4 50 42 21 27 50 28 31 17 22 10 43 46 13\n", "10 10\n1 0 0 1 1 0 1 0 0 1\n24 7 10 9 6 13 27 17 6 39\n", "41 50\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 2 4 2 3 2 4 3 1 1 3 1 3 2 5 3 3 5 4 4 1 1 2 3 2 1 5 5 5 4 2 2 2 1 2 4 4 5 2 1 4\n", "100 3000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n10 8 1 9 7 5 12 9 15 7 16 5 17 5 17 21 11 3 4 4 30 17 3 84 12 30 2 8 2 2 22 24 15 11 15 13 7 17 1 12 8 4 3 6 5 15 1 3 4 2 27 3 11 11 3 3 3 5 14 2 5 13 6 2 6 5 6 19 3 16 4 12 11 2 2 3 25 14 6 11 22 4 10 32 9 19 14 2 2 3 4 3 2 5 18 14 2 7 3 8\n", "48 50\n1 0 1 0 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1\n9 42 15 12 2 9 41 13 23 14 17 42 25 10 10 2 38 36 41 31 9 20 31 41 20 41 40 28 7 37 14 25 23 38 27 17 6 40 2 19 19 3 8 32 13 22 41 20\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n23 45 44 49 17 36 32 26 40 8 36 11 5 19 41 16 7 38 23 40 13 16 24 44 22 13 1 2 32 31\n", "10 10\n0 0 0 1 0 0 0 0 0 0\n2 2 2 2 2 2 2 1 2 2\n", "20 30\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0\n9380933 34450681 12329733 7732927 73910078 16165679 149467043 56914401 21809098 36934833 71019254 168559440 12033996 40465391 7156881 3312348 37150678 130625432 42709585 66115911\n", "10 10\n0 0 0 0 0 1 0 0 0 0\n34 34 34 34 34 34 34 34 34 34\n", "40 50\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n33 26 4 19 42 43 19 32 13 23 19 1 18 43 43 43 19 31 4 25 28 23 33 37 36 23 5 12 18 32 34 1 21 22 34 35 37 16 41 39\n", "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n", "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 1 1 2 1 1 1 2 1 1 2 1 2 1 2 1 2 1 2 2 2 1 2 2 2 2 1\n"], "output": ["199115375\n823101465\n598679864\n797795239\n486469073\n424203836\n910672909\n823101465\n212101918\n910672909\n", "475420905\n285810733\n429413837\n935878068\n808634181\n787710167\n1395475\n787710167\n808634181\n85801616\n619024009\n748779213\n762627113\n143603104\n896947114\n666426552\n619024009\n343206464\n380615819\n571621466\n380615819\n171603232\n132672278\n952237285\n1395475\n467939034\n467939034\n524218923\n343206464\n238408190\n616106935\n467939034\n467939034\n143603104\n285810733\n639542266\n85801616\n514809696\n23435331\n619024009\n748779213\n662977597\n725343882\n761231638\n48798018\n429413837\n959313399\n616106935\n1395475\n257404848\n", "9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n", "630266647\n555616275\n379739073\n948743787\n301438985\n948743787\n669416691\n225976394\n555616275\n340589029\n156600176\n835755590\n563727926\n786866823\n560278630\n781592669\n970855676\n388465157\n835755590\n853405544\n889918511\n614441551\n156600176\n446277794\n117450132\n853405544\n630266647\n78300088\n225976394\n722767393\n708566735\n669416691\n58825276\n931705632\n78300088\n708566735\n970855676\n948743787\n223138897\n39150044\n781592669\n280139315\n555616275\n338964591\n786866823\n", "243227082\n658739962\n369907828\n456050727\n121613541\n831025760\n116546336\n491521369\n785420708\n537126421\n704345014\n831025760\n663807167\n744882861\n907034249\n993177148\n704345014\n618202115\n699277809\n618202115\n658739962\n329369981\n663807167\n496588574\n456050727\n785420708\n825958555\n907034249\n288832134\n491521369\n952639301\n866496402\n81075694\n76008489\n831025760\n663807167\n40537847\n577664268\n623269320\n35470642\n369907828\n243227082\n456050727\n658739962\n283764929\n410445675\n785420708\n", "615913610\n488825486\n773371096\n742795989\n193664548\n323188752\n32686082\n709701410\n293733249\n161181348\n193396792\n354491196\n708550409\n644392716\n323187536\n646345011\n487479735\n1930544\n322628919\n966734748\n", "187134581\n727874429\n187134581\n187134581\n727874429\n187134581\n727874429\n457504505\n124563167\n727874429\n", "441078046\n920852179\n479774133\n959548266\n479774133\n479774133\n479774133\n959548266\n402381959\n263018694\n479774133\n959548266\n441078046\n479774133\n479774133\n959548266\n441078046\n959548266\n479774133\n959548266\n", "720162001\n859203177\n859203177\n859203177\n720162001\n859203177\n859203177\n720162001\n859203177\n859203177\n859203177\n720162001\n859203177\n859203177\n859203177\n859203177\n720162001\n720162001\n720162001\n720162001\n859203177\n720162001\n859203177\n720162001\n427819009\n859203177\n859203177\n859203177\n720162001\n859203177\n", "688505688\n964619120\n826562404\n585852097\n851622699\n345141790\n104431483\n414170148\n349014804\n585852097\n516550769\n688505688\n13942874\n670143860\n447795381\n684086734\n654880455\n585852097\n20914311\n207085074\n", "114252107\n760713694\n489959522\n18014766\n787754905\n689300600\n484993454\n142826188\n936763395\n126261951\n805769671\n827160720\n475023194\n781749983\n176049701\n138271795\n444998584\n252523902\n765679762\n354766165\n214239282\n727490181\n354766165\n565255613\n24019688\n275720240\n798903275\n969986908\n104636607\n126261951\n", "514012356\n393871659\n166092575\n569465276\n74319433\n306884170\n254628439\n656312237\n485609669\n216694535\n825782618\n110704962\n294216114\n131255421\n733108087\n613768340\n14181299\n610566194\n624888021\n887363731\n", "300071414\n595185476\n40756239\n113904636\n440148868\n947268885\n456535325\n542868956\n183161324\n427608407\n61171180\n375813928\n43680359\n55509680\n30410255\n360521133\n535772284\n722568686\n663107799\n390646234\n", "491636110\n498623506\n486651408\n182179980\n6989399\n10980766\n871467875\n92836839\n509106603\n951327263\n211628580\n83852758\n11480438\n618912260\n58897200\n820057743\n605934809\n183676993\n948333237\n341401087\n", "593179614\n593179614\n593179614\n593179614\n188114875\n593179614\n188114875\n188114875\n593179614\n188114875\n593179614\n188114875\n593179614\n275307283\n188114875\n188114875\n593179614\n188114875\n275307283\n188114875\n593179614\n188114875\n188114875\n188114875\n593179614\n593179614\n188114875\n593179614\n188114875\n188114875\n", "211347083\n497465085\n104016450\n725092025\n542990473\n269838145\n315363533\n227335634\n286118002\n269838145\n", "188114875\n593179614\n593179614\n550614566\n593179614\n188114875\n188114875\n188114875\n188114875\n188114875\n593179614\n593179614\n188114875\n188114875\n188114875\n593179614\n188114875\n188114875\n188114875\n593179614\n188114875\n593179614\n593179614\n593179614\n593179614\n593179614\n188114875\n593179614\n593179614\n593179614\n", "714792256\n357396128\n357396128\n714792256\n714792256\n357396128\n714792256\n357396128\n357396128\n714792256\n714792256\n714792256\n357396128\n714792256\n714792256\n357396128\n357396128\n357396128\n714792256\n357396128\n714792256\n357396128\n714792256\n714792256\n714792256\n357396128\n714792256\n357396128\n357396128\n714792256\n714792256\n714792256\n714792256\n714792256\n357396128\n714792256\n714792256\n714792256\n714792256\n714792256\n714792256\n357396128\n714792256\n357396128\n714792256\n714792256\n714792256\n357396128\n357396128\n714792256\n", "80661140\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n286858868\n", "389864218\n157345415\n537589523\n962131647\n753565149\n104281847\n378440811\n873692367\n690552162\n658861420\n578900375\n198248582\n923070965\n228091231\n572635926\n887695253\n795942304\n70748620\n510359933\n785624388\n", "311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n273616393\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n311169062\n", "964858256\n964858256\n964858256\n931472159\n964858256\n964858256\n964858256\n964858256\n964858256\n931472159\n964858256\n964858256\n964858256\n931472159\n931472159\n931472159\n964858256\n964858256\n964858256\n824636640\n931472159\n931472159\n964858256\n931472159\n964858256\n931472159\n931472159\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n964858256\n931472159\n964858256\n931472159\n931472159\n964858256\n964858256\n931472159\n931472159\n931472159\n964858256\n", "382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n798399400\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n382995896\n", "771370640\n385685320\n771370640\n771370640\n385685320\n385685320\n385685320\n635246407\n385685320\n385685320\n", "612040887\n271232481\n612040887\n271232481\n612040887\n271232481\n271232481\n612040887\n271232481\n271232481\n271232481\n612040887\n612040887\n271232481\n271232481\n271232481\n612040887\n271232481\n612040887\n271232481\n612040887\n271232481\n271232481\n612040887\n271232481\n612040887\n612040887\n271232481\n271232481\n271232481\n271232481\n271232481\n271232481\n612040887\n612040887\n271232481\n271232481\n612040887\n271232481\n612040887\n271232481\n271232481\n271232481\n271232481\n271232481\n271232481\n271232481\n612040887\n", "665496237\n332748121\n332748121\n665496237\n332748121\n332748121\n332748121\n665496237\n665496237\n665496237\n", "820896192\n985588111\n466199870\n643548031\n15219645\n506731999\n603015902\n945055982\n986069299\n301507951\n27875887\n136816032\n671423918\n547264128\n889304208\n425667741\n985588111\n233099935\n534607886\n301507951\n192567806\n671423918\n876647966\n808239950\n369915967\n752488176\n957712224\n711956047\n273632064\n397791854\n957712224\n575140015\n164691919\n985588111\n68408016\n301507951\n205224048\n410448096\n547264128\n124159790\n780364063\n152035677\n615672144\n124159790\n466199870\n357259725\n438323983\n603015902\n164691919\n848772079\n", "525100120\n525100120\n392384920\n525100120\n525100120\n51955887\n784769840\n525100120\n392384920\n784769840\n784769840\n51955887\n392384920\n392384920\n525100120\n784769840\n784769840\n51955887\n392384920\n392384920\n392384920\n392384920\n784769840\n392384920\n525100120\n392384920\n51955887\n784769840\n525100120\n392384920\n525100120\n51955887\n51955887\n525100120\n392384920\n784769840\n525100120\n525100120\n784769840\n784769840\n51955887\n51955887\n784769840\n784769840\n51955887\n784769840\n51955887\n525100120\n51955887\n525100120\n", "644620779\n102973792\n443172276\n267699221\n201448503\n886344552\n745782947\n99391617\n196964962\n259647944\n267699221\n619552244\n632971787\n371547745\n416322096\n28657358\n254279678\n338433480\n344697565\n344697565\n99391617\n464664183\n143249062\n102973792\n548817985\n15237815\n129823972\n675048688\n259647944\n380510381\n756520580\n344697565\n984824810\n829936749\n675048688\n658045869\n371547745\n112811160\n535398442\n599846428\n188023413\n619552244\n299923214\n44774351\n956167452\n259647944\n577475343\n703706046\n201448503\n259647944\n", "76898501\n989279651\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n76898501\n", "61128841\n655563720\n98563838\n955457225\n295691514\n377063779\n916872088\n578393446\n115755411\n17191573\n235712813\n338478642\n556999882\n38585137\n895478524\n415648916\n578393446\n137148975\n437042480\n976850789\n197127676\n98563838\n698350848\n458436044\n257106377\n796914686\n736935985\n775521122\n818308250\n578393446\n", "44896189\n521570271\n482402083\n521570271\n521570271\n44896189\n740323218\n521570271\n521570271\n521570271\n", "327775237\n983325711\n983325711\n305397274\n327775237\n853173373\n305397274\n640631832\n320315916\n960947748\n960947748\n272889453\n283019311\n648091153\n975866390\n312856595\n290478632\n655550474\n625713190\n618253869\n968407069\n625713190\n968407069\n633172511\n327775237\n305397274\n283019311\n327775237\n983325711\n640631832\n327775237\n953488427\n648091153\n816905628\n953488427\n640631832\n960947748\n983325711\n305397274\n975866390\n648091153\n320315916\n290478632\n305397274\n", "823107880\n742699237\n987770596\n549924308\n730188349\n913535291\n936423447\n122869154\n581668441\n749452306\n615454312\n176148736\n874336841\n897418997\n235568492\n24727530\n143875067\n15270097\n200154604\n356406452\n", "30685719\n733580163\n601248068\n631933787\n621385537\n539876630\n815089070\n947421165\n519739161\n947421165\n81508907\n764265882\n896597977\n112194626\n468915973\n489053442\n947421165\n978106884\n326035628\n92057157\n764265882\n468915973\n275212440\n978106884\n407544535\n92057157\n601248068\n163017814\n407544535\n896597977\n570562349\n621385537\n519739161\n702894444\n978106884\n275212440\n815089070\n845774789\n193703533\n275212440\n224389252\n112194626\n10548250\n845774789\n621385537\n601248068\n61371438\n682756975\n10548250\n387407066\n", "910950063\n595918255\n797081304\n595918255\n910950063\n910950063\n823655773\n595918255\n823655773\n797081304\n", "23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n", "313283482\n21804622\n682197550\n361027027\n756362680\n151917509\n716108102\n131732975\n237068086\n731869119\n190595295\n847684643\n847454143\n501579235\n129856516\n246699402\n205385635\n639100445\n614421017\n227076269\n", "346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n346646202\n346646202\n346646202\n346646202\n346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n346646202\n346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n542025302\n693292404\n346646202\n346646202\n693292404\n693292404\n693292404\n", "573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n573459562\n", "677141055\n677141055\n677141055\n677141057\n677141055\n677141057\n677141055\n677141057\n677141055\n677141057\n677141055\n677141057\n677141055\n677141055\n677141057\n677141055\n677141055\n677141057\n677141055\n677141055\n677141055\n677141057\n677141057\n677141055\n677141055\n677141057\n677141057\n677141055\n677141057\n677141055\n677141057\n677141057\n677141057\n677141055\n677141055\n677141057\n677141057\n677141057\n677141057\n677141055\n677141057\n677141057\n677141057\n677141055\n677141055\n677141055\n677141057\n677141057\n677141055\n677141057\n", "529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n988406960\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n529479959\n", "417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n142843895\n", "167709201\n57603825\n597597985\n690531016\n562925123\n673030499\n527924089\n312815611\n253346183\n853137943\n", "44\n44\n44\n44\n44\n44\n44\n44\n44\n44\n", "217595927\n149660176\n322657182\n290143118\n388896876\n296261274\n86540143\n507489163\n979723241\n248413934\n896431517\n195977977\n246884395\n633562669\n891842900\n947337935\n146601098\n897961056\n597111165\n451221827\n", "996306346\n996306344\n996306346\n996306344\n996306344\n996306346\n996306346\n996306346\n996306344\n996306344\n996306344\n996306346\n996306346\n996306346\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306344\n996306346\n996306344\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306344\n996306346\n996306346\n996306344\n996306344\n996306346\n996306346\n996306344\n996306344\n996306346\n996306344\n996306344\n996306346\n", "136570933\n703978576\n136570933\n703978576\n273141866\n136570933\n567407643\n478951804\n567407643\n567407643\n478951804\n478951804\n703978576\n567407643\n136570933\n703978576\n136570933\n273141866\n567407643\n136570933\n136570933\n567407643\n567407643\n136570933\n273141866\n703978576\n957903608\n273141866\n567407643\n136570933\n567407643\n567407643\n136570933\n703978576\n567407643\n438611059\n438611059\n136570933\n136570933\n478951804\n273141866\n703978576\n917562863\n478951804\n703978576\n703978576\n273141866\n567407643\n703978576\n", "118672439\n268758118\n837687594\n821980974\n268758118\n842923134\n848158674\n424079337\n692837455\n284464738\n677130835\n273993658\n987773273\n253051498\n134379059\n558458396\n827216514\n832452054\n837687594\n413608257\n424079337\n977302193\n568929476\n139614599\n687601915\n263522578\n129143519\n118672439\n392666097\n134379059\n568929476\n687601915\n113436899\n263522578\n258287038\n134379059\n113436899\n837687594\n553222856\n558458396\n682366375\n821980974\n842923134\n113436899\n547987316\n273993658\n558458396\n853394214\n853394214\n279229198\n", "303976482\n151988241\n151988241\n151988241\n480354901\n303976482\n303976482\n303976482\n151988241\n151988241\n303976482\n303976482\n303976482\n151988241\n303976482\n151988241\n303976482\n303976482\n303976482\n151988241\n151988241\n151988241\n151988241\n303976482\n303976482\n151988241\n151988241\n151988241\n151988241\n303976482\n151988241\n303976482\n303976482\n303976482\n303976482\n151988241\n151988241\n151988241\n303976482\n151988241\n303976482\n151988241\n151988241\n303976482\n303976482\n151988241\n151988241\n303976482\n303976482\n480354901\n", "504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n504888981\n", "132556548\n711988928\n6999755\n208709864\n320161276\n865416376\n320896979\n458941660\n671806481\n158009043\n351362956\n78248147\n927871852\n882014191\n988190329\n830735503\n1958329\n787106839\n942059547\n341315444\n", "297674502\n297674502\n297674502\n101192689\n595349004\n549718521\n101192689\n297674502\n595349004\n297674502\n549718521\n101192689\n101192689\n101192689\n549718521\n595349004\n297674502\n549718521\n297674502\n549718521\n297674502\n101192689\n549718521\n595349004\n297674502\n101192689\n297674502\n101192689\n297674502\n549718521\n", "834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n982795629\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n834950403\n", "902255482\n806266611\n902255482\n710277740\n902255482\n537377994\n902255482\n518299998\n902255482\n902255482\n806266611\n710277740\n902255482\n902255482\n710277740\n710277740\n806266611\n806266611\n902255482\n806266611\n", "368107101\n848286965\n360530176\n210572788\n199380339\n848286965\n195418938\n210572788\n683175727\n45461550\n37884625\n544374860\n345376326\n518064489\n502910639\n510487564\n210572788\n210572788\n510487564\n202995863\n683175727\n526005255\n675598802\n202995863\n360530176\n37884625\n337799401\n871017740\n548372189\n30307700\n337799401\n855863890\n878594665\n337799401\n690752652\n840710040\n180265088\n187842013\n502910639\n863440815\n", "371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n872512215\n371008012\n371008012\n872512215\n872512215\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n872512215\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n371008012\n872512215\n872512215\n371008012\n371008012\n872512215\n371008012\n371008012\n872512215\n872512215\n371008012\n371008012\n371008012\n371008012\n371008012\n", "41887747\n858571128\n101008368\n378781380\n808066944\n505041840\n555546024\n883823220\n75756276\n707058576\n378781380\n163351879\n101008368\n163351879\n404033472\n277773012\n138099787\n62343511\n277773012\n101008368\n378781380\n909075312\n732310668\n252520920\n681806484\n808066944\n25252092\n25252092\n580798116\n277773012\n151512552\n858571128\n883823220\n479789748\n277773012\n126260460\n50504184\n934327404\n227268828\n505041840\n984831588\n833319036\n681806484\n101008368\n530293932\n833319036\n151512552\n580798116\n934327404\n264360247\n", "512801870\n27359387\n27359387\n27359387\n27359387\n27359387\n27359387\n512801870\n512801870\n27359387\n27359387\n512801870\n512801870\n27359387\n512801870\n27359387\n27359387\n512801870\n27359387\n512801870\n27359387\n27359387\n512801870\n27359387\n27359387\n27359387\n512801870\n512801870\n512801870\n512801870\n27359387\n27359387\n27359387\n512801870\n27359387\n27359387\n512801870\n27359387\n27359387\n512801870\n512801870\n27359387\n27359387\n27359387\n27359387\n27359387\n96131098\n27359387\n27359387\n512801870\n", "45170585\n105647559\n680553097\n483815788\n105647559\n", "709444118\n6278277\n803618104\n420643883\n502261315\n401809052\n301356789\n426922160\n12556554\n408087329\n", "584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n584830027\n705829341\n584830027\n584830027\n584830027\n", "249561090\n249561090\n748683270\n499122180\n249561090\n748683270\n499122180\n249561090\n249561090\n499122180\n249561090\n249561090\n499122180\n499122180\n7\n499122180\n249561090\n249561097\n499122180\n748683270\n", "665717847\n333191345\n831981100\n665717847\n831981101\n", "26673909\n312584066\n906195896\n646959648\n760799621\n285910157\n26673909\n334375582\n835938955\n264118641\n312584066\n96930850\n145396275\n717216589\n765682014\n48465425\n857730471\n123604759\n717216589\n642077255\n787473530\n501563373\n215653216\n765682014\n646959648\n108381283\n26673909\n48465425\n642077255\n884404380\n167187791\n26673909\n290792550\n646959648\n765682014\n75139334\n614792020\n172070184\n48465425\n528237282\n334375582\n571820314\n571820314\n528237282\n646959648\n884404380\n550028798\n242327125\n879521987\n409514916\n", "635246412\n635246412\n544496942\n272248471\n907494883\n", "550803098\n550803098\n654164941\n103361843\n654164941\n550803098\n103361843\n103361843\n654164941\n103361843\n103361843\n103361843\n103361843\n103361843\n276551708\n654164941\n654164941\n138275854\n550803098\n103361843\n", "297511613\n595023226\n756311680\n756311680\n756311680\n595023226\n297511613\n378155840\n595023226\n297511613\n514379007\n297511613\n595023226\n892534847\n136223167\n514379007\n378155840\n297511613\n595023226\n378155840\n", "561258918\n61460660\n467715765\n187086306\n374172612\n538110090\n143496024\n251118042\n903349037\n374172612\n", "2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n", "59109317\n951618303\n17898146\n105735367\n951618303\n675623373\n487465664\n505363810\n736385984\n974931328\n", "11284873\n329090227\n33854619\n45139492\n504764613\n995500935\n33854619\n504764613\n22569746\n504764613\n516049486\n22569746\n516049486\n538619232\n33854619\n33854619\n45139492\n538619232\n22569746\n504764613\n538619232\n22569746\n33854619\n549904105\n516049486\n504764613\n549904105\n538619232\n504764613\n11284873\n990014099\n516049486\n504764613\n33854619\n504764613\n527334359\n504764613\n45139492\n663667290\n33854619\n45139492\n45139492\n", "853605709\n708967065\n708967065\n853605709\n708967065\n708967065\n708967065\n922030188\n708967065\n922030188\n853605709\n853605709\n708967065\n922030188\n708967065\n461015094\n853605709\n853605709\n708967065\n708967065\n", "436731907\n873463814\n873463814\n873463814\n873463814\n873463814\n873463814\n436731907\n873463814\n436731907\n873463814\n436731907\n873463814\n436731907\n436731907\n873463814\n436731907\n873463814\n873463814\n436731907\n", "528451192\n658031067\n259159750\n828137710\n218632982\n957717585\n838269402\n848401094\n218632982\n688426143\n942792071\n398871317\n678294451\n807874326\n129579875\n419134701\n787610942\n139711567\n139711567\n368476241\n378607933\n139711567\n498056116\n848401094\n787610942\n698557835\n797742634\n967849277\n927322509\n957717585\n", "265429165\n98093399\n859759619\n646262275\n738585431\n455845720\n311590743\n548168876\n144254977\n502007298\n975163564\n380833110\n288509954\n502007298\n905921197\n571249665\n669343064\n525088087\n75012610\n715504642\n502007298\n548168876\n784747009\n288509954\n502007298\n761666220\n761666220\n646262275\n288509954\n167335766\n242348376\n144254977\n738585431\n51931821\n478926509\n646262275\n646262275\n98093399\n715504642\n190416555\n784747009\n167335766\n288509954\n121174188\n357752321\n859759619\n", "123180764\n123180764\n123180764\n123180766\n123180764\n123180764\n123180766\n123180766\n123180766\n123180764\n123180766\n123180766\n123180766\n123180764\n123180764\n123180766\n123180766\n123180766\n123180764\n123180764\n123180766\n123180766\n123180764\n123180764\n123180766\n123180766\n123180764\n123180766\n123180764\n123180766\n123180764\n123180764\n123180766\n123180766\n123180766\n123180764\n123180764\n123180766\n123180766\n123180764\n123180764\n123180766\n123180764\n123180764\n123180766\n123180764\n123180766\n123180766\n123180764\n123180764\n", "399967190\n806628868\n604971651\n399967190\n3347244\n800038448\n225087925\n16736220\n621707871\n420050654\n816670600\n228435169\n208351705\n225087925\n231782413\n26777952\n3347244\n51806110\n13388976\n30125196\n399967190\n601624407\n23430708\n225087925\n399967190\n628402359\n420050654\n826712332\n205004461\n823365088\n", "552990868\n90431251\n712871250\n952916426\n537881559\n151361542\n321464532\n89445141\n86037605\n17799187\n586392419\n241031286\n40642277\n699465709\n481837969\n920500985\n572000768\n195703359\n903238702\n911489090\n", "175780254\n94650906\n163530008\n802992688\n561362014\n881093354\n522311681\n319731340\n802992688\n881093354\n959194020\n241630674\n959194020\n802992688\n280681007\n241630674\n241630674\n124479675\n881093354\n163530008\n842043021\n124479675\n124479675\n13521558\n600412347\n600412347\n483261348\n67607790\n444211015\n639462680\n319731340\n163530008\n280681007\n163530008\n202580341\n444211015\n444211015\n920143687\n522311681\n802992688\n483261348\n959194020\n920143687\n", "380563607\n529890998\n551838435\n502062638\n635094670\n380563607\n954349479\n816391328\n358616170\n386444530\n907437062\n645509106\n717232340\n336668733\n954349479\n623561669\n954349479\n77604157\n314721296\n453480088\n645509106\n480115201\n907437062\n725742999\n380563607\n362831759\n725981442\n838731371\n976296916\n362990721\n932402042\n551838435\n286892936\n5880923\n832850448\n998164872\n761127214\n529890998\n5880923\n502062638\n645509106\n181137696\n181296658\n408391967\n739179777\n193222265\n904573682\n695284903\n725663518\n976296916\n", "976715988\n573793375\n391885813\n865390672\n244178997\n209978251\n599683310\n965679188\n634429229\n89796951\n", "394710173\n789420346\n580596339\n789420346\n185886166\n789420346\n580596339\n185886166\n394710173\n394710173\n185886166\n394710173\n581788048\n789420346\n636898629\n185886166\n185886166\n975306512\n580596339\n580596339\n394710173\n394710173\n55110581\n185886166\n55110581\n394710173\n975306512\n975306512\n975306512\n580596339\n789420346\n789420346\n789420346\n394710173\n789420346\n580596339\n580596339\n975306512\n789420346\n394710173\n580596339\n", "23677346\n418239618\n800963217\n220958482\n615520754\n11838673\n627359427\n220958482\n35516019\n615520754\n836479236\n11838673\n639198100\n11838673\n639198100\n848317909\n824640563\n406400945\n209119809\n209119809\n71032038\n639198100\n406400945\n398538577\n627359427\n71032038\n603682081\n418239618\n19778681\n603682081\n651036773\n256474501\n35516019\n824640563\n35516019\n430078291\n615520754\n639198100\n800963217\n627359427\n418239618\n209119809\n406400945\n812801890\n11838673\n35516019\n800963217\n406400945\n209119809\n603682081\n662875446\n406400945\n824640563\n824640563\n406400945\n406400945\n406400945\n11838673\n232797155\n603682081\n11838673\n430078291\n812801890\n603682081\n812801890\n11838673\n812801890\n244635828\n406400945\n836479236\n209119809\n118672086\n824640563\n603682081\n603682081\n406400945\n59193365\n232797155\n812801890\n824640563\n651036773\n209119809\n23677346\n674714119\n220958482\n244635828\n232797155\n603682081\n603682081\n406400945\n209119809\n406400945\n603682081\n11838673\n441916964\n232797155\n603682081\n615520754\n406400945\n418239618\n", "386033769\n373559702\n643389615\n677156688\n85785282\n507867516\n317129978\n557604333\n299639299\n790016136\n959305308\n803246569\n74071672\n564297240\n564297240\n112859448\n631676005\n34981358\n760353928\n751077091\n386033769\n130350127\n751077091\n760353928\n130350127\n760353928\n717461287\n581787919\n395008068\n91411082\n790016136\n412498747\n299639299\n631676005\n159856954\n959305308\n338578344\n717461287\n112859448\n814960179\n73920403\n169289172\n451437792\n807506815\n733586412\n243209575\n317129978\n857852820\n", "459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n533798960\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n459085224\n", "42365832\n603712812\n124449607\n524276926\n161519661\n283321379\n362757265\n481911094\n203885493\n839372581\n283321379\n280673490\n399827319\n121801718\n683148698\n680500809\n360109376\n243603436\n42365832\n203885493\n240955547\n680500809\n521629037\n124449607\n561346980\n240955547\n479263205\n958526410\n362757265\n881738413\n", "973938381\n973938381\n973938381\n791643586\n973938381\n973938381\n973938381\n986091367\n973938381\n973938381\n", "813231583\n458087744\n445793615\n651101155\n484645642\n506668954\n896602699\n556862659\n145127201\n302005399\n558418033\n213871822\n57299634\n564466143\n767349204\n290138481\n12657688\n925337836\n827843024\n119362169\n", "971203339\n971203339\n971203339\n971203339\n971203339\n754874965\n971203339\n971203339\n971203339\n971203339\n", "729284231\n60340485\n239647233\n389641092\n20685064\n829280137\n389641092\n918933511\n529292419\n629288325\n366487398\n808595073\n579290372\n829280137\n829280137\n41331201\n389641092\n110338438\n239647233\n249989765\n679286278\n629288325\n426374038\n968931464\n160336391\n629288325\n49997953\n718941699\n579290372\n918933511\n539634951\n808595073\n89829960\n818937605\n539634951\n349985671\n968931464\n958588932\n210334344\n589632904\n", "51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n", "260411572\n520823144\n520823144\n520823144\n260411572\n260411572\n520823144\n260411572\n260411572\n260411572\n520823144\n260411572\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n520823144\n520823144\n260411572\n520823144\n520823144\n520823144\n520823144\n260411572\n"]}, "index": 8128}, {"input": "Gaius Julius Caesar, a famous general, loved to line up his soldiers. Overall the army had n1 footmen and n2 horsemen. Caesar thought that an arrangement is not beautiful if somewhere in the line there are strictly more that k1 footmen standing successively one after another, or there are strictly more than k2 horsemen standing successively one after another. Find the number of beautiful arrangements of the soldiers. \n\nNote that all n1 + n2 warriors should be present at each arrangement. All footmen are considered indistinguishable among themselves. Similarly, all horsemen are considered indistinguishable among themselves.\n\nInput\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 \u2264 n1, n2 \u2264 100, 1 \u2264 k1, k2 \u2264 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.\n\nOutput\n\nPrint the number of beautiful arrangements of the army modulo 100000000 (108). That is, print the number of such ways to line up the soldiers, that no more than k1 footmen stand successively, and no more than k2 horsemen stand successively.\n\n", "output": "n,m,x,y=map(int,input().split())\nD={}\ndef d(a,b,i,j):\n    if min(a,b,i,j) < 0:\n        return 0\n    if not a+b:\n        return 1\n    v=(a,b,i,j)\n    if v in D:\n        return D[v]\n    r=(d(a,b-1,x,j-1)+d(a-1,b,i-1,y))%10**8\n    D[v]=r\n    return r\n    \nprint(d(n,m,x,y))", "public_tests": {"input": ["2 1 1 10\n", "2 3 1 2\n", "2 4 1 1\n"], "output": ["1\n", "5\n", "0\n"]}, "private_tests": {"input": ["12 15 7 2\n", "34 55 2 9\n", "46 51 4 5\n", "2 1 1 1\n", "10 10 5 7\n", "2 2 1 2\n", "100 99 10 10\n", "1 2 1 1\n", "24 30 5 1\n", "18 4 3 1\n", "100 100 10 10\n", "34 57 1 1\n", "56 40 3 2\n", "100 100 9 10\n", "20 4 9 4\n", "46 46 2 5\n", "67 24 6 3\n", "19 12 5 7\n", "57 25 10 4\n", "2 2 10 10\n", "78 21 10 1\n", "1 2 10 10\n", "64 23 3 6\n", "20 15 10 9\n", "57 30 5 9\n", "1 1 1 1\n", "15 8 2 6\n", "78 14 3 9\n", "99 100 10 10\n", "67 26 6 1\n", "56 37 4 1\n", "1 3 10 10\n", "20 8 4 8\n", "28 65 5 9\n", "56 34 8 10\n"], "output": ["171106\n", "13600171\n", "25703220\n", "1\n", "173349\n", "3\n", "65210983\n", "1\n", "0\n", "0\n", "950492\n", "0\n", "69253068\n", "67740290\n", "5631\n", "84310381\n", "3793964\n", "77429711\n", "4458038\n", "6\n", "96098560\n", "3\n", "7467801\n", "26057516\n", "17123805\n", "2\n", "156\n", "0\n", "65210983\n", "89553795\n", "84920121\n", "4\n", "162585\n", "83961789\n", "92618496\n"]}, "index": 8129}, {"input": "You are given a sequence of n digits d_1d_2 ... d_{n}. You need to paint all the digits in two colors so that:\n\n  * each digit is painted either in the color 1 or in the color 2; \n  * if you write in a row from left to right all the digits painted in the color 1, and then after them all the digits painted in the color 2, then the resulting sequence of n digits will be non-decreasing (that is, each next digit will be greater than or equal to the previous digit). \n\n\n\nFor example, for the sequence d=914 the only valid coloring is 211 (paint in the color 1 two last digits, paint in the color 2 the first digit). But 122 is not a valid coloring (9 concatenated with 14 is not a non-decreasing sequence).\n\nIt is allowed that either of the two colors is not used at all. Digits painted in the same color are not required to have consecutive positions.\n\nFind any of the valid ways to paint the given sequence of digits or determine that it is impossible to do.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the input.\n\nThe first line of each test case contains an integer n (1 \u2264 n \u2264 2\u22c510^5) \u2014 the length of a given sequence of digits.\n\nThe next line contains a sequence of n digits d_1d_2 ... d_{n} (0 \u2264 d_i \u2264 9). The digits are written in a row without spaces or any other separators. The sequence can start with 0.\n\nIt is guaranteed that the sum of the values \u200b\u200bof n for all test cases in the input does not exceed 2\u22c510^5.\n\nOutput\n\nPrint t lines \u2014 the answers to each of the test cases in the input.\n\nIf there is a solution for a test case, the corresponding output line should contain any of the valid colorings written as a string of n digits t_1t_2 ... t_n (1 \u2264 t_i \u2264 2), where t_i is the color the i-th digit is painted in. If there are several feasible solutions, print any of them.\n\nIf there is no solution, then the corresponding output line should contain a single character '-' (the minus sign).\n\nExample\n\nInput\n\n\n5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n\n\nOutput\n\n\n121212211211\n1\n222222222\n21\n-\n\nNote\n\nIn the first test case, d=040425524644. The output t=121212211211 is correct because 0022444 (painted in 1) concatenated with 44556 (painted in 2) is 002244444556 which is a sorted sequence of n given digits", "output": "T=int(input())\nfor _ in range(T):\n n=int(input())\n s=input();sort_s=\"\".join(sorted(s))\n j=0;ans=['0']*n;c1='';c2=''\n for i  in range(n):\n  if s[i]==sort_s[j]:ans[i]='1';j+=1;c1+=s[i]\n  else:ans[i]='2';c2+=s[i]\n if c1+c2==\"\".join(sort_s):print(\"\".join(ans))\n else:print('-')\n", "public_tests": {"input": ["5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n"], "output": ["121212211211\n1\n111111111\n21\n-\n"]}, "private_tests": {"input": ["5\n4\n6148\n1\n7\n5\n49522\n3\n882\n2\n51\n", "5\n1\n3\n5\n74730\n1\n4\n5\n49554\n2\n59\n"], "output": ["2112\n1\n-\n221\n21\n", "1\n-\n1\n-\n11\n"]}, "index": 8130}, {"input": "Suppose there is a h \u00d7 w grid consisting of empty or full cells. Let's make some definitions:\n\n  * r_{i} is the number of consecutive full cells connected to the left side in the i-th row (1 \u2264 i \u2264 h). In particular, r_i=0 if the leftmost cell of the i-th row is empty. \n  * c_{j} is the number of consecutive full cells connected to the top end in the j-th column (1 \u2264 j \u2264 w). In particular, c_j=0 if the topmost cell of the j-th column is empty. \n\n\n\nIn other words, the i-th row starts exactly with r_i full cells. Similarly, the j-th column starts exactly with c_j full cells.\n\n<image> These are the r and c values of some 3 \u00d7 4 grid. Black cells are full and white cells are empty.\n\nYou have values of r and c. Initially, all cells are empty. Find the number of ways to fill grid cells to satisfy values of r and c. Since the answer can be very large, find the answer modulo 1000000007 (10^{9} + 7). In other words, find the remainder after division of the answer by 1000000007 (10^{9} + 7).\n\nInput\n\nThe first line contains two integers h and w (1 \u2264 h, w \u2264 10^{3}) \u2014 the height and width of the grid.\n\nThe second line contains h integers r_{1}, r_{2}, \u2026, r_{h} (0 \u2264 r_{i} \u2264 w) \u2014 the values of r.\n\nThe third line contains w integers c_{1}, c_{2}, \u2026, c_{w} (0 \u2264 c_{j} \u2264 h) \u2014 the values of c.\n\nOutput\n\nPrint the answer modulo 1000000007 (10^{9} + 7).\n\n", "output": "R=lambda:map(int,input().split())\nh,w=map(range,R())\nr=*R(),0\nc=*R(),0\nprint(pow(2,sum(i>c[j]and j>r[i]for i in h for j in\nw),10**9+7)*all(i>=c[r[i]]for i in h)*all(i>=r[c[i]]for i in w))\n", "public_tests": {"input": ["19 16\n16 16 16 16 15 15 0 5 0 4 9 9 1 4 4 0 8 16 12\n6 12 19 15 8 6 19 19 14 6 9 16 10 11 15 4\n", "3 4\n0 3 1\n0 2 3 0\n", "1 1\n0\n1\n"], "output": ["797922655\n", "2\n", "0\n"]}, "private_tests": {"input": ["2 2\n1 1\n1 0\n", "1 1\n1\n0\n", "4 4\n2 0 3 1\n1 3 0 3\n", "3 5\n4 3 2\n3 2 2 1 0\n", "2 4\n2 2\n0 0 0 2\n", "4 5\n2 5 2 2\n4 4 0 2 2\n", "9 9\n9 9 9 9 9 9 9 9 9\n9 9 9 9 9 9 9 9 9\n", "4 4\n4 4 3 3\n4 4 4 1\n", "3 6\n0 0 0\n0 0 0 0 0 0\n", "3 4\n4 4 4\n0 3 3 3\n", "2 2\n1 1\n0 0\n", "4 4\n3 0 0 0\n0 0 0 0\n", "3 3\n3 3 3\n0 0 0\n", "2 2\n2 1\n1 1\n"], "output": ["0\n", "0\n", "0\n", "0\n", "0\n", "4\n", "1\n", "0\n", "1024\n", "0\n", "0\n", "0\n", "0\n", "0\n"]}, "index": 8131}, {"input": "For an array a of integers let's denote its maximal element as max(a), and minimal as min(a). We will call an array a of k integers interesting if max(a) - min(a) \u2265 k. For example, array [1, 3, 4, 3] isn't interesting as max(a) - min(a) = 4 - 1 = 3 < 4 while array [7, 3, 0, 4, 3] is as max(a) - min(a) = 7 - 0 = 7 \u2265 5.\n\nYou are given an array a of n integers. Find some interesting nonempty subarray of a, or tell that it doesn't exist.\n\nAn array b is a subarray of an array a if b can be obtained from a by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. In particular, an array is a subarray of itself.\n\nInput\n\nThe first line contains integer number t (1 \u2264 t \u2264 10 000). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (2\u2264 n \u2264 2\u22c5 10^5) \u2014 the length of the array.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0\u2264 a_i \u2264 10^9) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output \"NO\" in a separate line if there is no interesting nonempty subarray in a. \n\nOtherwise, output \"YES\" in a separate line. In the next line, output two integers l and r (1\u2264 l \u2264 r \u2264 n) \u2014 bounds of the chosen subarray. If there are multiple answers, print any.\n\nYou can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n3\n5\n1 2 3 4 5\n4\n2 0 1 9\n2\n2019 2020\n\n\nOutput\n\n\nNO\nYES\n1 4\nNO\n\nNote\n\nIn the second test case of the example, one of the interesting subarrays is a = [2, 0, 1, 9]: max(a) - min(a) = 9 - 0 = 9 \u2265 4", "output": "I=input\nexec(int(I())*\"I();a=*map(int,I().split()),-2;i=1\\nwhile-2<a[i]-a[i-1]<2:i+=1\\nprint(*(['YES',i,i+1],['NO'])[a[i]<0]);\")", "public_tests": {"input": ["3\n5\n1 2 3 4 5\n4\n2 0 1 9\n2\n2019 2020\n"], "output": ["NO\nYES\n1 2\nNO\n"]}, "private_tests": {"input": ["1\n16\n1 2 3 4 4 4 2 4 4 4 4 4 5 5 5 5\n", "1\n8\n1 2 2 2 4 4 4 5\n", "1\n14\n1 2 3 4 5 4 2 3 4 5 4 3 2 1\n", "1\n11\n1 2 3 4 5 6 7 6 5 4 6\n", "1\n9\n2 4 3 2 1 2 3 4 5\n", "1\n10\n1 2 3 4 4 6 7 7 8 9\n", "1\n24\n1 1 1 1 1 1 2 2 2 2 2 2 4 4 4 4 4 4 5 5 5 5 5 5\n"], "output": ["YES\n6 7\n", "YES\n4 5\n", "YES\n6 7\n", "YES\n10 11\n", "YES\n1 2\n", "YES\n5 6\n", "YES\n12 13\n"]}, "index": 8132}, {"input": "[SIHanatsuka - EMber](https://soundcloud.com/hanatsuka/sihanatsuka-ember)\n\n[SIHanatsuka - ATONEMENT](https://soundcloud.com/hanatsuka/sihanatsuka-atonement)\n\nBack in time, the seven-year-old Nora used to play lots of games with her creation ROBO_Head-02, both to have fun and enhance his abilities.\n\nOne day, Nora's adoptive father, Phoenix Wyle, brought Nora n boxes of toys. Before unpacking, Nora decided to make a fun game for ROBO.\n\nShe labelled all n boxes with n distinct integers a_1, a_2, \u2026, a_n and asked ROBO to do the following action several (possibly zero) times:\n\n  * Pick three distinct indices i, j and k, such that a_i \u2223 a_j and a_i \u2223 a_k. In other words, a_i divides both a_j and a_k, that is a_j mod a_i = 0, a_k mod a_i = 0. \n  * After choosing, Nora will give the k-th box to ROBO, and he will place it on top of the box pile at his side. Initially, the pile is empty. \n  * After doing so, the box k becomes unavailable for any further actions. \n\n\n\nBeing amused after nine different tries of the game, Nora asked ROBO to calculate the number of possible different piles having the largest amount of boxes in them. Two piles are considered different if there exists a position where those two piles have different boxes.\n\nSince ROBO was still in his infant stages, and Nora was still too young to concentrate for a long time, both fell asleep before finding the final answer. Can you help them?\n\nAs the number of such piles can be very large, you should print the answer modulo 10^9 + 7.\n\nInput\n\nThe first line contains an integer n (3 \u2264 n \u2264 60), denoting the number of boxes.\n\nThe second line contains n distinct integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 60), where a_i is the label of the i-th box.\n\nOutput\n\nPrint the number of distinct piles having the maximum number of boxes that ROBO_Head can have, modulo 10^9 + 7.\n\n", "output": "MOD = 1000000007\n\n\ndef isSubset(a, b):\n\treturn (a & b) == a\n\n\ndef isIntersect(a, b):\n\treturn (a & b) != 0\n\n\n# Solve for each weakly connected component (WCC)\ndef cntOrder(s, t):\n\tp = len(s)\n\tm = len(t)\n\n\tinMask = [0 for i in range(m)]\n\n\tfor x in range(p):\n\t\tfor i in range(m):\n\t\t\tif t[i] % s[x] == 0:\n\t\t\t\tinMask[i] |= 1 << x\n\n\tcnt = [0 for mask in range(1<<p)]\n\tfor mask in range(1<<p):\n\t\tfor i in range(m):\n\t\t\tif isSubset(inMask[i], mask):\n\t\t\t\tcnt[mask] += 1\n\n\tdp = [[0 for mask in range(1<<p)] for k in range(m+1)]\n\tfor i in range(m):\n\t\tdp[1][inMask[i]] += 1\n\tfor k in range(m):\n\t\tfor mask in range(1<<p):\n\t\t\tfor i in range(m):\n\t\t\t\tif not isSubset(inMask[i], mask) and isIntersect(inMask[i], mask):\n\t\t\t\t\tdp[k+1][mask | inMask[i]] = (dp[k+1][mask | inMask[i]] + dp[k][mask]) % MOD\n\t\t\tdp[k+1][mask] = (dp[k+1][mask] + dp[k][mask] * (cnt[mask] - k)) % MOD\n\n\treturn dp[m][(1<<p)-1]\n\n\ndef dfs(u):\n\tglobal a, graph, degIn, visited, s, t\n\n\tvisited[u] = True\n\tif degIn[u] == 0:\n\t\ts.append(a[u])\n\telse:\n\t\tt.append(a[u])\n\n\tfor v in graph[u]:\n\t\tif not visited[v]:\n\t\t\tdfs(v)\n\n\ndef main():\n\tglobal a, graph, degIn, visited, s, t\n\n\t# Reading input\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\n\t# Pre-calculate C(n, k)\n\tc = [[0 for j in range(n)] for i in range(n)]\n\tfor i in range(n):\n\t\tc[i][0] = 1\n\t\tfor j in range(1, i+1):\n\t\t\tc[i][j] = (c[i-1][j-1] + c[i-1][j]) % MOD\t\n\n\t# Building divisibility graph\n\tdegIn = [0 for u in range(n)]\n\tgraph = [[] for u in range(n)]\n\tfor u in range(n):\n\t\tfor v in range(n):\n\t\t\tif u != v and a[v] % a[u] == 0:\n\t\t\t\tgraph[u].append(v)\n\t\t\t\tgraph[v].append(u)\n\t\t\t\tdegIn[v] += 1\n\n\t# Solve for each WCC of divisibility graph and combine result\n\tans = 1\n\tcurLen = 0\n\tvisited = [False for u in range(n)]\n\tfor u in range(n):\n\t\tif not visited[u]:\n\t\t\ts = []\n\t\t\tt = []\n\t\t\tdfs(u)\n\n\t\t\tif len(t) > 0:\n\t\t\t\tsz = len(t) - 1\n\t\t\t\tcnt = cntOrder(s, t)\n\n\t\t\t\t# Number of orders for current WCC\n\t\t\t\tans = (ans * cnt) % MOD\n\t\t\t\t# Number of ways to insert <sz> number to array of <curLen> elements\n\t\t\t\tans = (ans * c[curLen + sz][sz]) % MOD\n\t\t\t\tcurLen += sz\t\t\n\n\tprint(ans)\n\nif __name__ == \"__main__\":\n\tmain()", "public_tests": {"input": ["4\n5 7 2 9\n", "3\n2 6 8\n", "5\n2 3 4 9 12\n"], "output": ["1\n", "2\n", "4\n"]}, "private_tests": {"input": ["45\n41 50 11 34 39 40 9 22 48 6 31 16 13 8 20 42 27 45 15 43 32 38 28 10 46 17 21 33 4 18 35 14 37 23 29 2 49 19 12 44 36 24 30 26 3\n", "60\n51 18 41 48 9 10 7 2 34 23 31 55 28 29 47 42 14 30 60 43 16 21 1 33 6 36 58 35 50 19 40 27 26 25 20 38 8 53 22 13 45 4 24 49 56 39 15 3 57 17 59 11 52 5 44 54 37 46 32 12\n", "45\n9 50 26 14 31 3 37 27 58 28 57 20 23 60 6 13 22 19 48 21 54 56 30 34 16 53 44 24 43 46 45 32 59 5 33 41 11 42 8 12 25 29 47 49 35\n", "20\n10 50 39 6 47 35 37 26 12 15 11 9 46 45 7 16 21 31 18 23\n", "25\n20 32 11 44 48 42 46 21 40 30 2 18 39 43 12 45 9 50 3 35 28 31 5 34 10\n", "20\n13 7 23 19 2 28 5 29 20 6 9 8 30 26 24 21 25 15 27 17\n", "25\n27 50 38 6 29 33 18 26 34 60 37 39 11 47 4 31 40 5 25 43 17 9 45 7 14\n", "7\n7 10 9 4 8 5 6\n", "25\n33 7 9 2 13 32 15 3 31 16 26 17 28 34 21 19 24 12 29 30 14 6 8 22 20\n", "50\n59 34 3 31 55 41 39 58 49 26 35 22 46 10 60 17 14 44 27 48 20 16 13 6 23 24 11 52 54 57 56 38 42 25 19 15 4 18 2 29 53 47 5 40 30 21 12 32 7 8\n", "40\n3 30 22 42 33 21 50 12 41 13 15 7 46 34 9 27 52 54 47 6 55 17 4 2 53 20 28 44 16 48 31 26 49 51 14 23 43 40 19 5\n", "40\n28 29 12 25 14 44 6 17 37 33 10 45 23 27 18 39 38 43 22 16 20 40 32 13 30 5 8 35 19 7 42 9 41 15 36 24 11 4 34 3\n", "25\n8 23 17 24 34 43 2 20 3 33 18 29 38 28 41 22 39 40 26 32 31 45 9 11 4\n", "30\n20 30 11 12 14 17 3 22 45 24 2 26 9 48 49 29 44 39 8 42 4 50 6 13 27 23 15 10 40 31\n", "42\n2 29 27 25 23 21 19 17 15 13 11 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n", "50\n30 4 54 10 32 18 49 2 36 3 25 29 51 43 7 33 50 44 20 8 53 17 35 48 15 27 42 22 37 11 39 6 31 52 14 5 12 9 13 21 23 26 28 16 19 47 34 45 41 40\n", "35\n32 19 39 35 16 37 8 33 13 12 29 20 21 7 22 34 9 4 25 31 5 15 14 11 18 10 40 2 6 38 24 23 17 26 28\n", "20\n20 7 26 4 2 16 40 28 23 41 13 44 6 39 8 31 18 24 36 21\n", "15\n14 9 3 30 13 26 18 28 4 19 15 8 10 6 5\n", "30\n15 32 22 11 34 2 6 8 18 24 30 21 20 35 28 19 16 17 27 25 12 26 14 7 3 33 29 23 13 4\n", "59\n43 38 39 8 13 54 3 51 28 11 46 41 14 20 36 19 32 15 34 55 47 24 45 40 17 29 6 57 59 52 21 4 49 30 33 53 58 10 48 35 7 60 27 26 23 42 18 12 25 31 44 5 16 50 22 9 56 2 37\n", "35\n38 35 3 23 11 9 27 42 4 16 43 44 19 37 29 17 45 7 33 28 39 15 14 34 10 18 41 22 40 2 36 20 25 30 12\n", "30\n29 26 15 14 9 16 28 7 39 8 30 17 6 22 27 35 32 11 2 34 38 13 33 36 40 12 20 25 21 31\n", "35\n27 10 46 29 40 19 54 47 18 23 43 7 5 25 15 41 11 14 22 52 2 33 30 48 51 37 39 31 32 3 38 35 55 4 26\n", "10\n14 5 13 7 11 10 8 3 6 2\n", "40\n51 19 2 24 8 14 53 49 43 36 26 20 52 10 29 41 37 46 50 57 33 55 59 25 44 27 34 32 3 45 28 39 7 58 35 12 4 42 9 11\n", "20\n20 52 2 43 44 14 30 45 21 35 33 15 4 32 12 42 25 54 41 9\n", "30\n20 26 16 44 37 21 45 4 23 38 28 17 9 22 15 40 2 10 29 39 3 24 41 30 43 12 42 14 31 34\n", "35\n18 38 59 58 49 28 5 54 22 3 20 24 57 41 53 26 36 46 33 25 48 31 13 10 35 11 34 43 56 60 2 39 42 50 32\n", "15\n9 3 11 16 5 10 12 8 7 13 4 20 17 2 14\n", "55\n58 31 18 12 17 2 19 54 44 7 21 5 49 11 9 15 43 6 28 53 34 48 23 25 33 41 59 32 38 8 46 20 52 3 22 55 10 29 36 16 40 50 56 35 4 57 30 47 42 51 24 60 39 26 14\n", "10\n3 17 8 5 7 9 2 11 13 12\n", "20\n24 32 15 17 3 22 6 2 16 34 12 8 18 11 29 20 21 26 33 14\n", "30\n16 32 17 34 18 36 19 38 20 40 21 42 22 44 23 46 24 48 25 50 26 52 27 54 28 56 29 58 30 60\n", "30\n17 53 19 25 13 37 3 18 23 10 46 4 59 57 56 35 21 30 49 51 9 12 26 29 5 7 11 20 36 15\n", "20\n19 13 7 22 21 31 26 28 20 4 11 10 9 39 25 3 16 27 33 29\n", "45\n23 9 14 10 20 36 46 24 19 39 8 18 49 26 32 38 47 48 13 28 51 12 21 55 5 50 4 41 3 40 7 2 27 44 16 25 37 22 6 45 34 43 11 17 29\n", "15\n9 12 10 8 17 3 18 5 22 15 19 21 14 25 23\n", "40\n22 18 45 10 14 23 9 46 21 20 17 47 5 2 34 3 32 37 35 16 4 29 30 42 36 27 33 12 11 8 44 6 31 48 26 13 28 25 40 7\n", "25\n6 17 9 20 28 10 13 11 29 15 22 16 2 7 8 27 5 14 3 18 26 23 21 4 19\n", "20\n4 7 14 16 12 18 3 25 23 8 20 24 21 6 19 9 10 2 22 17\n", "25\n27 41 24 32 37 6 53 30 23 51 19 2 49 43 18 42 20 13 45 33 34 26 52 3 14\n", "30\n49 45 5 37 4 21 32 9 54 41 43 11 46 15 51 42 19 23 30 52 55 38 7 24 10 20 22 35 26 48\n", "25\n14 29 20 35 26 28 15 39 2 24 38 18 30 12 4 7 9 21 17 11 22 13 27 36 34\n", "20\n18 13 19 4 5 7 9 2 14 11 21 15 16 10 8 3 12 6 20 17\n", "20\n23 33 52 48 40 30 47 55 49 53 2 10 14 9 18 11 32 59 60 44\n", "35\n50 18 10 14 43 24 16 19 36 42 45 11 15 44 29 41 35 21 13 22 47 4 20 26 48 8 3 25 39 6 17 33 12 32 34\n"], "output": ["461982591\n", "133605669\n", "979906107\n", "24\n", "914197149\n", "1018080\n", "2556\n", "1\n", "677307635\n", "780006450\n", "114991468\n", "871928441\n", "328260654\n", "844327723\n", "948373045\n", "601846828\n", "684687247\n", "273574246\n", "6336\n", "399378036\n", "137822246\n", "978954869\n", "112745935\n", "660048379\n", "24\n", "653596620\n", "27336960\n", "631950827\n", "641829204\n", "20880\n", "122974992\n", "4\n", "154637138\n", "48\n", "543177853\n", "95160\n", "221629876\n", "1968\n", "628716855\n", "893205071\n", "695148772\n", "991737812\n", "225552404\n", "769765990\n", "326747520\n", "167650560\n", "525144617\n"]}, "index": 8133}, {"input": "You are given a set of strings S. Each string consists of lowercase Latin letters.\n\nFor each string in this set, you want to calculate the minimum number of seconds required to type this string. To type a string, you have to start with an empty string and transform it into the string you want to type using the following actions:\n\n  * if the current string is t, choose some lowercase Latin letter c and append it to the back of t, so the current string becomes t + c. This action takes 1 second; \n  * use autocompletion. When you try to autocomplete the current string t, a list of all strings s \u2208 S such that t is a prefix of s is shown to you. This list includes t itself, if t is a string from S, and the strings are ordered lexicographically. You can transform t into the i-th string from this list in i seconds. Note that you may choose any string from this list you want, it is not necessarily the string you are trying to type. \n\n\n\nWhat is the minimum number of seconds that you have to spend to type each string from S?\n\nNote that the strings from S are given in an unusual way.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 10^6).\n\nThen n lines follow, the i-th line contains one integer p_i (0 \u2264 p_i < i) and one lowercase Latin character c_i. These lines form some set of strings such that S is its subset as follows: there are n + 1 strings, numbered from 0 to n; the 0-th string is an empty string, and the i-th string (i \u2265 1) is the result of appending the character c_i to the string p_i. It is guaranteed that all these strings are distinct.\n\nThe next line contains one integer k (1 \u2264 k \u2264 n) \u2014 the number of strings in S.\n\nThe last line contains k integers a_1, a_2, ..., a_k (1 \u2264 a_i \u2264 n, all a_i are pairwise distinct) denoting the indices of the strings generated by above-mentioned process that form the set S \u2014 formally, if we denote the i-th generated string as s_i, then S = {s_{a_1}, s_{a_2}, ..., s_{a_k}}.\n\nOutput\n\nPrint k integers, the i-th of them should be equal to the minimum number of seconds required to type the string s_{a_i}.\n\n", "output": "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nT=[input().split() for i in range(n)]\nk=int(input())\nS=list(map(int,input().split()))\nSETS=set(S)\n\nE=[[] for i in range(n+1)]\nP=[-1]*(n+1)\n\nfor i in range(n):\n    p,s=T[i]\n    p=int(p)\n    E[p].append((s,i+1))\n    P[i+1]=p\n\nfor i in range(n+1):\n    E[i].sort(reverse=True)\n\nELI=[0]*(n+1)\nDEPTH=[0]*(n+1)\nELIMIN=[0]*(n+1)\nANS=[0]*(n+1)\n\nQ=[0]\nUSED=[0]*(n+1)\ncount=0\nwhile Q:\n    x=Q.pop()\n    USED[x]=1\n    if x in SETS:\n        count+=1\n    #print(x,count)\n\n    if x in SETS:\n        ANS[x]=min(DEPTH[x],count+ELIMIN[P[x]],ANS[P[x]]+1)\n        ELI[x]=ANS[x]-count+1\n    else:\n        ANS[x]=min(DEPTH[x],ANS[P[x]]+1)\n        ELI[x]=ANS[x]-count\n\n    ELIMIN[x]=min(ELI[x],ELIMIN[P[x]])\n        \n    \n    for s,to in E[x]:\n        if USED[to]==1:\n            continue\n        \n        Q.append(to)\n        DEPTH[to]=DEPTH[x]+1\n\n\nprint(*[ANS[s] for s in S])\n        \n        \n        \n\n\n", "public_tests": {"input": ["10\n0 i\n1 q\n2 g\n0 k\n1 e\n5 r\n4 m\n5 h\n3 p\n3 e\n5\n8 9 1 10 6\n", "8\n0 a\n1 b\n2 a\n2 b\n4 a\n4 b\n5 c\n6 d\n5\n2 3 4 7 8\n"], "output": ["2 4 1 3 3 ", "1 2 2 4 4 "]}, "private_tests": {"input": ["1\n0 z\n1\n1\n"], "output": ["1 "]}, "index": 8134}, {"input": "You are given a correct solution of the sudoku puzzle. If you don't know what is the sudoku, you can read about it [here](http://tiny.cc/636xmz).\n\nThe picture showing the correct sudoku solution:\n\n<image>\n\nBlocks are bordered with bold black color.\n\nYour task is to change at most 9 elements of this field (i.e. choose some 1 \u2264 i, j \u2264 9 and change the number at the position (i, j) to any other number in range [1; 9]) to make it anti-sudoku. The anti-sudoku is the 9 \u00d7 9 field, in which:\n\n  * Any number in this field is in range [1; 9]; \n  * each row contains at least two equal elements; \n  * each column contains at least two equal elements; \n  * each 3 \u00d7 3 block (you can read what is the block in the link above) contains at least two equal elements. \n\n\n\nIt is guaranteed that the answer exists.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of 9 lines, each line consists of 9 characters from 1 to 9 without any whitespaces \u2014 the correct solution of the sudoku puzzle.\n\nOutput\n\nFor each test case, print the answer \u2014 the initial field with at most 9 changed elements so that the obtained field is anti-sudoku. If there are several solutions, you can print any. It is guaranteed that the answer exists.\n\nExample\n\nInput\n\n\n1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\n\nOutput\n\n\n154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n24778956", "output": "for t in[*open(0)][1:]:print(t.replace('1','2'))", "public_tests": {"input": ["1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n"], "output": ["254873296\n386692714\n729641935\n873725149\n975324628\n412968367\n632457982\n598237471\n247189564\n"]}, "private_tests": {"input": ["3\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n", "1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n", "2\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n"], "output": ["254873296\n386692714\n729641935\n873725149\n975324628\n412968367\n632457982\n598237471\n247189564\n254873296\n386692714\n729641935\n873725149\n975324628\n412968367\n632457982\n598237471\n247189564\n254873296\n386692714\n729641935\n873725149\n975324628\n412968367\n632457982\n598237471\n247189564\n", "254873296\n386692714\n729641935\n873725149\n975324628\n412968367\n632457982\n598237471\n247189564\n", "254873296\n386692714\n729641935\n873725149\n975324628\n412968367\n632457982\n598237471\n247189564\n254873296\n386692714\n729641935\n873725149\n975324628\n412968367\n632457982\n598237471\n247189564\n"]}, "index": 8135}, {"input": "Madeline has an array a of n integers. A pair (u, v) of integers forms an inversion in a if:\n\n  * 1 \u2264 u < v \u2264 n. \n  * a_u > a_v. \n\n\n\nMadeline recently found a magical paper, which allows her to write two indices u and v and swap the values a_u and a_v. Being bored, she decided to write a list of pairs (u_i, v_i) with the following conditions:\n\n  * all the pairs in the list are distinct and form an inversion in a. \n  * all the pairs that form an inversion in a are in the list. \n  * Starting from the given array, if you swap the values at indices u_1 and v_1, then the values at indices u_2 and v_2 and so on, then after all pairs are processed, the array a will be sorted in non-decreasing order. \n\n\n\nConstruct such a list or determine that no such list exists. If there are multiple possible answers, you may find any of them.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the length of the array.\n\nNext line contains n integers a_1,a_2,...,a_n (1 \u2264 a_i \u2264 10^9) \u2014 elements of the array.\n\nOutput\n\nPrint -1 if no such list exists. Otherwise in the first line you should print a single integer m (0 \u2264 m \u2264 (n(n-1))/(2)) \u2014 number of pairs in the list.\n\nThe i-th of the following m lines should contain two integers u_i, v_i (1 \u2264 u_i < v_i\u2264 n).\n\nIf there are multiple possible answers, you may find any of them.\n\n", "output": "input()\na=list(map(int,input().split()))\nb=sorted((i,-a[j],-j)for j in range(len(a))for i in range(j)if a[i]>a[j])\nprint(len(b))\nfor i,j,k in b:print(i+1,-k+1)", "public_tests": {"input": ["4\n1 8 1 6\n", "5\n1 1 1 2 2\n", "3\n3 1 2\n"], "output": ["2\n2 4\n2 3\n", "0\n", "2\n1 3\n1 2\n"]}, "private_tests": {"input": ["1\n1\n", "20\n10 10 9 9 8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1\n", "5\n3 4 3 1 2\n", "100\n32 85 33 27 35 48 64 40 45 120 68 58 108 115 99 71 47 82 42 34 63 49 102 30 88 70 73 52 51 95 104 41 38 59 91 21 43 107 44 113 109 25 55 118 112 90 37 106 103 100 114 78 31 26 92 79 89 105 62 54 72 69 101 36 98 77 93 97 75 96 22 76 86 57 46 110 65 61 23 50 83 87 39 74 111 67 29 84 24 28 56 116 80 117 119 53 81 66 60 94\n"], "output": ["0\n", "180\n17 20\n18 20\n15 20\n16 20\n13 20\n14 20\n11 20\n12 20\n9 20\n10 20\n7 20\n8 20\n5 20\n6 20\n3 20\n4 20\n1 20\n2 20\n17 19\n18 19\n15 19\n16 19\n13 19\n14 19\n11 19\n12 19\n9 19\n10 19\n7 19\n8 19\n5 19\n6 19\n3 19\n4 19\n1 19\n2 19\n15 18\n16 18\n13 18\n14 18\n11 18\n12 18\n9 18\n10 18\n7 18\n8 18\n5 18\n6 18\n3 18\n4 18\n1 18\n2 18\n15 17\n16 17\n13 17\n14 17\n11 17\n12 17\n9 17\n10 17\n7 17\n8 17\n5 17\n6 17\n3 17\n4 17\n1 17\n2 17\n13 16\n14 16\n11 16\n12 16\n9 16\n10 16\n7 16\n8 16\n5 16\n6 16\n3 16\n4 16\n1 16\n2 16\n13 15\n14 15\n11 15\n12 15\n9 15\n10 15\n7 15\n8 15\n5 15\n6 15\n3 15\n4 15\n1 15\n2 15\n11 14\n12 14\n9 14\n10 14\n7 14\n8 14\n5 14\n6 14\n3 14\n4 14\n1 14\n2 14\n11 13\n12 13\n9 13\n10 13\n7 13\n8 13\n5 13\n6 13\n3 13\n4 13\n1 13\n2 13\n9 12\n10 12\n7 12\n8 12\n5 12\n6 12\n3 12\n4 12\n1 12\n2 12\n9 11\n10 11\n7 11\n8 11\n5 11\n6 11\n3 11\n4 11\n1 11\n2 11\n7 10\n8 10\n5 10\n6 10\n3 10\n4 10\n1 10\n2 10\n7 9\n8 9\n5 9\n6 9\n3 9\n4 9\n1 9\n2 9\n5 8\n6 8\n3 8\n4 8\n1 8\n2 8\n5 7\n6 7\n3 7\n4 7\n1 7\n2 7\n3 6\n4 6\n1 6\n2 6\n3 5\n4 5\n1 5\n2 5\n1 4\n2 4\n1 3\n2 3\n", "7\n1 5\n3 5\n2 5\n1 4\n3 4\n2 4\n2 3\n", "2290\n30 100\n70 100\n68 100\n65 100\n15 100\n50 100\n63 100\n23 100\n49 100\n31 100\n58 100\n48 100\n38 100\n13 100\n41 100\n76 100\n85 100\n45 100\n40 100\n51 100\n14 100\n92 100\n94 100\n44 100\n95 100\n10 100\n78 99\n59 99\n21 99\n7 99\n77 99\n98 99\n86 99\n11 99\n62 99\n26 99\n16 99\n61 99\n27 99\n84 99\n69 99\n72 99\n66 99\n52 99\n56 99\n93 99\n97 99\n18 99\n81 99\n88 99\n2 99\n73 99\n82 99\n25 99\n57 99\n46 99\n35 99\n55 99\n67 99\n30 99\n70 99\n68 99\n65 99\n15 99\n50 99\n63 99\n23 99\n49 99\n31 99\n58 99\n48 99\n38 99\n13 99\n41 99\n76 99\n85 99\n45 99\n40 99\n51 99\n14 99\n92 99\n94 99\n44 99\n95 99\n10 99\n86 98\n11 98\n62 98\n26 98\n16 98\n61 98\n27 98\n84 98\n69 98\n72 98\n66 98\n52 98\n56 98\n93 98\n97 98\n18 98\n81 98\n88 98\n2 98\n73 98\n82 98\n25 98\n57 98\n46 98\n35 98\n55 98\n67 98\n30 98\n70 98\n68 98\n65 98\n15 98\n50 98\n63 98\n23 98\n49 98\n31 98\n58 98\n48 98\n38 98\n13 98\n41 98\n76 98\n85 98\n45 98\n40 98\n51 98\n14 98\n92 98\n94 98\n44 98\n95 98\n10 98\n18 97\n81 97\n88 97\n2 97\n73 97\n82 97\n25 97\n57 97\n46 97\n35 97\n55 97\n67 97\n30 97\n70 97\n68 97\n65 97\n15 97\n50 97\n63 97\n23 97\n49 97\n31 97\n58 97\n48 97\n38 97\n13 97\n41 97\n76 97\n85 97\n45 97\n40 97\n51 97\n14 97\n92 97\n94 97\n44 97\n95 97\n10 97\n60 96\n43 96\n91 96\n74 96\n12 96\n34 96\n78 96\n59 96\n21 96\n7 96\n77 96\n86 96\n11 96\n62 96\n26 96\n16 96\n61 96\n27 96\n84 96\n69 96\n72 96\n66 96\n52 96\n56 96\n93 96\n18 96\n81 96\n88 96\n2 96\n73 96\n82 96\n25 96\n57 96\n46 96\n35 96\n55 96\n67 96\n30 96\n70 96\n68 96\n65 96\n15 96\n50 96\n63 96\n23 96\n49 96\n31 96\n58 96\n48 96\n38 96\n13 96\n41 96\n76 96\n85 96\n45 96\n40 96\n51 96\n14 96\n92 96\n94 96\n44 96\n95 96\n10 96\n10 95\n44 94\n10 94\n18 93\n81 93\n88 93\n2 93\n73 93\n82 93\n25 93\n57 93\n46 93\n35 93\n55 93\n67 93\n30 93\n70 93\n68 93\n65 93\n15 93\n50 93\n63 93\n23 93\n49 93\n31 93\n58 93\n48 93\n38 93\n13 93\n41 93\n76 93\n85 93\n45 93\n40 93\n51 93\n14 93\n92 93\n44 93\n10 93\n44 92\n10 92\n74 91\n12 91\n34 91\n78 91\n59 91\n21 91\n7 91\n77 91\n86 91\n11 91\n62 91\n26 91\n16 91\n61 91\n27 91\n84 91\n69 91\n72 91\n66 91\n52 91\n56 91\n18 91\n81 91\n88 91\n2 91\n73 91\n82 91\n25 91\n57 91\n46 91\n35 91\n55 91\n67 91\n30 91\n70 91\n68 91\n65 91\n15 91\n50 91\n63 91\n23 91\n49 91\n31 91\n58 91\n48 91\n38 91\n13 91\n41 91\n76 91\n85 91\n45 91\n40 91\n51 91\n14 91\n44 91\n10 91\n87 90\n24 90\n53 90\n1 90\n3 90\n20 90\n5 90\n64 90\n47 90\n33 90\n83 90\n8 90\n32 90\n19 90\n37 90\n39 90\n9 90\n75 90\n17 90\n6 90\n22 90\n80 90\n29 90\n28 90\n60 90\n43 90\n74 90\n12 90\n34 90\n78 90\n59 90\n21 90\n7 90\n77 90\n86 90\n11 90\n62 90\n26 90\n16 90\n61 90\n27 90\n84 90\n69 90\n72 90\n66 90\n52 90\n56 90\n18 90\n81 90\n88 90\n2 90\n73 90\n82 90\n25 90\n57 90\n46 90\n35 90\n55 90\n67 90\n30 90\n70 90\n68 90\n65 90\n15 90\n50 90\n63 90\n23 90\n49 90\n31 90\n58 90\n48 90\n38 90\n13 90\n41 90\n76 90\n85 90\n45 90\n40 90\n51 90\n14 90\n44 90\n10 90\n42 89\n54 89\n4 89\n87 89\n24 89\n53 89\n1 89\n3 89\n20 89\n5 89\n64 89\n47 89\n33 89\n83 89\n8 89\n32 89\n19 89\n37 89\n39 89\n9 89\n75 89\n17 89\n6 89\n22 89\n80 89\n29 89\n28 89\n60 89\n43 89\n74 89\n12 89\n34 89\n78 89\n59 89\n21 89\n7 89\n77 89\n86 89\n11 89\n62 89\n26 89\n16 89\n61 89\n27 89\n84 89\n69 89\n72 89\n66 89\n52 89\n56 89\n18 89\n81 89\n88 89\n2 89\n73 89\n82 89\n25 89\n57 89\n46 89\n35 89\n55 89\n67 89\n30 89\n70 89\n68 89\n65 89\n15 89\n50 89\n63 89\n23 89\n49 89\n31 89\n58 89\n48 89\n38 89\n13 89\n41 89\n76 89\n85 89\n45 89\n40 89\n51 89\n14 89\n44 89\n10 89\n2 88\n73 88\n82 88\n25 88\n57 88\n46 88\n35 88\n55 88\n67 88\n30 88\n70 88\n68 88\n65 88\n15 88\n50 88\n63 88\n23 88\n49 88\n31 88\n58 88\n48 88\n38 88\n13 88\n41 88\n76 88\n85 88\n45 88\n40 88\n51 88\n14 88\n44 88\n10 88\n24 87\n53 87\n1 87\n3 87\n20 87\n5 87\n64 87\n47 87\n33 87\n83 87\n8 87\n32 87\n19 87\n37 87\n39 87\n9 87\n75 87\n17 87\n6 87\n22 87\n80 87\n29 87\n28 87\n60 87\n43 87\n74 87\n12 87\n34 87\n78 87\n59 87\n21 87\n7 87\n77 87\n86 87\n11 87\n62 87\n26 87\n16 87\n61 87\n27 87\n84 87\n69 87\n72 87\n66 87\n52 87\n56 87\n18 87\n81 87\n2 87\n73 87\n82 87\n25 87\n57 87\n46 87\n35 87\n55 87\n67 87\n30 87\n70 87\n68 87\n65 87\n15 87\n50 87\n63 87\n23 87\n49 87\n31 87\n58 87\n48 87\n38 87\n13 87\n41 87\n76 87\n85 87\n45 87\n40 87\n51 87\n14 87\n44 87\n10 87\n11 86\n62 86\n26 86\n16 86\n61 86\n27 86\n84 86\n69 86\n72 86\n66 86\n52 86\n56 86\n18 86\n81 86\n2 86\n73 86\n82 86\n25 86\n57 86\n46 86\n35 86\n55 86\n67 86\n30 86\n70 86\n68 86\n65 86\n15 86\n50 86\n63 86\n23 86\n49 86\n31 86\n58 86\n48 86\n38 86\n13 86\n41 86\n76 86\n85 86\n45 86\n40 86\n51 86\n14 86\n44 86\n10 86\n45 85\n40 85\n51 85\n14 85\n44 85\n10 85\n69 84\n72 84\n66 84\n52 84\n56 84\n18 84\n81 84\n2 84\n73 84\n82 84\n25 84\n57 84\n46 84\n35 84\n55 84\n67 84\n30 84\n70 84\n68 84\n65 84\n15 84\n50 84\n63 84\n23 84\n49 84\n31 84\n58 84\n48 84\n38 84\n13 84\n41 84\n76 84\n45 84\n40 84\n51 84\n14 84\n44 84\n10 84\n8 83\n32 83\n19 83\n37 83\n39 83\n9 83\n75 83\n17 83\n6 83\n22 83\n80 83\n29 83\n28 83\n60 83\n43 83\n74 83\n12 83\n34 83\n78 83\n59 83\n21 83\n7 83\n77 83\n11 83\n62 83\n26 83\n16 83\n61 83\n27 83\n69 83\n72 83\n66 83\n52 83\n56 83\n18 83\n81 83\n2 83\n73 83\n82 83\n25 83\n57 83\n46 83\n35 83\n55 83\n67 83\n30 83\n70 83\n68 83\n65 83\n15 83\n50 83\n63 83\n23 83\n49 83\n31 83\n58 83\n48 83\n38 83\n13 83\n41 83\n76 83\n45 83\n40 83\n51 83\n14 83\n44 83\n10 83\n25 82\n57 82\n46 82\n35 82\n55 82\n67 82\n30 82\n70 82\n68 82\n65 82\n15 82\n50 82\n63 82\n23 82\n49 82\n31 82\n58 82\n48 82\n38 82\n13 82\n41 82\n76 82\n45 82\n40 82\n51 82\n14 82\n44 82\n10 82\n2 81\n73 81\n25 81\n57 81\n46 81\n35 81\n55 81\n67 81\n30 81\n70 81\n68 81\n65 81\n15 81\n50 81\n63 81\n23 81\n49 81\n31 81\n58 81\n48 81\n38 81\n13 81\n41 81\n76 81\n45 81\n40 81\n51 81\n14 81\n44 81\n10 81\n29 80\n28 80\n60 80\n43 80\n74 80\n12 80\n34 80\n78 80\n59 80\n21 80\n7 80\n77 80\n11 80\n62 80\n26 80\n16 80\n61 80\n27 80\n69 80\n72 80\n66 80\n52 80\n56 80\n18 80\n2 80\n73 80\n25 80\n57 80\n46 80\n35 80\n55 80\n67 80\n30 80\n70 80\n68 80\n65 80\n15 80\n50 80\n63 80\n23 80\n49 80\n31 80\n58 80\n48 80\n38 80\n13 80\n41 80\n76 80\n45 80\n40 80\n51 80\n14 80\n44 80\n10 80\n42 79\n54 79\n4 79\n24 79\n53 79\n1 79\n3 79\n20 79\n5 79\n64 79\n47 79\n33 79\n8 79\n32 79\n19 79\n37 79\n39 79\n9 79\n75 79\n17 79\n6 79\n22 79\n29 79\n28 79\n60 79\n43 79\n74 79\n12 79\n34 79\n78 79\n59 79\n21 79\n7 79\n77 79\n11 79\n62 79\n26 79\n16 79\n61 79\n27 79\n69 79\n72 79\n66 79\n52 79\n56 79\n18 79\n2 79\n73 79\n25 79\n57 79\n46 79\n35 79\n55 79\n67 79\n30 79\n70 79\n68 79\n65 79\n15 79\n50 79\n63 79\n23 79\n49 79\n31 79\n58 79\n48 79\n38 79\n13 79\n41 79\n76 79\n45 79\n40 79\n51 79\n14 79\n44 79\n10 79\n59 78\n21 78\n7 78\n77 78\n11 78\n62 78\n26 78\n16 78\n61 78\n27 78\n69 78\n72 78\n66 78\n52 78\n56 78\n18 78\n2 78\n73 78\n25 78\n57 78\n46 78\n35 78\n55 78\n67 78\n30 78\n70 78\n68 78\n65 78\n15 78\n50 78\n63 78\n23 78\n49 78\n31 78\n58 78\n48 78\n38 78\n13 78\n41 78\n76 78\n45 78\n40 78\n51 78\n14 78\n44 78\n10 78\n11 77\n62 77\n26 77\n16 77\n61 77\n27 77\n69 77\n72 77\n66 77\n52 77\n56 77\n18 77\n2 77\n73 77\n25 77\n57 77\n46 77\n35 77\n55 77\n67 77\n30 77\n70 77\n68 77\n65 77\n15 77\n50 77\n63 77\n23 77\n49 77\n31 77\n58 77\n48 77\n38 77\n13 77\n41 77\n76 77\n45 77\n40 77\n51 77\n14 77\n44 77\n10 77\n45 76\n40 76\n51 76\n14 76\n44 76\n10 76\n17 75\n6 75\n22 75\n29 75\n28 75\n60 75\n43 75\n74 75\n12 75\n34 75\n59 75\n21 75\n7 75\n11 75\n62 75\n26 75\n16 75\n61 75\n27 75\n69 75\n72 75\n66 75\n52 75\n56 75\n18 75\n2 75\n73 75\n25 75\n57 75\n46 75\n35 75\n55 75\n67 75\n30 75\n70 75\n68 75\n65 75\n15 75\n50 75\n63 75\n23 75\n49 75\n31 75\n58 75\n48 75\n38 75\n13 75\n41 75\n45 75\n40 75\n51 75\n14 75\n44 75\n10 75\n12 74\n34 74\n59 74\n21 74\n7 74\n11 74\n62 74\n26 74\n16 74\n61 74\n27 74\n69 74\n72 74\n66 74\n52 74\n56 74\n18 74\n2 74\n73 74\n25 74\n57 74\n46 74\n35 74\n55 74\n67 74\n30 74\n70 74\n68 74\n65 74\n15 74\n50 74\n63 74\n23 74\n49 74\n31 74\n58 74\n48 74\n38 74\n13 74\n41 74\n45 74\n40 74\n51 74\n14 74\n44 74\n10 74\n25 73\n57 73\n46 73\n35 73\n55 73\n67 73\n30 73\n70 73\n68 73\n65 73\n15 73\n50 73\n63 73\n23 73\n49 73\n31 73\n58 73\n48 73\n38 73\n13 73\n41 73\n45 73\n40 73\n51 73\n14 73\n44 73\n10 73\n66 72\n52 72\n56 72\n18 72\n2 72\n25 72\n57 72\n46 72\n35 72\n55 72\n67 72\n30 72\n70 72\n68 72\n65 72\n15 72\n50 72\n63 72\n23 72\n49 72\n31 72\n58 72\n48 72\n38 72\n13 72\n41 72\n45 72\n40 72\n51 72\n14 72\n44 72\n10 72\n42 71\n54 71\n4 71\n24 71\n53 71\n1 71\n3 71\n20 71\n5 71\n64 71\n47 71\n33 71\n8 71\n32 71\n19 71\n37 71\n39 71\n9 71\n17 71\n6 71\n22 71\n29 71\n28 71\n60 71\n43 71\n12 71\n34 71\n59 71\n21 71\n7 71\n11 71\n62 71\n26 71\n16 71\n61 71\n27 71\n69 71\n66 71\n52 71\n56 71\n18 71\n2 71\n25 71\n57 71\n46 71\n35 71\n55 71\n67 71\n30 71\n70 71\n68 71\n65 71\n15 71\n50 71\n63 71\n23 71\n49 71\n31 71\n58 71\n48 71\n38 71\n13 71\n41 71\n45 71\n40 71\n51 71\n14 71\n44 71\n10 71\n68 70\n65 70\n15 70\n50 70\n63 70\n23 70\n49 70\n31 70\n58 70\n48 70\n38 70\n13 70\n41 70\n45 70\n40 70\n51 70\n14 70\n44 70\n10 70\n66 69\n52 69\n56 69\n18 69\n2 69\n25 69\n57 69\n46 69\n35 69\n55 69\n67 69\n30 69\n68 69\n65 69\n15 69\n50 69\n63 69\n23 69\n49 69\n31 69\n58 69\n48 69\n38 69\n13 69\n41 69\n45 69\n40 69\n51 69\n14 69\n44 69\n10 69\n65 68\n15 68\n50 68\n63 68\n23 68\n49 68\n31 68\n58 68\n48 68\n38 68\n13 68\n41 68\n45 68\n40 68\n51 68\n14 68\n44 68\n10 68\n30 67\n65 67\n15 67\n50 67\n63 67\n23 67\n49 67\n31 67\n58 67\n48 67\n38 67\n13 67\n41 67\n45 67\n40 67\n51 67\n14 67\n44 67\n10 67\n52 66\n56 66\n18 66\n2 66\n25 66\n57 66\n46 66\n35 66\n55 66\n30 66\n65 66\n15 66\n50 66\n63 66\n23 66\n49 66\n31 66\n58 66\n48 66\n38 66\n13 66\n41 66\n45 66\n40 66\n51 66\n14 66\n44 66\n10 66\n15 65\n50 65\n63 65\n23 65\n49 65\n31 65\n58 65\n48 65\n38 65\n13 65\n41 65\n45 65\n40 65\n51 65\n14 65\n44 65\n10 65\n47 64\n33 64\n8 64\n32 64\n19 64\n37 64\n39 64\n9 64\n17 64\n6 64\n22 64\n29 64\n28 64\n60 64\n43 64\n12 64\n34 64\n59 64\n21 64\n7 64\n11 64\n62 64\n26 64\n16 64\n61 64\n27 64\n52 64\n56 64\n18 64\n2 64\n25 64\n57 64\n46 64\n35 64\n55 64\n30 64\n15 64\n50 64\n63 64\n23 64\n49 64\n31 64\n58 64\n48 64\n38 64\n13 64\n41 64\n45 64\n40 64\n51 64\n14 64\n44 64\n10 64\n23 63\n49 63\n31 63\n58 63\n48 63\n38 63\n13 63\n41 63\n45 63\n40 63\n51 63\n14 63\n44 63\n10 63\n26 62\n16 62\n61 62\n27 62\n52 62\n56 62\n18 62\n2 62\n25 62\n57 62\n46 62\n35 62\n55 62\n30 62\n15 62\n50 62\n23 62\n49 62\n31 62\n58 62\n48 62\n38 62\n13 62\n41 62\n45 62\n40 62\n51 62\n14 62\n44 62\n10 62\n27 61\n52 61\n56 61\n18 61\n2 61\n25 61\n57 61\n46 61\n35 61\n55 61\n30 61\n15 61\n50 61\n23 61\n49 61\n31 61\n58 61\n48 61\n38 61\n13 61\n41 61\n45 61\n40 61\n51 61\n14 61\n44 61\n10 61\n43 60\n12 60\n34 60\n59 60\n21 60\n7 60\n11 60\n26 60\n16 60\n27 60\n52 60\n56 60\n18 60\n2 60\n25 60\n57 60\n46 60\n35 60\n55 60\n30 60\n15 60\n50 60\n23 60\n49 60\n31 60\n58 60\n48 60\n38 60\n13 60\n41 60\n45 60\n40 60\n51 60\n14 60\n44 60\n10 60\n21 59\n7 59\n11 59\n26 59\n16 59\n27 59\n52 59\n56 59\n18 59\n2 59\n25 59\n57 59\n46 59\n35 59\n55 59\n30 59\n15 59\n50 59\n23 59\n49 59\n31 59\n58 59\n48 59\n38 59\n13 59\n41 59\n45 59\n40 59\n51 59\n14 59\n44 59\n10 59\n48 58\n38 58\n13 58\n41 58\n45 58\n40 58\n51 58\n14 58\n44 58\n10 58\n46 57\n35 57\n55 57\n30 57\n15 57\n50 57\n23 57\n49 57\n31 57\n48 57\n38 57\n13 57\n41 57\n45 57\n40 57\n51 57\n14 57\n44 57\n10 57\n18 56\n2 56\n25 56\n46 56\n35 56\n55 56\n30 56\n15 56\n50 56\n23 56\n49 56\n31 56\n48 56\n38 56\n13 56\n41 56\n45 56\n40 56\n51 56\n14 56\n44 56\n10 56\n30 55\n15 55\n50 55\n23 55\n49 55\n31 55\n48 55\n38 55\n13 55\n41 55\n45 55\n40 55\n51 55\n14 55\n44 55\n10 55\n4 54\n24 54\n53 54\n1 54\n3 54\n20 54\n5 54\n47 54\n33 54\n8 54\n32 54\n19 54\n37 54\n39 54\n9 54\n17 54\n6 54\n22 54\n29 54\n28 54\n43 54\n12 54\n34 54\n21 54\n7 54\n11 54\n26 54\n16 54\n27 54\n52 54\n18 54\n2 54\n25 54\n46 54\n35 54\n30 54\n15 54\n50 54\n23 54\n49 54\n31 54\n48 54\n38 54\n13 54\n41 54\n45 54\n40 54\n51 54\n14 54\n44 54\n10 54\n1 53\n3 53\n20 53\n5 53\n47 53\n33 53\n8 53\n32 53\n19 53\n37 53\n39 53\n9 53\n17 53\n6 53\n22 53\n29 53\n28 53\n43 53\n12 53\n34 53\n21 53\n7 53\n11 53\n26 53\n16 53\n27 53\n52 53\n18 53\n2 53\n25 53\n46 53\n35 53\n30 53\n15 53\n50 53\n23 53\n49 53\n31 53\n48 53\n38 53\n13 53\n41 53\n45 53\n40 53\n51 53\n14 53\n44 53\n10 53\n18 52\n2 52\n25 52\n46 52\n35 52\n30 52\n15 52\n50 52\n23 52\n49 52\n31 52\n48 52\n38 52\n13 52\n41 52\n45 52\n40 52\n51 52\n14 52\n44 52\n10 52\n14 51\n44 51\n10 51\n23 50\n49 50\n31 50\n48 50\n38 50\n13 50\n41 50\n45 50\n40 50\n14 50\n44 50\n10 50\n31 49\n48 49\n38 49\n13 49\n41 49\n45 49\n40 49\n14 49\n44 49\n10 49\n38 48\n13 48\n41 48\n45 48\n40 48\n14 48\n44 48\n10 48\n33 47\n8 47\n32 47\n19 47\n37 47\n39 47\n9 47\n17 47\n6 47\n22 47\n29 47\n28 47\n43 47\n12 47\n34 47\n21 47\n7 47\n11 47\n26 47\n16 47\n27 47\n18 47\n2 47\n25 47\n46 47\n35 47\n30 47\n15 47\n23 47\n31 47\n38 47\n13 47\n41 47\n45 47\n40 47\n14 47\n44 47\n10 47\n35 46\n30 46\n15 46\n23 46\n31 46\n38 46\n13 46\n41 46\n45 46\n40 46\n14 46\n44 46\n10 46\n40 45\n14 45\n44 45\n10 45\n10 44\n12 43\n34 43\n21 43\n7 43\n11 43\n26 43\n16 43\n27 43\n18 43\n2 43\n25 43\n35 43\n30 43\n15 43\n23 43\n31 43\n38 43\n13 43\n41 43\n40 43\n14 43\n10 43\n4 42\n24 42\n1 42\n3 42\n20 42\n5 42\n33 42\n8 42\n32 42\n19 42\n37 42\n39 42\n9 42\n17 42\n6 42\n22 42\n29 42\n28 42\n12 42\n34 42\n21 42\n7 42\n11 42\n26 42\n16 42\n27 42\n18 42\n2 42\n25 42\n35 42\n30 42\n15 42\n23 42\n31 42\n38 42\n13 42\n41 42\n40 42\n14 42\n10 42\n40 41\n14 41\n10 41\n14 40\n10 40\n9 39\n17 39\n6 39\n22 39\n29 39\n28 39\n12 39\n34 39\n21 39\n7 39\n11 39\n26 39\n16 39\n27 39\n18 39\n2 39\n25 39\n35 39\n30 39\n15 39\n23 39\n31 39\n38 39\n13 39\n14 39\n10 39\n13 38\n14 38\n10 38\n9 37\n17 37\n6 37\n22 37\n29 37\n28 37\n12 37\n34 37\n21 37\n7 37\n11 37\n26 37\n16 37\n27 37\n18 37\n2 37\n25 37\n35 37\n30 37\n15 37\n23 37\n31 37\n13 37\n14 37\n10 37\n4 36\n24 36\n1 36\n3 36\n20 36\n5 36\n33 36\n8 36\n32 36\n19 36\n9 36\n17 36\n6 36\n22 36\n29 36\n28 36\n12 36\n34 36\n21 36\n7 36\n11 36\n26 36\n16 36\n27 36\n18 36\n2 36\n25 36\n35 36\n30 36\n15 36\n23 36\n31 36\n13 36\n14 36\n10 36\n30 35\n15 35\n23 35\n31 35\n13 35\n14 35\n10 35\n21 34\n7 34\n11 34\n26 34\n16 34\n27 34\n18 34\n2 34\n25 34\n30 34\n15 34\n23 34\n31 34\n13 34\n14 34\n10 34\n8 33\n32 33\n19 33\n9 33\n17 33\n6 33\n22 33\n29 33\n28 33\n12 33\n21 33\n7 33\n11 33\n26 33\n16 33\n27 33\n18 33\n2 33\n25 33\n30 33\n15 33\n23 33\n31 33\n13 33\n14 33\n10 33\n19 32\n9 32\n17 32\n6 32\n22 32\n29 32\n28 32\n12 32\n21 32\n7 32\n11 32\n26 32\n16 32\n27 32\n18 32\n2 32\n25 32\n30 32\n15 32\n23 32\n31 32\n13 32\n14 32\n10 32\n13 31\n14 31\n10 31\n15 30\n23 30\n13 30\n14 30\n10 30\n28 29\n12 29\n21 29\n7 29\n11 29\n26 29\n16 29\n27 29\n18 29\n2 29\n25 29\n15 29\n23 29\n13 29\n14 29\n10 29\n12 28\n21 28\n7 28\n11 28\n26 28\n16 28\n27 28\n18 28\n2 28\n25 28\n15 28\n23 28\n13 28\n14 28\n10 28\n18 27\n2 27\n25 27\n15 27\n23 27\n13 27\n14 27\n10 27\n16 26\n18 26\n2 26\n25 26\n15 26\n23 26\n13 26\n14 26\n10 26\n15 25\n23 25\n13 25\n14 25\n10 25\n1 24\n3 24\n20 24\n5 24\n8 24\n19 24\n9 24\n17 24\n6 24\n22 24\n12 24\n21 24\n7 24\n11 24\n16 24\n18 24\n2 24\n15 24\n23 24\n13 24\n14 24\n10 24\n13 23\n14 23\n10 23\n12 22\n21 22\n7 22\n11 22\n16 22\n18 22\n2 22\n15 22\n13 22\n14 22\n10 22\n7 21\n11 21\n16 21\n18 21\n2 21\n15 21\n13 21\n14 21\n10 21\n5 20\n8 20\n19 20\n9 20\n17 20\n6 20\n12 20\n7 20\n11 20\n16 20\n18 20\n2 20\n15 20\n13 20\n14 20\n10 20\n9 19\n17 19\n6 19\n12 19\n7 19\n11 19\n16 19\n18 19\n2 19\n15 19\n13 19\n14 19\n10 19\n2 18\n15 18\n13 18\n14 18\n10 18\n6 17\n12 17\n7 17\n11 17\n16 17\n2 17\n15 17\n13 17\n14 17\n10 17\n2 16\n15 16\n13 16\n14 16\n10 16\n13 15\n14 15\n10 15\n10 14\n10 13\n7 12\n11 12\n2 12\n10 12\n2 11\n10 11\n6 9\n7 9\n2 9\n6 8\n7 8\n2 8\n2 7\n2 6\n2 5\n1 4\n3 4\n2 4\n2 3\n"]}, "index": 8136}, {"input": "You are given the array a consisting of n positive (greater than zero) integers.\n\nIn one move, you can choose two indices i and j (i \u2260 j) such that the absolute difference between a_i and a_j is no more than one (|a_i - a_j| \u2264 1) and remove the smallest of these two elements. If two elements are equal, you can remove any of them (but exactly one).\n\nYour task is to find if it is possible to obtain the array consisting of only one element using several (possibly, zero) such moves or not.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 50) \u2014 the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the i-th element of a.\n\nOutput\n\nFor each test case, print the answer: \"YES\" if it is possible to obtain the array consisting of only one element using several (possibly, zero) moves described in the problem statement, or \"NO\" otherwise.\n\nExample\n\nInput\n\n\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\n\nOutput\n\n\nYES\nYES\nNO\nNO\nYES\n\nNote\n\nIn the first test case of the example, we can perform the following sequence of moves:\n\n  * choose i=1 and j=3 and remove a_i (so a becomes [2; 2]); \n  * choose i=1 and j=2 and remove a_j (so a becomes [2]). \n\n\n\nIn the second test case of the example, we can choose any possible i and j any move and it doesn't matter which element we remove.\n\nIn the third test case of the example, there is no way to get rid of 2 and 4", "output": "for s in[*open(0)][2::2]:a={*map(int,s.split())};print('YNEOS'[len(a)<=max(a)-min(a)::2])", "public_tests": {"input": ["5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n"], "output": ["YES\nYES\nNO\nNO\nYES\n"]}, "private_tests": {"input": ["2\n3\n1 2 3\n4\n1 2 3 4\n", "2\n3\n1 2 2\n4\n5 5 5 5\n", "5\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n", "1\n1\n114\n"], "output": ["YES\nYES\n", "YES\nYES\n", "YES\nNO\nYES\nYES\nYES\n", "YES\n"]}, "index": 8137}, {"input": "Yura has been walking for some time already and is planning to return home. He needs to get home as fast as possible. To do this, Yura can use the instant-movement locations around the city.\n\nLet's represent the city as an area of n \u00d7 n square blocks. Yura needs to move from the block with coordinates (s_x,s_y) to the block with coordinates (f_x,f_y). In one minute Yura can move to any neighboring by side block; in other words, he can move in four directions. Also, there are m instant-movement locations in the city. Their coordinates are known to you and Yura. Yura can move to an instant-movement location in no time if he is located in a block with the same coordinate x or with the same coordinate y as the location.\n\nHelp Yura to find the smallest time needed to get home.\n\nInput\n\nThe first line contains two integers n and m \u2014 the size of the city and the number of instant-movement locations (1 \u2264 n \u2264 10^9, 0 \u2264 m \u2264 10^5).\n\nThe next line contains four integers s_x s_y f_x f_y \u2014 the coordinates of Yura's initial position and the coordinates of his home ( 1 \u2264 s_x, s_y, f_x, f_y \u2264 n).\n\nEach of the next m lines contains two integers x_i y_i \u2014 coordinates of the i-th instant-movement location (1 \u2264 x_i, y_i \u2264 n).\n\nOutput\n\nIn the only line print the minimum time required to get home.\n\n", "output": "from heapq import*;import sys;F=9**99\np=lambda:map(int,sys.stdin.readline().split())\na=abs;N,M=p();A,B,C,D=p();e=[];g=[set()for _ in range(M+2)]\nfor i in range(M):x,y=p();g[0].add((i+2,min(a(x-A),a(y-B))));g[i+2].add((1,a(x-C)+a(y-D)));e.append((i+2,x,y))\nfor k in[1,2]:\n\te.sort(key=lambda x:x[k])\n\tfor(b,G,H),(i,x,y)in zip(e,e[1:]):c=x-G if k<2else y-H;g[i].add((b,c));g[b].add((i,c))\nd=[F]*(M+2);q=[(0,0)];d[0]=0\nwhile q:\n\tc,v=heappop(q)\n\tif d[v]<c:continue\n\tfor t,e in g[v]:\n\t\tif d[v]+e<d[t]:d[t]=d[v]+e;heappush(q,(d[t],t))\nprint(min(d[1],a(D-B)+a(C-A)))", "public_tests": {"input": ["84 5\n67 59 41 2\n39 56\n7 2\n15 3\n74 18\n22 7\n", "5 3\n1 1 5 5\n1 2\n4 1\n3 3\n"], "output": ["42\n", "5\n"]}, "private_tests": {"input": ["1 0\n1 1 1 1\n", "1000000000 0\n1 1000000000 1000000000 1\n", "49397978 9\n35828361 4692148 30832063 21157937\n38015170 25815246\n25302604 1245031\n35710367 30096200\n20411634 24957987\n31626304 14768886\n43944112 42021291\n14679371 40895905\n18936340 12122304\n48071293 32576660\n", "1000 0\n1000 1 1 1000\n", "88294752 4\n35290308 52335089 69408342 32650662\n53981397 84728746\n56670292 81664574\n16110353 77620219\n45476005 495904\n", "995078784 16\n623812784 347467913 233267735 582455459\n306396207 277980472\n78770458 786182235\n815219022 611815511\n786044046 363376661\n290398527 925153345\n846155104 388600335\n91118406 155695413\n287078777 918827034\n432395923 126620751\n52941102 329010981\n237509699 743843421\n556130019 602129300\n441860811 912490531\n65845315 380971409\n575577330 104368064\n962688269 452922228\n", "41323044 1\n28208465 38217978 31290636 25974675\n39500641 36959975\n", "40173958 3\n16116682 7224989 33857761 5761096\n26986287 15349000\n23222390 8295154\n5574952 21081873\n"], "output": ["0\n", "1999999998\n", "11385349\n", "1998\n", "53802461\n", "252255028\n", "15325474\n", "14239594\n"]}, "index": 8138}]
[{"input": "You are given a string s of length n consisting only of lowercase Latin letters.\n\nA substring of a string is a contiguous subsequence of that string. So, string \"forces\" is substring of string \"codeforces\", but string \"coder\" is not.\n\nYour task is to calculate the number of ways to remove exactly one substring from this string in such a way that all remaining characters are equal (the number of distinct characters either zero or one).\n\nIt is guaranteed that there is at least two different characters in s.\n\nNote that you can remove the whole string and it is correct. Also note that you should remove at least one character.\n\nSince the answer can be rather large (not very large though) print it modulo 998244353.\n\nIf you are Python programmer, consider using PyPy instead of Python when you submit your code.\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the string s.\n\nThe second line of the input contains the string s of length n consisting only of lowercase Latin letters.\n\nIt is guaranteed that there is at least two different characters in s.\n\nOutput\n\nPrint one integer \u2014 the number of ways modulo 998244353 to remove exactly one substring from s in such way that all remaining characters are equal.\n\n", "output": "input()\ns=input()\ni=j=2\nwhile s[i-1]==s[0]:i+=1\nwhile s[-j]==s[-1]:j+=1\nprint((i+j-1,i*j%998244353)[s[0]==s[-1]])", "public_tests": {"input": ["7\naacdeee\n", "2\naz\n", "4\nabaa\n"], "output": ["6\n", "3\n", "6\n"]}, "private_tests": {"input": ["23\nszsqqwareupmhkxlqwdtgbn\n", "7\nabcdaaa\n", "5\nabcde\n", "24\nbxstlxalhkcaguyydabgpyts\n", "420\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\n", "21\nltezwizhgfqhcwtonakgg\n", "6\nabacaa\n", "12\njrlxceyhybtb\n", "6\naaccaa\n", "5\naaacc\n", "87\nabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaaba\n", "15\naabbsorrybbabbb\n", "4\nabcd\n", "4\nhack\n", "23\nedsrnbduwoeyeaymvuhsokk\n", "5\nabcbb\n", "6\naaabab\n", "30\nlolimaginethisasanofficialtest\n", "10\naaaabbbbaa\n", "6\naabacc\n", "100\nbbbbbabbaaaaababbabaaaababbaaababbbabbbbbbbabbbbabbaaabbaababaabbbbbababbababaaaabbbbabbabababbaaaab\n", "3\nabc\n"], "output": ["3\n", "8\n", "3\n", "3\n", "421\n", "4\n", "6\n", "3\n", "9\n", "6\n", "4\n", "6\n", "3\n", "3\n", "4\n", "4\n", "5\n", "3\n", "15\n", "5\n", "12\n", "3\n"]}, "index": 0}, {"input": "You a captain of a ship. Initially you are standing in a point (x_1, y_1) (obviously, all positions in the sea can be described by cartesian plane) and you want to travel to a point (x_2, y_2). \n\nYou know the weather forecast \u2014 the string s of length n, consisting only of letters U, D, L and R. The letter corresponds to a direction of wind. Moreover, the forecast is periodic, e.g. the first day wind blows to the side s_1, the second day \u2014 s_2, the n-th day \u2014 s_n and (n+1)-th day \u2014 s_1 again and so on. \n\nShip coordinates change the following way:\n\n  * if wind blows the direction U, then the ship moves from (x, y) to (x, y + 1); \n  * if wind blows the direction D, then the ship moves from (x, y) to (x, y - 1); \n  * if wind blows the direction L, then the ship moves from (x, y) to (x - 1, y); \n  * if wind blows the direction R, then the ship moves from (x, y) to (x + 1, y). \n\n\n\nThe ship can also either go one of the four directions or stay in place each day. If it goes then it's exactly 1 unit of distance. Transpositions of the ship and the wind add up. If the ship stays in place, then only the direction of wind counts. For example, if wind blows the direction U and the ship moves the direction L, then from point (x, y) it will move to the point (x - 1, y + 1), and if it goes the direction U, then it will move to the point (x, y + 2).\n\nYou task is to determine the minimal number of days required for the ship to reach the point (x_2, y_2).\n\nInput\n\nThe first line contains two integers x_1, y_1 (0 \u2264 x_1, y_1 \u2264 10^9) \u2014 the initial coordinates of the ship.\n\nThe second line contains two integers x_2, y_2 (0 \u2264 x_2, y_2 \u2264 10^9) \u2014 the coordinates of the destination point.\n\nIt is guaranteed that the initial coordinates and destination point coordinates are different.\n\nThe third line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string s.\n\nThe fourth line contains the string s itself, consisting only of letters U, D, L and R.\n\nOutput\n\nThe only line should contain the minimal number of days required for the ship to reach the point (x_2, y_2).\n\nIf it's impossible then print \"-1\".\n\n", "output": "x1,y1=map(int,input().split())\nx2,y2=map(int,input().split())\nn=int(input())\ns=input()\nx,y,dx,dy=0,0,[0],[0]\nfor c in s:\n    if c=='U':\n        y+=1\n    elif c=='D':\n        y-=1\n    elif c=='L':\n        x-=1\n    else:\n        x+=1\n    dx.append(x)\n    dy.append(y)\nans,L,R=-1,0,10**15\nwhile L<=R:\n    M=(L+R)//2\n    x=M//n*dx[n]+dx[M%n]\n    y=M//n*dy[n]+dy[M%n]\n    if abs(x-(x2-x1))+abs(y-(y2-y1))<=M:\n        ans=M\n        R=M-1\n    else:\n        L=M+1\nprint(ans)\n", "public_tests": {"input": ["0 3\n0 0\n3\nUDD\n", "0 0\n4 6\n3\nUUU\n", "0 0\n0 1\n1\nL\n"], "output": ["3\n", "5\n", "-1\n"]}, "private_tests": {"input": ["0 1\n2 1\n1\nR\n", "0 0\n0 1\n2\nLU\n", "0 0\n1000000000 1000000000\n2\nDR\n"], "output": ["1\n", "2\n", "2000000000\n"]}, "index": 1}, {"input": "Recently Lynyrd and Skynyrd went to a shop where Lynyrd bought a permutation p of length n, and Skynyrd bought an array a of length m, consisting of integers from 1 to n. \n\nLynyrd and Skynyrd became bored, so they asked you q queries, each of which has the following form: \"does the subsegment of a from the l-th to the r-th positions, inclusive, have a subsequence that is a cyclic shift of p?\" Please answer the queries.\n\nA permutation of length n is a sequence of n integers such that each integer from 1 to n appears exactly once in it.\n\nA cyclic shift of a permutation (p_1, p_2, \u2026, p_n) is a permutation (p_i, p_{i + 1}, \u2026, p_{n}, p_1, p_2, \u2026, p_{i - 1}) for some i from 1 to n. For example, a permutation (2, 1, 3) has three distinct cyclic shifts: (2, 1, 3), (1, 3, 2), (3, 2, 1).\n\nA subsequence of a subsegment of array a from the l-th to the r-th positions, inclusive, is a sequence a_{i_1}, a_{i_2}, \u2026, a_{i_k} for some i_1, i_2, \u2026, i_k such that l \u2264 i_1 < i_2 < \u2026 < i_k \u2264 r.\n\nInput\n\nThe first line contains three integers n, m, q (1 \u2264 n, m, q \u2264 2 \u22c5 10^5) \u2014 the length of the permutation p, the length of the array a and the number of queries.\n\nThe next line contains n integers from 1 to n, where the i-th of them is the i-th element of the permutation. Each integer from 1 to n appears exactly once.\n\nThe next line contains m integers from 1 to n, the i-th of them is the i-th element of the array a.\n\nThe next q lines describe queries. The i-th of these lines contains two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 m), meaning that the i-th query is about the subsegment of the array from the l_i-th to the r_i-th positions, inclusive.\n\nOutput\n\nPrint a single string of length q, consisting of 0 and 1, the digit on the i-th positions should be 1, if the subsegment of array a from the l_i-th to the r_i-th positions, inclusive, contains a subsequence that is a cyclic shift of p, and 0 otherwise.\n\n", "output": "# \u6ce8\u610farray cache\u9806\u5e8f QQ\nfrom math import log, floor\n\n\"\"\"\nclass RMQ:\n    '''\n    maximum version rmq\n\n    query: max([l, r])\n    '''\n    \n    def __init__(self, nums):\n        size = floor(log(len(nums)) // log(2)) + 1\n        self.nums = [nums]\n        \n        for i in range(1, size):\n            last = self.nums[-1]\n\n            delta = 1 << (i-1)\n            self.nums.append([max(last[j], last[j + delta])\n                              for j in range(len(nums) - 2 * delta + 1)]) \n    \n    def query(self, l, r):\n        delta = floor(log(r - l + 1) // log(2))\n        \n        return max(self.nums[delta][l], self.nums[delta][r-2**delta+1])\n\"\"\"\n\nn, m, q = map(int, input().split())\nperms = list(map(int, input().split()))\nnums = list(map(int, input().split()))\n\nlogit = floor(log(n) // log(2)) + 1\n\ncurrent_max_index = [-1]*(n+1)\nprevs = [[-1]*m for i in range(logit)]\n\n\nprev_map = [-2]*(n+1)\n\nfor i, j in zip(perms[1:]+[perms[0]], perms):\n    prev_map[i] = j\n\n# Update the one step case\n\nfor idx, ele in enumerate(nums):\n    prevs[0][idx] = current_max_index[prev_map[ele]]\n    current_max_index[ele] = idx\n\n# Update the n_step table\n\nfor i in range(1, logit):\n    for idx, ele in enumerate(nums):\n        if prevs[i-1][idx] != -1:\n            prevs[i][idx] = prevs[i-1][prevs[i-1][idx]]\n\nprev_n = []\n\n# Create the update sequence\n\nuse = [i for i in range(n.bit_length()) if 1 & (n - 1) >> i]\nmax_pre = -1\nran = [-1] * (m+2)\nfor i in range(m):\n    t = i \n    for dim in use:\n        t = prevs[dim][t]\n        if t == -1:\n            break\n    max_pre = max(t, max_pre)\n    ran[i] = max_pre\n\n\"\"\"\nfor i in range(m):\n    remain = n - 1\n    idx = i\n    while remain and idx != -1:\n        ma = floor(log(remain) // log(2))\n        idx = prevs[ma][idx]\n        remain -= 2**ma\n    prev_n.append(idx)\n\"\"\" \n\n#rmq = RMQ(prev_n)\n\nans = [None]*q\nfor i in range(q):\n    l, r = map(int, input().split())\n    ans[i] = str(int(l - 1 <= ran[r-1]))\nprint(\"\".join(ans))\n", "public_tests": {"input": ["2 4 3\n2 1\n1 1 2 2\n1 2\n2 3\n3 4\n", "3 6 3\n2 1 3\n1 2 3 1 2 3\n1 5\n2 6\n3 5\n"], "output": ["010\n", "110\n"]}, "private_tests": {"input": ["1 1 1\n1\n1\n1 1\n"], "output": ["1\n"]}, "index": 2}, {"input": "During a normal walk in the forest, Katie has stumbled upon a mysterious code! However, the mysterious code had some characters unreadable. She has written down this code as a string c consisting of lowercase English characters and asterisks (\"*\"), where each of the asterisks denotes an unreadable character. Excited with her discovery, Katie has decided to recover the unreadable characters by replacing each asterisk with arbitrary lowercase English letter (different asterisks might be replaced with different letters).\n\nKatie has a favorite string s and a not-so-favorite string t and she would love to recover the mysterious code so that it has as many occurrences of s as possible and as little occurrences of t as possible. Formally, let's denote f(x, y) as the number of occurrences of y in x (for example, f(aababa, ab) = 2). Katie wants to recover the code c' conforming to the original c, such that f(c', s) - f(c', t) is largest possible. However, Katie is not very good at recovering codes in general, so she would like you to help her out.\n\nInput\n\nThe first line contains string c (1 \u2264 |c| \u2264 1000) \u2014 the mysterious code . It is guaranteed that c consists of lowercase English characters and asterisks \"*\" only.\n\nThe second and third line contain strings s and t respectively (1 \u2264 |s|, |t| \u2264 50, s \u2260 t). It is guaranteed that s and t consist of lowercase English characters only.\n\nOutput\n\nPrint a single integer \u2014 the largest possible value of f(c', s) - f(c', t) of the recovered code.\n\n", "output": "import sys\nfrom array import array  # noqa: F401\nfrom typing import List, Tuple, TypeVar, Generic, Sequence, Union  # noqa: F401\n\n\ndef input():\n    return sys.stdin.buffer.readline().decode('utf-8')\n\n\ndef build_next_table(s):\n    s = '*' + s + '*'\n    n = len(s) - 1\n    kmp = [0] * (n + 1)\n    next_table = [[0] * 26 for _ in range(n + 1)]\n\n    for i in range(2, n + 1):\n        cur = kmp[i - 1]\n        while cur > 0 and s[cur + 1] != s[i]:\n            cur = kmp[cur]\n        if s[cur + 1] == s[i]:\n            cur += 1\n        kmp[i] = cur\n\n    alphabet = [chr(cc) for cc in range(97, 123)]\n    for i in range(n):\n        for j, c in enumerate(alphabet):\n            cur = i\n            while 0 < cur and s[cur + 1] != c:\n                cur = kmp[cur]\n            if s[cur + 1] == c:\n                cur += 1\n            next_table[i][j] = cur\n\n    return next_table\n\n\ndef main():\n    code = input().rstrip()\n    s, t = input().rstrip(), input().rstrip()\n    table_s = build_next_table(s)\n    table_t = build_next_table(t)\n\n    n, m, l = len(code), len(s), len(t)\n    minf = -10**9\n    dp = [[array('i', [minf]) * (l + 1) for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0][0] = 0\n    alphabet = list(range(26))\n\n    for i in range(n):\n        itr = [ord(code[i]) - 97] if code[i] != '*' else alphabet\n        for j in range(m + 1):\n            for k in range(l + 1):\n                for cc in itr:\n                    nj, nk = table_s[j][cc], table_t[k][cc]\n                    dp[i + 1][nj][nk] = max(dp[i + 1][nj][nk], dp[i][j][k] + (1 if nj == m else 0) - (1 if nk == l else 0))\n\n    ans = minf\n    for j in range(m + 1):\n        for k in range(l + 1):\n            ans = max(ans, dp[n][j][k])\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "public_tests": {"input": ["***\ncc\nz\n", "*****\nkatie\nshiro\n", "*a*\nbba\nb\n", "caat\ncaat\na\n"], "output": ["2\n", "1\n", "0\n", "-1\n"]}, "private_tests": {"input": ["kljab**abs\nab\nba\n", "***********************************************************************************************************************************************************************\ngcoldfocaplzqobdv\nhuptdsgpmrqrcjchuyxnxncoivvtgkpuhdlvdkfzkrswwp\n", "uhnuhbzynlgtze\ndvxryfxdxmgpgiwmjetni\nnauwcccxaoajxjyvulgdnhwglfqkswvqgdvajgigylbgf\n", "************************************************************************************************************************\nariyyznygtfxtnaxxejoenrlbxjrgewsvvwef\nejzrbx\n", "dubndmbxmazzgvqofbdtwfpesiqqzuaqjtx*fxbfksafczseiimhrlqgdrvkwivmifsqmgjvecdxgwjttk*qbmbdxsfvl*fodmkajmufhqmcfgiseosueawianfigimafwihljindjoaxr\njlvnqsqlwsn\nvvgzsiladhszlgndxenuczdymldzmdmpmpxggocbmsbwxifxv\n", "*******************************************************************************************************************************************************************************************************************************************************************************************************************************\nobyhgafjxaecbaxrioqvmmms\ntbfbwoabkpbrgkcbvngjfhwictubkhwesgnnxuk\n", "***\ncat\na\n", "***********************************************************************************************************************************************************************************************\nmcjodtwlsdomdhfydxodiszqjo\nuqrqamtvcpwoiuahpinwptqvqroirdbezrungjcnfeo\n", "*\na\nb\n", "*******************************************************************************************************************************************************************************************************************************************************************************************************\neljpuxrsycy\ntlsqlpundrihjjdphrahnldtsxybsmytgzdgzsatpeekkcjepe\n", "abcdefghijklmnopqrstuwxyz\nabc\ndef\n", "*\nb\na\n", "*********\nabc\nbca\n", "ihllkwwcucecbjhs*wbgqgwjx*qfcgrohorzkxzjmjhksijtvmccvjtkjs*ubmbbeb*xxscizoglpdrq*ooqygqcieat*mcasbuym*i*vadlvbwplbosfmtzuutpthalrhzlqh*dldga*fdtpxpllqryewkbnhwzhfplwlnjpayxhhhxdwopctj*lg**didjgsvbsxrlugumtfzciozwgbaqegnkhckake*wckqrtlzctncuqljgeunmzrxanujqfjqdmyraplsosl*jakvnurbjgtoahwolvyni\nllv\nqscrflmsmhqyjppcu\n", "wcfteosuhqfgokvuctvnpiiudq**ephyfyjzitxsxedsuxwlrwqwctphp*xfkfceghepmgheqazdziqjqphdtc*bryobgqzuzouoqzfcfizbiayvcryyfqsfqzwzdhmexgdmr*fvwlpuogxcpqvvzwdvhvnc*rvkllcujibmregytsyps*zvumiklue*oimvjfqshacizmdxzrupqylcjzom\ndxfzbdrelqidmbkgqjsobqtjqoar\nvbtbkqfvprnobfpbdqpomudockgjunicbu\n", "*********************************************************************************************************************************************************************************************************************************************************************************\nxoadcolwpehmyzsptiqazrzojlhlwswhfdsvg\nslhmxahkbiauzgzl\n", "b**\nbaa\na\n", "abcabcabc*\nabc\nbca\n", "etehthcnoruiktkqmvkxnejtdpqfwjkguaegsowracaiyhzamdktcfdgzl*efdbql*erqi*hrryxatgqfyqyu*aonthpclehzqesiymhwspcmggqgrgapvtgrgcmxzeuhjbjamnyh*ppowhiadxtskvyqzaysrm*xfqzwo\nrlzliegwtisvxtynsynpmfxv\nzxqcsnmiqpikvqwqoqueqeuxpsxoupysymjkyackal\n"], "output": ["2\n", "9\n", "0\n", "3\n", "0\n", "13\n", "0\n", "7\n", "1\n", "26\n", "0\n", "1\n", "2\n", "0\n", "0\n", "7\n", "0\n", "1\n", "0\n"]}, "index": 3}, {"input": "Ujan has a lot of numbers in his boxes. He likes order and balance, so he decided to reorder the numbers.\n\nThere are k boxes numbered from 1 to k. The i-th box contains n_i integer numbers. The integers can be negative. All of the integers are distinct.\n\nUjan is lazy, so he will do the following reordering of the numbers exactly once. He will pick a single integer from each of the boxes, k integers in total. Then he will insert the chosen numbers \u2014 one integer in each of the boxes, so that the number of integers in each box is the same as in the beginning. Note that he may also insert an integer he picked from a box back into the same box.\n\nUjan will be happy if the sum of the integers in each box is the same. Can he achieve this and make the boxes perfectly balanced, like all things should be?\n\nInput\n\nThe first line contains a single integer k (1 \u2264 k \u2264 15), the number of boxes. \n\nThe i-th of the next k lines first contains a single integer n_i (1 \u2264 n_i \u2264 5 000), the number of integers in box i. Then the same line contains n_i integers a_{i,1}, \u2026, a_{i,n_i} (|a_{i,j}| \u2264 10^9), the integers in the i-th box. \n\nIt is guaranteed that all a_{i,j} are distinct.\n\nOutput\n\nIf Ujan cannot achieve his goal, output \"No\" in a single line. Otherwise in the first line output \"Yes\", and then output k lines. The i-th of these lines should contain two integers c_i and p_i. This means that Ujan should pick the integer c_i from the i-th box and place it in the p_i-th box afterwards.\n\nIf there are multiple solutions, output any of those.\n\nYou can print each letter in any case (upper or lower).\n\n", "output": "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\nk = int(input())\nd = {}\naa = []\nsa = []\nfor i in range(k):\n    ni, *a = map(int, input().split())\n    for ai in a:\n        d[ai] = i\n    aa.append(a)\n    sa.append(sum(a))\n\ns = sum(sa)\nif s%k != 0:\n    print(\"No\")\n    exit()\ns //= k\n\ndef calc_next(i, aij):\n    bij = s-sa[i]+aij\n    if bij not in d:\n        return -1, bij\n    else:\n        return d[bij], bij\n\ndef loop_to_num(loop):\n    ret = 0\n    for i in reversed(range(k)):\n        ret <<= 1\n        ret += loop[i]\n    return ret\n\nloop_dict = {}\nused = set()\nfor i in range(k):\n    for aij in aa[i]:\n        if aij in used:\n            continue\n\n        loop = [0]*k\n        num = [float(\"Inf\")]*k\n        start_i = i\n        start_aij = aij\n        j = i\n\n        loop[j] = 1\n        num[j] = aij\n        used.add(aij)\n\n        exist = False\n        for _ in range(100):\n            j, aij = calc_next(j, aij)\n            if j == -1:\n                break\n            #used.add(aij)\n            if loop[j] == 0:\n                loop[j] = 1\n                num[j] = aij\n            else:\n                if j == start_i and aij == start_aij:\n                    exist = True\n                break\n        if exist:\n            m = loop_to_num(loop)\n            loop_dict[m] = tuple(num)\n            for numi in num:\n                if numi != float(\"inf\"):\n                    used.add(numi)\n\nmask = 1<<k\nfor state in range(1, mask):\n    if state in loop_dict:\n        continue\n    j = (state-1)&state\n    while j:\n        i = state^j\n        if i in loop_dict and j in loop_dict:\n            tp = tuple(min(loop_dict[i][l], loop_dict[j][l]) for l in range(k))\n            loop_dict[state] = tp\n            break\n        j = (j-1)&state\n\nif mask-1 not in loop_dict:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    t = loop_dict[mask-1]\n    ns = [sa[i]-t[i] for i in range(k)]\n    need = [s - ns[i] for i in range(k)]\n    for i in range(k):\n        print(t[i], need.index(t[i])+1)", "public_tests": {"input": ["2\n2 -10 10\n2 0 -20\n", "2\n2 3 -2\n2 -1 5\n", "4\n3 1 7 4\n2 3 2\n2 8 5\n1 10\n"], "output": ["Yes\n-10 2\n-20 1\n", "No\n", "Yes\n7 2\n2 3\n5 1\n10 4\n"]}, "private_tests": {"input": ["1\n1 0\n", "2\n2 1 2\n10 0 1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 589934621\n", "3\n1 20\n2 30 40\n3 50 60 80\n", "5\n10 -251 650 475 -114 364 -75754 -982 -532 -151 -484\n10 -623 -132 -317561 -438 20 -275 -323 -530089 -311 -587\n10 450900 -519 903 -401 -789 -606529 277 -267 -682 -161\n10 -246 873 -641 838 719 234 789 -74 -287288 -772972\n10 186 741 -927 -866 -855 578 -1057019 202 162962 -458\n", "4\n3 80 1 10\n3 52 19 24\n3 27 46 29\n3 74 13 25\n", "2\n5 -1000000000 999999999 -999999998 999999997 0\n5 1000000000 -999999999 999999998 -999999997 4\n", "3\n3 1 3 100\n2 4 104\n2 2 102\n"], "output": ["Yes\n0 1\n", "No\n", "No\n", "Yes\n650 3\n-530089 1\n450900 5\n-287288 2\n162962 4\n", "No\n", "Yes\n0 2\n4 1\n", "No\n"]}, "index": 4}, {"input": "One unknown hacker wants to get the admin's password of AtForces testing system, to get problems from the next contest. To achieve that, he sneaked into the administrator's office and stole a piece of paper with a list of n passwords \u2014 strings, consists of small Latin letters.\n\nHacker went home and started preparing to hack AtForces. He found that the system contains only passwords from the stolen list and that the system determines the equivalence of the passwords a and b as follows:\n\n  * two passwords a and b are equivalent if there is a letter, that exists in both a and b; \n  * two passwords a and b are equivalent if there is a password c from the list, which is equivalent to both a and b. \n\n\n\nIf a password is set in the system and an equivalent one is applied to access the system, then the user is accessed into the system.\n\nFor example, if the list contain passwords \"a\", \"b\", \"ab\", \"d\", then passwords \"a\", \"b\", \"ab\" are equivalent to each other, but the password \"d\" is not equivalent to any other password from list. In other words, if:\n\n  * admin's password is \"b\", then you can access to system by using any of this passwords: \"a\", \"b\", \"ab\"; \n  * admin's password is \"d\", then you can access to system by using only \"d\". \n\n\n\nOnly one password from the list is the admin's password from the testing system. Help hacker to calculate the minimal number of passwords, required to guaranteed access to the system. Keep in mind that the hacker does not know which password is set in the system.\n\nInput\n\nThe first line contain integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 number of passwords in the list. Next n lines contains passwords from the list \u2013 non-empty strings s_i, with length at most 50 letters. Some of the passwords may be equal.\n\nIt is guaranteed that the total length of all passwords does not exceed 10^6 letters. All of them consist only of lowercase Latin letters.\n\nOutput\n\nIn a single line print the minimal number of passwords, the use of which will allow guaranteed to access the system.\n\n", "output": "import sys\ninput=sys.stdin.readline\nn=int(input())\ndef find(x):\n    if x!=f[x]:\n        f[x]=find(f[x])\n    return f[x]\nf=list(range(n+26))\nfor i in range(0,n):\n\tfor j in set(input().rstrip()):\n\t\tf[find(ord(j)-97)]=find(i+26)\nans=0\nfor i in range(26,n+26):\n\tif f[i]==i:\n\t\tans+=1\nprint(ans)", "public_tests": {"input": ["1\ncodeforces\n", "3\nab\nbc\nabc\n", "4\na\nb\nab\nd\n"], "output": ["1\n", "1\n", "2\n"]}, "private_tests": {"input": ["3\nac\nbde\nbc\n", "5\nyyyyyyyyyyyyyyyyyyyyyyyyyyy\nxxxxxx\nzz\nzzzzzzzzzzz\nzzzzzzzzzz\n", "3\nab\ncd\nda\n", "2\nab\nad\n", "5\nnznnnznnnnznnnnznzznnnznnznnnnnnnzzn\nljjjjlljlllllj\nduuuudududduuuuududdddduduudduddududdduuuudduddd\nssssssssss\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "3\nasd\nqwe\naq\n", "4\na\nac\nb\ncb\n", "3\naaa\nbbb\nab\n", "5\nuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\nxdxxdxxddxdxdxxdddxdddxxxddx\npyfpffffyyfppyfffpypp\nzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n", "3\nab\nbc\nca\n", "7\na\nb\nc\nd\nab\ncd\nabcd\n", "5\naaa\nbbb\nccc\nddd\nab\n", "5\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\nff\nsssssssssssssssssssssss\nwwwwwww\nxxxxxxxx\n", "10\ngzjzzjjjzjzgjgzzgzjjjzzzggjjggggjjzzgzz\nyyyyyyyyyyyyyy\nuuuuuuuuuuuuuuuuuuuuuuuu\nssssssssssssssssssssss\nuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\ngzjgjzzzjgjzggjjjjjzjzzgjgjzgjgjzzjjggzgjzgjgj\ny\nsssssssssss\ngzjzgjjjzggjgzjzgzzz\nsssssssssssssssssssssssssssssss\n"], "output": ["1\n", "3\n", "1\n", "1\n", "5\n", "1\n", "1\n", "1\n", "4\n", "1\n", "1\n", "3\n", "5\n", "4\n"]}, "index": 5}, {"input": "Returning back to problem solving, Gildong is now studying about palindromes. He learned that a palindrome is a string that is the same as its reverse. For example, strings \"pop\", \"noon\", \"x\", and \"kkkkkk\" are palindromes, while strings \"moon\", \"tv\", and \"abab\" are not. An empty string is also a palindrome.\n\nGildong loves this concept so much, so he wants to play with it. He has n distinct strings of equal length m. He wants to discard some of the strings (possibly none or all) and reorder the remaining strings so that the concatenation becomes a palindrome. He also wants the palindrome to be as long as possible. Please help him find one.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 50) \u2014 the number of strings and the length of each string.\n\nNext n lines contain a string of length m each, consisting of lowercase Latin letters only. All strings are distinct.\n\nOutput\n\nIn the first line, print the length of the longest palindrome string you made.\n\nIn the second line, print that palindrome. If there are multiple answers, print any one of them. If the palindrome is empty, print an empty line or don't print this line at all.\n\n", "output": "a=[]\nr=s=''\nfor _ in[0]*int(input().split()[0]):\n x=input();y=x[::-1];r+=x*(y in a);a+=x,\n if x==y:s=x\nr=r+s+r[::-1]\nprint(len(r),r)", "public_tests": {"input": ["4 2\noo\nox\nxo\nxx\n", "3 5\nhello\ncodef\norces\n", "3 3\ntab\none\nbat\n", "9 4\nabab\nbaba\nabcd\nbcde\ncdef\ndefg\nwxyz\nzyxw\nijji\n"], "output": ["6\noxooxo\n", "0\n", "6\ntabbat\n", "20\nababwxyzijjizyxwbaba\n"]}, "private_tests": {"input": ["17 14\ntzmqqlttfuopox\ndlgvbiydlxmths\ndxnyijdxjuvvej\nnfxqnqtffqnojm\nrkfvitydhceoum\ndycxhtklifleqe\nldjflcylhmjxub\nurgabqqfljxnps\nshtmxldyibvgld\nosjuvluhehilmn\nwtdlavffvaldtw\nabjixlbuwfyafp\naojogsmvdzyorp\nsicdoeogurcwor\nocxbhsfmhmumef\ndqxmxaadjwhqus\nclwotgqvdwcbar\n", "19 6\nbbsssb\nbbsbsb\nbbssbb\nbssbbs\nsbbbsb\nsbbssb\nsbsbss\nssbsbb\nbssssb\nsssbsb\nbbbbbs\nsssbss\nbsssbb\nbssbbb\nsssssb\nbbbsbs\nsbbbbb\nbbbsss\nssbbbs\n", "1 50\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "13 4\nhhhm\nmhmh\nmmhh\nhmhm\nmhhm\nhmmm\nhhhh\nmmmm\nhmmh\nhhmm\nmmhm\nhhmh\nmhmm\n", "24 17\ngdnaevfczjayllndr\nwmuarvqwpbhuznpxz\nlurusjuzrkxmdvfhw\nyckftntrvdatssgbb\nzxpnzuhbpwqvraumw\nwaxuutbtbtbtuuxaw\ndgwjcwilgyrgpohnr\ntrcttthipihtttcrt\ncmbovzvfgdqlfkfqp\nqbgqnzkhixnnvzvqi\nqiursxnedmveeuxdq\nrdnllyajzcfveandg\nbzwxilleapxzcxmde\ncxcfjzlfdtytldtqf\nyhukzlipwduzwevmg\nrorwbyuksboagybcn\nambwnlhroyhjfrviw\nuhkfyflnnnlfyfkhu\noqujycxjdwilbxfuw\nkjvmprbgqlgptzdcg\nntvbvmwtoljxorljp\nwivrfjhyorhlnwbma\nukeawbyxrsrsgdhjg\nlkstfcrcpwzcybdfp\n", "9 2\naa\nii\nkk\nia\nak\nik\nai\nka\nki\n", "1 50\naaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaa\n", "21 16\nivmdykxgzpmpsojj\nlsacbvwkzrihbxae\nwcwvukyhtrgmimaq\nebzvsaushchiqugo\njnpxszhkapzlexcg\nishppvuydabnmcor\ndublllwaawlllbud\nnznmhodswuhvcybg\nvfucufwyywfucufv\nllxpiainiamylrwm\nbgfembyqiswnxheb\nxarywsepptlzqywj\nicpjbiovfkhxbnkk\nbwndaszybdwlllbn\nwgzhopfdluolqcbs\nzevijfwyyvzwimod\neaxbhirzkwvbcasl\ndomiwzvyywfjivez\nukoehxfhrinomhxf\nmwrlymainiaipxll\nfxkafzyelkilisjc\n", "19 15\nkzxrduectwevzya\nrvbbobbwbbobbvr\nfnrsfapipafsrnf\najrgjayyijtakwo\nszcbqnxerrckvmq\nqwqcjnklyhqzwlv\nqtljkxivuuquagh\nzmoatzyyuvxvvhn\nqevycxrkxxztjqu\nffcoecqrultafej\nayzvewtceudrxzk\nsdvfbzlbqpneilp\njefatlurqceocff\nwtkfzdlenlrupbn\ncxlehlbfqxuxehh\npdnorfgpiftfidf\nhvpcirhwigzmwee\njkyqsfzgttackpr\npfcoduejjsmgekv\n", "24 17\nzndmakqspbruuzsta\nnvacnkaubelqshjle\ngzvbehvxuxvhebvzg\nohnqptaomnrqltjpb\nbrxlqhayktxoovmfw\nyxodyrfutnofhoydu\nznnnrxnueijnbgkyh\njuzlmpnwtoxbhesft\nugiakrtzkpavxrntw\nrzbjnfyrsnrybsgdl\nhivnuuhrwfwlhhdbf\nprjbnmwxftlmtbfjr\nmsuznhixqorujbwas\nufuoquqdalffvvkuf\nudyohfontufrydoxy\njsrawuqtapdqhsniy\nvphlnhoiirfsadsof\nldgsbyrnsryfnjbzr\ntlsngxmxzhmwrqtfp\nafmeaepzxqcbxphly\npexlxzqtydcturlis\nsawbjuroqxihnzusm\nrkczcixiyhmnwgcsu\nchswoyhmadcdpsobh\n", "21 16\nnmonvcjsrzaaptwq\ngwfqpwpzpomihwrk\nwpddhveysfqnahtp\napudlvvoovvldupa\nrmmdkvxhbaatqbix\nnuylrmomksyzfvqj\ntehasluuazwsubot\nkvmtoacwfvgaswjc\nkzeqgpbbvbkopdep\nuuqfkyksskykfquu\ncdvgblxukhlauyrt\nqufnzzgoyrinljba\nwawqpunycdjrtugt\njainpkxzzxkpniaj\nbqxflkftillbhziu\nypdoaowbvafxcavr\nffsnmnwxarihoetb\nvkjeolamwejtoeyb\nuizhbllitfklfxqb\nenmimfyotwwxlubl\njdapubmqhivhvtpk\n", "15 4\njjhj\nhjhh\njjjh\njjjj\nhjhj\nhjjj\nhhhh\nhhjh\njhjh\nhhhj\njhhh\njhjj\nhjjh\njjhh\nhhjj\n", "24 17\nmhcuaxurtqranxfzs\nuvkvuufjvabbhphfr\npvecnayhshocfcteo\nnxpzsisqaqsiszpxn\nectznpabcztyqidmg\nuonnubzlvqovzarun\ntdfoxciotaewhxaky\npfdiagdzhacyttkdq\nbvafrpvllatsdohrx\nymjramutquyxaldxi\nigzbnrrayqklxvrct\nmpfaoooffuptrvpob\nwhyeubpfcbfnaqmgt\nkkvrolvfrrgyjtxvs\nsxvytjtdpmoiqmrco\nqpybyiznrnziybypq\nosqtsegisigestqso\npwdbqdwvwrwsntzgn\ninnhvyozrobihcxms\nvhyehewofkpywdsyp\nocrmqiompdtjtyvxs\naojkeenmaxymwsuto\nkkddoxvljvlfrywwf\nntvhgwbtqbivbppzo\n", "9 2\nss\nat\nst\ntt\nta\nsa\nas\nts\naa\n", "18 15\ntouncxctlwjlnix\ncrdhfensgnoxsqs\nauckexocydmizxi\nqtggbkrcwsdabnn\nskqkditatcinnij\neoyixhclebzgvab\nugwazjibyjxkgio\npfqwckybokoboml\naagasbbbrsnlgfm\nqvjeqybuigwoclt\ntzxognenxqkbcuu\nxjluzkcigarbjzi\nbavgzbelchxiyoe\nnprzcwsbswczrpn\nizjbragickzuljx\nbnmukiouinxhrfw\nkoytmudzyrmiktj\nnnbadswcrkbggtq\n", "23 16\nhguaqgtvkgjujqsw\nourwjkcqcyhwopbx\nmbzsqzrdrexcyteq\nikymlzfsglgnrrsk\nhrkgfbszibphqxug\nwtahnxkohpjtgqxw\njqukumpdalhatcuw\nyeykmsvzalxjkpet\ncytqzyfmbrdfzksn\nmxnlbjvghjzukfqq\nrekvgjgifopxchgw\nnqezefubkbwkquxn\ntwytadlousxwkyrw\nunovmzyhjyydnzyu\nubpegcvfelmnkxfx\nhpgbwhlmmlhwbgph\npusmzqjvwcrxckxi\nooetmunvipomrexv\npcetnonmmnontecp\ntewdbezylmzkjrvo\nksrrnglgsfzlmyki\ntliczkoxzeypchxm\nwuctahladpmukuqj\n", "19 15\nvckwliplqlghsrj\nijodcwwahmyhlcw\nvmxtpfqfucsrlkj\nurfpsqvvghujktj\ndqzjhsahqclpdnk\ngxkkfjpgksgvosn\ntdzghaxmubitpho\nauspvsdadsvpsua\njrshglqlpilwkcv\nmczlxjpwkjkafdq\nogoiebrhicgygyw\nmqvfljsycyjgmry\nrypgirpkaijxjis\nfdqqybfabhektcz\nqjlgcyyvgybkfob\nfgdacgwkwtzmxaw\nbeodeawdxtjkmul\nuvofthzdouykfbm\nfohvezsyszevhof\n", "17 14\niqjzbmkkmbzjqi\nflaajsyoyjqbta\nzvkqmwyvyvqrto\nohqsfzzjqzirgh\neqlkoxraesjfyn\nsxsnqmgknyrtzh\nhctwrsetmqnspz\npzrdlfzqfgyggt\nfpppuskqkafddl\nvqzozehbutyudm\ncprzqnxhyhpucu\nekbauejlymnlun\natbqjyoysjaalf\nzpsnqmtesrwtch\ntssovnhzbvhmrd\ngzgybjgrrypgyw\nawpkcwyswerzar\n", "15 10\nhhhlhhllhh\nlllhlhllhl\nllhhllllhh\nlhhhhllllh\nlhhhllhlll\nllhhlhhhlh\nllhhhhhlhh\nhlllhhhhll\nhhlhhhhlll\nlhhllhhlll\nlhlhhllhhh\nhhlllhhhhl\nllllllhllh\nlhhhlhllll\nhlhllhlhll\n", "18 15\nragnnivnpxztdrs\nvkyxdmkucqqbpug\nitkvrrlnlmtjqcr\nxyxdblwlwlbdxyx\nwkyzxwlbrdbqkem\nihaamxlwxksuzog\nutzglkmjsnvajkt\nxpscnineyfjbtiz\ndansieshwouxwed\ngpesrpjnjjfhvpn\nlytyezeofixktph\nqcmqoukytsxdkvj\ntkjavnsjmklgztu\naekyzxlyqanqfzp\nduqoshteikxqgzl\nptqylxvlzxlgdhj\nktresxutnpspgix\nnzyzrihyzbelvac\n", "16 9\nviiviiviv\nivviivivv\nivvivviiv\nivvvvvivv\nviviiivvv\nivivivvii\niiiiiivvi\niiviviivv\niiiiviviv\niviviiiii\nvivviviiv\nviivivivi\niivvvvivv\niivviivvv\niiviiviiv\nivviiiiiv\n", "16 13\nejlvcbnfwcufg\nbmvnpbzrtcvts\nuxkanaezbvqgq\nsqaqpfuzqdfpg\noxwudrawjxssu\nsicswzfzknptx\nrmutvsxzrdene\nfmeqzuufksowc\nerterswsretre\napwvlfulvfahg\ngybyiwjwhvqdt\nouvkqcjjdnena\ncwoskfuuzqemf\nqkyfapjycrapc\ncmjurbzlfuihj\nrnjtncwjzonce\n", "21 16\nqrunmhntskbkettu\niljrukpcgdyzfbyk\nrivdpsimmucsovvt\npomwlbeecucszzmn\nsadqtntuieyxyrlf\nkybfzydgcpkurjli\nmhnslegyceewirxd\nmqekpftantmdjcyf\nocziqcwnsxdnzyee\nwjprnaxrhwwjsgtk\nvmwednvvvvndewmv\nbaulcpgwypwkhocn\nlvlcoumjcgtmetqq\nqvcbnuesqlqspayl\nzywarsfzdulycrsk\nyevkxvgfkxaarshu\nphpytewxkgarmpjk\nqoiuwdzjxuyjyzvn\nnvzyjyuxjzdwuioq\nwitjhtpepmunlvzl\nvxzuvllrhbrhvuek\n", "18 15\nhprpaepyybpldwa\npoveplrjqgbrirc\ninsvahznhlugdrc\nawdlpbyypeaprph\ngurilzdjrfrfdnt\nkqxtzzdddrzzwva\ndvrjupbgvfysjis\nvcehqrjsjrqhecv\nefcudkqpcsoxeek\nghnyixevvhaniyw\nwaylplvlkfwyvfy\nhvcxvkdmdkvxcvh\nswvvohscareynep\ncljjjrxwvmbhmdx\nmmnrmrhxhrmrnmm\nrkvlobbtpsyobtq\ntjguaaeewdhuzel\nodewcgawocrczjc\n", "6 3\nwji\niwn\nfdp\nnwi\nsdz\nwow\n", "19 11\niijijiiiiii\njjjjjjjjiji\njjijjiiijij\nijjjjiiijij\njijijiijijj\niijiijiijij\niiijjijijjj\njjjjjjiiiij\niiiiijjiiii\njiijiijjjjj\niiiiijiijji\niijijjjijji\njijjjiijijj\nijjijiiijjj\nijijjjijjij\nijjjiiijjjj\nijjijiiijji\niijjjijiiii\niijijjijjjj\n", "5 6\najwwja\nfibwwz\nbjwker\ndfjsep\nzwwbif\n", "4 2\nzz\nvv\nzv\nvz\n", "17 14\nufkgjuympyvbdt\ninohechmqqntac\npnrthedikyelhu\nkibretxzbokkul\nagmpxldeaicfip\najxhqqbgqiaujf\ncvaoithqvhqzmp\ngltyuliiluytlg\nfjlyvpggpvyljf\negoyzxewwwwkdc\nukasrncwnxmwzh\nilwjzvnerjygvm\nhrhttsttcgrbaw\npmzqhvqhtioavc\nazzvicbnvvujrg\ntczhcacvevibkt\ngvhhusgdjifmmu\n", "26 1\nz\ny\nx\nw\nv\nu\nt\ns\nr\nq\np\no\nn\nm\nl\nk\nj\ni\nh\ng\nf\ne\nd\nc\nb\na\n", "1 1\na\n", "21 16\nfumufbuqukamthau\nwrvomjqjmzmujnhx\nqgsmvvkmvkosktvp\nzifwbktvdtceafla\niwhwzjoxpmfengim\njzvtjjshhsjjtvzj\nektvzejyypqdglgp\nhazzzvyqzcfrhlew\nrrmnojzxdisryhlf\nydhwyvjbbjvywhdy\ndcbwaeidaibouinw\nkzamfhfzywfulczz\nqqnxvlaaqtwnujzx\ntvziydcmzomoumhz\njalitflajnnojsho\npxnvfqubwwrbtflh\nwelhrfczqyvzzzah\ncmzuycjmflasndrt\niquvnxxqyyhhabdw\nkdemxeezdudoolsl\nmsmvkvpwyshrtmfc\n", "20 8\ngggxgggg\nxxxggxxg\nxxgggxgx\nxxggxgxg\ngxxxxxxg\ngxggxxxg\nxxgxxxgx\ngggxgggx\nxgxxggxx\ngxgggxgg\nggxxggxg\nxxggxxxg\nxgggxgxg\nxgggxxxx\nxxggxggg\ngxgxxxgx\nggxgxxxx\nggggxxgg\nggggxxgx\nxxgxxgxx\n", "8 2\nya\nyp\naa\nap\npa\npp\nyy\npy\n", "19 15\njbrkxvujnnbqtxl\nnccimzpijbvkgsw\nthkzoeuqubgqmyg\ngawdqgcmsyyqjqi\ntpmtyqywcibpmsx\ncdizsrcxbyxgjhy\nhbdtwfbigjgjvvx\nzsgqmcnzpyjtptx\nsdunabpxjgmjini\npegfxzgxgzxfgep\ndadoreolxiexykr\nwlammhynkmvknbf\ncwnddcwxvttsrkf\nllqpdraducfzraa\nxjobmfjbqnvzgen\ntanxwnfblurruuz\nxvvjgjgibfwtdbh\nzuurrulbfnwxnat\ndbyznxuogfpdooq\n", "7 3\nbob\nmqf\nsik\nkld\nfwe\nfnz\ndlk\n", "8 3\nttt\nttq\ntqt\nqtq\nqqq\ntqq\nqqt\nqtt\n", "19 5\nassaa\nsaaas\naaass\nassss\nsssas\nasasa\nsasss\naasaa\nsasaa\nsasas\nassas\nsssss\nasass\naaasa\nasaaa\nssaaa\naaaas\naasas\naassa\n", "1 48\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n", "21 16\nogkkdydrhzgavqkc\niqaxpnpsjdvgkrrz\ntewguczyqcisoqzh\npeqnniumbtkxbyks\nwsqyouoxwktyrcjo\nrvoezvxklbyaeuzn\niolswzrxjomtadts\neycdlpicgozjcigd\nwrsbhqcffrsphnmh\nncjsrocnbxuuerot\npxalvbzhtirkcbqk\ndgicjzogcipldcye\nlymeaolddloaemyl\ntfcknbkxzfcuiycj\njnirwmlmvxtmgnma\nojcrytkwxouoyqsw\nsivatxubbohsutgi\nuxzptbnuymgogsqs\nvxhpocemmsltfnas\nizbrffhfzwroasyl\nnzueayblkxvzeovr\n", "21 16\nbouivksewcfbggsi\nucisrymoomyrsicu\nlbfnxsbmumdwnvdz\nkqhxcvtpdxdwcxzx\nutukvguzuickqgbc\nqwagyohxthiilhmk\ntrgvhvvttvvhvgrt\nnxvwzbdimdzkjqgb\njfqmhvbflacvocaq\naboijsvharstfygt\niirhlhuggqewuyiy\nqacovcalfbvhmqfj\nwmmdwejepfxojarg\neyyfdcqpbsfkxqed\nvlcezvrrmnxkvyfy\nsgdgrvtimaacwmnp\nomlspljvkpytqoay\nhezwngleelgnwzeh\nasthcgrdjscygqlz\nhatzcsjktartsctc\nyfyvkxnmrrvzeclv\n"], "output": ["42\ndlgvbiydlxmthswtdlavffvaldtwshtmxldyibvgld\n", "42\nbbsssbbssbbsbbbbbsbbssbbsbbbbbsbbssbbsssbb\n", "50\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "28\nmhmhmmhhmmhmmhhmmhmmhhmmhmhm\n", "119\ngdnaevfczjayllndrwmuarvqwpbhuznpxzambwnlhroyhjfrviwwaxuutbtbtbtuuxawwivrfjhyorhlnwbmazxpnzuhbpwqvraumwrdnllyajzcfveandg\n", "14\niaakikaakikaai\n", "0\n", "112\nlsacbvwkzrihbxaellxpiainiamylrwmzevijfwyyvzwimoddublllwaawlllbuddomiwzvyywfjivezmwrlymainiaipxlleaxbhirzkwvbcasl\n", "75\nkzxrduectwevzyaffcoecqrultafejrvbbobbwbbobbvrjefatlurqceocffayzvewtceudrxzk\n", "119\nyxodyrfutnofhoydurzbjnfyrsnrybsgdlmsuznhixqorujbwasgzvbehvxuxvhebvzgsawbjuroqxihnzusmldgsbyrnsryfnjbzrudyohfontufrydoxy\n", "48\nbqxflkftillbhziuapudlvvoovvldupauizhbllitfklfxqb\n", "52\njjhjhjhhjjjhhjhjhhhjjjhhjjjjhhjjjhhhjhjhhjjjhhjhjhjj\n", "51\nsxvytjtdpmoiqmrconxpzsisqaqsiszpxnocrmqiompdtjtyvxs\n", "14\natstsassaststa\n", "105\nqtggbkrcwsdabnneoyixhclebzgvabxjluzkcigarbjzinprzcwsbswczrpnizjbragickzuljxbavgzbelchxiyoennbadswcrkbggtq\n", "80\nikymlzfsglgnrrskjqukumpdalhatcuwhpgbwhlmmlhwbgphwuctahladpmukuqjksrrnglgsfzlmyki\n", "45\nvckwliplqlghsrjauspvsdadsvpsuajrshglqlpilwkcv\n", "70\nflaajsyoyjqbtahctwrsetmqnspziqjzbmkkmbzjqizpsnqmtesrwtchatbqjyoysjaalf\n", "0\n", "45\nutzglkmjsnvajktxyxdblwlwlbdxyxtkjavnsjmklgztu\n", "0\n", "39\nfmeqzuufksowcerterswsretrecwoskfuuzqemf\n", "80\niljrukpcgdyzfbykqoiuwdzjxuyjyzvnvmwednvvvvndewmvnvzyjyuxjzdwuioqkybfzydgcpkurjli\n", "45\nhprpaepyybpldwavcehqrjsjrqhecvawdlpbyypeaprph\n", "9\niwnwownwi\n", "0\n", "18\nfibwwzajwwjazwwbif\n", "6\nzvzzvz\n", "42\ncvaoithqvhqzmpgltyuliiluytlgpmzqhvqhtioavc\n", "1\nz\n", "1\na", "48\nhazzzvyqzcfrhlewjzvtjjshhsjjtvzjwelhrfczqyvzzzah\n", "8\ngxxxxxxg\n", "10\nypapaapapy\n", "75\nhbdtwfbigjgjvvxtanxwnfblurruuzpegfxzgxgzxfgepzuurrulbfnwxnatxvvjgjgibfwtdbh\n", "9\nkldbobdlk\n", "15\nttqtqqtttqqtqtt\n", "55\nassaaaaasssssassasaaaaasasaaasasaaaaasassasssssaaaaassa\n", "48\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", "112\nwsqyouoxwktyrcjorvoezvxklbyaeuzneycdlpicgozjcigdlymeaolddloaemyldgicjzogcipldcyenzueayblkxvzeovrojcrytkwxouoyqsw\n", "80\njfqmhvbflacvocaqvlcezvrrmnxkvyfyucisrymoomyrsicuyfyvkxnmrrvzeclvqacovcalfbvhmqfj\n"]}, "index": 6}, {"input": "A number is ternary if it contains only digits 0, 1 and 2. For example, the following numbers are ternary: 1022, 11, 21, 2002.\n\nYou are given a long ternary number x. The first (leftmost) digit of x is guaranteed to be 2, the other digits of x can be 0, 1 or 2.\n\nLet's define the ternary XOR operation \u2299 of two ternary numbers a and b (both of length n) as a number c = a \u2299 b of length n, where c_i = (a_i + b_i) \\% 3 (where \\% is modulo operation). In other words, add the corresponding digits and take the remainders of the sums when divided by 3. For example, 10222 \u2299 11021 = 21210.\n\nYour task is to find such ternary numbers a and b both of length n and both without leading zeros that a \u2299 b = x and max(a, b) is the minimum possible.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n (1 \u2264 n \u2264 5 \u22c5 10^4) \u2014 the length of x. The second line of the test case contains ternary number x consisting of n digits 0, 1 or 2. It is guaranteed that the first digit of x is 2. It is guaranteed that the sum of n over all test cases does not exceed 5 \u22c5 10^4 (\u2211 n \u2264 5 \u22c5 10^4).\n\nOutput\n\nFor each test case, print the answer \u2014 two ternary integers a and b both of length n and both without leading zeros such that a \u2299 b = x and max(a, b) is the minimum possible. If there are several answers, you can print any.\n\nExample\n\nInput\n\n\n4\n5\n22222\n5\n21211\n1\n2\n9\n220222021\n\n\nOutput\n\n\n11111\n11111\n11000\n10211\n1\n1\n110111011\n11011101", "output": "k=input\nfor i in[0]*int(k()):\n\tn=int(k());s=k();a=b=\"\"\n\tfor i in range(n):\n\t\tif(s[i]==\"1\"):a+=\"1\"+\"0\"*(n-i-1);b+=\"0\"+s[i+1:];break\n\t\telse:a+=str(int(s[i])//2);b+=str(int(s[i])//2)\n\tprint(a);print(b)", "public_tests": {"input": ["4\n5\n22222\n5\n21211\n1\n2\n9\n220222021\n"], "output": ["11111\n11111\n11000\n10211\n1\n1\n110111011\n110111010\n"]}, "private_tests": {"input": [], "output": []}, "index": 7}, {"input": "Phoenix has a string s consisting of lowercase Latin letters. He wants to distribute all the letters of his string into k non-empty strings a_1, a_2, ..., a_k such that every letter of s goes to exactly one of the strings a_i. The strings a_i do not need to be substrings of s. Phoenix can distribute letters of s and rearrange the letters within each string a_i however he wants.\n\nFor example, if s =  baba and k=2, Phoenix may distribute the letters of his string in many ways, such as: \n\n  * ba and ba\n  * a and abb\n  * ab and ab\n  * aa and bb\n\n\n\nBut these ways are invalid: \n\n  * baa and ba\n  * b and ba\n  * baba and empty string (a_i should be non-empty) \n\n\n\nPhoenix wants to distribute the letters of his string s into k strings a_1, a_2, ..., a_k to minimize the lexicographically maximum string among them, i. e. minimize max(a_1, a_2, ..., a_k). Help him find the optimal distribution and print the minimal possible value of max(a_1, a_2, ..., a_k).\n\nString x is lexicographically less than string y if either x is a prefix of y and x \u2260 y, or there exists an index i (1 \u2264 i \u2264 min(|x|, |y|)) such that x_i < y_i and for every j (1 \u2264 j < i) x_j = y_j. Here |x| denotes the length of the string x.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case consists of two integers n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the length of string s and the number of non-empty strings, into which Phoenix wants to distribute letters of s, respectively.\n\nThe second line of each test case contains a string s of length n consisting only of lowercase Latin letters.\n\nIt is guaranteed that the sum of n over all test cases is \u2264 10^5.\n\nOutput\n\nPrint t answers \u2014 one per test case. The i-th answer should be the minimal possible value of max(a_1, a_2, ..., a_k) in the i-th test case.\n\nExample\n\nInput\n\n\n6\n4 2\nbaba\n5 2\nbaacb\n5 3\nbaacb\n5 3\naaaaa\n6 4\naaxxzz\n7 1\nphoenix\n\n\nOutput\n\n\nab\nabbc\nb\naa\nx\nehinopx\n\nNote\n\nIn the first test case, one optimal solution is to distribute baba into ab and ab. \n\nIn the second test case, one optimal solution is to distribute baacb into abbc and a.\n\nIn the third test case, one optimal solution is to distribute baacb into ac, ab, and b.\n\nIn the fourth test case, one optimal solution is to distribute aaaaa into aa, aa, and a.\n\nIn the fifth test case, one optimal solution is to distribute aaxxzz into az, az, x, and x.\n\nIn the sixth test case, one optimal solution is to distribute phoenix into ehinopx", "output": "I=input\nexec(int(I())*\"n,k=map(int,I().split());s=''.join(sorted(I()));c=s[k-1];print(c+(c==s[0])*s[k::k**(s[k%n]==s[-1])]);\")", "public_tests": {"input": ["6\n4 2\nbaba\n5 2\nbaacb\n5 3\nbaacb\n5 3\naaaaa\n6 4\naaxxzz\n7 1\nphoenix\n"], "output": ["ab\nabbc\nb\naa\nx\nehinopx\n"]}, "private_tests": {"input": ["9\n8 2\nchefspam\n11 7\nmonkeyeight\n8 2\nvcubingx\n6 1\namazed\n4 4\nhebs\n8 1\narolakiv\n9 7\nhidavidhu\n33 33\ngosubtovcubingxheneedssubscribers\n7 4\nhiimbad\n"], "output": ["c\nm\nc\naademz\ns\naaiklorv\ni\nx\nh\n"]}, "index": 8}, {"input": "Lee is going to fashionably decorate his house for a party, using some regular convex polygons...\n\nLee thinks a regular n-sided (convex) polygon is beautiful if and only if he can rotate it in such a way that at least one of its edges is parallel to the OX-axis and at least one of its edges is parallel to the OY-axis at the same time.\n\nRecall that a regular n-sided polygon is a convex polygon with n vertices such that all the edges and angles are equal.\n\nNow he is shopping: the market has t regular polygons. For each of them print YES if it is beautiful and NO otherwise.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of polygons in the market. \n\nEach of the next t lines contains a single integer n_i (3 \u2264 n_i \u2264 10^9): it means that the i-th polygon is a regular n_i-sided polygon. \n\nOutput\n\nFor each polygon, print YES if it's beautiful or NO otherwise (case insensitive).\n\nExample\n\nInput\n\n\n4\n3\n4\n12\n1000000000\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\n\nNote\n\nIn the example, there are 4 polygons in the market. It's easy to see that an equilateral triangle (a regular 3-sided polygon) is not beautiful, a square (a regular 4-sided polygon) is beautiful and a regular 12-sided polygon (is shown below) is beautiful as well.\n\n<image", "output": "for s in[*open(0)][1:]:print('YNEOS'[int(s)%4>0::2])", "public_tests": {"input": ["4\n3\n4\n12\n1000000000\n"], "output": ["NO\nYES\nYES\nYES\n"]}, "private_tests": {"input": [], "output": []}, "index": 9}, {"input": "After battling Shikamaru, Tayuya decided that her flute is too predictable, and replaced it with a guitar. The guitar has 6 strings and an infinite number of frets numbered from 1. Fretting the fret number j on the i-th string produces the note a_{i} + j.\n\nTayuya wants to play a melody of n notes. Each note can be played on different string-fret combination. The easiness of performance depends on the difference between the maximal and the minimal indices of used frets. The less this difference is, the easier it is to perform the technique. Please determine the minimal possible difference.\n\nFor example, if a = [1, 1, 2, 2, 3, 3], and the sequence of notes is 4, 11, 11, 12, 12, 13, 13 (corresponding to the second example), we can play the first note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7, as shown on the picture.\n\n<image>\n\nInput\n\nThe first line contains 6 space-separated numbers a_{1}, a_{2}, ..., a_{6} (1 \u2264 a_{i} \u2264 10^{9}) which describe the Tayuya's strings.\n\nThe second line contains the only integer n (1 \u2264 n \u2264 100 000) standing for the number of notes in the melody.\n\nThe third line consists of n integers b_{1}, b_{2}, ..., b_{n} (1 \u2264 b_{i} \u2264 10^{9}), separated by space. They describe the notes to be played. It's guaranteed that b_i > a_j for all 1\u2264 i\u2264 n and 1\u2264 j\u2264 6, in other words, you can play each note on any string.\n\nOutput\n\nPrint the minimal possible difference of the maximal and the minimal indices of used frets.\n\n", "output": "a=list(map(int,input().split()));n=int(input());s=list(map(int,input().split()));b=[];i=j=0;ans=10**18;cs=[0]*n;nz=1;z=n*6\nfor y in range(n):\n\tfor x in a:b.append((s[y]-x)*n+y)\nb.sort();cs[b[0]%n]+=1\nwhile j+1<z:\n\twhile j+1<z and nz<n:j+=1;nz+=cs[b[j]%n]<1;cs[b[j]%n]+=1\n\twhile nz==n:ans=min(ans,b[j]//n-b[i]//n);cs[b[i]%n]-=1;nz-=cs[b[i]%n]==0;i+=1\nprint(ans)", "public_tests": {"input": ["1 4 100 10 30 5\n6\n101 104 105 110 130 200\n", "1 1 2 2 3 3\n7\n13 4 11 12 11 13 12\n"], "output": ["0", "7"]}, "private_tests": {"input": ["5 4 7 6 4 1\n10\n19 16 18 12 16 15 16 20 16 14\n", "11 16 12 20 12 13\n10\n21 21 21 21 21 21 21 21 21 21\n", "1 1 1 96 99 100\n3\n101 146 175\n", "158260522 877914575 602436426 24979445 861648772 623690081\n1\n896194147\n", "58260522 77914575 2436426 24979445 61648772 23690081\n10\n582107247 906728404 411434947 673536177 411497300 488012525 561127307 800305059 992325267 112738006\n"], "output": ["2", "0", "50", "0", "804109112"]}, "index": 10}, {"input": "Alice and Bob play ping-pong with simplified rules.\n\nDuring the game, the player serving the ball commences a play. The server strikes the ball then the receiver makes a return by hitting the ball back. Thereafter, the server and receiver must alternately make a return until one of them doesn't make a return.\n\nThe one who doesn't make a return loses this play. The winner of the play commences the next play. Alice starts the first play.\n\nAlice has x stamina and Bob has y. To hit the ball (while serving or returning) each player spends 1 stamina, so if they don't have any stamina, they can't return the ball (and lose the play) or can't serve the ball (in this case, the other player serves the ball instead). If both players run out of stamina, the game is over.\n\nSometimes, it's strategically optimal not to return the ball, lose the current play, but save the stamina. On the contrary, when the server commences a play, they have to hit the ball, if they have some stamina left.\n\nBoth Alice and Bob play optimally and want to, firstly, maximize their number of wins and, secondly, minimize the number of wins of their opponent.\n\nCalculate the resulting number of Alice's and Bob's wins.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (1 \u2264 x, y \u2264 10^6) \u2014 Alice's and Bob's initial stamina.\n\nOutput\n\nFor each test case, print two integers \u2014 the resulting number of Alice's and Bob's wins, if both of them play optimally.\n\nExample\n\nInput\n\n\n3\n1 1\n2 1\n1 7\n\n\nOutput\n\n\n0 1\n1 1\n0 7\n\nNote\n\nIn the first test case, Alice serves the ball and spends 1 stamina. Then Bob returns the ball and also spends 1 stamina. Alice can't return the ball since she has no stamina left and loses the play. Both of them ran out of stamina, so the game is over with 0 Alice's wins and 1 Bob's wins.\n\nIn the second test case, Alice serves the ball and spends 1 stamina. Bob decides not to return the ball \u2014 he loses the play but saves stamina. Alice, as the winner of the last play, serves the ball in the next play and spends 1 more stamina. This time, Bob returns the ball and spends 1 stamina. Alice doesn't have any stamina left, so she can't return the ball and loses the play. Both of them ran out of stamina, so the game is over with 1 Alice's and 1 Bob's win.\n\nIn the third test case, Alice serves the ball and spends 1 stamina. Bob returns the ball and spends 1 stamina. Alice ran out of stamina, so she can't return the ball and loses the play. Bob, as a winner, serves the ball in the next 6 plays. Each time Alice can't return the ball and loses each play. The game is over with 0 Alice's and 7 Bob's wins", "output": "for _ in range(int(input())):a,b=map(int,input().split());print(a-1,b)", "public_tests": {"input": ["3\n1 1\n2 1\n1 7\n"], "output": ["\n0 1\n1 1\n0 7\n"]}, "private_tests": {"input": ["3\n1 1\n2 1\n96342 7\n", "1\n99899 99899\n", "1\n99899 100000\n", "1\n1000000 1\n", "1\n99999 100000\n", "12\n1 1\n2 1\n1 7\n1 1\n2 1\n1 7\n1 1\n2 1\n1 7\n1 1\n2 1\n1 7\n", "1\n1000000 1000000\n", "2\n1000000 1\n1 1000000\n", "1\n8627 2007\n", "2\n1000000 1000000\n1000000 2\n"], "output": ["0 1\n1 1\n96341 7\n", "99898 99899\n", "99898 100000\n", "999999 1\n", "99998 100000\n", "0 1\n1 1\n0 7\n0 1\n1 1\n0 7\n0 1\n1 1\n0 7\n0 1\n1 1\n0 7\n", "999999 1000000\n", "999999 1\n0 1000000\n", "8626 2007\n", "999999 1000000\n999999 2\n"]}, "index": 11}, {"input": "You are given the strings a and b, consisting of lowercase Latin letters. You can do any number of the following operations in any order: \n\n  * if |a| > 0 (the length of the string a is greater than zero), delete the first character of the string a, that is, replace a with a_2 a_3 \u2026 a_n; \n  * if |a| > 0, delete the last character of the string a, that is, replace a with a_1 a_2 \u2026 a_{n-1}; \n  * if |b| > 0 (the length of the string b is greater than zero), delete the first character of the string b, that is, replace b with b_2 b_3 \u2026 b_n; \n  * if |b| > 0, delete the last character of the string b, that is, replace b with b_1 b_2 \u2026 b_{n-1}. \n\n\n\nNote that after each of the operations, the string a or b may become empty.\n\nFor example, if a=\"hello\" and b=\"icpc\", then you can apply the following sequence of operations: \n\n  * delete the first character of the string a \u21d2 a=\"ello\" and b=\"icpc\"; \n  * delete the first character of the string b \u21d2 a=\"ello\" and b=\"cpc\"; \n  * delete the first character of the string b \u21d2 a=\"ello\" and b=\"pc\"; \n  * delete the last character of the string a \u21d2 a=\"ell\" and b=\"pc\"; \n  * delete the last character of the string b \u21d2 a=\"ell\" and b=\"p\". \n\n\n\nFor the given strings a and b, find the minimum number of operations for which you can make the strings a and b equal. Note that empty strings are also equal.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100). Then t test cases follow.\n\nThe first line of each test case contains the string a (1 \u2264 |a| \u2264 20), consisting of lowercase Latin letters.\n\nThe second line of each test case contains the string b (1 \u2264 |b| \u2264 20), consisting of lowercase Latin letters.\n\nOutput\n\nFor each test case, output the minimum number of operations that can make the strings a and b equal.\n\nExample\n\nInput\n\n\n5\na\na\nabcd\nbc\nhello\ncodeforces\nhello\nhelo\ndhjakjsnasjhfksafasd\nadjsnasjhfksvdafdser\n\n\nOutput\n\n\n0\n2\n13\n3\n2", "output": "I=input;exec(int(I())*'a=I();b=I();l=len(a);print(l+len(b)-max(j-i<<1for j in range(l+1)for i in range(j+1)if a[i:j]in b));')", "public_tests": {"input": ["5\na\na\nabcd\nbc\nhello\ncodeforces\nhello\nhelo\ndhjakjsnasjhfksafasd\nadjsnasjhfksvdafdser\n"], "output": ["\n0\n2\n13\n3\n20\n"]}, "private_tests": {"input": [], "output": []}, "index": 12}, {"input": "One day Vasya went out for a walk in the yard but there weren't any of his friends outside and he had no one to play touch and run. But the boy didn't lose the high spirits and decided to play touch and run with himself. You may ask: \"How did he do that?\" The answer is simple.\n\nVasya noticed that the yard is a rectangular n \u00d7 m field. The squares have coordinates (x, y) (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m), where x is the index of the row and y is the index of the column.\n\nInitially Vasya stands in the square with coordinates (xc, yc). To play, he has got a list of k vectors (dxi, dyi) of non-zero length. The game goes like this. The boy considers all vectors in the order from 1 to k, and consecutively chooses each vector as the current one. After the boy has chosen a current vector, he makes the maximally possible number of valid steps in the vector's direction (it is possible that he makes zero steps).\n\nA step is defined as one movement from the square where the boy is standing now, in the direction of the current vector. That is, if Vasya is positioned in square (x, y), and the current vector is (dx, dy), one step moves Vasya to square (x + dx, y + dy). A step is considered valid, if the boy does not go out of the yard if he performs the step.\n\nVasya stepped on and on, on and on until he ran out of vectors in his list. Ha had been stepping for so long that he completely forgot how many steps he had made. Help the boy and count how many steps he had made.\n\nInput\n\nThe first input line contains two integers n and m (1 \u2264 n, m \u2264 109) \u2014 the yard's sizes. The second line contains integers xc and yc \u2014 the initial square's coordinates (1 \u2264 xc \u2264 n, 1 \u2264 yc \u2264 m).\n\nThe third line contains an integer k (1 \u2264 k \u2264 104) \u2014 the number of vectors. Then follow k lines, each of them contains two integers dxi and dyi (|dxi|, |dyi| \u2264 109, |dx| + |dy| \u2265 1).\n\nOutput\n\nPrint the single number \u2014 the number of steps Vasya had made.\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.\n\n", "output": "import math\ndef step(f , r , k):\n\tif k==0:\n\t\treturn math.inf\n\tif k < 0:\n\t\treturn -int((r-1)/k) \n\treturn int((f-r)/k)\nn , m = map(int,input().split())\nx , y = map(int,input().split())\nd = int(input())\nans = 0\nfor i in range(d):\n\ti , j = map(int,input().split())\n\tsteps = min(step(n , x , i ) ,step(m , y , j))\n\tx +=steps*i ; y +=steps*j\n\tans +=steps\nprint(ans)", "public_tests": {"input": ["10 10\n1 2\n1\n-1 0\n", "4 5\n1 1\n3\n1 1\n1 1\n0 -2\n"], "output": ["0\n", "4\n"]}, "private_tests": {"input": ["10 20\n10 3\n10\n-2 -6\n-1 0\n-8 0\n0 5\n-1 3\n16 -16\n-1 9\n0 -18\n9 -1\n-9 5\n", "1 1\n1 1\n1\n1 1\n", "20 10\n14 4\n10\n6 0\n-7 -7\n12 -2\n-4 9\n20 3\n-1 -16\n0 2\n-1 1\n20 0\n-1 1\n", "3 3\n2 2\n1\n2 0\n", "1000 2000\n226 566\n20\n0 -100\n-100 100\n100 0\n42 0\n-100 -79\n-66 -16\n0 -7\n-1 0\n0 100\n100 91\n99 0\n1 0\n-100 0\n70 -100\n-100 100\n100 1\n66 0\n-100 1\n-47 -100\n-42 0\n"], "output": ["13\n", "0\n", "4\n", "0\n", "708\n"]}, "index": 13}, {"input": "You are given a connected weighted undirected graph without any loops and multiple edges. \n\nLet us remind you that a graph's spanning tree is defined as an acyclic connected subgraph of the given graph that includes all of the graph's vertexes. The weight of a tree is defined as the sum of weights of the edges that the given tree contains. The minimum spanning tree (MST) of a graph is defined as the graph's spanning tree having the minimum possible weight. For any connected graph obviously exists the minimum spanning tree, but in the general case, a graph's minimum spanning tree is not unique.\n\nYour task is to determine the following for each edge of the given graph: whether it is either included in any MST, or included at least in one MST, or not included in any MST.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 105, <image>) \u2014 the number of the graph's vertexes and edges, correspondingly. Then follow m lines, each of them contains three integers \u2014 the description of the graph's edges as \"ai bi wi\" (1 \u2264 ai, bi \u2264 n, 1 \u2264 wi \u2264 106, ai \u2260 bi), where ai and bi are the numbers of vertexes connected by the i-th edge, wi is the edge's weight. It is guaranteed that the graph is connected and doesn't contain loops or multiple edges.\n\nOutput\n\nPrint m lines \u2014 the answers for all edges. If the i-th edge is included in any MST, print \"any\"; if the i-th edge is included at least in one MST, print \"at least one\"; if the i-th edge isn't included in any MST, print \"none\". Print the answers for the edges in the order in which the edges are specified in the input.\n\n", "output": "from math import inf\nimport operator\nfrom collections import defaultdict\nimport sys\n\ntime = 0\nedges = []\nans = {}\norig_edges = []\nl = {}\nd = {}\nf = {}\npi = {}\nvisited = {}\n\n\ndef process_edges(l, ds):\n\n    if len(l) == 1:\n        u,v = l[0]\n        b = ds.SetOf(u) == ds.SetOf(v)\n        \n        ans[u,v] = \"none\" if b else \"any\"\n        if not b:\n            ds.Merge(u, v)\n    else:\n        dic = defaultdict(list)\n        g = defaultdict(set)\n        for e in l:\n            u,v = e\n            x = ds.SetOf(u)\n            y = ds.SetOf(v)\n            if x == y:\n                ans[e] = \"none\"\n            else:\n                x,y = tuple(sorted([x,y]))\n                dic[x,y].append(e)\n                g[x].add(y)\n                g[y].add(x)\n        \n        a = DFS(g)\n        for e in a:\n            if len(dic[e]) == 1:\n                ans[dic[e][0]] = \"any\"\n        \n        for e in l:\n            if ds.SetOf(e[1]) != ds.SetOf(e[0]):\n                ds.Merge(e[0],e[1]) \n                       \n\n\ndef sol(n):\n    ds = DisjointSet(n)\n    global edges\n\n    prev_w = edges[0][1]\n    same_weight = []\n    for e, w in edges + [(1,None)]:\n        if w == prev_w:\n            same_weight.append(e)\n        else:\n            process_edges(same_weight, ds)\n            same_weight = [e]\n        prev_w = w\n\n\n\ndef DFS(graph):\n    time = 0\n    global l\n    global d\n    global f\n    global pi\n    global visited\n    visited = {key : False for key in graph}\n    l = {key : inf for key in graph}\n    d = {key : -1 for key in graph}\n    f = {key : -1 for key in graph}\n    pi = {key : key for key in graph}\n    a = []\n    for i in graph.keys():\n        if not visited[i]:\n            DFS_Visit(graph, i, a)\n    return a\n\ndef DFS_Visit(graph, v, a):\n    visited[v] = True\n    global time\n    time+=1\n    d[v] = l[v] = time\n    for i in graph[v]:\n        if not visited[i]:\n            pi[i] = v\n            DFS_Visit(graph, i, a)\n            l[v] = min(l[v], l[i])\n        elif pi[v] != i:\n            l[v] = min(l[v], d[i])\n    if pi[v] != v and l[v] >= d[v]:\n        a.append(tuple(sorted([v,pi[v]])))\n    time+=1\n    f[v] = time\n\n# def DFS_Visit(graph, v, a):\n#     visited[v] = True\n#     global time\n#     time+=1\n#     d[v] = l[v] = time\n#     stack = [v]\n#     while stack:\n#         u = stack.pop()\n#         for i in graph[u]:\n#             if not visited[i]:\n#                 pi[i] = v\n#                 stack.append(i)\n#                 # DFS_Visit(graph, i, a)\n#                 l[u] = min(l[u], l[i])\n#             elif pi[u] != i:\n#                 l[u] = min(l[u], d[i])\n#         if pi[u] != v and l[v] >= d[v]:\n#             a.append(tuple(sorted([v,pi[v]])))\n#         time+=1\n#         f[v] = time\n\ndef read():\n    global edges\n    n,m = map(int, sys.stdin.readline().split())\n\n    if m == n-1:\n        for _ in range(m):\n            print(\"any\")\n        exit()\n\n    for i in range(m):\n        x,y,w = map(int, sys.stdin.readline().split())\n        x,y = x-1,y-1\n        e = tuple(sorted([x,y]))\n        ans[e] = \"at least one\"\n        orig_edges.append((e,w))\n    edges = sorted(orig_edges, key=lambda x:x[1])\n\n    return n\n\ndef main():\n    n = read()\n    sol(n)\n    for i in orig_edges:\n        print(ans[i[0]])\n\nclass DisjointSet:\n    def __init__(self, n):\n        self.count = [1 for i in range(n)]\n        self.father = [i for i in range(n)]\n\n    def SetOf(self, x):\n        if x == self.father[x]:\n            return x\n        return self.SetOf(self.father[x])\n\n    def Merge(self, x, y):\n        a = self.SetOf(x)\n        b = self.SetOf(y)\n        if self.count[a] > self.count[b]:\n            temp = a\n            a = b\n            b = temp\n        self.count[b] += self.count[a]\n        self.father[a] = b\n\nmain()\n        ", "public_tests": {"input": ["3 3\n1 2 1\n2 3 1\n1 3 2\n", "4 5\n1 2 101\n1 3 100\n2 3 2\n2 4 2\n3 4 1\n", "3 3\n1 2 1\n2 3 1\n1 3 1\n"], "output": ["any\nany\nnone\n", "none\nany\nat least one\nat least one\nany\n", "at least one\nat least one\nat least one\n"]}, "private_tests": {"input": ["5 8\n2 5 3\n4 1 3\n3 4 7\n3 1 9\n1 2 6\n5 3 7\n2 4 7\n4 5 9\n", "10 15\n6 5 805980\n1 6 805980\n7 8 805980\n4 9 805980\n4 1 805980\n3 6 805980\n6 9 805980\n8 10 805980\n3 1 805980\n1 8 805980\n8 4 805980\n2 8 805980\n2 10 805980\n2 7 805980\n2 9 805980\n", "2 1\n1 2 1\n", "25 25\n17 13 578885\n18 25 860003\n21 12 860003\n16 4 860003\n7 14 752263\n25 11 860003\n11 19 860003\n17 5 752263\n14 25 752263\n8 17 578885\n25 17 860003\n1 16 860003\n6 1 578885\n23 25 752263\n25 10 578885\n5 9 752263\n6 18 752263\n2 15 578885\n19 12 860003\n22 7 578885\n14 5 860003\n15 16 752263\n20 16 578885\n17 24 578885\n3 2 752263\n", "3 2\n1 2 1\n2 3 2\n", "4 5\n1 2 100\n1 3 100\n2 3 2\n2 4 2\n3 4 1\n", "3 2\n1 2 1000000\n1 3 1000000\n"], "output": ["any\nany\nat least one\nnone\nany\nat least one\nnone\nnone\n", "any\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\nat least one\n", "any\n", "any\nany\nany\nany\nany\nany\nany\nany\nany\nany\nat least one\nany\nany\nany\nany\nany\nany\nany\nany\nany\nat least one\nany\nany\nany\nany\n", "any\nany\n", "at least one\nat least one\nat least one\nat least one\nany\n", "any\nany\n"]}, "index": 14}, {"input": "In this problem you have to implement an algorithm to defragment your hard disk. The hard disk consists of a sequence of clusters, numbered by integers from 1 to n. The disk has m recorded files, the i-th file occupies clusters with numbers ai, 1, ai, 2, ..., ai, ni. These clusters are not necessarily located consecutively on the disk, but the order in which they are given corresponds to their sequence in the file (cluster ai, 1 contains the first fragment of the i-th file, cluster ai, 2 has the second fragment, etc.). Also the disc must have one or several clusters which are free from files.\n\nYou are permitted to perform operations of copying the contents of cluster number i to cluster number j (i and j must be different). Moreover, if the cluster number j used to keep some information, it is lost forever. Clusters are not cleaned, but after the defragmentation is complete, some of them are simply declared unusable (although they may possibly still contain some fragments of files).\n\nYour task is to use a sequence of copy operations to ensure that each file occupies a contiguous area of memory. Each file should occupy a consecutive cluster section, the files must follow one after another from the beginning of the hard disk. After defragmentation all free (unused) clusters should be at the end of the hard disk. After defragmenting files can be placed in an arbitrary order. Clusters of each file should go consecutively from first to last. See explanatory examples in the notes.\n\nPrint the sequence of operations leading to the disk defragmentation. Note that you do not have to minimize the number of operations, but it should not exceed 2n.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 200) \u2014 the number of clusters and the number of files, correspondingly. Next m lines contain descriptions of the files. The first number in the line is ni (ni \u2265 1), the number of clusters occupied by the i-th file. Then follow ni numbers ai, 1, ai, 2, ..., ai, ni (1 \u2264 ai, j \u2264 n). It is guaranteed that each cluster number occurs not more than once and <image>, that is, there exists at least one unused cluster. Numbers on each line are separated by spaces. \n\nOutput\n\nIn the first line print a single integer k (0 \u2264 k \u2264 2n) \u2014 the number of operations needed to defragment the disk. Next k lines should contain the operations' descriptions as \"i j\" (copy the contents of the cluster number i to the cluster number j). \n\n", "output": "import sys\nn, m, *inp = map(int, sys.stdin.read().split())\n\ninp.reverse()\nf = [[0 for x in range(201)] for y in range(201)]     #2D Array\nc = [(0,0)]*201\nf_size = [0]*201\n\ndef putData(f_id, s_id, c_id):\n    global f, c\n    f[f_id][s_id] = c_id\n    c[c_id] = (f_id, s_id)\n\nfor f_id in range(1, m+1):\n    f_size[f_id] = inp.pop()\n    for s_id in range(1, f_size[f_id]+1):\n        c_id = inp.pop()\n        putData(f_id, s_id, c_id)\n\ne_id = c[1:].index((0,0))+1\nnext_id = 1\nop = []\n\nfor f_id in range(1, m+1):\n    for s_id in range(1, f_size[f_id]+1):\n        if c[next_id]==(f_id, s_id):\n            next_id += 1\n            continue\n        if c[next_id] != (0, 0):\n            op.append((next_id, e_id))\n            putData(c[next_id][0], c[next_id][1], e_id)\n        e_id = f[f_id][s_id]\n        c[e_id] = (0,0)\n        op.append((e_id, next_id))\n        putData(f_id, s_id, next_id)\n        next_id += 1\n\nprint(len(op))\nfor p in op:\n    print(\"%d %d\" % p)\n\n", "public_tests": {"input": ["7 2\n2 1 3\n3 2 4 5\n", "7 2\n2 1 2\n3 3 4 5\n"], "output": ["3\n2 6\n3 2\n6 3\n", "0\n"]}, "private_tests": {"input": ["7 3\n1 7\n2 6 5\n3 4 3 2\n", "100 30\n8 62 50 93 34 82 24 87 65\n2 64 86\n3 91 42 88\n2 76 7\n2 35 63\n3 78 84 15\n4 90 46 73 9\n4 74 13 95 58\n3 71 59 55\n2 4 31\n1 19\n1 10\n2 45 23\n2 27 69\n4 12 66 44 22\n1 36\n2 67 2\n2 77 54\n4 96 47 25 52\n5 18 29 43 70 56\n2 14 41\n2 100 6\n3 30 94 75\n2 32 28\n1 53\n9 26 39 51 68 33 99 79 89 49\n4 5 17 81 37\n3 57 8 16\n3 21 72 98\n4 83 48 40 61\n", "7 2\n2 2 1\n3 3 4 5\n", "3 2\n1 3\n1 2\n", "3 1\n2 3 1\n", "7 2\n3 1 3 5\n3 2 4 6\n", "200 10\n17 110 31 67 40 144 57 90 186 25 112 3 14 79 193 159 26 165\n4 91 1 30 62\n11 64 94 60 49 176 172 54 106 68 51 22\n4 131 114 2 15\n33 58 83 164 190 5 21 17 19 181 46 7 140 29 82 147 6 28 192 27 39 196 101 10 53 156 23 98 48 195 88 126 170 55\n2 81 4\n10 177 16 32 78 119 69 171 127 117 133\n14 184 34 145 43 9 134 168 97 63 191 102 50 72 120\n2 45 99\n3 169 163 104\n", "20 5\n7 12 16 14 17 20 4 15\n2 7 8\n1 5\n5 3 6 18 11 2\n4 9 13 19 1\n", "5 3\n1 2\n1 4\n1 5\n", "20 10\n1 2\n2 14 11\n2 9 15\n2 16 8\n2 3 13\n3 17 12 6\n1 5\n1 7\n2 20 19\n1 1\n", "7 2\n2 1 2\n3 4 5 6\n", "10 1\n5 7 4 6 9 2\n", "2 1\n1 2\n"], "output": ["7\n7 1\n2 7\n6 2\n3 6\n5 3\n6 5\n7 6\n", "168\n62 1\n2 3\n50 2\n3 11\n93 3\n4 20\n34 4\n5 34\n82 5\n6 38\n24 6\n7 24\n87 7\n8 50\n65 8\n9 60\n64 9\n10 62\n86 10\n11 64\n91 11\n12 65\n42 12\n13 42\n88 13\n14 80\n76 14\n15 76\n24 15\n16 24\n35 16\n17 35\n63 17\n18 63\n78 18\n19 78\n84 19\n20 82\n76 20\n21 76\n90 21\n22 84\n46 22\n23 46\n73 23\n24 73\n60 24\n25 60\n74 25\n26 74\n42 26\n27 42\n95 27\n28 85\n58 28\n29 58\n71 29\n30 71\n59 30\n31 59\n55 31\n32 55\n82 32\n33 82\n59 33\n34 59\n78 34\n35 78\n62 35\n36 62\n45 36\n37 45\n46 37\n38 46\n42 38\n39 42\n69 39\n40 69\n65 40\n41 65\n66 41\n42 66\n44 42\n43 44\n84 43\n44 84\n62 44\n45 62\n67 45\n46 67\n64 46\n47 64\n77 47\n48 77\n54 48\n49 54\n96 49\n50 86\n64 50\n51 64\n60 51\n53 60\n63 53\n54 63\n58 54\n55 58\n84 55\n56 84\n70 56\n57 70\n84 57\n58 84\n80 58\n59 80\n65 59\n60 65\n100 60\n61 87\n67 61\n62 67\n71 62\n63 71\n94 63\n64 88\n75 64\n65 75\n84 65\n66 84\n85 66\n67 85\n75 67\n68 75\n74 68\n69 74\n84 69\n70 84\n88 70\n71 88\n75 71\n72 75\n82 72\n73 82\n99 73\n74 90\n79 74\n75 79\n89 75\n76 89\n88 76\n77 88\n80 77\n79 80\n81 79\n80 81\n85 80\n81 85\n84 81\n82 84\n86 82\n83 86\n84 83\n89 84\n86 89\n98 86\n87 91\n89 87\n90 89\n91 90\n", "3\n1 6\n2 1\n6 2\n", "1\n3 1\n", "2\n1 2\n3 1\n", "5\n2 7\n3 2\n5 3\n4 5\n7 4\n", "177\n1 8\n110 1\n2 11\n31 2\n3 12\n67 3\n4 13\n40 4\n5 18\n144 5\n6 20\n57 6\n7 24\n90 7\n8 31\n186 8\n9 33\n25 9\n10 25\n112 10\n11 35\n12 11\n14 12\n13 14\n79 13\n14 36\n193 14\n15 37\n159 15\n16 38\n26 16\n17 26\n165 17\n18 40\n91 18\n19 41\n31 19\n20 31\n30 20\n21 30\n62 21\n22 42\n64 22\n23 44\n94 23\n24 47\n60 24\n25 52\n49 25\n26 49\n176 26\n27 56\n172 27\n28 57\n54 28\n29 54\n106 29\n30 59\n68 30\n31 60\n51 31\n32 51\n42 32\n33 42\n131 33\n34 61\n114 34\n36 62\n37 36\n58 37\n38 58\n83 38\n39 64\n164 39\n40 65\n190 40\n41 66\n65 41\n42 65\n59 42\n43 59\n49 43\n44 49\n66 44\n45 66\n181 45\n48 67\n140 48\n49 68\n54 49\n50 54\n82 50\n51 70\n147 51\n52 71\n60 52\n53 60\n57 53\n54 57\n192 54\n55 73\n56 55\n64 56\n57 64\n196 57\n58 74\n101 58\n59 75\n71 59\n61 71\n156 61\n62 76\n68 62\n63 68\n98 63\n64 77\n67 64\n65 67\n195 65\n66 79\n88 66\n67 80\n126 67\n68 82\n170 68\n69 83\n73 69\n70 73\n81 70\n71 81\n76 71\n72 76\n177 72\n73 84\n74 73\n84 74\n75 84\n78 75\n76 78\n119 76\n77 85\n83 77\n78 83\n171 78\n79 86\n127 79\n80 87\n117 80\n81 88\n133 81\n82 89\n184 82\n83 90\n88 83\n84 88\n145 84\n85 91\n88 85\n86 88\n87 86\n134 87\n88 92\n168 88\n89 93\n97 89\n90 94\n93 90\n91 93\n191 91\n92 95\n102 92\n95 96\n120 95\n99 97\n169 98\n163 99\n104 100\n", "36\n1 10\n12 1\n2 12\n16 2\n3 16\n14 3\n4 14\n17 4\n5 17\n20 5\n6 20\n14 6\n7 14\n15 7\n8 15\n14 8\n9 14\n15 9\n10 15\n17 10\n11 17\n16 11\n12 16\n20 12\n13 20\n18 13\n14 18\n17 14\n15 17\n16 15\n18 16\n17 18\n20 17\n18 20\n19 18\n20 19\n", "3\n2 1\n4 2\n5 3\n", "25\n1 4\n2 1\n14 2\n3 10\n11 3\n4 11\n9 4\n5 9\n15 5\n6 14\n16 6\n7 15\n8 7\n10 8\n9 10\n13 9\n10 13\n17 10\n11 16\n12 11\n14 12\n15 14\n20 15\n16 17\n19 16\n", "3\n4 3\n5 4\n6 5\n", "7\n7 1\n2 3\n4 2\n3 4\n6 3\n4 5\n9 4\n", "1\n2 1\n"]}, "index": 15}, {"input": "One not particularly beautiful evening Valera got very bored. To amuse himself a little bit, he found the following game.\n\nHe took a checkered white square piece of paper, consisting of n \u00d7 n cells. After that, he started to paint the white cells black one after the other. In total he painted m different cells on the piece of paper. Since Valera was keen on everything square, he wondered, how many moves (i.e. times the boy paints a square black) he should make till a black square with side 3 can be found on the piece of paper. But Valera does not know the answer to this question, so he asks you to help him.\n\nYour task is to find the minimum number of moves, till the checkered piece of paper has at least one black square with side of 3. Otherwise determine that such move does not exist.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 1000, 1 \u2264 m \u2264 min(n\u00b7n, 105)) \u2014 the size of the squared piece of paper and the number of moves, correspondingly. \n\nThen, m lines contain the description of the moves. The i-th line contains two integers xi, yi (1 \u2264 xi, yi \u2264 n) \u2014 the number of row and column of the square that gets painted on the i-th move. \n\nAll numbers on the lines are separated by single spaces. It is guaranteed that all moves are different. The moves are numbered starting from 1 in the order, in which they are given in the input. The columns of the squared piece of paper are numbered starting from 1, from the left to the right. The rows of the squared piece of paper are numbered starting from 1, from top to bottom.\n\nOutput\n\nOn a single line print the answer to the problem \u2014 the minimum number of the move after which the piece of paper has a black square with side 3. If no such move exists, print -1.\n\n", "output": "read = lambda: map(int, input().split())\nxy = [[0]*1002 for i in range(1002)]\nn, m = read()\nfor i in range(m):\n    x, y = read()\n    for j in range(x-1, x+2):\n        for k in range(y-1, y+2):\n            xy[j][k] += 1\n            if xy[j][k] is 9:\n                print(i+1)\n                exit()\nprint(-1)", "public_tests": {"input": ["4 11\n1 1\n1 2\n1 3\n2 2\n2 3\n1 4\n2 4\n3 4\n3 2\n3 3\n4 1\n", "4 12\n1 1\n1 2\n1 3\n2 2\n2 3\n1 4\n2 4\n3 4\n3 2\n4 2\n4 1\n3 1\n"], "output": ["10", "-1"]}, "private_tests": {"input": ["1 1\n1 1\n", "1000 1\n542 374\n", "4 12\n2 2\n1 1\n3 3\n3 4\n1 2\n1 3\n1 4\n2 1\n3 2\n2 3\n3 1\n4 1\n", "2 1\n1 1\n", "1000 10\n1000 1000\n1000 999\n1000 998\n999 1000\n999 999\n999 998\n998 1000\n998 999\n998 998\n1 1\n", "3 1\n1 3\n", "10 50\n9 7\n4 8\n8 9\n1 6\n6 3\n3 1\n5 10\n7 2\n8 4\n1 9\n5 5\n4 9\n3 5\n6 7\n1 4\n10 10\n5 7\n1 1\n4 10\n6 2\n3 9\n4 3\n7 8\n5 9\n2 7\n2 10\n3 10\n1 10\n6 9\n7 5\n10 1\n3 8\n3 6\n2 6\n10 9\n8 6\n4 7\n10 7\n6 6\n8 10\n9 3\n10 2\n9 2\n10 5\n8 5\n5 6\n10 6\n7 10\n8 2\n8 8\n", "3 9\n2 3\n1 3\n3 1\n1 1\n3 3\n2 1\n2 2\n1 2\n3 2\n", "3 8\n1 3\n3 3\n2 2\n3 2\n1 1\n1 2\n2 3\n3 1\n", "50 18\n20 20\n20 21\n20 22\n21 20\n21 21\n21 22\n22 20\n22 21\n22 22\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n", "50 20\n29 33\n25 9\n34 40\n46 16\n39 8\n49 36\n18 47\n41 29\n48 31\n38 20\n49 3\n28 30\n4 27\n25 38\n4 38\n8 34\n10 8\n22 14\n35 13\n17 46\n", "4 16\n1 3\n4 4\n4 1\n2 3\n3 1\n3 2\n1 4\n2 2\n1 2\n3 3\n2 1\n1 1\n4 2\n2 4\n4 3\n3 4\n", "10 60\n6 7\n2 4\n3 6\n1 4\n8 7\n2 8\n5 7\n6 4\n5 10\n1 7\n3 9\n3 4\n9 2\n7 1\n3 8\n10 7\n9 7\n9 1\n5 5\n4 7\n5 8\n4 2\n2 2\n9 4\n3 3\n7 5\n7 4\n7 7\n8 2\n8 1\n4 5\n1 10\n9 6\n3 1\n1 3\n3 2\n10 10\n4 6\n5 4\n7 3\n10 1\n3 7\n5 1\n10 9\n4 10\n6 10\n7 10\n5 9\n5 6\n1 2\n7 8\n3 5\n9 8\n9 5\n8 10\n4 3\n10 6\n9 10\n5 3\n2 7\n", "500 9\n50 51\n50 52\n50 53\n52 53\n51 51\n51 52\n51 53\n52 51\n52 52\n", "5 20\n2 3\n1 3\n5 1\n1 2\n3 3\n5 4\n5 5\n1 5\n1 4\n4 5\n2 5\n5 2\n4 3\n3 2\n1 1\n2 4\n3 5\n2 2\n3 4\n5 3\n", "2 4\n2 1\n1 2\n1 1\n2 2\n"], "output": ["-1", "-1", "11", "-1", "9", "-1", "-1", "9", "-1", "9", "-1", "12", "52", "9", "19", "-1"]}, "index": 16}, {"input": "Valera the Horse is going to the party with friends. He has been following the fashion trends for a while, and he knows that it is very popular to wear all horseshoes of different color. Valera has got four horseshoes left from the last year, but maybe some of them have the same color. In this case he needs to go to the store and buy some few more horseshoes, not to lose face in front of his stylish comrades.\n\nFortunately, the store sells horseshoes of all colors under the sun and Valera has enough money to buy any four of them. However, in order to save the money, he would like to spend as little money as possible, so you need to help Valera and determine what is the minimum number of horseshoes he needs to buy to wear four horseshoes of different colors to a party.\n\nInput\n\nThe first line contains four space-separated integers s1, s2, s3, s4 (1 \u2264 s1, s2, s3, s4 \u2264 109) \u2014 the colors of horseshoes Valera has.\n\nConsider all possible colors indexed with integers.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of horseshoes Valera needs to buy.\n\n", "output": "print(4-len({*input().split()}))", "public_tests": {"input": ["7 7 7 7\n", "1 7 3 3\n"], "output": ["3\n", "1\n"]}, "private_tests": {"input": ["2 2 2 1\n", "3491663 217797045 522540872 715355328\n", "28442865 741657755 978106882 978106882\n", "240458500 511952208 240458500 511952208\n", "133315691 265159773 734556507 265159773\n", "255635360 732742923 798648949 883146723\n", "81170865 673572653 756938629 995577259\n", "3 1 1 1\n", "251590420 586975278 916631563 586975278\n", "681828506 972810624 972810624 681828506\n", "156630260 609654355 668943582 973622757\n", "915819430 915819430 915819430 915819430\n", "652588203 931100304 931100304 652588203\n", "671645142 671645142 671645142 671645142\n", "259504825 377489979 588153796 377489979\n", "147784432 947653080 947653080 947653080\n", "132503558 132503558 132503558 132503558\n", "1 1 2 5\n", "90793237 90793237 90793237 90793237\n", "94055790 756126496 756126496 94055790\n", "24975422 256716298 337790533 690960249\n", "139159884 616215581 958341883 616215581\n", "454961014 454961014 454961014 454961014\n", "1 1 3 3\n", "391958720 651507265 391958720 651507265\n", "17061017 110313588 434481173 796661222\n", "1 1 3 5\n", "2 1 2 3\n", "5 5 999999 6\n", "1 2 2 2\n", "551651653 551651653 551651653 551651653\n", "131245479 174845575 497483467 131245479\n"], "output": ["2\n", "0\n", "1\n", "2\n", "1\n", "0\n", "0\n", "2\n", "1\n", "2\n", "0\n", "3\n", "2\n", "3\n", "1\n", "2\n", "3\n", "1\n", "3\n", "2\n", "0\n", "1\n", "3\n", "2\n", "2\n", "0\n", "1\n", "1\n", "1\n", "2\n", "3\n", "1\n"]}, "index": 17}, {"input": "Little Petya likes numbers a lot. Recently his mother has presented him a collection of n non-negative integers. There's only one thing Petya likes more than numbers: playing with little Masha. He immediately decided to give a part of his new collection to her. To make the game even more interesting, Petya decided to give Masha such collection of numbers for which the following conditions fulfill:\n\n  * Let's introduce x1 to denote the xor of all numbers Petya has got left; and let's introduce x2 to denote the xor of all numbers he gave to Masha. Value (x1 + x2) must be as large as possible. \n  * If there are multiple ways to divide the collection so that the previous condition fulfilled, then Petya minimizes the value x1. \n\n\n\nThe xor operation is a bitwise excluding \"OR\", that is denoted as \"xor\" in the Pascal language and \"^\" in C/C++/Java.\n\nHelp Petya divide the collection as described above. If there are multiple suitable ways to divide it, find any of them. Please note that after Petya gives a part of his numbers to Masha, he may have no numbers left. The reverse situation is also possible, when Petya gives nothing to Masha. In both cases we must assume that the xor of an empty set of numbers equals 0.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105), showing how many numbers Petya's mother gave him. The second line contains the actual space-separated numbers. They are all integer, non-negative and do not exceed 1018.\n\nOutput\n\nPrint n space-separated integers, the i-th of them should equal either 1, if Petya keeps the number that follows i-th in his collection, or it should equal 2, if Petya gives the corresponding number to Masha. The numbers are indexed in the order in which they are given in the input.\n\n", "output": "base = [-1] * 60\nhow = [-1] * 60\nwho = [-1] * 60\n\nn = int(input())\narr = list(map(int, input().split()))\n\nx = 0\nfor a in arr:\n    x ^= a\n\nmapper = [-1] * 60\nind = 59\nind_start = bin(x).count('1') - 1\n\nfor bit in reversed(range(60)):\n    if (1 << bit) & x :\n        mapper[bit] = ind_start\n        ind_start -= 1\n    else:\n        mapper[bit] = ind\n        ind -= 1\n\nfor i in range(len(arr)):\n    temp = 0\n    for bit in range(60):\n        if (1 << bit) & arr[i]:\n            temp ^= (1 << mapper[bit])\n    arr[i] = temp\n\n\n\n\n\nfor i in range(n):\n    x = arr[i]\n    temp_how = 0\n    while x > 0:\n        \n        b = x.bit_length() - 1\n        \n        if who[b]!= -1:\n            temp_how ^= how[b]\n            x = x ^ base[b]\n        else:\n            who[b] = i\n            base[b] = x\n            how[b] = temp_how | (1 << b)\n            break\n    \n\nx = 0\ntemp = 0\nfor bit in reversed(range(60)):\n    if (x & (1 << bit) ) == 0 and who[bit] != -1:\n        x ^= base[bit]\n        temp ^= how[bit]\n\n#print(base)\n#print(how)\n#print(who)\n\n\nresult = [1] * n\nfor j in range(60):\n    if temp & (1 << j):\n        result[who[j]] = 2\nprint(*result)\n\n            ", "public_tests": {"input": ["3\n1000000000000 1000000000000 1000000000000\n", "8\n1 1 2 2 3 3 4 4\n", "6\n1 2 3 4 5 6\n"], "output}, "private_tests": {"input": ["10\n1 2 1 0 0 1 100 1 3 1\n", "2\n1024 2048\n", "5\n0 0 1 3 128\n", "2\n123456789123456789 123456789123456789\n", "17\n1 2 3 4 5 6 7 8 9 10 11 12 13 13 13 17 16\n", "30\n285 214 1 421 145 3 52 54 62 24 2 245 2 28 8 2 2 20 2 0 3333 171 172 173 174 175 176 666 219 30\n", "1\n123456789123456789\n", "11\n1 2 4 8 16 32 64 128 256 512 1024\n"], "outputnn", "2 2 2 2 2 2 2 2 2 2 2 \n"]}, "index": 18}, {"input": "A car moves from point A to point B at speed v meters per second. The action takes place on the X-axis. At the distance d meters from A there are traffic lights. Starting from time 0, for the first g seconds the green light is on, then for the following r seconds the red light is on, then again the green light is on for the g seconds, and so on.\n\nThe car can be instantly accelerated from 0 to v and vice versa, can instantly slow down from the v to 0. Consider that it passes the traffic lights at the green light instantly. If the car approaches the traffic lights at the moment when the red light has just turned on, it doesn't have time to pass it. But if it approaches the traffic lights at the moment when the green light has just turned on, it can move. The car leaves point A at the time 0.\n\nWhat is the minimum time for the car to get from point A to point B without breaking the traffic rules?\n\nInput\n\nThe first line contains integers l, d, v, g, r (1 \u2264 l, d, v, g, r \u2264 1000, d < l) \u2014 the distance between A and B (in meters), the distance from A to the traffic lights, car's speed, the duration of green light and the duration of red light.\n\nOutput\n\nOutput a single number \u2014 the minimum time that the car needs to get from point A to point B. Your output must have relative or absolute error less than 10 - 6.\n\n", "output": "l,d,v,g,r=map(int,input().split())\ns=(d/v)%(g+r)\nans=l/v\nif s>=g:\n\tans+=g+r-s\nprint(ans)\n", "public_tests": {"input": ["5 4 3 1 1\n", "2 1 3 4 5\n"], "output": ["2.33333333333\n", "0.666666666667\n"]}, "private_tests": {"input": ["1000 999 1000 1000 1\n", "1000 999 1 1000 1000\n", "1000 999 1000 1 1000\n", "2 1 1 1 1000\n", "1000 1 1 1000 1\n", "29 12 569 939 259\n", "1000 999 1 1 1000\n", "1000 1 1000 1 1000\n", "1000 1 1000 1000 1\n", "2 1 1000 1 1\n", "1000 999 1 1000 1\n", "2 1 1000 1000 1000\n", "458 251 49 622 472\n", "2 1 1 1000 1\n", "1000 999 1000 1000 1000\n", "862 33 604 888 704\n", "714 474 124 205 491\n", "1000 1 1 1 1\n", "1000 1 1000 1 1\n", "2 1 1000 1 1000\n", "2 1 1 1 1\n", "1000 1 1000 1000 1000\n", "1000 999 1 1 1\n", "1000 1 1 1000 1000\n", "65 24 832 159 171\n", "1000 1 1 1 1000\n", "86 64 587 89 657\n", "400 333 31 823 74\n", "2 1 1 1000 1000\n", "772 467 142 356 889\n", "1000 999 1000 1 1\n", "2 1 1000 1000 1\n"], "output": ["1.0\n", "1000.0\n", "1.0\n", "1002.0\n", "1000.0\n", "0.0509666080844\n", "1002.0\n", "1.0\n", "1.0\n", "0.002\n", "1000.0\n", "0.002\n", "9.34693877551\n", "2.0\n", "1.0\n", "1.42715231788\n", "5.75806451613\n", "1001.0\n", "1.0\n", "0.002\n", "3.0\n", "1.0\n", "1001.0\n", "1000.0\n", "0.078125\n", "2000.0\n", "0.146507666099\n", "12.9032258065\n", "2.0\n", "5.43661971831\n", "1.0\n", "0.002\n"]}, "index": 19}, {"input": "It is so boring in the summer holiday, isn't it? So Alice and Bob have invented a new game to play. The rules are as follows. First, they get a set of n distinct integers. And then they take turns to make the following moves. During each move, either Alice or Bob (the player whose turn is the current) can choose two distinct integers x and y from the set, such that the set doesn't contain their absolute difference |x - y|. Then this player adds integer |x - y| to the set (so, the size of the set increases by one).\n\nIf the current player has no valid move, he (or she) loses the game. The question is who will finally win the game if both players play optimally. Remember that Alice always moves first.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 100) \u2014 the initial number of elements in the set. The second line contains n distinct space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 the elements of the set.\n\nOutput\n\nPrint a single line with the winner's name. If Alice wins print \"Alice\", otherwise print \"Bob\" (without quotes).\n\n", "output": "import fractions\n\nn = int(input())\nA = list(map(int, input().split()))\nx = A[0]\n\nfor i in A:\n    x = fractions.gcd(x, i)\n\nif (max(A) // x - len(A)) % 2 == 0:\n    print('Bob')\nelse:\n    print('Alice')\n", "public_tests": {"input": ["3\n5 6 7\n", "2\n5 3\n", "2\n2 3\n"], "output": ["Bob\n", "Alice\n", "Alice\n"]}, "private_tests": {"input": ["2\n1 2\n", "10\n1 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991\n", "2\n6 2\n", "4\n2 3 15 30\n", "2\n4 6\n", "10\n72 96 24 66 6 18 12 30 60 48\n", "2\n1 1000000000\n", "2\n10 4\n", "10\n98 63 42 56 14 77 70 35 84 21\n", "10\n78 66 6 60 18 84 36 96 72 48\n", "2\n2 6\n", "2\n1000000000 999999999\n", "3\n4 12 18\n", "10\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000\n", "3\n6 14 21\n", "3\n2 4 6\n"], "output": ["Bob\n", "Alice\n", "Alice\n", "Bob\n", "Alice\n", "Bob\n", "Bob\n", "Alice\n", "Bob\n", "Bob\n", "Alice\n", "Bob\n", "Bob\n", "Bob\n", "Bob\n", "Bob\n"]}, "index": 20}, {"input": "Innocentius has a problem \u2014 his computer monitor has broken. Now some of the pixels are \"dead\", that is, they are always black. As consequence, Innocentius can't play the usual computer games. He is recently playing the following game with his younger brother Polycarpus.\n\nInnocentius is touch-typing a program that paints a white square one-pixel wide frame on the black screen. As the monitor is broken, some pixels that should be white remain black. Polycarpus should look at what the program displayed on the screen and guess the position and size of the frame Innocentius has painted. Polycarpus doesn't like the game but Innocentius persuaded brother to play as \"the game is good for the imagination and attention\".\n\nHelp Polycarpus, automatize his part in the gaming process. Write the code that finds such possible square frame that:\n\n  * the frame's width is 1 pixel, \n  * the frame doesn't go beyond the borders of the screen, \n  * all white pixels of the monitor are located on the frame, \n  * of all frames that satisfy the previous three conditions, the required frame must have the smallest size. \n\n\n\nFormally, a square frame is represented by such pixels of the solid square, that are on the square's border, that is, are not fully surrounded by the other pixels of the square. For example, if the frame's size is d = 3, then it consists of 8 pixels, if its size is d = 2, then it contains 4 pixels and if d = 1, then the frame is reduced to a single pixel.\n\nInput\n\nThe first line contains the resolution of the monitor as a pair of integers n, m (1 \u2264 n, m \u2264 2000). The next n lines contain exactly m characters each \u2014 the state of the monitor pixels at the moment of the game. Character \".\" (period, ASCII code 46) corresponds to the black pixel, and character \"w\" (lowercase English letter w) corresponds to the white pixel. It is guaranteed that at least one pixel of the monitor is white.\n\nOutput\n\nPrint the monitor screen. Represent the sought frame by characters \"+\" (the \"plus\" character). The pixels that has become white during the game mustn't be changed. Print them as \"w\". If there are multiple possible ways to position the frame of the minimum size, print any of them.\n\nIf the required frame doesn't exist, then print a single line containing number -1.\n\n", "output": "#!/usr/bin/python3\n\ndef readln(): return list(map(int, input().split()))\nimport sys\ndef exit():\n    print(-1)\n    sys.exit()\n\nn, m = readln()\nmon = [list(input()) for _ in range(n)]\nhor = [i for i in range(n) if mon[i] != ['.'] * m]\nrmon = list(zip(*mon))\nver = [j for j in range(m) if rmon[j] != ('.',) * n]\nmini = hor[0]\nmaxi = hor[-1]\nminj = ver[0]\nmaxj = ver[-1]\ncnt_in = len([1 for i in range(mini + 1, maxi) for j in range(minj + 1, maxj) if mon[i][j] == 'w'])\ncnt_l = len([1 for i in range(mini + 1, maxi) if mon[i][minj] == 'w'])\ncnt_r = len([1 for i in range(mini + 1, maxi) if mon[i][maxj] == 'w'])\ncnt_d = len([1 for j in range(minj + 1, maxj) if mon[mini][j] == 'w'])\ncnt_u = len([1 for j in range(minj + 1, maxj) if mon[maxi][j] == 'w'])\nif cnt_in:\n    exit()\nif maxi - mini < maxj - minj:\n    k = maxj - minj + 1\n    if maxi == mini and cnt_d:\n        if mini >= k - 1:\n            mini -= k - 1\n        elif maxi + k - 1 < n:\n            maxi += k - 1\n        else:\n            exit()\n    else:\n        if not cnt_d:\n            mini = max(0, maxi - k + 1)\n        if maxi - maxi + 1 != k and not cnt_u:\n            maxi = min(mini + k - 1, n - 1)\n        if maxi - mini + 1 != k:\n            exit()\nelse:\n    k = maxi - mini + 1\n    if maxj == minj and cnt_l:\n        if minj >= k - 1:\n            minj -= k - 1\n        elif maxj + k - 1 < m:\n            maxj += k - 1\n        else:\n            exit()\n    else:\n        if not cnt_l:\n            minj = max(0, maxj - k + 1)\n        if maxj - minj + 1 != k and not cnt_r:\n            maxj = min(minj + k - 1, m - 1)\n        if maxj - minj + 1 != k:\n            exit()\nfor i in range(mini, maxi + 1):\n    if mon[i][minj] == '.':\n        mon[i][minj] = '+'\nfor i in range(mini, maxi + 1):\n    if mon[i][maxj] == '.':\n        mon[i][maxj] = '+'\nfor j in range(minj, maxj + 1):\n    if mon[mini][j] == '.':\n        mon[mini][j] = '+'\nfor j in range(minj, maxj + 1):\n    if mon[maxi][j] == '.':\n        mon[maxi][j] = '+'\nprint('\\n'.join([''.join(row) for row in mon]))\n", "public_tests": {"input": ["4 8\n..w..w..\n........\n........\n..w..w..\n", "5 6\n......\n.w....\n......\n..w...\n......\n", "2 4\n....\n.w..\n", "2 6\nw..w.w\n...w..\n"], "output": ["..w++w..\n..+..+..\n..+..+..\n..w++w..\n", "......\n+w+...\n+.+...\n++w...\n......\n", "....\n.w..\n", "-1\n"]}, "private_tests": {"input": ["1 3\n.w.\n", "8 10\n..........\n..........\n.....w....\n.w........\n..........\n....w.....\n..........\n..........\n", "1 2\nww\n", "5 7\n.......\n.wwww..\n.......\n.......\n.......\n", "4 6\n....w.\n......\n.w....\n......\n", "4 4\nw...\n..w.\n....\n....\n", "5 4\n....\n.w..\n....\n.w..\n....\n", "5 4\nwwww\nw..w\nwwww\n.www\n..ww\n", "1 6\n.....w\n", "5 4\nw...\n....\n...w\n....\n....\n", "10 3\n...\n...\n...\n...\n...\n...\n.w.\n..w\nw..\n...\n", "9 4\n....\n....\n....\n....\n....\n..w.\n....\n....\n.w..\n", "4 3\nw..\n...\n...\n...\n", "5 5\n.....\n.....\n.....\n.w...\n.....\n", "1 6\n..w...\n", "7 3\n...\n...\n...\n..w\n...\nw..\n...\n", "4 4\n..w.\n....\n....\n....\n", "6 1\n.\n.\nw\n.\n.\n.\n", "6 1\n.\n.\n.\n.\n.\nw\n", "8 16\n................\n................\n................\n................\n............w...\n................\n................\n..............w.\n", "5 5\n.....\n...w.\n.....\n.....\n.w...\n", "3 10\n.......w..\n........w.\n......w...\n", "6 5\n.w...\n.....\n.....\n.....\nw....\n.....\n", "1 3\n..w\n", "4 2\nw.\n..\n..\n..\n", "6 3\n...\n...\n...\n...\n...\n.w.\n", "2 2\n.w\n..\n", "5 5\n.w...\n.....\n.....\n.....\n.....\n", "1 4\nw...\n", "4 1\n.\n.\n.\nw\n", "8 10\n..........\n...w......\n.....w....\n.w........\n..........\n....w.....\n..........\n..........\n", "5 4\nwwww\nwwww\nwwww\nwwww\nwwww\n", "2 2\n..\nw.\n", "5 6\n......\n......\n.ww...\n......\n......\n", "6 9\n...ww....\n.........\n.........\n.........\n.........\n......w..\n", "4 6\n....w.\n......\n......\n.w....\n", "2 2\n.w\n.w\n", "5 4\n..w.\n..ww\n.www\n.w..\nwwww\n", "5 5\n.....\n.....\n..ww.\n.....\n.....\n", "3 1\n.\n.\nw\n", "3 4\nw...\n..w.\n.ww.\n", "1 7\nw.....w\n", "5 4\n....\n....\n....\nw...\n....\n", "1 1\nw\n", "2 2\n..\nww\n", "2 2\nww\n..\n", "3 3\n...\nw.w\n...\n", "1 2\n.w\n", "3 2\n..\n.w\n..\n", "4 6\nw...w.\n......\n......\n.w....\n", "6 1\n.\nw\n.\n.\n.\n.\n", "2 1\nw\n.\n", "5 7\n.......\n.w.....\n.w.....\n.w.....\n.w.....\n", "5 4\n..w.\n....\n...w\n..w.\nw...\n", "4 2\n..\nw.\n.w\n..\n", "4 6\nw....w\n......\n.....w\n.w....\n", "2 1\nw\nw\n", "4 6\nw.....\n......\n......\n.w....\n", "6 3\n...\n...\nw.w\n...\nwww\n...\n", "2 2\nw.\n.w\n", "1 5\n....w\n", "8 10\n..........\n...w......\n.....w....\n.w........\n....w.....\n..........\n..........\n..........\n", "2 1\n.\nw\n", "4 3\n..w\nw.w\n...\n...\n", "3 6\n......\n....w.\n......\n", "5 4\n....\nw...\n...w\n.w..\n..w.\n", "3 3\n...\n..w\nw..\n", "5 2\n..\n.w\nww\n..\n..\n", "4 1\n.\nw\n.\n.\n", "6 6\n......\nw.....\n...w..\n.w....\n......\n......\n", "10 4\n....\n.w..\n....\n....\n.w..\n....\n....\n....\n....\n....\n", "3 3\n.w.\n..w\n...\n", "4 10\n..........\n..........\n.w..w.....\n..........\n", "8 10\n..........\n...w......\n..........\n.w........\n..........\n....w.....\n..........\n..........\n", "4 2\n..\n..\nw.\n..\n", "6 1\nw\n.\n.\n.\n.\n.\n", "3 3\n...\n...\n.w.\n", "5 4\nw..w\n...w\nw...\n..w.\n....\n", "5 4\nw.w.\nw...\nwww.\n....\n....\n", "7 3\n...\n...\n...\n.w.\n..w\nw..\n...\n", "2 5\n.....\nww...\n", "5 1\n.\n.\n.\nw\n.\n", "4 1\n.\n.\nw\n.\n", "7 3\n...\n...\n...\n.w.\nw.w\nw..\n...\n", "6 2\n..\n.w\n..\n..\n..\n..\n", "6 9\n.w.......\n.........\n.........\n.........\n.w.......\n......w..\n", "6 2\nw.\n..\n..\n..\n..\n..\n", "5 2\n..\n..\n..\n..\nw.\n", "5 7\n.......\n.......\n.......\n.www...\n.......\n", "8 10\n..........\n...w......\n..........\n..........\n..........\n....w.....\n..........\n..........\n", "1 5\nw....\n", "6 9\n.......w.\n.........\n.........\n.........\n.........\n......w..\n", "2 2\nw.\nw.\n"], "output": [".w.\n", "..........\n.+++++....\n.+...w....\n.w...+....\n.+...+....\n.+++w+....\n..........\n..........\n", "-1\n", ".......\n.wwww..\n.+..+..\n.+..+..\n.++++..\n", ".+++w.\n.+..+.\n.w..+.\n.++++.\n", "w++.\n+.w.\n+++.\n....\n", "....\n+w+.\n+.+.\n+w+.\n....\n", "-1\n", ".....w\n", "w+++\n+..+\n+..w\n++++\n....\n", "...\n...\n...\n...\n...\n...\n+w+\n+.w\nw++\n...\n", "....\n....\n....\n....\n....\n++w+\n+..+\n+..+\n+w++\n", "w..\n...\n...\n...\n", ".....\n.....\n.....\n.w...\n.....\n", "..w...\n", "...\n...\n...\n++w\n+.+\nw++\n...\n", "..w.\n....\n....\n....\n", ".\n.\nw\n.\n.\n.\n", ".\n.\n.\n.\n.\nw\n", "................\n................\n................\n................\n...........+w++.\n...........+..+.\n...........+..+.\n...........+++w.\n", ".....\n+++w.\n+..+.\n+..+.\n+w++.\n", "......+w+.\n......+.w.\n......w++.\n", "+w+++\n+...+\n+...+\n+...+\nw++++\n.....\n", "..w\n", "w.\n..\n..\n..\n", "...\n...\n...\n...\n...\n.w.\n", ".w\n..\n", ".w...\n.....\n.....\n.....\n.....\n", "w...\n", ".\n.\n.\nw\n", "..........\n.++w++....\n.+...w....\n.w...+....\n.+...+....\n.+++w+....\n..........\n..........\n", "-1\n", "..\nw.\n", "......\n.++...\n.ww...\n......\n......\n", ".++ww++..\n.+....+..\n.+....+..\n.+....+..\n.+....+..\n.+++++w..\n", ".+++w.\n.+..+.\n.+..+.\n.w+++.\n", "+w\n+w\n", "-1\n", ".....\n..++.\n..ww.\n.....\n.....\n", ".\n.\nw\n", "w++.\n+.w.\n+ww.\n", "-1\n", "....\n....\n....\nw...\n....\n", "w\n", "++\nww\n", "ww\n++\n", "+++\nw.w\n+++\n", ".w\n", "..\n.w\n..\n", "-1\n", ".\nw\n.\n.\n.\n.\n", "w\n.\n", ".......\n.w+++..\n.w..+..\n.w..+..\n.w+++..\n", "-1\n", "..\nw+\n+w\n..\n", "-1\n", "-1\n", "w+++..\n+..+..\n+..+..\n+w++..\n", "...\n...\nw+w\n+.+\nwww\n...\n", "w+\n+w\n", "....w\n", "-1\n", ".\nw\n", "++w\nw.w\n+++\n...\n", "......\n....w.\n......\n", "-1\n", "+++\n+.w\nw++\n", "..\n+w\nww\n..\n..\n", ".\nw\n.\n.\n", "++++..\nw..+..\n+..w..\n+w++..\n......\n......\n", "....\n+w++\n+..+\n+..+\n+w++\n....\n....\n....\n....\n....\n", ".w+\n.+w\n...\n", ".++++.....\n.+..+.....\n.w..w.....\n.++++.....\n", "..........\n.++w++....\n.+...+....\n.w...+....\n.+...+....\n.+++w+....\n..........\n..........\n", "..\n..\nw.\n..\n", "w\n.\n.\n.\n.\n.\n", "...\n...\n.w.\n", "w++w\n+..w\nw..+\n++w+\n....\n", "w+w.\nw.+.\nwww.\n....\n....\n", "...\n...\n...\n+w+\n+.w\nw++\n...\n", "++...\nww...\n", ".\n.\n.\nw\n.\n", ".\n.\nw\n.\n", "...\n...\n...\n+w+\nw.w\nw++\n...\n", "..\n.w\n..\n..\n..\n..\n", ".w+++++..\n.+....+..\n.+....+..\n.+....+..\n.w....+..\n.+++++w..\n", "w.\n..\n..\n..\n..\n..\n", "..\n..\n..\n..\nw.\n", ".......\n.+++...\n.+.+...\n.www...\n.......\n", "..........\n+++w+.....\n+...+.....\n+...+.....\n+...+.....\n++++w.....\n..........\n..........\n", "w....\n", "..+++++w.\n..+....+.\n..+....+.\n..+....+.\n..+....+.\n..++++w+.\n", "w+\nw+\n"]}, "index": 21}, {"input": "Imagine you have an infinite 2D plane with Cartesian coordinate system. Some of the integral points are blocked, and others are not. Two integral points A and B on the plane are 4-connected if and only if:\n\n  * the Euclidean distance between A and B is one unit and neither A nor B is blocked; \n  * or there is some integral point C, such that A is 4-connected with C, and C is 4-connected with B. \n\n\n\nLet's assume that the plane doesn't contain blocked points. Consider all the integral points of the plane whose Euclidean distance from the origin is no more than n, we'll name these points special. Chubby Yang wants to get the following property: no special point is 4-connected to some non-special point. To get the property she can pick some integral points of the plane and make them blocked. What is the minimum number of points she needs to pick?\n\nInput\n\nThe first line contains an integer n (0 \u2264 n \u2264 4\u00b7107).\n\nOutput\n\nPrint a single integer \u2014 the minimum number of points that should be blocked.\n\n", "output": "print(max(1, 4 * int(int(input()) * 2 ** 0.5)))\n", "public_tests": {"input": ["2\n", "1\n", "3\n"], "output": ["8\n", "4\n", "16\n"]}, "private_tests": {"input": ["34714265\n", "31975828\n", "16\n", "46340\n", "12\n", "39099999\n", "10\n", "46341\n", "15012490\n", "9\n", "15\n", "11\n", "6\n", "39999996\n", "39999997\n", "3107977\n", "17590047\n", "24562258\n", "12823666\n", "2346673\n", "14\n", "743404\n", "614109\n", "25329968\n", "22578061\n", "5\n", "38450759\n", "34609610\n", "5626785\n", "40000000\n", "17082858\n", "0\n", "30426905\n", "1059264\n", "39999998\n", "8\n", "18855321\n", "4\n", "13\n", "33146037\n", "39268638\n", "17464436\n", "2870141\n", "31416948\n", "25\n", "3766137\n", "7\n", "19863843\n", "39999999\n", "24483528\n", "395938\n", "17\n", "31988776\n"], "output": ["196373536\n", "180882596\n", "88\n", "262136\n", "64\n", "221182992\n", "56\n", "262144\n", "84923464\n", "48\n", "84\n", "60\n", "32\n", "226274144\n", "226274152\n", "17581372\n", "99504332\n", "138945112\n", "72541608\n", "13274784\n", "76\n", "4205328\n", "3473924\n", "143287936\n", "127720800\n", "28\n", "217510336\n", "195781516\n", "31829900\n", "226274168\n", "96635236\n", "1\n", "172120564\n", "5992100\n", "226274156\n", "44\n", "106661800\n", "20\n", "72\n", "187502300\n", "222136960\n", "98793768\n", "16235968\n", "177721092\n", "140\n", "21304488\n", "36\n", "112366864\n", "226274164\n", "138499748\n", "2239760\n", "96\n", "180955840\n"]}, "index": 22}, {"input": "Bimokh is Mashmokh's boss. For the following n days he decided to pay to his workers in a new way. At the beginning of each day he will give each worker a certain amount of tokens. Then at the end of each day each worker can give some of his tokens back to get a certain amount of money. The worker can save the rest of tokens but he can't use it in any other day to get more money. If a worker gives back w tokens then he'll get <image> dollars. \n\nMashmokh likes the tokens however he likes money more. That's why he wants to save as many tokens as possible so that the amount of money he gets is maximal possible each day. He has n numbers x1, x2, ..., xn. Number xi is the number of tokens given to each worker on the i-th day. Help him calculate for each of n days the number of tokens he can save.\n\nInput\n\nThe first line of input contains three space-separated integers n, a, b (1 \u2264 n \u2264 105; 1 \u2264 a, b \u2264 109). The second line of input contains n space-separated integers x1, x2, ..., xn (1 \u2264 xi \u2264 109).\n\nOutput\n\nOutput n space-separated integers. The i-th of them is the number of tokens Mashmokh can save on the i-th day.\n\n", "output": "n,a,b=map(int,input().split())\nfor i in input().split(): \n    print(((int(i)*a)%b)//a,end=' ')\n", "public_tests": {"input": ["1 1 1\n1\n", "3 1 2\n1 2 3\n", "5 1 4\n12 6 11 9 1\n"], "output": ["0\n", "1 0 1\n", "0 2 3 1 1\n"]}, "private_tests": {"input": ["1 1 1000000000\n1000000000\n", "1 1 1000000000\n999999999\n", "10 1 100000000\n999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999\n"], "output": ["0\n", "999999999\n", "99999999 99999999 99999999 99999999 99999999 99999999 99999999 99999999 99999999 99999999\n"]}, "index": 23}, {"input": "Paul hates palindromes. He assumes that string s is tolerable if each its character is one of the first p letters of the English alphabet and s doesn't contain any palindrome contiguous substring of length 2 or more.\n\nPaul has found a tolerable string s of length n. Help him find the lexicographically next tolerable string of the same length or else state that such string does not exist.\n\nInput\n\nThe first line contains two space-separated integers: n and p (1 \u2264 n \u2264 1000; 1 \u2264 p \u2264 26). The second line contains string s, consisting of n small English letters. It is guaranteed that the string is tolerable (according to the above definition).\n\nOutput\n\nIf the lexicographically next tolerable string of the same length exists, print it. Otherwise, print \"NO\" (without the quotes).\n\n", "output": "def trans(c):\n  return chr(ord(c) + 1)\n \nn, p = list(map(int, input().split()))\ns = list(input())\ns[n-1] = trans(s[n-1])\n \ni = n - 1\nwhile i >= 0 and i < n:\n  if ord(s[i]) >= ord('a') + p:\n    s[i] = 'a'\n    i -= 1\n    s[i] = trans(s[i])\n  elif i > 0 and s[i] == s[i-1] or i > 1 and s[i] == s[i-2]:\n    s[i] = trans(s[i])\n  else:\n    i += 1\nprint(\"NO\" if i < 0 else \"\".join(s))", "public_tests": {"input": ["3 4\ncba\n", "4 4\nabcd\n", "3 3\ncba\n"], "output": ["cbd\n", "abda\n", "NO\n"]}, "private_tests": {"input": ["6 3\nacbacb\n", "30 7\ncedcfedcfgcfgcbadcadgfaegfacgf\n", "1 26\no\n", "1 2\na\n", "3 26\nyzx\n", "333 5\nedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedcedc\n", "12 10\nabcabcabcabc\n", "3 3\ncab\n", "10 3\ncbacbacbac\n", "17 26\nbazyxzyxzyxzyxzyx\n", "1 2\nb\n", "7 26\nzyxzyxz\n", "17 4\ndabcadcbdcadbcdbc\n", "1 26\nz\n", "3 3\nacb\n", "5 5\naceba\n", "2 2\nba\n", "10 10\nfajegfaicb\n", "100 4\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca\n", "10 5\nabcabcabca\n", "2 2\nab\n", "1 1\na\n", "77 7\ncadgbagbcaecgfaegcdbeafbacbdfgaedgcdeabgebaecbeacgfebagedcegdafdgeacegfegfegf\n", "30 26\nabcabcabczyxzyxzyxzyxzyxzyxzyx\n", "70 4\ndcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbd\n", "6 3\nabcabc\n", "11 3\nabcabcabcab\n", "15 11\ncgjkbadjfbdaikj\n", "302 4\nabdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcbdcb\n", "26 26\nahnxdnbfcriersyzdihuecojdi\n", "2 4\ncd\n", "3 4\ncdb\n", "300 3\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n", "13 7\ngfegfegfegfeg\n"], "output": ["bacbac\n", "cedcfedcfgcfgcbadcadgfaegfadba\n", "p\n", "b\n", "zab\n", "NO\n", "abcabcabcabd\n", "cba\n", "NO\n", "bcabcabcabcabcabc\n", "NO\n", "NO\n", "dabcadcbdcadcabca\n", "NO\n", "bac\n", "acebc\n", "NO\n", "fajegfaicd\n", "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcd\n", "abcabcabcd\n", "ba\n", "NO\n", "cadgbagbcaecgfaegcdbeafbacbdfgaedgcdeabgebaecbeacgfebagedcegdafdgeacfabcabcab\n", "abcabcabdabcabcabcabcabcabcabc\n", "NO\n", "acbacb\n", "acbacbacbac\n", "cgjkbadjfbdajba\n", "acbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbac\n", "ahnxdnbfcriersyzdihuecojdk\n", "da\n", "dab\n", "acbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n", "NO\n"]}, "index": 24}, {"input": "Fox Ciel is playing a game. In this game there is an infinite long tape with cells indexed by integers (positive, negative and zero). At the beginning she is standing at the cell 0.\n\nThere are also n cards, each card has 2 attributes: length li and cost ci. If she pays ci dollars then she can apply i-th card. After applying i-th card she becomes able to make jumps of length li, i. e. from cell x to cell (x - li) or cell (x + li).\n\nShe wants to be able to jump to any cell on the tape (possibly, visiting some intermediate cells). For achieving this goal, she wants to buy some cards, paying as little money as possible. \n\nIf this is possible, calculate the minimal cost.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 300), number of cards.\n\nThe second line contains n numbers li (1 \u2264 li \u2264 109), the jump lengths of cards.\n\nThe third line contains n numbers ci (1 \u2264 ci \u2264 105), the costs of cards.\n\nOutput\n\nIf it is impossible to buy some cards and become able to jump to any cell, output -1. Otherwise output the minimal cost of buying such set of cards.\n\n", "output": "#D\ninput()\nok = {0:0}\nfor p, c in zip(list(map(int, input().split())),\n                list(map(int, input().split()))):\n    ad = []\n    for b, u in ok.items():\n        a = p\n        while b:\n            a,b  = b, a % b\n        ad.append((a, u + c))\n    for a, u in ad:\n        ok[a] = min(u, ok.get(a, 1000000000))\nprint(ok.get(1, -1))\n", "public_tests": {"input": ["3\n100 99 9900\n1 1 1\n", "8\n4264 4921 6321 6984 2316 8432 6120 1026\n4264 4921 6321 6984 2316 8432 6120 1026\n", "7\n15015 10010 6006 4290 2730 2310 1\n1 1 1 1 1 1 10\n", "5\n10 20 30 40 50\n1 1 1 1 1\n"], "output": ["2\n", "7237\n", "6\n", "-1\n"]}, "private_tests": {"input": ["1\n1\n1\n", "39\n692835 4849845 22610 1995 19019 114 6270 15 85085 27170 1365 1155 7410 238 3135 546 373065 715 110 969 15 10374 2730 19019 85 65 5187 26 3233230 1122 399 1122 53295 910 110 12597 16302 125970 67830\n4197 6490 2652 99457 65400 96257 33631 23456 14319 22288 16179 74656 89713 31503 45895 31777 64534 27989 60861 69846 44586 87185 96589 62279 62478 6180 26977 12112 9975 72933 73239 65856 98253 18875 55266 55867 36397 40743 47977\n", "35\n512 268435456 8 128 134217728 8192 33554432 33554432 536870912 512 65536 1048576 32768 512 524288 1024 536870912 536870912 16 32 33554432 134217728 2 16 16777216 8192 262144 65536 33554432 128 4096 2097152 33554432 2097152 2\n36157 67877 79710 63062 12683 36255 61053 83828 93590 74236 5281 28143 7350 45953 96803 15998 11240 45207 63010 74076 85227 83498 68320 77288 48100 51373 87843 70054 28986 25365 98581 11195 43674 75769 22053\n", "6\n1 2 4 8 16 32\n32 16 8 4 2 1\n", "1\n1000000000\n100000\n", "1\n2\n2\n", "2\n1000000000 999999999\n100000 100000\n", "8\n2 3 5 7 11 13 17 19\n4 8 7 1 5 2 6 3\n"], "output": ["1\n", "18961\n", "-1\n", "32\n", "-1\n", "-1\n", "200000\n", "3\n"]}, "index": 25}, {"input": "A magic island Geraldion, where Gerald lives, has its own currency system. It uses banknotes of several values. But the problem is, the system is not perfect and sometimes it happens that Geraldionians cannot express a certain sum of money with any set of banknotes. Of course, they can use any number of banknotes of each value. Such sum is called unfortunate. Gerald wondered: what is the minimum unfortunate sum?\n\nInput\n\nThe first line contains number n (1 \u2264 n \u2264 1000) \u2014 the number of values of the banknotes that used in Geraldion. \n\nThe second line contains n distinct space-separated numbers a1, a2, ..., an (1 \u2264 ai \u2264 106) \u2014 the values of the banknotes.\n\nOutput\n\nPrint a single line \u2014 the minimum unfortunate sum. If there are no unfortunate sums, print  - 1.\n\n", "output": "input()\nprint(1-2*('1' in input().split()))", "public_tests": {"input": ["5\n1 2 3 4 5\n"], "output": ["-1\n"]}, "private_tests": {"input": ["10\n635370 154890 909382 220996 276501 716105 538714 140162 171960 271264\n", "1\n1\n", "10\n371054 506438 397130 1 766759 208409 769264 549213 641270 771837\n", "1\n1000000\n", "1\n2\n", "2\n3 2\n", "50\n110876 835020 859879 999908 712969 788264 287153 921820 330355 499311 209594 484829 296329 940051 174081 931503 1 780512 390075 97866 124255 950067 697612 244256 782385 789882 37608 82153 399889 598867 416717 377988 535636 511221 792568 683271 131077 290194 496712 330720 587436 563481 645817 942562 654093 980561 382937 48293 582608 116156\n", "2\n2 3\n", "50\n474421 421097 217233 156339 27075 733996 281778 863492 184707 956857 288561 70997 393786 337382 663642 131184 637 273801 799870 295017 392338 842567 161819 297705 102013 930684 375703 838048 154915 138503 629056 256591 893619 19263 787927 684541 320265 841090 421423 490879 394582 493952 619247 633202 612928 50907 276653 407819 489945 153173\n"], "output": ["1\n", "-1\n", "-1\n", "1\n", "1\n", "1\n", "-1\n", "1\n", "1\n"]}, "index": 26}, {"input": "Gennady is one of the best child dentists in Berland. Today n children got an appointment with him, they lined up in front of his office.\n\nAll children love to cry loudly at the reception at the dentist. We enumerate the children with integers from 1 to n in the order they go in the line. Every child is associated with the value of his cofidence pi. The children take turns one after another to come into the office; each time the child that is the first in the line goes to the doctor.\n\nWhile Gennady treats the teeth of the i-th child, the child is crying with the volume of vi. At that the confidence of the first child in the line is reduced by the amount of vi, the second one \u2014 by value vi - 1, and so on. The children in the queue after the vi-th child almost do not hear the crying, so their confidence remains unchanged.\n\nIf at any point in time the confidence of the j-th child is less than zero, he begins to cry with the volume of dj and leaves the line, running towards the exit, without going to the doctor's office. At this the confidence of all the children after the j-th one in the line is reduced by the amount of dj.\n\nAll these events occur immediately one after the other in some order. Some cries may lead to other cries, causing a chain reaction. Once in the hallway it is quiet, the child, who is first in the line, goes into the doctor's office.\n\nHelp Gennady the Dentist to determine the numbers of kids, whose teeth he will cure. Print their numbers in the chronological order.\n\nInput\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 4000) \u2014 the number of kids in the line. \n\nNext n lines contain three integers each vi, di, pi (1 \u2264 vi, di, pi \u2264 106) \u2014 the volume of the cry in the doctor's office, the volume of the cry in the hall and the confidence of the i-th child.\n\nOutput\n\nIn the first line print number k \u2014 the number of children whose teeth Gennady will cure.\n\nIn the second line print k integers \u2014 the numbers of the children who will make it to the end of the line in the increasing order.\n\n", "output": "n = int(input())\nmas=[]\nfor i in range(n):\n    mas.append(list(map(int,input().split(\" \"))))\nres=[]\nfor i in range(n):\n    if mas[i][2]>=0:\n        res.append(str(i+1))\n        d=0\n        col=0\n        for j in range(i+1,n):\n            if mas[j][2]>=0:\n                mas[j][2]-=(d+ max(0,mas[i][0]-col))\n                col+=1\n                if mas[j][2]<0:\n                    d+=mas[j][1]\n                    mas[j][1]=0\nprint(len(res))\nprint(\" \".join(res))", "public_tests": {"input": ["5\n4 2 2\n4 1 2\n5 2 4\n3 3 5\n5 1 2\n", "5\n4 5 1\n5 3 9\n4 1 2\n2 1 8\n4 1 9\n"], "output": ["2\n1 3", "4\n1 2 4 5"]}, "private_tests": {"input": ["10\n10 3 3\n8 6 17\n9 5 26\n10 7 17\n3 10 29\n3 1 27\n3 3 7\n8 10 28\n1 3 23\n3 4 6\n", "1\n1 1 1\n", "10\n9 8 8\n2 9 8\n10 7 16\n7 2 9\n3 5 23\n9 9 25\n3 2 35\n3 5 36\n5 3 40\n4 4 42\n", "10\n10 7 10\n3 6 11\n8 4 10\n10 1 11\n7 3 13\n7 2 13\n7 6 14\n3 4 17\n9 4 20\n5 2 24\n", "3\n5 1 1\n1 1 4\n1 1 4\n", "10\n5 6 3\n7 4 10\n9 1 17\n2 8 23\n9 10 24\n6 8 18\n3 2 35\n7 6 6\n1 3 12\n9 9 5\n", "3\n5 1 1\n1 1 4\n1 1 5\n", "3\n5 1 1\n1 1 5\n1 1 3\n", "4\n2 10 1\n1 2 2\n2 1 1\n5 5 1\n", "10\n4 9 1\n8 2 14\n7 10 20\n6 9 18\n5 3 19\n2 9 7\n6 8 30\n8 7 38\n6 5 5\n6 9 37\n", "3\n5 1 1\n10 1 5\n1000 1000 14\n", "10\n5 6 1\n9 2 6\n4 1 5\n4 10 5\n1 8 23\n9 4 21\n3 9 6\n7 8 34\n7 4 24\n8 9 21\n", "2\n5 1 1\n1 1 4\n", "2\n5 1 1\n1 1 5\n", "2\n5 1 1\n1 1 6\n", "10\n9 8 8\n2 9 33\n10 7 42\n7 2 18\n3 5 82\n9 9 25\n3 2 86\n3 5 49\n5 3 72\n4 4 71\n"], "output": ["5\n1 2 3 5 8", "1\n1", "1\n1", "3\n1 2 5", "1\n1", "6\n1 2 3 4 5 7", "2\n1 3", "2\n1 2", "3\n1 2 4", "8\n1 2 3 4 5 7 8 10", "3\n1 2 3", "5\n1 2 5 6 8", "1\n1", "2\n1 2", "2\n1 2", "10\n1 2 3 4 5 6 7 8 9 10"]}, "index": 27}, {"input": "Genos recently installed the game Zuma on his phone. In Zuma there exists a line of n gemstones, the i-th of which has color ci. The goal of the game is to destroy all the gemstones in the line as quickly as possible.\n\nIn one second, Genos is able to choose exactly one continuous substring of colored gemstones that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again. What is the minimum number of seconds needed to destroy the entire line?\n\nLet us remind, that the string (or substring) is called palindrome, if it reads same backwards or forward. In our case this means the color of the first gemstone is equal to the color of the last one, the color of the second gemstone is equal to the color of the next to last and so on.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 500) \u2014 the number of gemstones.\n\nThe second line contains n space-separated integers, the i-th of which is ci (1 \u2264 ci \u2264 n) \u2014 the color of the i-th gemstone in a line.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of seconds needed to destroy the entire line.\n\n", "output": "n = int(input())\nt = tuple(map(int, input().split()))\nm = [[1] * n for i in range(n + 1)]\nfor d in range(2, n + 1):\n    for i in range(n - d + 1):\n        m[d][i] = min(m[x][i] + m[d - x][i + x] for x in range(1, d))\n        if t[i] == t[i + d - 1]: m[d][i] = min(m[d][i], m[d - 2][i + 1])\nprint(m[n][0])", "public_tests": {"input": ["3\n1 2 3\n", "7\n1 4 4 2 3 2 1\n", "3\n1 2 1\n"], "output": ["3", "2", "1"]}, "private_tests": {"input": ["50\n22 19 14 22 20 11 16 28 23 15 3 23 6 16 30 15 15 10 24 28 19 19 22 30 28 1 27 12 12 14 17 30 17 26 21 26 27 1 11 23 9 30 18 19 17 29 11 20 29 24\n", "50\n5 7 5 10 7 9 1 9 10 2 8 3 5 7 3 10 2 3 7 6 2 7 1 2 2 2 4 7 3 5 8 3 4 4 1 6 7 10 5 4 8 1 9 5 5 3 4 4 8 3\n", "50\n30 17 31 15 10 3 39 36 5 29 16 11 31 2 38 1 32 40 7 15 39 34 24 11 4 23 9 35 39 32 4 5 14 37 10 34 11 33 30 14 4 34 23 10 34 34 26 34 26 16\n", "50\n13 17 20 5 14 19 4 17 9 13 10 19 16 13 17 2 18 3 1 9 19 4 19 10 17 12 16 20 10 11 15 10 3 19 8 6 2 8 9 15 13 7 8 8 5 8 15 18 9 4\n", "2\n1 1\n", "1\n1\n", "2\n1 2\n", "50\n19 25 46 17 1 41 50 19 7 1 43 8 19 38 42 32 38 22 8 5 5 31 29 35 43 12 23 48 40 29 30 9 46 3 39 24 36 36 32 22 21 29 43 33 36 49 48 22 47 37\n", "6\n1 2 1 1 3 1\n", "8\n1 2 1 3 4 1 2 1\n"], "output": ["25", "21", "36", "28", "1", "1", "2", "36", "2", "2"]}, "index": 28}, {"input": "Btoh yuo adn yuor roomatme lhoate wianshg disehs, btu stlil sdmoeboy msut peorrfm tihs cohre dialy. Oen dya yuo decdie to idourtcne smoe syestm. Yuor rmmotaoe sstgegus teh fooniwllg dael. Yuo argee on tow arayrs of ientgres M adn R, nmebur upmicnog dyas (induiclng teh cunrret oen) wtih sicsescuve irnegets (teh ceurrnt dya is zreo), adn yuo wsah teh diehss on dya D if adn olny if terhe etsixs an iednx i scuh taht D mod M[i] = R[i], otwsehrie yuor rmootmae deos it. Yuo lkie teh cncepot, btu yuor rmotaome's cuinnng simle meaks yuo ssecupt sthnoemig, so yuo itennd to vefriy teh fnerisas of teh aemnrgeet.\n\nYuo aer geivn ayarrs M adn R. Cuaclatle teh pceanregte of dyas on wchih yuo edn up dnoig teh wisahng. Amsuse taht yuo hvae iiiftlneny mnay dyas aehad of yuo. \n\nInput\n\nThe first line of input contains a single integer N (1 \u2264 N \u2264 16).\n\nThe second and third lines of input contain N integers each, all between 0 and 16, inclusive, and represent arrays M and R, respectively. All M[i] are positive, for each i R[i] < M[i].\n\nOutput\n\nOutput a single real number. The answer is considered to be correct if its absolute or relative error does not exceed 10 - 4.\n\n", "output": "input()\nf=lambda:map(int,input().split())\nT,l=1<<19,list(zip(f(),f()))\nprint(sum(any(d%m==r for m,r in l) for d in range(T))/T)", "public_tests": {"input": ["2\n2 3\n1 0\n", "1\n2\n0\n"], "output": ["0.6666666666666666\n", "0.5\n"]}, "private_tests": {"input": ["1\n15\n1\n", "1\n7\n5\n", "1\n6\n3\n", "2\n10 14\n2 5\n", "16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n", "1\n16\n15\n", "3\n6 14 7\n4 2 0\n", "2\n13 3\n6 0\n", "12\n8 5 5 12 12 14 14 16 5 11 9 3\n1 4 0 11 10 0 2 3 1 8 8 2\n", "8\n15 3 7 11 14 10 16 2\n0 2 1 4 0 0 13 1\n", "4\n3 8 9 4\n1 6 7 3\n", "5\n16 6 4 15 2\n13 3 0 13 0\n", "10\n9 8 7 7 16 3 10 13 5 6\n2 0 0 4 1 0 3 12 1 5\n", "7\n3 15 11 4 12 15 12\n2 9 3 0 9 13 6\n", "10\n2 15 15 4 3 10 8 14 12 12\n1 8 13 0 0 6 4 2 4 5\n", "3\n2 4 4\n0 1 3\n", "4\n10 15 2 9\n8 14 0 0\n", "7\n13 12 4 2 7 13 8\n4 6 0 0 3 9 3\n", "12\n5 16 12 3 10 15 11 14 2 3 4 11\n3 14 1 0 7 9 10 12 1 2 2 6\n", "5\n3 3 13 5 10\n1 0 1 4 2\n", "14\n14 8 6 12 13 15 2 3 16 15 15 15 16 8\n10 0 5 6 1 7 0 2 1 4 2 11 14 2\n", "14\n12 11 7 12 2 4 14 10 7 4 15 3 5 16\n2 8 0 9 0 1 4 0 5 3 11 1 0 6\n", "13\n3 4 16 11 12 13 12 12 3 16 8 13 4\n0 1 14 5 8 5 11 7 1 6 4 1 0\n", "7\n10 15 9 5 9 15 16\n2 7 2 4 0 12 13\n", "3\n16 13 3\n11 5 1\n", "10\n16 10 16 15 12 5 4 9 3 10\n9 0 1 2 9 4 1 8 0 8\n", "7\n15 9 9 2 6 8 3\n10 2 7 1 3 2 0\n", "9\n15 9 7 4 14 14 2 11 13\n2 6 2 3 11 12 0 3 3\n", "10\n3 16 16 9 5 16 9 7 8 2\n0 1 7 2 1 9 0 4 4 1\n", "16\n5 6 9 13 13 15 9 10 2 6 10 11 12 7 4 8\n4 3 3 5 8 3 6 5 1 4 2 6 7 4 0 1\n", "9\n6 12 3 10 15 14 6 9 3\n5 2 0 6 1 1 2 2 2\n", "5\n4 15 9 16 6\n3 9 8 14 1\n", "9\n14 14 5 8 16 2 11 7 11\n9 7 0 2 7 1 10 2 4\n", "3\n9 12 6\n0 5 0\n"], "output": ["0.06666666666666667\n", "0.14285714285714285\n", "0.16666666666666666\n", "0.17142857142857143\n", "1.0\n", "0.0625\n", "0.3333333333333333\n", "0.38461538461538464\n", "0.859307", "0.826840", "0.583333", "0.737500", "0.832418", "0.757576", "0.914286", "1.000000", "0.588889", "0.728022", "0.953247", "0.784615", "0.784615", "1.000000", "0.967949", "0.543056", "0.423077", "0.811111", "0.850000", "0.876790", "0.857143", "0.959707", "0.752381", "0.518056", "0.789610", "0.305556"]}, "index": 29}, {"input": "Let A = {a1, a2, ..., an} be any permutation of the first n natural numbers {1, 2, ..., n}. You are given a positive integer k and another sequence B = {b1, b2, ..., bn}, where bi is the number of elements aj in A to the left of the element at = i such that aj \u2265 (i + k).\n\nFor example, if n = 5, a possible A is {5, 1, 4, 2, 3}. For k = 2, B is given by {1, 2, 1, 0, 0}. But if k = 3, then B = {1, 1, 0, 0, 0}.\n\nFor two sequences X = {x1, x2, ..., xn} and Y = {y1, y2, ..., yn}, let i-th elements be the first elements such that xi \u2260 yi. If xi < yi, then X is lexicographically smaller than Y, while if xi > yi, then X is lexicographically greater than Y.\n\nGiven n, k and B, you need to determine the lexicographically smallest A.\n\nInput\n\nThe first line contains two space separated integers n and k (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 n). On the second line are n integers specifying the values of B = {b1, b2, ..., bn}.\n\nOutput\n\nPrint on a single line n integers of A = {a1, a2, ..., an} such that A is lexicographically minimal. It is guaranteed that the solution exists.\n\n", "output": "s = input()\nl = s.split()\n\nn = int(l[0])\nk = int(l[1])\n\ns = input()\nl = s.split()\n\nb = [-1]\n\nfor i in range(1, n + 1):\n    b.append(int(l[i - 1]))\n\nfor i in range(1, n + 1):\n\n    j = 1\n    while b[j] != 0:\n        j += 1\n\n    b[j] -= 1\n    print(j, end = ' ')\n\n    for t in range(1, n + 1):\n        if j - k >= t:\n            b[t] -= 1\n\n", "public_tests": {"input": ["5 2\n1 2 1 0 0\n", "4 2\n1 0 0 0\n"], "output": ["4 1 5 2 3\n", "2 3 1 4\n"]}, "private_tests": {"input": ["13 2\n1 2 3 4 5 4 3 2 1 0 0 0 0\n", "20 4\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0\n", "20 2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0\n", "10 10\n0 0 0 0 0 0 0 0 0 0\n", "10 3\n4 2 4 2 1 0 1 0 0 0\n", "20 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0\n", "20 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0\n", "10 1\n7 6 5 4 3 2 1 0 0 0\n", "15 3\n4 2 7 5 1 1 1 0 0 0 0 0 0 0 0\n", "130 32\n72 56 81 71 45 17 65 13 87 22 17 75 72 80 68 76 62 35 14 53 49 72 19 55 10 57 28 35 66 59 45 24 37 65 46 31 34 1 30 12 37 13 40 41 39 6 31 28 30 0 2 7 23 32 0 34 21 0 23 3 18 33 7 6 20 19 21 10 27 28 19 23 5 15 22 13 14 1 3 14 0 5 1 14 0 0 7 11 10 1 1 1 6 5 3 3 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "10 1\n9 8 7 6 5 4 3 2 1 0\n", "5 1\n1 3 2 0 0\n", "3 1\n2 1 0\n", "10 9\n1 0 0 0 0 0 0 0 0 0\n", "10 1\n1 1 1 1 1 1 1 1 1 0\n", "2 2\n0 0\n", "1 1\n0\n", "5 4\n1 0 0 0 0\n", "2 1\n1 0\n", "8 3\n2 0 2 2 1 0 0 0\n", "5 1\n4 3 2 1 0\n", "2 1\n0 0\n"], "output": ["10 1 11 2 8 3 9 4 6 7 5 12 13\n", "17 1 2 3 4 5 6 7 8 9 10 11 12 13 18 14 19 15 20 16\n", "19 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 20 18\n", "1 2 3 4 5 6 7 8 9 10\n", "6 8 2 5 9 1 4 10 3 7\n", "20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n", "18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 19 20\n", "8 7 6 5 4 3 2 1 9 10\n", "8 5 2 9 6 1 10 7 11 4 12 3 13 14 15\n", "50 55 58 81 38 85 86 51 97 99 100 46 60 101 8 102 25 52 103 6 19 64 11 104 63 105 106 40 107 10 42 108 23 109 68 73 110 78 111 112 113 79 32 114 115 27 61 83 18 116 117 65 66 118 28 53 5 57 82 119 36 39 67 120 48 59 74 76 2 33 121 37 71 122 21 47 49 77 90 41 123 20 31 91 124 7 92 125 43 1 4 45 54 80 17 24 35 44 87 126 72 26 127 15 69 3 128 13 56 75 12 129 70 30 84 95 62 16 130 88 14 22 89 29 93 9 94 96 98 34\n", "10 9 8 7 6 5 4 3 2 1\n", "4 1 5 3 2\n", "3 2 1\n", "2 3 4 5 6 7 8 9 10 1\n", "10 1 2 3 4 5 6 7 8 9\n", "1 2\n", "1\n", "2 3 4 5 1\n", "2 1\n", "2 6 7 1 3 8 4 5\n", "5 4 3 2 1\n", "1 2\n"]}, "index": 30}, {"input": "You are given n integers a1, a2, ..., an. Find the number of pairs of indexes i, j (i < j) that ai + aj is a power of 2 (i. e. some integer x exists so that ai + aj = 2x).\n\nInput\n\nThe first line contains the single positive integer n (1 \u2264 n \u2264 105) \u2014 the number of integers.\n\nThe second line contains n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nOutput\n\nPrint the number of pairs of indexes i, j (i < j) that ai + aj is a power of 2.\n\n", "output": "input();s,d=0,{}\nfor i in map(int,input().split()):\n    for p in range(32):\n        s+=d.get((1<<p)-i,0)\n    d[i]=d.get(i,0)+1\nprint(s)", "public_tests": {"input": ["3\n1 1 1\n", "4\n7 3 2 1\n"], "output": ["3\n", "2\n"]}, "private_tests": {"input": ["2\n1 1\n", "10\n2827343 1373647 96204862 723505 796619138 71550121 799843967 5561265 402690754 446173607\n", "1\n2\n", "10\n6 6 7 3 9 14 15 7 2 2\n", "100\n3 6 12 1 16 4 9 5 4 4 5 8 12 4 6 14 5 1 2 2 2 1 7 1 9 10 6 13 7 8 3 11 8 11 7 5 15 6 14 10 4 2 10 9 1 8 14 9 5 11 3 4 1 12 6 8 13 4 8 5 4 13 13 1 3 9 14 7 14 10 7 3 12 8 9 8 6 15 9 10 12 14 15 4 16 8 8 4 8 7 5 10 16 4 10 13 6 16 16 5\n", "1\n1000000000\n"], "output": ["1\n", "2\n", "0\n", "9\n", "532\n", "0\n"]}, "index": 31}, {"input": "There are k sensors located in the rectangular room of size n \u00d7 m meters. The i-th sensor is located at point (xi, yi). All sensors are located at distinct points strictly inside the rectangle. \n\nOpposite corners of the room are located at points (0, 0) and (n, m). Walls of the room are parallel to coordinate axes.\n\nAt the moment 0, from the point (0, 0) the laser ray is released in the direction of point (1, 1). The ray travels with a speed of <image> meters per second. Thus, the ray will reach the point (1, 1) in exactly one second after the start.\n\nWhen the ray meets the wall it's reflected by the rule that the angle of incidence is equal to the angle of reflection. If the ray reaches any of the four corners, it immediately stops.\n\nFor each sensor you have to determine the first moment of time when the ray will pass through the point where this sensor is located. If the ray will never pass through this point, print  - 1 for such sensors.\n\nInput\n\nThe first line of the input contains three integers n, m and k (2 \u2264 n, m \u2264 100 000, 1 \u2264 k \u2264 100 000) \u2014 lengths of the room's walls and the number of sensors.\n\nEach of the following k lines contains two integers xi and yi (1 \u2264 xi \u2264 n - 1, 1 \u2264 yi \u2264 m - 1) \u2014 coordinates of the sensors. It's guaranteed that no two sensors are located at the same point.\n\nOutput\n\nPrint k integers. The i-th of them should be equal to the number of seconds when the ray first passes through the point where the i-th sensor is located, or  - 1 if this will never happen. \n\n", "output": "from sys import *\nf = lambda: map(int, stdin.readline().split())\nn, m, k = f()\nw, h = 2 * n, 2 * m\n\ninf = 1e11\ns = [inf] * (w + h)\na = b = t = 0\n\nwhile 1:\n    if s[b - a] == inf: s[b - a] = t - a\n    d = min(w - a, h - b)\n    t += d\n    a = (a + d) % w\n    b = (b + d) % h\n    if a % n == b % m: break\n\nfor i in range(k):\n    x, y = f()\n    q = min(s[b - a] + a for a in (x, w - x) for b in (y, h - y))\n    print(q if q < inf else -1)", "public_tests": {"input": ["3 3 4\n1 1\n1 2\n2 1\n2 2\n", "3 4 6\n1 1\n2 1\n1 2\n2 2\n1 3\n2 3\n", "7 4 5\n1 3\n2 2\n5 1\n5 3\n4 3\n"], "output": ["1\n-1\n-1\n2\n", "1\n-1\n-1\n2\n5\n-1\n", "13\n2\n9\n5\n-1\n"]}, "private_tests": {"input": ["10 10 10\n3 8\n1 7\n2 3\n4 2\n4 8\n3 3\n2 8\n5 5\n6 3\n3 1\n"], "output": ["-1\n-1\n-1\n-1\n-1\n3\n-1\n5\n-1\n-1\n"]}, "index": 32}, {"input": "The tram in Berland goes along a straight line from the point 0 to the point s and back, passing 1 meter per t1 seconds in both directions. It means that the tram is always in the state of uniform rectilinear motion, instantly turning around at points x = 0 and x = s.\n\nIgor is at the point x1. He should reach the point x2. Igor passes 1 meter per t2 seconds. \n\nYour task is to determine the minimum time Igor needs to get from the point x1 to the point x2, if it is known where the tram is and in what direction it goes at the moment Igor comes to the point x1.\n\nIgor can enter the tram unlimited number of times at any moment when his and the tram's positions coincide. It is not obligatory that points in which Igor enter and exit the tram are integers. Assume that any boarding and unboarding happens instantly. Igor can move arbitrary along the line (but not faster than 1 meter per t2 seconds). He can also stand at some point for some time.\n\nInput\n\nThe first line contains three integers s, x1 and x2 (2 \u2264 s \u2264 1000, 0 \u2264 x1, x2 \u2264 s, x1 \u2260 x2) \u2014 the maximum coordinate of the point to which the tram goes, the point Igor is at, and the point he should come to.\n\nThe second line contains two integers t1 and t2 (1 \u2264 t1, t2 \u2264 1000) \u2014 the time in seconds in which the tram passes 1 meter and the time in seconds in which Igor passes 1 meter.\n\nThe third line contains two integers p and d (1 \u2264 p \u2264 s - 1, d is either 1 or <image>) \u2014 the position of the tram in the moment Igor came to the point x1 and the direction of the tram at this moment. If <image>, the tram goes in the direction from the point s to the point 0. If d = 1, the tram goes in the direction from the point 0 to the point s.\n\nOutput\n\nPrint the minimum time in seconds which Igor needs to get from the point x1 to the point x2.\n\n", "output": "f = lambda: map(int, input().split())\ns, x, y = f()\na, b = f()\np, d = f()\nif x > y: d, p, x, y = -d, s - p, s - x, s - y\nprint(min((y - x) * b, [2 * s * (p > x) + y - p, y + p][d < 0] * a))", "public_tests": {"input": ["4 2 4\n3 4\n1 1\n", "5 4 0\n1 2\n3 1\n"], "output": ["8\n", "7\n"]}, "private_tests": {"input": ["50 10 30\n1 50\n10 1\n", "1000 913 474\n34 162\n566 -1\n", "1000 394 798\n155 673\n954 -1\n", "10 4 8\n1 5\n4 -1\n", "40 31 14\n628 1000\n36 1\n", "5 4 1\n1 100\n4 -1\n", "4 2 4\n3 4\n2 1\n", "20 5 19\n163 174\n4 1\n", "4 1 2\n1 10\n3 1\n", "6 4 2\n1 2\n3 1\n", "1000 711 437\n42 126\n745 1\n", "10 1 9\n1 10\n1 1\n", "20 15 10\n5 2\n3 1\n", "10 0 5\n1 100\n7 1\n", "200 10 100\n1 100\n20 1\n", "10 1 6\n1 10\n3 -1\n", "2 0 2\n1 1\n1 1\n", "400 30 81\n193 1000\n338 1\n", "10 6 9\n3 100\n5 1\n", "1000 902 2\n1 1000\n902 -1\n", "1000 2 902\n1 1000\n2 1\n", "999 951 297\n62 106\n574 1\n", "5 4 0\n5 14\n1 -1\n", "100 1 2\n1 100\n1 1\n", "1000 812 761\n230 1000\n696 -1\n", "1000 610 733\n226 690\n357 1\n", "10 5 9\n1 10\n5 1\n", "10 3 6\n1 2\n3 1\n", "5 1 4\n1 100\n1 1\n", "1000 876 884\n299 1000\n825 1\n", "5 4 2\n1 2\n3 1\n", "600 443 587\n260 1000\n548 -1\n", "801 489 351\n86 702\n125 1\n", "100 20 83\n186 434\n64 -1\n", "10 7 2\n7 9\n9 -1\n", "100 9 6\n3 100\n5 1\n", "500 397 440\n202 1000\n75 1\n", "4 1 4\n1 100\n2 1\n", "200 179 81\n126 457\n37 -1\n", "5 3 0\n1 2\n4 -1\n", "2 2 0\n7 3\n1 1\n", "3 1 3\n1 2\n1 1\n", "799 254 294\n539 1000\n284 -1\n", "100 50 25\n1 1000\n10 1\n", "1000 50 51\n1 3\n50 1\n"], "output": ["20\n", "71118\n", "271560\n", "12\n", "17000\n", "3\n", "6\n", "2436\n", "7\n", "4\n", "34356\n", "8\n", "10\n", "18\n", "480\n", "9\n", "2\n", "51000\n", "12\n", "900\n", "900\n", "69324\n", "55\n", "1\n", "51000\n", "84870\n", "4\n", "3\n", "3\n", "8000\n", "4\n", "144000\n", "96836\n", "27342\n", "45\n", "300\n", "43000\n", "10\n", "44786\n", "4\n", "6\n", "2\n", "40000\n", "165\n", "1\n"]}, "index": 33}, {"input": "The Robot is in a rectangular maze of size n \u00d7 m. Each cell of the maze is either empty or occupied by an obstacle. The Robot can move between neighboring cells on the side left (the symbol \"L\"), right (the symbol \"R\"), up (the symbol \"U\") or down (the symbol \"D\"). The Robot can move to the cell only if it is empty. Initially, the Robot is in the empty cell.\n\nYour task is to find lexicographically minimal Robot's cycle with length exactly k, which begins and ends in the cell where the Robot was initially. It is allowed to the Robot to visit any cell many times (including starting).\n\nConsider that Robot's way is given as a line which consists of symbols \"L\", \"R\", \"U\" and \"D\". For example, if firstly the Robot goes down, then left, then right and up, it means that his way is written as \"DLRU\".\n\nIn this task you don't need to minimize the length of the way. Find the minimum lexicographical (in alphabet order as in the dictionary) line which satisfies requirements above.\n\nInput\n\nThe first line contains three integers n, m and k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 106) \u2014 the size of the maze and the length of the cycle. \n\nEach of the following n lines contains m symbols \u2014 the description of the maze. If the symbol equals to \".\" the current cell is empty. If the symbol equals to \"*\" the current cell is occupied by an obstacle. If the symbol equals to \"X\" then initially the Robot is in this cell and it is empty. It is guaranteed that the symbol \"X\" is found in the maze exactly once. \n\nOutput\n\nPrint the lexicographically minimum Robot's way with the length exactly k, which starts and ends in the cell where initially Robot is. If there is no such way, print \"IMPOSSIBLE\"(without quotes).\n\n", "output": "from collections import deque\nn, m, k =map(int, input().split())\n\ngrid = []\n\nfor i in range(n):\n    grid.append(input())\n    for j in range(m):\n        if grid[i][j] == \"X\":\n            pos_i, pos_j = i, j\n\n\nif k & 1:\n    print('IMPOSSIBLE')\n    exit()\n\norder = \"DLRU\"\norder_dir = [(1,0), (0,-1), (0,1), (-1, 0)]\n\n\nds = [[float(\"inf\")]*m for _ in range(n)]\nds[pos_i][pos_j] = 0\nq = deque()\nq.append((pos_i, pos_j))\nwhile len(q):\n    x, y = q.popleft()\n\n    for delta in order_dir:\n        nx = x + delta[0]\n        ny = y + delta[1]\n        if 0 <= nx < n and 0 <= ny < m and ds[nx][ny] == float(\"inf\") and grid[nx][ny] != \"*\":\n            q.append((nx, ny))\n            ds[nx][ny] = ds[x][y] + 1\n\n\n\n\nstart_pos_i = pos_i\nstart_pos_j = pos_j\n\n\npath = \"\"\nwhile k:\n    for i, d in enumerate(order):\n\n        ni = pos_i + order_dir[i][0]\n        nj = pos_j + order_dir[i][1]\n        if 0 <= ni < n and 0 <= nj < m and ds[ni][nj] <= k-1 and grid[ni][nj] != \"*\":\n            path += d\n            k -= 1\n            pos_i = ni\n            pos_j = nj\n            break\n\n    else:\n        print(\"IMPOSSIBLE\")\n        exit()\n\nprint(path)\n", "public_tests": {"input": ["3 3 4\n***\n*X*\n***\n", "5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\n", "2 3 2\n.**\nX..\n"], "output": ["IMPOSSIBLE\n", "DLDDLLLRRRUURU\n", "RL\n"]}, "private_tests": {"input": ["1 10 1\n........X.\n", "2 1 2\nX\n.\n", "20 10 116\n..........\n....*.....\n.......*..\n*.........\n*....*....\n*........*\n..........\n*.........\n.......*..\n...*..*...\n..........\n...*......\n..*.......\n.....**..*\n........*.\n........*.\n...*......\n.........*\n.....*.X..\n*......*.*\n", "10 20 102\n..*.....*.....*.....\n....*.X.............\n..*.................\n....................\n........*...........\n....................\n*.....*.............\n...............*...*\n......*..**.........\n*..........*........\n", "1 1 1\nX\n", "20 2 22\n.*\n**\n..\n**\n**\n..\n.*\n.*\n..\n..\n**\n**\n.*\n**\n..\n.*\n..\n..\nX*\n..\n", "2 1 2\n.\nX\n", "20 5 22\n.....\n...*.\n**.*.\n**.*.\n.....\n*....\n.....\n.**..\n..*..\n.**..\n....*\n..*..\n.....\n.*.**\n***..\n**...\n.....\n*...*\n*X..*\n*....\n", "5 2 8\n..\n.*\nX.\n..\n*.\n", "10 10 4\n*..*...***\nX...*.....\n***...**..\n..********\n.*.*......\n*.**..*...\n.**.**..**\n*.**.**..*\n**.****.*.\n...**..*.*\n", "5 25 68\n..*...***..******..***...\n...*.****.*.......***..X.\n**..**.****......**.**.*.\n...*...*.***.*.....*.**..\n**...***.*.**..**.**.....\n", "5 1 2\n*\n.\nX\n*\n.\n", "1 25 24\n..*.....X.*.**..*.*..*...\n", "2 2 2\nX*\n.*\n", "1 1 1000000\nX\n", "2 1 1\nX\n.\n", "20 20 118\n..............*.....\n........*.........*.\n............*.......\n*...................\n....*......*..*.....\n................*...\n....................\n...............*....\n.......*..........*.\n.*..........*.......\n.*..............*..X\n....................\n...............*....\n....................\n.*.....*.......*....\n.......**..*........\n....................\n..........**.......*\n.....*...*..........\n........*...........\n", "10 5 42\n.*...\n.....\n.....\n.*...\n....*\n...*.\n....X\n.....\n.....\n**...\n", "2 20 26\n.****..*.**.**.*....\n.*.*.*.*...*.****..X\n", "25 2 26\n.*\n*.\n..\n.*\n..\n*.\n.*\n.*\n.*\n..\n*.\n..\n..\n..\n..\n..\n*.\n.*\n.*\n..\n..\n.*\nX*\n..\n..\n", "2 10 4\n******....\n*.****.*X*\n", "25 5 22\n.....\n.....\n.....\n**...\n...*.\n...*.\n*..*.\n.....\n...**\n.*...\n.....\n*....\n*....\n*....\n*...X\n.....\n.*...\n...*.\n.*..*\n....*\n.....\n.....\n*....\n.....\n..*..\n", "10 2 16\n.*\n*.\n*.\n..\n**\nX.\n..\n*.\n..\n.*\n", "5 20 96\n..............*.....\n........*...*.......\n.............*......\n.................*..\n....*.*......X......\n", "1 2 2\nX*\n", "1 2 2\n.X\n", "20 1 12\n.\n.\n.\n*\n.\nX\n.\n.\n.\n.\n.\n.\n*\n*\n.\n.\n.\n.\n.\n.\n", "2 1 2\nX\n*\n", "2 5 2\n.....\n*.*.X\n", "10 1 8\n.\n*\n*\n.\n.\nX\n*\n.\n*\n*\n", "1 5 4\n.X**.\n", "1 1 2\nX\n", "25 1 22\n.\n*\n*\n.\n*\n.\n.\n.\n.\n.\n.\n.\n.\n*\n.\n.\n.\n*\n.\n.\n.\n*\n.\nX\n.\n", "2 25 46\n.*...***X....*..*........\n.....*...**.**.*....*...*\n", "5 10 42\n..**.**.**\n......*..*\n..**...X..\n*.......*.\n......*.**\n", "1 2 2\nX.\n", "5 5 12\n..**.\n***..\n..X*.\n....*\n**..*\n", "25 10 38\n....*...**\n.........*\n.........*\n**...*....\n..........\n.*.....*.*\n***.*....*\n..*****.**\n*........*\n*.........\n.*..*.**.*\n.*....*...\n..*..**...\n...*.*.*.*\n.*.*.....*\n.*.X.*...*\n*...**...*\n..........\n.*..*.*.**\n*.*..**.*.\n*.....*..*\n...**.*...\n...*...*..\n...*......\n...*.....*\n", "2 1 2\n*\nX\n", "10 25 154\n........*................\n.........................\n.........................\n.......*.................\n.........................\n.....................*...\n............*...*........\n.........................\n.....X................*..\n.........................\n", "1 20 10\n*.*..............*.X\n", "1 2 2\n*X\n"], "output": ["IMPOSSIBLE\n", "DU\n", "LDLLLLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRRRUR\n", "DDDDLDDDDLLLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRRUUUURUUUU\n", "IMPOSSIBLE\n", "DRLRLRLRLRLRLRLRLRLRLU\n", "UD\n", "DRLRLRLRLRLRLRLRLRLRLU\n", "DRDUDULU\n", "RLRL\n", "LDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUR\n", "UD\n", "LLLLLRLRLRLRLRLRLRLRRRRR\n", "DU\n", "IMPOSSIBLE\n", "IMPOSSIBLE\n", "DDDDDDLDDDLLLLLLLLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRRRRRRRUUURUUUUUU\n", "DDDLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRUUU\n", "LLRLRLRLRLRLRLRLRLRLRLRLRR\n", "DDRLRLRLRLRLRLRLRLRLRLRLUU\n", "UDUD\n", "DDDUDUDUDUDUDUDUDUDUUU\n", "DRDDLDUDUDURUULU\n", "LLLLLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRRRR\n", "IMPOSSIBLE\n", "LR\n", "DDDDDDUUUUUU\n", "IMPOSSIBLE\n", "LR\n", "UDUDUDUD\n", "LRLR\n", "IMPOSSIBLE\n", "DUDUDUDUDUDUDUDUDUDUDU\n", "DLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRU\n", "DDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUU\n", "RL\n", "DDRLRLRLRLUU\n", "DDDDDLDDDDLLRLRLRLRLRLRLRLRRUUUURUUUUU\n", "IMPOSSIBLE\n", "DLLLLLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRRRRRU\n", "LRLRLRLRLR\n", "IMPOSSIBLE\n"]}, "index": 34}, {"input": "Igor the analyst fell asleep on the work and had a strange dream. In the dream his desk was crowded with computer mice, so he bought a mousetrap to catch them.\n\nThe desk can be considered as an infinite plane, then the mousetrap is a rectangle which sides are parallel to the axes, and which opposite sides are located in points (x1, y1) and (x2, y2).\n\nIgor wants to catch all mice. Igor has analysed their behavior and discovered that each mouse is moving along a straight line with constant speed, the speed of the i-th mouse is equal to (vix, viy), that means that the x coordinate of the mouse increases by vix units per second, while the y coordinates increases by viy units. The mousetrap is open initially so that the mice are able to move freely on the desk. Igor can close the mousetrap at any moment catching all the mice that are strictly inside the mousetrap.\n\nIgor works a lot, so he is busy in the dream as well, and he asks you to write a program that by given mousetrap's coordinates, the initial coordinates of the mice and their speeds determines the earliest time moment in which he is able to catch all the mice. Please note that Igor can close the mousetrap only once.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 100 000) \u2014 the number of computer mice on the desk.\n\nThe second line contains four integers x1, y1, x2 and y2 (0 \u2264 x1 \u2264 x2 \u2264 100 000), (0 \u2264 y1 \u2264 y2 \u2264 100 000) \u2014 the coordinates of the opposite corners of the mousetrap.\n\nThe next n lines contain the information about mice.\n\nThe i-th of these lines contains four integers rix, riy, vix and viy, (0 \u2264 rix, riy \u2264 100 000,  - 100 000 \u2264 vix, viy \u2264 100 000), where (rix, riy) is the initial position of the mouse, and (vix, viy) is its speed.\n\nOutput\n\nIn the only line print minimum possible non-negative number t such that if Igor closes the mousetrap at t seconds from the beginning, then all the mice are strictly inside the mousetrap. If there is no such t, print -1.\n\nYour answer is considered correct if its absolute or relative error doesn't exceed 10 - 6. \n\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if <image>.\n\n", "output": "n=int(input())\nx1,y1,x2,y2=[int(x) for x in input().split()]\nst=[0]\net=[1e10]\nok=1\n\nif x1==x2 or y1==y2:\n    ok=0\n\nfor i in range(n):\n    a,b,u,w=[int(x) for x in input().split()]\n    for x,v,s,e in ((a,u,x1,x2),(b,w,y1,y2)):\n        if v==0:\n            if not(s<x<e):\n                ok=0\n        else:\n            t1=(s-x)/v\n            t2=(e-x)/v\n            st+=[min(t1,t2)]\n            et+=[max(t1,t2)]\n\n#print(st,et)            \n            \nif max(st)<min(et) and min(et)>0 and ok:\n    print(max(max(st),0))\nelse:\n    print(-1)", "public_tests": {"input": ["4\n7 7 9 8\n0 3 -5 4\n5 0 5 4\n9 9 -1 -6\n10 5 -7 -10\n", "4\n7 7 9 8\n3 5 7 5\n7 5 2 4\n3 3 7 8\n6 6 3 2\n"], "output": ["-1", "0.5714286714"]}, "private_tests": {"input": ["1\n0 0 10 10\n5 5 5 5\n", "1\n0 0 5 5\n2 5 0 0\n", "4\n0 49998 2 50002\n1 50000 0 0\n1 50000 0 0\n1 0 0 1\n1 100000 0 -1\n", "1\n0 0 100000 100000\n0 0 -1 -1\n", "4\n17501 63318 51967 74514\n1305 84026 79493 -78504\n41159 81000 -44104 -42722\n31063 65435 25578 33487\n18330 79949 83467 -74531\n", "1\n1 1 3 3\n0 1 1 0\n", "1\n0 0 100 100\n0 0 1 0\n", "1\n1 1 11 11\n5 5 0 0\n", "1\n1 1 2 2\n0 0 0 0\n", "1\n1 1 3 3\n2 0 1 1\n", "1\n0 0 3 3\n1 3 1 0\n", "2\n0 0 2 100000\n1 1 0 100000\n100000 1 -99999 0\n", "2\n0 0 5 5\n5 3 0 1\n3 3 1 1\n", "1\n0 0 10000 10000\n10001 9999 -1 1\n", "1\n1 1 11 11\n1 2 0 1\n", "1\n0 0 100 100\n0 0 100 0\n", "2\n1 1 3 3\n2 10 0 -1\n10000 2 -1 0\n", "1\n1 1 3 3\n1 1 0 1\n", "4\n8 42 60 54\n9 54 -58 -62\n46 47 52 -76\n15 50 -37 -40\n54 51 78 64\n", "1\n1 1 5 5\n1 0 0 1\n", "1\n1 1 1 1\n1 1 0 0\n", "1\n7 7 8 8\n7 7 0 0\n", "1\n99998 99998 99999 99999\n0 0 99999 100000\n", "1\n0 1 2 1\n0 0 1 1\n", "1\n1 0 1 2\n0 0 1 1\n", "1\n0 0 10 10\n0 0 0 1337\n", "1\n0 0 1 1\n0 0 0 0\n", "1\n1 0 2 0\n0 0 1 0\n", "1\n1 1 2 2\n0 2 1 0\n", "1\n0 0 2 2\n1 1 0 0\n", "1\n1 1 3 3\n2 2 0 0\n", "1\n1 1 3 3\n2 1 0 0\n", "1\n0 0 100000 100000\n0 0 1 0\n", "1\n1 1 3 3\n4 4 0 0\n", "1\n0 0 10000 10000\n20000 2 -1 0\n", "2\n2 2 5 5\n3 3 1 1\n10 3 -1 0\n", "1\n1 1 2 2\n1 1 1 0\n", "1\n0 0 100000 100000\n1 1 1 1\n", "1\n0 0 10 10\n5 5 0 0\n", "1\n1 1 2 2\n1 1 0 0\n", "1\n2 2 4 4\n3 1 1 1\n", "1\n0 0 100000 100000\n0 0 0 1\n", "1\n0 0 10000 10000\n10001 10001 -1 -1\n", "1\n1 1 1 1\n1 1 1 1\n", "1\n0 0 10000 10000\n20000 2 1 0\n", "1\n0 0 1 1\n0 0 1 0\n", "2\n99999 99999 100000 100000\n1 1 100000 100000\n1 1 99999 99999\n", "1\n10 10 20 20\n0 10 1 1\n", "1\n0 0 2 2\n1 0 0 0\n", "2\n1 1 2 2\n0 0 1 1\n1 1 1 1\n", "2\n10 0 12 2\n9 1 1 0\n7 1 1 0\n", "1\n0 0 2 2\n0 1 0 0\n", "1\n1 1 3 3\n1 1 1 0\n", "7\n24 38 44 47\n44 45 -50 -36\n33 48 -11 -39\n43 44 13 15\n42 47 24 -21\n40 41 19 7\n26 41 -20 -15\n42 40 43 19\n", "1\n0 0 99999 1\n0 99999 100000 -99999\n", "1\n0 0 2 2\n0 1 0 1\n", "1\n5 5 10 10\n4 6 1 0\n", "1\n0 0 10 10\n0 0 0 0\n", "1\n1 1 3 3\n1 1 0 0\n"], "output": ["0.0000001000", "-1", "49998.0000001000", "-1", "0.2037413099", "-1", "-1", "0.0000001000", "-1", "-1", "-1", "0.9999900999", "-1", "-1", "-1", "-1", "-1", "-1", "0.0000001000", "-1", "-1", "-1", "0.9999900999", "-1", "-1", "-1", "-1", "-1", "-1", "0.0000001000", "0.0000001000", "-1", "-1", "-1", "10000.0000001000", "-1", "-1", "0.0000001000", "0.0000001000", "-1", "-1", "-1", "1.0000001000", "-1", "-1", "-1", "0.9999900999", "-1", "-1", "-1", "-1", "-1", "-1", "0.0256411256", "0.9999900999", "-1", "1.0000001000", "-1", "-1\n"]}, "index": 35}, {"input": "We all know the problem about the number of ways one can tile a 2 \u00d7 n field by 1 \u00d7 2 dominoes. You probably remember that it goes down to Fibonacci numbers. We will talk about some other problem below, there you also are going to deal with tiling a rectangular field with dominoes.\n\nYou are given a 4 \u00d7 n rectangular field, that is the field that contains four lines and n columns. You have to find for it any tiling by 1 \u00d7 2 dominoes such that each of the n - 1 potential vertical cuts along the grid lines intersects at least one domino, splitting it in two. No two dominoes in the sought tiling should overlap, each square of the field should be covered by exactly one domino. It is allowed to rotate the dominoes, that is, you can use 2 \u00d7 1 as well as 1 \u00d7 2 dominoes.\n\nWrite a program that finds an arbitrary sought tiling. \n\nInput\n\nThe input contains one positive integer n (1 \u2264 n \u2264 100) \u2014 the number of the field's columns.\n\nOutput\n\nIf there's no solution, print \"-1\" (without the quotes). Otherwise, print four lines containing n characters each \u2014 that's the description of tiling, where each vertical cut intersects at least one domino. You should print the tiling, having painted the field in no more than 26 colors. Each domino should be painted a color. Different dominoes can be painted the same color, but dominoes of the same color should not be side-neighbouring. To indicate colors you should use lowercase Latin letters. Print any of the acceptable ways of tiling.\n\n", "output": "n=int(input())\ns1,s2=\"aabb\",'ccdd'\nif n % 2 == 0:\n    print((s1*n)[:n])\n    print('e'+(s2*n)[:n-2]+'f')\n    print('e'+(s1*n)[:n-2]+'f')\n    print((s2*n)[:n])\nelse:\n    print((s1*n)[:n-1]+'e')\n    print((s1*n)[2:n+1]+'e')\n    print('f'+(s2*n)[:n-1])\n    print('f'+(s2*n)[2:n+1])\n    \n", "public_tests": {"input": ["4\n"], "output": ["abbz\naccz\nddee\neeff\n"]}, "private_tests": {"input": ["25\n", "27\n", "1\n", "97\n", "98\n", "94\n", "21\n", "97\n", "19\n", "3\n", "28\n", "2\n", "8\n", "12\n", "15\n", "91\n", "4\n", "9\n", "23\n", "29\n", "22\n", "96\n", "30\n", "7\n", "100\n", "16\n", "100\n", "91\n", "13\n", "99\n", "92\n", "95\n", "95\n", "20\n", "17\n", "5\n", "10\n", "24\n", "18\n", "94\n", "26\n", "93\n", "98\n", "6\n", "92\n", "96\n", "14\n", "93\n", "11\n", "99\n"], "output": ["abbccddeeffgghhiijjkkllmm\naccddeeffgghhiijjkkllmmnn\nddeeffgghhiijjkkllmmnnooz\neeffgghhiijjkkllmmnnooppz\n", "abbccddeeffgghhiijjkkllmmnn\naccddeeffgghhiijjkkllmmnnoo\nddeeffgghhiijjkkllmmnnooppz\neeffgghhiijjkkllmmnnooppqqz\n", "a\na\nb\nb\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhl\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiil\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjj\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkk\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccdd\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddee\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybb\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbcc\n", "abbccddeeffgghhiijjkk\naccddeeffgghhiijjkkll\nddeeffgghhiijjkkllmmz\neeffgghhiijjkkllmmnnz\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhl\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiil\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjj\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkk\n", "abbccddeeffgghhiijj\naccddeeffgghhiijjkk\nddeeffgghhiijjkkllz\neeffgghhiijjkkllmmz\n", "aac\nbbc\ndee\ndff\n", "abbccddeeffgghhiijjkkllmmnnz\naccddeeffgghhiijjkkllmmnnooz\nddeeffgghhiijjkkllmmnnooppqq\neeffgghhiijjkkllmmnnooppqqrr\n", "aa\nbb\ncc\ndd\n", "abbccddz\naccddeez\nddeeffgg\neeffgghh\n", "abbccddeeffz\naccddeeffggz\nddeeffgghhii\neeffgghhiijj\n", "abbccddeeffgghh\naccddeeffgghhii\nddeeffgghhiijjz\neeffgghhiijjkkz\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvz\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwz\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxx\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyy\n", "abbz\naccz\nddee\neeff\n", "abbccddee\naccddeeff\nddeeffggz\neeffgghhz\n", "abbccddeeffgghhiijjkkll\naccddeeffgghhiijjkkllmm\nddeeffgghhiijjkkllmmnnz\neeffgghhiijjkkllmmnnooz\n", "abbccddeeffgghhiijjkkllmmnnoo\naccddeeffgghhiijjkkllmmnnoopp\nddeeffgghhiijjkkllmmnnooppqqz\neeffgghhiijjkkllmmnnooppqqrrz\n", "abbccddeeffgghhiijjkkz\naccddeeffgghhiijjkkllz\nddeeffgghhiijjkkllmmnn\neeffgghhiijjkkllmmnnoo\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbcc\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccdd\n", "abbccddeeffgghhiijjkkllmmnnooz\naccddeeffgghhiijjkkllmmnnooppz\nddeeffgghhiijjkkllmmnnooppqqrr\neeffgghhiijjkkllmmnnooppqqrrss\n", "abbccdd\naccddee\nddeeffz\neeffggz\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddee\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeff\n", "abbccddeeffgghhz\naccddeeffgghhiiz\nddeeffgghhiijjkk\neeffgghhiijjkkll\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddee\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeff\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvz\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwz\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxx\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyy\n", "abbccddeeffgg\naccddeeffgghh\nddeeffgghhiiz\neeffgghhiijjz\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllp\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmp\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnn\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoo\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyy\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybb\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddh\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeh\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbff\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccgg\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddh\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeh\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbff\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccgg\n", "abbccddeeffgghhiijjz\naccddeeffgghhiijjkkz\nddeeffgghhiijjkkllmm\neeffgghhiijjkkllmmnn\n", "abbccddeeffgghhii\naccddeeffgghhiijj\nddeeffgghhiijjkkz\neeffgghhiijjkkllz\n", "abbcc\naccdd\nddeez\neeffz\n", "abbccddeez\naccddeeffz\nddeeffgghh\neeffgghhii\n", "abbccddeeffgghhiijjkkllz\naccddeeffgghhiijjkkllmmz\nddeeffgghhiijjkkllmmnnoo\neeffgghhiijjkkllmmnnoopp\n", "abbccddeeffgghhiiz\naccddeeffgghhiijjz\nddeeffgghhiijjkkll\neeffgghhiijjkkllmm\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybb\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbcc\n", "abbccddeeffgghhiijjkkllmmz\naccddeeffgghhiijjkkllmmnnz\nddeeffgghhiijjkkllmmnnoopp\neeffgghhiijjkkllmmnnooppqq\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzd\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaad\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbb\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyycc\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccdd\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddee\n", "abbccz\naccddz\nddeeff\neeffgg\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyy\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybb\n", "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxz\naccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz\nddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbcc\neeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyybbccdd\n", "abbccddeeffggz\naccddeeffgghhz\nddeeffgghhiijj\neeffgghhiijjkk\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzd\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaad\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbb\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyycc\n", "abbccddeeff\naccddeeffgg\nddeeffgghhz\neeffgghhiiz\n", "aaffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllp\nbbggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmp\ncddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnnrrvvzzddhhllppttxxbbffjjnn\nceeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoosswwaaeeiimmqquuyyccggkkoo\n"]}, "index": 36}, {"input": "In a small but very proud high school it was decided to win ACM ICPC. This goal requires to compose as many teams of three as possible, but since there were only 6 students who wished to participate, the decision was to build exactly two teams.\n\nAfter practice competition, participant number i got a score of ai. Team score is defined as sum of scores of its participants. High school management is interested if it's possible to build two teams with equal scores. Your task is to answer that question.\n\nInput\n\nThe single line contains six integers a1, ..., a6 (0 \u2264 ai \u2264 1000) \u2014 scores of the participants\n\nOutput\n\nPrint \"YES\" (quotes for clarity), if it is possible to build teams with equal score, and \"NO\" otherwise.\n\nYou can print each character either upper- or lowercase (\"YeS\" and \"yes\" are valid when the answer is \"YES\").\n\n", "output": "\nfrom itertools import permutations\nprint(['NO','YES'][any(sum(x[:3]) == sum(x[3:]) for x in permutations(map(int, input().split())))])\n", "public_tests": {"input": ["1 1 1 1 1 99\n", "1 3 2 1 2 1\n"], "output": ["NO\n", "YES\n"]}, "private_tests": {"input": ["1000 1000 1000 1000 1000 1000\n", "180 179 188 50 75 214\n", "633 609 369 704 573 416\n", "2 2 2 2 2 1\n", "101 200 400 300 10 9\n", "1 6 6 1 20 2\n", "72 8 186 92 267 69\n", "101 200 300 400 10 9\n", "353 313 327 470 597 31\n", "101 400 200 9 300 10\n", "36 91 7 86 51 89\n", "1 1 1 10 23 24\n", "20 10 1 2 3 44\n", "1 1 0 0 0 4\n", "101 200 400 9 300 10\n", "1 1 3 1 1 11\n", "0 0 0 0 0 0\n", "71 66 124 199 67 147\n", "417 666 978 553 271 488\n", "1 3 7 8 8 9\n", "1 1 1 1 1 5\n", "2 10 0 0 0 0\n", "2 1 0 0 0 5\n", "936 342 19 398 247 874\n", "101 200 300 10 400 9\n", "5 5 1 2 2 15\n", "7 0 14 11 8 6\n", "10 10 1 1 1 37\n", "1 2 3 6 6 6\n", "101 400 200 300 10 9\n", "16 169 110 136 404 277\n", "835 638 673 624 232 266\n", "8 1 1 3 3 0\n", "54 26 0 171 239 12\n", "1000 1000 1000 999 999 1000\n", "1 5 5 5 6 8\n", "0 2 3 4 4 5\n", "101 200 400 300 9 10\n", "100 496 1 1 1 1\n", "1000 1000 999 1000 1000 1000\n", "1 2 2 5 2 5\n", "101 400 200 300 9 10\n", "101 200 300 400 9 10\n", "129 1 10 29 8 111\n", "4 4 4 4 5 4\n", "10 1 1 1 23 24\n", "1 1 2 2 3 3\n", "101 400 9 200 300 10\n", "5 4 2 5 11 3\n", "1 3 4 5 18 19\n", "1 1 10 1 1 28\n"], "output": ["YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n"]}, "index": 37}, {"input": "The preferred way to generate user login in Polygon is to concatenate a prefix of the user's first name and a prefix of their last name, in that order. Each prefix must be non-empty, and any of the prefixes can be the full name. Typically there are multiple possible logins for each person.\n\nYou are given the first and the last name of a user. Return the alphabetically earliest login they can get (regardless of other potential Polygon users).\n\nAs a reminder, a prefix of a string s is its substring which occurs at the beginning of s: \"a\", \"ab\", \"abc\" etc. are prefixes of string \"{abcdef}\" but \"b\" and 'bc\" are not. A string a is alphabetically earlier than a string b, if a is a prefix of b, or a and b coincide up to some position, and then a has a letter that is alphabetically earlier than the corresponding letter in b: \"a\" and \"ab\" are alphabetically earlier than \"ac\" but \"b\" and \"ba\" are alphabetically later than \"ac\".\n\nInput\n\nThe input consists of a single line containing two space-separated strings: the first and the last names. Each character of each string is a lowercase English letter. The length of each string is between 1 and 10, inclusive. \n\nOutput\n\nOutput a single string \u2014 alphabetically earliest possible login formed from these names. The output should be given in lowercase as well.\n\n", "output": "f,s=input().split()\nl=f[0]\nfor c in f[1:]:\n\tif c>=s[0]:break\n\tl+=c\nprint(l+s[0])", "public_tests": {"input": ["tom riddle\n", "harry potter\n"], "output": ["tomr\n", "hap\n"]}, "private_tests": {"input": ["jjxwj kxccwx\n", "dtbqya fyyymv\n", "apple pie\n", "ca cf\n", "amolfed pun\n", "ab b\n", "bgopsdfji uaps\n", "aa ab\n", "aaaaaaaaaa aaaaaaaaaa\n", "obljndajv q\n", "mybiqxmnqq l\n", "a aaa\n", "aaaaaaa a\n", "xohesmku ef\n", "fapkdme rtzxovx\n", "d kgfpjsurfw\n", "rr wldsfubcs\n", "aaa a\n", "a qdpinbmcrf\n", "asdfghjkli ware\n", "zzaa b\n", "a aa\n", "aaaaaaaaaa a\n", "aar raa\n", "asd ss\n", "aaaaa ab\n", "b a\n", "ttvnhrnng lqkfulhrn\n", "aba b\n", "z a\n", "aa a\n", "fya fgx\n", "badkiln yort\n", "aaaa aaaab\n", "udggmyop ze\n", "ertuyivhfg v\n", "aa aa\n", "twvvsl wtcyawv\n", "wixjzniiub ssdfodfgap\n", "cgpegngs aufzxkyyrw\n", "a aaaaaaaaaa\n", "abhi ia\n", "fyclu zokbxiahao\n", "kabc buba\n", "z z\n", "ly qtsmze\n", "harry hotter\n", "aaaaaaaaaz york\n", "ardaae mxgdulijf\n", "sk fftzmv\n", "aaa aaa\n", "nuis zvjjqlre\n", "lwli ewrpu\n", "aaaaaaa aaaaaa\n", "bbbbcbbbbd c\n", "bbb b\n", "reyjzjdvq skuch\n", "vugvblnzx kqdwdulm\n", "a a\n", "qngatnviv rdych\n", "h qart\n", "a b\n"], "output": ["jjk\n", "df\n", "ap\n", "cac\n", "amolfedp\n", "ab\n", "bgopsdfjiu\n", "aa\n", "aa\n", "obljndajq\n", "ml\n", "aa\n", "aa\n", "xe\n", "fapkdmer\n", "dk\n", "rrw\n", "aa\n", "aq\n", "asdfghjkliw\n", "zb\n", "aa\n", "aa\n", "aar\n", "as\n", "aa\n", "ba\n", "tl\n", "ab\n", "za\n", "aa\n", "ff\n", "badkilny\n", "aa\n", "udggmyopz\n", "ertuv\n", "aa\n", "tw\n", "wis\n", "ca\n", "aa\n", "abhi\n", "fycluz\n", "kab\n", "zz\n", "lq\n", "hah\n", "aaaaaaaaay\n", "am\n", "sf\n", "aa\n", "nuisz\n", "le\n", "aa\n", "bbbbc\n", "bb\n", "res\n", "vk\n", "aa\n", "qngar\n", "hq\n", "ab\n"]}, "index": 38}, {"input": "Young Teodor enjoys drawing. His favourite hobby is drawing segments with integer borders inside his huge [1;m] segment. One day Teodor noticed that picture he just drawn has one interesting feature: there doesn't exist an integer point, that belongs each of segments in the picture. Having discovered this fact, Teodor decided to share it with Sasha.\n\nSasha knows that Teodor likes to show off so he never trusts him. Teodor wants to prove that he can be trusted sometimes, so he decided to convince Sasha that there is no such integer point in his picture, which belongs to each segment. However Teodor is lazy person and neither wills to tell Sasha all coordinates of segments' ends nor wills to tell him their amount, so he suggested Sasha to ask him series of questions 'Given the integer point xi, how many segments in Fedya's picture contain that point?', promising to tell correct answers for this questions.\n\nBoth boys are very busy studying and don't have much time, so they ask you to find out how many questions can Sasha ask Teodor, that having only answers on his questions, Sasha can't be sure that Teodor isn't lying to him. Note that Sasha doesn't know amount of segments in Teodor's picture. Sure, Sasha is smart person and never asks about same point twice.\n\nInput\n\nFirst line of input contains two integer numbers: n and m (1 \u2264 n, m \u2264 100 000) \u2014 amount of segments of Teodor's picture and maximal coordinate of point that Sasha can ask about.\n\nith of next n lines contains two integer numbers li and ri (1 \u2264 li \u2264 ri \u2264 m) \u2014 left and right ends of ith segment in the picture. Note that that left and right ends of segment can be the same point.\n\nIt is guaranteed that there is no integer point, that belongs to all segments.\n\nOutput\n\nSingle line of output should contain one integer number k \u2013 size of largest set (xi, cnt(xi)) where all xi are different, 1 \u2264 xi \u2264 m, and cnt(xi) is amount of segments, containing point with coordinate xi, such that one can't be sure that there doesn't exist point, belonging to all of segments in initial picture, if he knows only this set(and doesn't know n).\n\n", "output": "# ---------------------------iye ha aam zindegi---------------------------------------------\nimport math\nimport random\nimport heapq, bisect\nimport sys\nfrom collections import deque, defaultdict\nfrom fractions import Fraction\nimport sys\nimport threading\nfrom collections import defaultdict\n#threading.stack_size(10**8)\nmod = 10 ** 9 + 7\nmod1 = 998244353\n\n# ------------------------------warmup----------------------------\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n#sys.setrecursionlimit(300000)\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\n# -------------------game starts now----------------------------------------------------import math\nclass TreeNode:\n    def __init__(self, k, v):\n        self.key = k\n        self.value = v\n        self.left = None\n        self.right = None\n        self.parent = None\n        self.height = 1\n        self.num_left = 1\n        self.num_total = 1\n\n\nclass AvlTree:\n\n    def __init__(self):\n        self._tree = None\n\n    def add(self, k, v):\n        if not self._tree:\n            self._tree = TreeNode(k, v)\n            return\n        node = self._add(k, v)\n        if node:\n            self._rebalance(node)\n\n    def _add(self, k, v):\n        node = self._tree\n        while node:\n            if k < node.key:\n                if node.left:\n                    node = node.left\n                else:\n                    node.left = TreeNode(k, v)\n                    node.left.parent = node\n                    return node.left\n            elif node.key < k:\n                if node.right:\n                    node = node.right\n                else:\n                    node.right = TreeNode(k, v)\n                    node.right.parent = node\n                    return node.right\n            else:\n                node.value = v\n                return\n\n    @staticmethod\n    def get_height(x):\n        return x.height if x else 0\n\n    @staticmethod\n    def get_num_total(x):\n        return x.num_total if x else 0\n\n    def _rebalance(self, node):\n\n        n = node\n        while n:\n            lh = self.get_height(n.left)\n            rh = self.get_height(n.right)\n            n.height = max(lh, rh) + 1\n            balance_factor = lh - rh\n            n.num_total = 1 + self.get_num_total(n.left) + self.get_num_total(n.right)\n            n.num_left = 1 + self.get_num_total(n.left)\n\n            if balance_factor > 1:\n                if self.get_height(n.left.left) < self.get_height(n.left.right):\n                    self._rotate_left(n.left)\n                self._rotate_right(n)\n            elif balance_factor < -1:\n                if self.get_height(n.right.right) < self.get_height(n.right.left):\n                    self._rotate_right(n.right)\n                self._rotate_left(n)\n            else:\n                n = n.parent\n\n    def _remove_one(self, node):\n        \"\"\"\n        Side effect!!! Changes node. Node should have exactly one child\n        \"\"\"\n        replacement = node.left or node.right\n        if node.parent:\n            if AvlTree._is_left(node):\n                node.parent.left = replacement\n            else:\n                node.parent.right = replacement\n            replacement.parent = node.parent\n            node.parent = None\n        else:\n            self._tree = replacement\n            replacement.parent = None\n        node.left = None\n        node.right = None\n        node.parent = None\n        self._rebalance(replacement)\n\n    def _remove_leaf(self, node):\n        if node.parent:\n            if AvlTree._is_left(node):\n                node.parent.left = None\n            else:\n                node.parent.right = None\n            self._rebalance(node.parent)\n        else:\n            self._tree = None\n        node.parent = None\n        node.left = None\n        node.right = None\n\n    def remove(self, k):\n        node = self._get_node(k)\n        if not node:\n            return\n        if AvlTree._is_leaf(node):\n            self._remove_leaf(node)\n            return\n        if node.left and node.right:\n            nxt = AvlTree._get_next(node)\n            node.key = nxt.key\n            node.value = nxt.value\n            if self._is_leaf(nxt):\n                self._remove_leaf(nxt)\n            else:\n                self._remove_one(nxt)\n            self._rebalance(node)\n        else:\n            self._remove_one(node)\n\n    def get(self, k):\n        node = self._get_node(k)\n        return node.value if node else -1\n\n    def _get_node(self, k):\n        if not self._tree:\n            return None\n        node = self._tree\n        while node:\n            if k < node.key:\n                node = node.left\n            elif node.key < k:\n                node = node.right\n            else:\n                return node\n        return None\n\n    def get_at(self, pos):\n        x = pos + 1\n        node = self._tree\n        while node:\n            if x < node.num_left:\n                node = node.left\n            elif node.num_left < x:\n                x -= node.num_left\n                node = node.right\n            else:\n                return (node.key, node.value)\n        raise IndexError(\"Out of ranges\")\n\n    @staticmethod\n    def _is_left(node):\n        return node.parent.left and node.parent.left == node\n\n    @staticmethod\n    def _is_leaf(node):\n        return node.left is None and node.right is None\n\n    def _rotate_right(self, node):\n        if not node.parent:\n            self._tree = node.left\n            node.left.parent = None\n        elif AvlTree._is_left(node):\n            node.parent.left = node.left\n            node.left.parent = node.parent\n        else:\n            node.parent.right = node.left\n            node.left.parent = node.parent\n        bk = node.left.right\n        node.left.right = node\n        node.parent = node.left\n        node.left = bk\n        if bk:\n            bk.parent = node\n        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1\n        node.num_total = 1 + self.get_num_total(node.left) + self.get_num_total(node.right)\n        node.num_left = 1 + self.get_num_total(node.left)\n\n    def _rotate_left(self, node):\n        if not node.parent:\n            self._tree = node.right\n            node.right.parent = None\n        elif AvlTree._is_left(node):\n            node.parent.left = node.right\n            node.right.parent = node.parent\n        else:\n            node.parent.right = node.right\n            node.right.parent = node.parent\n        bk = node.right.left\n        node.right.left = node\n        node.parent = node.right\n        node.right = bk\n        if bk:\n            bk.parent = node\n        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1\n        node.num_total = 1 + self.get_num_total(node.left) + self.get_num_total(node.right)\n        node.num_left = 1 + self.get_num_total(node.left)\n\n    @staticmethod\n    def _get_next(node):\n        if not node.right:\n            return node.parent\n        n = node.right\n        while n.left:\n            n = n.left\n        return n\n\n\n# -----------------------------------------------binary seacrh tree---------------------------------------\nclass SegmentTree1:\n    def __init__(self, data, default=2**51, func=lambda a, b: a & b):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        if start == stop:\n            return self.__getitem__(start)\n        stop += 1\n        start += self._size\n        stop += self._size\n\n        res = self._default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n\n\n# -------------------game starts now----------------------------------------------------import math\nclass SegmentTree:\n    def __init__(self, data, default=0, func=lambda a, b: max(a , b)):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        if start == stop:\n            return self.__getitem__(start)\n        stop += 1\n        start += self._size\n        stop += self._size\n\n        res = self._default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n\n\n# -------------------------------iye ha chutiya zindegi-------------------------------------\nclass Factorial:\n    def __init__(self, MOD):\n        self.MOD = MOD\n        self.factorials = [1, 1]\n        self.invModulos = [0, 1]\n        self.invFactorial_ = [1, 1]\n\n    def calc(self, n):\n        if n <= -1:\n            print(\"Invalid argument to calculate n!\")\n            print(\"n must be non-negative value. But the argument was \" + str(n))\n            exit()\n        if n < len(self.factorials):\n            return self.factorials[n]\n        nextArr = [0] * (n + 1 - len(self.factorials))\n        initialI = len(self.factorials)\n        prev = self.factorials[-1]\n        m = self.MOD\n        for i in range(initialI, n + 1):\n            prev = nextArr[i - initialI] = prev * i % m\n        self.factorials += nextArr\n        return self.factorials[n]\n\n    def inv(self, n):\n        if n <= -1:\n            print(\"Invalid argument to calculate n^(-1)\")\n            print(\"n must be non-negative value. But the argument was \" + str(n))\n            exit()\n        p = self.MOD\n        pi = n % p\n        if pi < len(self.invModulos):\n            return self.invModulos[pi]\n        nextArr = [0] * (n + 1 - len(self.invModulos))\n        initialI = len(self.invModulos)\n        for i in range(initialI, min(p, n + 1)):\n            next = -self.invModulos[p % i] * (p // i) % p\n            self.invModulos.append(next)\n        return self.invModulos[pi]\n\n    def invFactorial(self, n):\n        if n <= -1:\n            print(\"Invalid argument to calculate (n^(-1))!\")\n            print(\"n must be non-negative value. But the argument was \" + str(n))\n            exit()\n        if n < len(self.invFactorial_):\n            return self.invFactorial_[n]\n        self.inv(n)  # To make sure already calculated n^-1\n        nextArr = [0] * (n + 1 - len(self.invFactorial_))\n        initialI = len(self.invFactorial_)\n        prev = self.invFactorial_[-1]\n        p = self.MOD\n        for i in range(initialI, n + 1):\n            prev = nextArr[i - initialI] = (prev * self.invModulos[i % p]) % p\n        self.invFactorial_ += nextArr\n        return self.invFactorial_[n]\n\n\nclass Combination:\n    def __init__(self, MOD):\n        self.MOD = MOD\n        self.factorial = Factorial(MOD)\n\n    def ncr(self, n, k):\n        if k < 0 or n < k:\n            return 0\n        k = min(k, n - k)\n        f = self.factorial\n        return f.calc(n) * f.invFactorial(max(n - k, k)) * f.invFactorial(min(k, n - k)) % self.MOD\n\n\n# --------------------------------------iye ha combinations ka zindegi---------------------------------\ndef powm(a, n, m):\n    if a == 1 or n == 0:\n        return 1\n    if n % 2 == 0:\n        s = powm(a, n // 2, m)\n        return s * s % m\n    else:\n        return a * powm(a, n - 1, m) % m\n\n\n# --------------------------------------iye ha power ka zindegi---------------------------------\ndef sort_list(list1, list2):\n    zipped_pairs = zip(list2, list1)\n\n    z = [x for _, x in sorted(zipped_pairs)]\n\n    return z\n\n\n# --------------------------------------------------product----------------------------------------\ndef product(l):\n    por = 1\n    for i in range(len(l)):\n        por *= l[i]\n    return por\n\n\n# --------------------------------------------------binary----------------------------------------\ndef binarySearchCount(arr, n, key):\n    left = 0\n    right = n - 1\n\n    count = 0\n\n    while (left <= right):\n        mid = int((right + left) / 2)\n\n        # Check if middle element is\n        # less than or equal to key\n        if (arr[mid] < key):\n            count = mid + 1\n            left = mid + 1\n\n        # If key is smaller, ignore right half\n        else:\n            right = mid - 1\n\n    return count\n\n\n# --------------------------------------------------binary----------------------------------------\ndef countdig(n):\n    c = 0\n    while (n > 0):\n        n //= 10\n        c += 1\n    return c\ndef binary(x, length):\n    y = bin(x)[2:]\n    return y if len(y) >= length else \"0\" * (length - len(y)) + y\n\ndef countGreater(arr, n, k):\n    l = 0\n    r = n - 1\n\n    # Stores the index of the left most element\n    # from the array which is greater than k\n    leftGreater = n\n\n    # Finds number of elements greater than k\n    while (l <= r):\n        m = int(l + (r - l) / 2)\n        if (arr[m] >= k):\n            leftGreater = m\n            r = m - 1\n\n        # If mid element is less than\n        # or equal to k update l\n        else:\n            l = m + 1\n\n    # Return the count of elements\n    # greater than k\n    return (n - leftGreater)\n\n\n# --------------------------------------------------binary------------------------------------\nn,m=map(int,input().split())\ncnt=[0]*(m+1)\nfor i in range(n):\n    a,b=map(int,input().split())\n    cnt[a-1]+=1\n    cnt[b]-=1\nfor i in range(1,m+1):\n    cnt[i]+=cnt[i-1]\nl=[0]*(m)\nl1=[0]*(m)\ncnt=[(cnt[i],i) for i in range(m)]\ncnt.sort()\nind=defaultdict(int)\nfor i in range(len(cnt)):\n    ind[cnt[i][1]]=i\ns=SegmentTree(l)\ns1=SegmentTree(l1)\ncou=[0]*m\ncur=0\ncur1=0\nfi=[0]*m\n#print(cnt,ind)\nfor i in range(m):\n    mw=s.query(0,ind[i])+1\n    #print(mw)\n    l[ind[i]]=mw\n    fi[i]=mw\n    cur1=max(cur1,mw)\n    s.__setitem__(ind[i],mw)\n#print(fi)\ncnt=[(cnt[i][0],-cnt[i][1]) for i in range(m)]\ncnt.sort()\ncnt=[(cnt[i][0],-cnt[i][1]) for i in range(m)]\nfor i in range(len(cnt)):\n    ind[cnt[i][1]]=i\n#print(cnt,ind)\nfor i in range(m-1,-1,-1):\n    mw=s1.query(0,ind[i])+1\n    #print(mw)\n    fi[i]+=mw\n    l1[ind[i]]=mw\n    s1.__setitem__(ind[i],mw)\nprint(max(fi)-1)\n\n\n", "public_tests": {"input": ["2 4\n1 2\n3 4\n", "4 6\n1 3\n2 3\n4 6\n5 6\n"], "output": ["4", "5"]}, "private_tests": {"input": ["11 3\n1 1\n1 1\n1 1\n1 1\n2 2\n2 2\n2 2\n3 3\n3 3\n3 3\n3 3\n", "43 1319\n750 1030\n857 946\n941 1203\n407 1034\n947 1290\n546 585\n630 1201\n72 342\n693 1315\n34 719\n176 1097\n36 931\n198 973\n5 1025\n892 1054\n461 1287\n195 1273\n832 1039\n308 955\n642 866\n770 838\n440 777\n289 948\n98 814\n458 768\n82 265\n300 596\n182 706\n368 1225\n237 626\n36 348\n100 222\n46 937\n364 396\n288 668\n1158 1243\n31 1108\n570 1000\n435 619\n339 1007\n132 734\n281 441\n636 1319\n", "38 1109\n61 332\n429 756\n260 272\n57 991\n420 985\n143 219\n399 925\n486 1079\n69 881\n75 447\n678 774\n973 1016\n983 1059\n518 1049\n393 853\n375 1101\n475 946\n300 427\n294 715\n504 798\n211 1066\n730 815\n114 515\n589 1001\n464 1014\n451 757\n370 1017\n225 619\n452 988\n611 955\n349 1029\n73 165\n759 951\n574 803\n253 1045\n545 565\n603 773\n226 453\n", "31 1600\n643 1483\n8 475\n15 472\n49 81\n300 1485\n627 682\n44 443\n1191 1541\n478 732\n1112 1202\n741 1341\n475 1187\n1218 1463\n523 1513\n355 477\n1259 1559\n384 928\n487 766\n227 1224\n1102 1268\n833 1240\n872 1342\n666 1075\n734 874\n32 880\n1411 1536\n520 778\n179 1003\n51 313\n1148 1288\n1467 1509\n"], "output": ["2", "1082", "996", "1181"]}, "index": 39}, {"input": "The Rebel fleet is on the run. It consists of m ships currently gathered around a single planet. Just a few seconds ago, the vastly more powerful Empire fleet has appeared in the same solar system, and the Rebels will need to escape into hyperspace. In order to spread the fleet, the captain of each ship has independently come up with the coordinate to which that ship will jump. In the obsolete navigation system used by the Rebels, this coordinate is given as the value of an arithmetic expression of the form <image>.\n\nTo plan the future of the resistance movement, Princess Heidi needs to know, for each ship, how many ships are going to end up at the same coordinate after the jump. You are her only hope!\n\nInput\n\nThe first line of the input contains a single integer m (1 \u2264 m \u2264 200 000) \u2013 the number of ships. The next m lines describe one jump coordinate each, given as an arithmetic expression. An expression has the form (a+b)/c. Namely, it consists of: an opening parenthesis (, a positive integer a of up to two decimal digits, a plus sign +, a positive integer b of up to two decimal digits, a closing parenthesis ), a slash /, and a positive integer c of up to two decimal digits.\n\nOutput\n\nPrint a single line consisting of m space-separated integers. The i-th integer should be equal to the number of ships whose coordinate is equal to that of the i-th ship (including the i-th ship itself).\n\nExample\n\nInput\n\n4\n(99+98)/97\n(26+4)/10\n(12+33)/15\n(5+1)/7\n\n\nOutput\n\n1 2 2 1 \n\nNote\n\nIn the sample testcase, the second and the third ship will both end up at the coordinate 3.\n\nNote that this problem has only two versions \u2013 easy and hard", "output": "f=input\nD,E={},[eval(f())for _ in range(int(f()))]\nfor e in E:D[e]=D.get(e,0)+1\nfor e in E:print(D[e])", "public_tests": {"input": ["4\n(99+98)/97\n(26+4)/10\n(12+33)/15\n(5+1)/7\n"], "output": ["1 2 2 1 \n"]}, "private_tests": {"input": ["30\n(89+76)/87\n(81+78)/18\n(60+97)/32\n(41+14)/48\n(55+65)/27\n(29+15)/95\n(64+13)/96\n(78+30)/75\n(43+6)/60\n(69+34)/48\n(62+2)/97\n(85+42)/3\n(4+97)/42\n(1+18)/39\n(46+55)/76\n(22+59)/24\n(62+81)/98\n(64+8)/51\n(9+59)/48\n(47+2)/80\n(33+74)/76\n(61+83)/44\n(86+4)/51\n(65+41)/49\n(53+36)/45\n(6+19)/15\n(51+21)/68\n(98+36)/86\n(92+65)/86\n(27+58)/78\n", "10\n(44+98)/19\n(36+58)/47\n(62+74)/68\n(69+95)/82\n(26+32)/29\n(32+46)/39\n(32+24)/28\n(47+61)/54\n(39+13)/26\n(98+98)/98\n"], "output": ["1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "1 9 9 9 9 9 9 9 9 9 \n"]}, "index": 40}, {"input": "You are given several queries. Each query consists of three integers p, q and b. You need to answer whether the result of p/q in notation with base b is a finite fraction.\n\nA fraction in notation with base b is finite if it contains finite number of numerals after the decimal point. It is also possible that a fraction has zero numerals after the decimal point.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of queries.\n\nNext n lines contain queries, one per line. Each line contains three integers p, q, and b (0 \u2264 p \u2264 10^{18}, 1 \u2264 q \u2264 10^{18}, 2 \u2264 b \u2264 10^{18}). All numbers are given in notation with base 10.\n\nOutput\n\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.\n\n", "output": "print('\\n'.join(('F','Inf')[pow(b,64,q)*p%q>0]+'inite'for p,q,b\nin(map(int,input().split())for _ in[0]*int(input()))))", "public_tests": {"input": ["2\n6 12 10\n4 3 10\n", "4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\n"], "output": ["Finite\nInfinite\n", "Finite\nFinite\nFinite\nInfinite\n"]}, "private_tests": {"input": ["10\n10 8 5\n0 6 9\n0 7 6\n5 7 3\n7 6 8\n0 4 8\n2 6 3\n10 2 9\n6 7 9\n9 1 4\n", "1\n1 5244319080000 30030\n", "10\n10 5 3\n1 7 10\n7 5 7\n4 4 9\n6 5 2\n6 7 5\n9 9 7\n7 5 5\n6 6 4\n10 8 2\n", "1\n1 864691128455135232 2\n", "10\n5 8 2\n0 5 8\n5 9 7\n0 7 2\n6 7 2\n10 3 7\n8 1 10\n9 1 8\n0 7 10\n9 1 4\n", "1\n1 100000000000000000 10000000000000000\n", "11\n1 1000000000000000000 10000000\n2 999 9\n2 999 333111\n0 9 7\n17 128 2\n13 311992186885373952 18\n1971402979058461 750473176484995605 75\n14 19 23\n3 21914624432020321 23\n3 21914624432020321 46\n3 21914624432020321 47\n", "10\n1 3 10\n6 2 6\n2 3 9\n7 8 4\n5 6 10\n1 2 7\n0 3 6\n9 3 4\n4 4 9\n10 9 10\n", "1\n1 4294967297 4294967296\n"], "output": ["Infinite\nFinite\nFinite\nInfinite\nInfinite\nFinite\nFinite\nFinite\nInfinite\nFinite\n", "Finite\n", "Finite\nInfinite\nInfinite\nFinite\nInfinite\nInfinite\nFinite\nFinite\nFinite\nFinite\n", "Infinite\n", "Finite\nFinite\nInfinite\nFinite\nInfinite\nInfinite\nFinite\nFinite\nFinite\nFinite\n", "Finite\n", "Finite\nInfinite\nFinite\nFinite\nFinite\nFinite\nFinite\nInfinite\nFinite\nFinite\nInfinite\n", "Infinite\nFinite\nFinite\nFinite\nInfinite\nInfinite\nFinite\nFinite\nFinite\nInfinite\n", "Infinite\n"]}, "index": 41}, {"input": "Given are two strings S and T.\n\nLet us change some of the characters in S so that T will be a substring of S.\n\nAt least how many characters do we need to change?\n\nHere, a substring is a consecutive subsequence. For example, `xxx` is a substring of `yxxxy`, but not a substring of `xxyxx`.\n\nConstraints\n\n* The lengths of S and T are each at least 1 and at most 1000.\n* The length of T is at most that of S.\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT\n\n\nOutput\n\nPrint the minimum number of characters in S that need to be changed.\n\n", "output": "s,t=open(0)\nprint(min(sum(x!=y for x,y in zip(s[i:],t[:-1]))for i in range(len(s)-len(t)+1)))", "public_tests": {"input": ["codeforces\natcoder", "cabacc\nabc"], "output": ["6", "1"]}, "private_tests": {"input": [], "output": []}, "index": 42}, {"input": "Given is a string S consisting of digits from `1` through `9`.\n\nFind the number of pairs of integers (i,j) (1 \u2264 i \u2264 j \u2264 |S|) that satisfy the following condition:\n\nCondition: In base ten, the i-th through j-th characters of S form an integer that is a multiple of 2019.\n\nConstraints\n\n* 1 \u2264 |S| \u2264 200000\n* S is a string consisting of digits from `1` through `9`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint the number of pairs of integers (i,j) (1 \u2264 i \u2264 j \u2264 |S|) that satisfy the condition.\n\n", "output": "m=2019\nl=[0]*m\na=b=0\nk=1\nfor c in input():l[b%m]+=1;b-=int(c)*k;a+=l[b%m];k=k*202%m\nprint(a)", "public_tests": {"input": ["1817181712114", "2119", "14282668646"], "output": ["3", "0", "2"]}, "private_tests": {"input": [], "output": []}, "index": 43}, {"input": "Takahashi is organizing a party.\n\nAt the party, each guest will receive one or more snack pieces.\n\nTakahashi predicts that the number of guests at this party will be A or B.\n\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\n\nWe assume that a piece cannot be divided and distributed to multiple guests.\n\nConstraints\n\n* 1 \\leq A, B \\leq 10^5\n* A \\neq B\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B\n\n\nOutput\n\nPrint the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\n\n", "output": "import math\nA,B=map(int,input().split())\nprint(A*B//math.gcd(A,B))", "public_tests": {"input": ["100000 99999", "123 456", "2 3"], "output": ["9999900000", "18696", "6"]}, "private_tests": {"input": [], "output": []}, "index": 44}, {"input": "Hearing that energy drinks increase rating in those sites, Takahashi decides to buy up M cans of energy drinks.\n\nThere are N stores that sell energy drinks. In the i-th store, he can buy at most B_i cans of energy drinks for A_i yen (the currency of Japan) each.\n\nWhat is the minimum amount of money with which he can buy M cans of energy drinks?\n\nIt is guaranteed that, in the given inputs, a sufficient amount of money can always buy M cans of energy drinks.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, M \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n* 1 \\leq B_i \\leq 10^5\n* B_1 + ... + B_N \\geq M\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_N B_N\n\n\nOutput\n\nPrint the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n\n", "output": "n,m,*l=map(int,open(0).read().split());c=0\nfor a,b in sorted(zip(*[iter(l)]*2)):t=min(b,m);c+=a*t;m-=t\nprint(c)", "public_tests": {"input": ["4 30\n6 18\n2 5\n3 10\n7 9", "1 100000\n1000000000 100000", "2 5\n4 9\n2 4"], "output": ["130", "100000000000000", "12"]}, "private_tests": {"input": [], "output": []}, "index": 45}, {"input": "Our world is one-dimensional, and ruled by two empires called Empire A and Empire B.\n\nThe capital of Empire A is located at coordinate X, and that of Empire B is located at coordinate Y.\n\nOne day, Empire A becomes inclined to put the cities at coordinates x_1, x_2, ..., x_N under its control, and Empire B becomes inclined to put the cities at coordinates y_1, y_2, ..., y_M under its control.\n\nIf there exists an integer Z that satisfies all of the following three conditions, they will come to an agreement, but otherwise war will break out.\n\n* X < Z \\leq Y\n* x_1, x_2, ..., x_N < Z\n* y_1, y_2, ..., y_M \\geq Z\n\n\n\nDetermine if war will break out.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, M \\leq 100\n* -100 \\leq X < Y \\leq 100\n* -100 \\leq x_i, y_i \\leq 100\n* x_1, x_2, ..., x_N \\neq X\n* x_i are all different.\n* y_1, y_2, ..., y_M \\neq Y\n* y_i are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M X Y\nx_1 x_2 ... x_N\ny_1 y_2 ... y_M\n\n\nOutput\n\nIf war will break out, print `War`; otherwise, print `No War`.\n\n", "output": "(*_,X,Y),x,y=eval('map(int,input().split()),'*3);print('No'*(max(X,*x)<min(Y,*y)),'War')", "public_tests": {"input": ["3 2 10 20\n8 15 13\n16 22", "4 2 -48 -1\n-20 -35 -91 -23\n-22 66", "5 3 6 8\n-10 3 1 5 -100\n100 6 14"], "output": ["No War", "War", "War"]}, "private_tests": {"input": [], "output": []}, "index": 46}, {"input": "You are given two integers A and B.\n\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\n* Let the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\n* The set of the squares painted white is divided into exactly A connected components.\n* The set of the squares painted black is divided into exactly B connected components.\n\n\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section. If there are multiple solutions, any of them may be printed.\n\nConstraints\n\n* 1 \\leq A \\leq 500\n* 1 \\leq B \\leq 500\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B\n\n\nOutput\n\nOutput should be in the following format:\n\n* In the first line, print integers h and w representing the size of the grid you constructed, with a space in between.\n* Then, print h more lines. The i-th (1 \\leq i \\leq h) of these lines should contain a string s_i as follows:\n* If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted white, the j-th character in s_i should be `.`.\n* If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted black, the j-th character in s_i should be `#`.\n\n", "output": "a,b=map(int,input().split())\nprint(100,100)\nans=[list(\"#\"*100)for _ in range(50)]+[list(\".\"*100)for _ in range(50)]\nfor i in range(a-1):\n  h=(i//50)*2\n  w=(i%50)*2\n  ans[h][w]=\".\"\nfor i in range(b-1):\n  h=(i//50)*2+51\n  w=(i%50)*2\n  ans[h][w]=\"#\"\nfor i in ans:print(\"\".join(i))", "public_tests": {"input": ["3 14", "1 1", "2 3", "7 8"], "output": ["8 18\n..................\n..................\n....##.......####.\n....#.#.....#.....\n...#...#....#.....\n..#.###.#...#.....\n.#.......#..#.....\n.........#..####.", "4 2\n..\n.", "3 3\n##.\n..#\n#.#", "3 5\n.#.#\n.#.#.\n.#.#"]}, "private_tests": {"input": [], "output": []}, "index": 47}, {"input": "Snuke built an online judge to hold a programming contest.\n\nWhen a program is submitted to the judge, the judge returns a verdict, which is a two-character string that appears in the string S as a contiguous substring. (The judge can return any two-character substring of S.)\n\nDetermine whether the judge can return the string `AC` as the verdict to a program.\n\nConstraints\n\n* 2 \\leq |S| \\leq 5\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nIf the judge can return the string `AC` as a verdict to a program, print `Yes`; if it cannot, print `No`.\n\n", "output": "print(\"NYoe s\"[\"AC\"in input()::2])", "public_tests": {"input": ["CABD", "BACD", "ACACA", "ABCD", "XX"], "output": ["No", "Yes", "Yes", "No", "No"]}, "private_tests": {"input": [], "output": []}, "index": 48}, {"input": "There is a directed graph with N vertices and M edges. The i-th edge (1\u2264i\u2264M) points from vertex a_i to vertex b_i, and has a weight c_i. We will play the following single-player game using this graph and a piece.\n\nInitially, the piece is placed at vertex 1, and the score of the player is set to 0. The player can move the piece as follows:\n\n* When the piece is placed at vertex a_i, move the piece along the i-th edge to vertex b_i. After this move, the score of the player is increased by c_i.\n\n\n\nThe player can end the game only when the piece is placed at vertex N. The given graph guarantees that it is possible to traverse from vertex 1 to vertex N.\n\nWhen the player acts optimally to maximize the score at the end of the game, what will the score be? If it is possible to increase the score indefinitely, print `inf`.\n\nConstraints\n\n* 2\u2264N\u22641000\n* 1\u2264M\u2264min(N(N-1),2000)\n* 1\u2264a_i,b_i\u2264N (1\u2264i\u2264M)\n* a_i\u2260b_i (1\u2264i\u2264M)\n* a_i\u2260a_j or b_i\u2260b_j (1\u2264i<j\u2264M)\n* -10^9\u2264c_i\u226410^9 (1\u2264i\u2264M)\n* c_i is an integer.\n* In the given graph, there exists a path from vertex 1 to vertex N.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 b_1 c_1\na_2 b_2 c_2\n:\na_M b_M c_M\n\n\nOutput\n\nPrint the maximum possible score at the end of the game, if it is finite. If it is possible to increase the score indefinitely, print `inf`.\n\n", "output": "(n,m),*l=[list(map(int,s.split()))for s in open(0)];d=[0]*2+[9e99]*n\nfor i in range(n*2):\n for a,b,c in l:d[b]=min(d[b],d[a]-c)\n if i==n:x=d[n]\nprint([-x,'inf'][d[n]!=x])", "public_tests": {"input": ["2 2\n1 2 1\n2 1 1", "3 3\n1 2 4\n2 3 3\n1 3 5", "6 5\n1 2 -1000000000\n2 3 -1000000000\n3 4 -1000000000\n4 5 -1000000000\n5 6 -1000000000"], "output": ["inf", "7", "-5000000000"]}, "private_tests": {"input": [], "output": []}, "index": 49}, {"input": "Iroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\n\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.\n\nConstraints\n\n* 1\u2266A,B,C\u226610\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA B C\n\n\nOutput\n\nIf it is possible to construct a Haiku by using each of the phrases once, print `YES` (case-sensitive). Otherwise, print `NO`.\n\n", "output": "print(' YNEOS'[input().count('7')::2])", "public_tests": {"input": ["5 5 7", "7 7 5"], "output": ["YES", "NO"]}, "private_tests": {"input": [], "output": []}, "index": 50}, {"input": "There are league games and tournament games in sports competitions. In soccer league games, points are given to each of the wins, losses, and draws, and the rankings are competed based on the points. The points are win (3 points), negative (0 points), and draw (1 point), respectively.\n\nEnter the number of teams and the results of the league match, sort them in order of best results (in descending order of points), and create a program that outputs the team name and points. If the points are tied, output in the order of input.\n\n\n\nInput\n\nGiven multiple datasets. Each dataset is given in the following format:\n\n\nn\nname1 w1 l1 d1\nname2 w2 l2 d2\n::\nnamen wn ln dn\n\n\nThe number of teams n (n \u2264 10) is given on the first line. The next n lines are given the name of team i (alphabet of up to 20 characters), the number of wins wi, the number of negatives li, and the number of draws di (0 \u2264 wi, li, di \u2264 9), separated by spaces. ..\n\nWhen the number of teams is 0, the input is completed. The number of datasets does not exceed 50.\n\nOutput\n\nPrint a sorted list of teams for each dataset. Print the name of the i-th team and the points on the i-line, separated by commas.\n\nInsert one blank line between the datasets.\n\nExample\n\nInput\n\n4\nJapan 1 0 2\nEgypt 1 2 0\nCanada 0 2 1\nSpain 2 0 1\n3\nIndia 0 2 0\nPoland 1 0 1\nItaly 1 0 1\n0\n\n\nOutput\n\nSpain,7\nJapan,5\nEgypt,3\nCanada,1\n\nPoland,4\nItaly,4\nIndia,", "output": "f=0\nwhile 1:\n    a={}\n    n=int(input())\n    if n==0:break\n    if f:print()\n    f=1\n    for i in range(n):\n        b=input().split()\n        a[b[0]]=[int(b[1])*3+int(b[3]),-i]\n    for y,z in sorted(a.items(),key=lambda x:x[1])[::-1]:\n        print('%s,%d'%(y,z[0]))", "public_tests": {"input": ["4\nJapan 1 0 2\nEgypt 1 2 0\nCanada 0 2 1\nSpain 2 0 1\n3\nIndia 0 2 0\nPoland 1 0 1\nItaly 1 0 1\n0"], "output": ["Spain,7\nJapan,5\nEgypt,3\nCanada,1\n\nPoland,4\nItaly,4\nIndia,0"]}, "private_tests": {"input": [], "output": []}, "index": 51}, {"input": "Taro made a sugoroku so that everyone can play at the children's association event. In order to make the game interesting, I wrote instructions such as \"advance 6\" and \"back 5\" in some of the sugoroku squares other than \"Furidashi\" and \"Agari\". Turn the roulette wheel to advance as many times as you can, and if an instruction is written on the stopped square, move according to that instruction. However, it does not follow the instructions of the squares that proceeded according to the instructions.\n\nRoulette shall be able to give a number between 1 and a certain number with equal probability. Also, if you get a larger number than you reach \"Agari\", or if you follow the instructions and you go beyond \"Agari\", you will move to \"Agari\". If you follow the instructions and return before \"Furidashi\", you will return to \"Furidashi\".\n\n<image>\n\n\nHowever, depending on the instructions of the roulette wheel and the square, it may not be possible to reach the \"rise\". For example, let's say you made a sugoroku like the one shown in the figure. If you use a roulette wheel that only gives 1 and 2, you can go to \"Agari\" if you come out in the order of 1 and 2, but if you get 2 first, you will not be able to reach \"Agari\" forever no matter what comes out. Taro didn't know that and wrote instructions in various squares.\n\nTherefore, on behalf of Taro, please create a program to determine whether or not you may not be able to reach the \"rise\" depending on the instructions of the roulette and the square.\n\n\n\ninput\n\nThe input consists of multiple datasets. The end of the input is indicated by a single zero line. Each dataset is given in the following format.\n\n\nmax\nn\nd1\nd2\n..\n..\n..\ndn\n\n\nThe first line gives the maximum number of roulette wheels max (2 \u2264 max \u2264 250), and the second line gives the number of cells other than \"starting\" and \"rising\" n (2 \u2264 n \u2264 250). .. The next n lines are given the number di (-n \u2264 di \u2264 n) that represents the indication for each cell. When di is zero, it means that no instruction is written, when it is a positive number, it means | di | forward instruction, and when it is negative, it means | di | back instruction (where | x | is x). Represents an absolute value). All values \u200b\u200bentered are integers.\n\nThe number of datasets does not exceed 100.\n\noutput\n\nThe judgment result is output to one line for each data set. Depending on the instructions of the roulette and the square, if it may not be possible to reach the \"go up\", \"NG\" is output, otherwise \"OK\" is output.\n\nExample\n\nInput\n\n3\n3\n-2\n1\n0\n2\n4\n2\n0\n-1\n-2\n2\n2\n-2\n-2\n0\n\n\nOutput\n\nOK\nNG\nN", "output": "while True:\n    m = int(input())\n    if not m:\n        break\n    n = int(input())\n    ds = [0] + [int(input()) for _ in range(n)] + [0]\n\n    g = [[] for _ in range(n+2)]\n    rg = [[] for _ in range(n+2)]\n    for i in range(n+2):\n        for j in range(min(n+1,i+1),min(n+1,i+m)+1):\n            j = max(0,min(n+1,j+ds[j]))\n            g[i].append(j)\n            rg[j].append(i)\n    \n    def go(g,bs,i):\n        bs[i] = True\n        for j in g[i]:\n            if not bs[j]:\n                go(g,bs,j)\n    \n    bs = [False]*(n+2)\n    rbs = [False]*(n+2)\n    go(g,bs,0)\n    go(rg,rbs,n+1)\n\n    if any((b and (not rb)) for b,rb in zip(bs,rbs)):\n        print('NG')\n    else:\n        print('OK')", "public_tests": {"input": ["3\n3\n-2\n1\n0\n2\n4\n2\n0\n-1\n-2\n2\n2\n-2\n-2\n0"], "output": ["OK\nNG\nNG"]}, "private_tests": {"input": [], "output": []}, "index": 52}, {"input": "problem\n\nTaro often shop at JOI general stores. At JOI general stores, there are enough coins of 500 yen, 100 yen, 50 yen, 10 yen, 5 yen, and 1 yen, and we always pay the change so that the number of coins is the smallest. Create a program to find the number of coins included in the change you receive when Taro goes shopping at the JOI general store and puts out one 1000 yen bill at the cash register.\n\nFor example, in the case of input example 1, 4 must be output as shown in the figure below.\n\n<image>\n\n\n\ninput\n\nThe input consists of multiple datasets. Each dataset consists of one line, and only one amount (an integer of 1 or more and less than 1000) paid by Taro is written. The input data ends with one zero line.\n\nThe number of datasets does not exceed 5.\n\noutput\n\nOutput the number of coins included in the change for each dataset on one line.\n\n", "output": "for e in iter(input,'0'):\n a,b=0,1000-int(e)\n for i in[500,100,50,10,5]:\n  a+=b//i\n  b%=i\n print(a+b)\n", "public_tests": {"input": ["380\n1\n0"], "output": ["4\n15"]}, "private_tests": {"input": [], "output": []}, "index": 53}, {"input": "In a laboratory, an assistant, Nathan Wada, is measuring weight differences between sample pieces pair by pair. He is using a balance because it can more precisely measure the weight difference between two samples than a spring scale when the samples have nearly the same weight.\n\nHe is occasionally asked the weight differences between pairs of samples. He can or cannot answer based on measurement results already obtained.\n\nSince he is accumulating a massive amount of measurement data, it is now not easy for him to promptly tell the weight differences. Nathan asks you to develop a program that records measurement results and automatically tells the weight differences.\n\n\n\nInput\n\nThe input consists of multiple datasets. The first line of a dataset contains two integers N and M. N denotes the number of sample pieces (2 \u2264 N \u2264 100,000). Each sample is assigned a unique number from 1 to N as an identifier. The rest of the dataset consists of M lines (1 \u2264 M \u2264 100,000), each of which corresponds to either a measurement result or an inquiry. They are given in chronological order.\n\nA measurement result has the format,\n\n! a b w\n\nwhich represents the sample piece numbered b is heavier than one numbered a by w micrograms (a \u2260 b). That is, w = wb \u2212 wa, where wa and wb are the weights of a and b, respectively. Here, w is a non-negative integer not exceeding 1,000,000.\n\nYou may assume that all measurements are exact and consistent.\n\nAn inquiry has the format,\n\n? a b\n\nwhich asks the weight difference between the sample pieces numbered a and b (a \u2260 b).\n\nThe last dataset is followed by a line consisting of two zeros separated by a space.\n\nOutput\n\nFor each inquiry, ? a b, print the weight difference in micrograms between the sample pieces numbered a and b, wb \u2212 wa, followed by a newline if the weight difference can be computed based on the measurement results prior to the inquiry. The difference can be zero, or negative as well as positive. You can assume that its absolute value is at most 1,000,000. If the difference cannot be computed based on the measurement results prior to the inquiry, print UNKNOWN followed by a newline.\n\nExample\n\nInput\n\n2 2\n! 1 2 1\n? 1 2\n2 2\n! 1 2 1\n? 2 1\n4 7\n! 1 2 100\n? 2 3\n! 2 3 100\n? 2 3\n? 1 3\n! 4 3 150\n? 4 1\n0 0\n\n\nOutput\n\n1\n-1\nUNKNOWN\n100\n200\n-5", "output": "import sys\nsys.setrecursionlimit(10**6)\ndef root(x):\n    if x == parent[x]:\n        return x\n    y = root(parent[x])\n    relative[x] += relative[parent[x]]\n    parent[x] = y\n    return y\ndef unite(a, b, w):\n    pa = root(a); pb = root(b)\n    pw = relative[a] + w - relative[b]\n    if pa < pb:\n        parent[pb] = pa\n        relative[pb] = pw\n    else:\n        parent[pa] = pb\n        relative[pa] = -pw\nwhile 1:\n    N, M = map(int, input().split())\n    if N == M == 0:\n        break\n    *parent, = range(N)\n    relative = [0]*N\n    for i in range(M):\n        cmd = input().split()\n        if cmd[0] == '!':\n            a, b, w = map(int, cmd[1:])\n            unite(a-1, b-1, w)\n        else:\n            a, b = map(int, cmd[1:])\n            if root(a-1) != root(b-1):\n                print(\"UNKNOWN\")\n            else:\n                print(relative[b-1] - relative[a-1])", "public_tests": {"input": ["2 2\n! 1 2 1\n? 1 2\n2 2\n! 1 2 1\n? 2 1\n4 7\n! 1 2 100\n? 2 3\n! 2 3 100\n? 2 3\n? 1 3\n! 4 3 150\n? 4 1\n0 0"], "output": ["1\n-1\nUNKNOWN\n100\n200\n-50"]}, "private_tests": {"input": [], "output": []}, "index": 54}, {"input": "Matryoshka\n\nMatryoshka is a famous Russian folk craft doll. Matryoshka can be divided into upper and lower parts, and when opened, there is another smaller doll inside. The nesting structure is such that when the small doll that appears is opened, a smaller doll is contained.\n\n<image>\n\n\nYou found an unusually shaped matryoshka doll on your trip and bought N dolls. The shape of the i-th doll is a rectangular parallelepiped of xi \u00d7 yi \u00d7 zi.\n\nAfter watching Matryoshka for a while, you are about to put away Matryoshka. Before that, I want to reduce the space required by storing some dolls in another. When storing a doll, one other doll can be stored only in the doll that has not yet stored any doll. However, only the dolls that are stored directly are counted, and the doll that contains the doll can be stored in another doll.\n\nThe stored doll becomes invisible from the outside. However, the following conditions must be met.\n\n* The doll may rotate, but each side of the rectangular parallelepiped is parallel to any side of the other rectangular parallelepiped.\n* After rotation, the length of the doll on the side to be stored is shorter for each of the lengths of the corresponding sides.\n* At most one doll can be stored directly in one doll\n\n\n\nSince the volume of the closet is limited, we want to minimize the sum of the volumes of the dolls that can be seen from the outside. Your job is to create a program that finds the minimum sum of the volumes of the dolls that are visible from the outside, which can be achieved by repeating the operation of storing the dolls any number of times.\n\nInput\n\nThe input consists of multiple datasets. The maximum number of data sets does not exceed 50. Each dataset is represented in the following format.\n\n> N\n> x1 y1 z1\n>::\n>::\n> xN yN zN\n>\n\nEach dataset consists of N + 1 rows, and the first row of the dataset is given the integer N, which represents the number of dolls. In the i-th line of the following N lines, three integers xi, yi, and zi representing the size of the i-th doll are given, separated by a half-width space. These integers satisfy 1 \u2264 N, xi, yi, zi \u2264 100.\n\n> The end of the input is represented by a single zero line.\n\n> ### Output\n\nFor each data set, output the minimum value of the sum of the volumes of the dolls that can be seen from the outside in one line.\n\n> ### Sample Input\n\n\n2\none two Three\n4 2 3\n3\n2 5 2\n3 3 4\n5 5 5\nFive\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\nFive\n1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\nTen\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9\n3 2 3\n8 4 6\n2 6 4\n3 3 8\n3 2 7\n0\n\n\nOutput for Sample Input\n\n\ntwenty four\n145\n125\n15\n864\n\n\n\n\n\nExample\n\nInput\n\n2\n1 2 3\n4 2 3\n3\n2 5 2\n3 3 4\n5 5 5\n5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n5\n1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n10\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9\n3 2 3\n8 4 6\n2 6 4\n3 3 8\n3 2 7\n0\n\n\nOutput\n\n24\n145\n125\n15\n86", "output": "import sys\nreadline = sys.stdin.readline\nwrite = sys.stdout.write\n\nfrom heapq import heappush, heappop\nclass MinCostFlow:\n    INF = 10**18\n\n    def __init__(self, N):\n        self.N = N\n        self.G = [[] for i in range(N)]\n\n    def add_edge(self, fr, to, cap, cost):\n        G = self.G\n        G[fr].append([to, cap, cost, len(G[to])])\n        G[to].append([fr, 0, -cost, len(G[fr])-1])\n\n    def flow(self, s, t, f):\n        N = self.N; G = self.G\n        INF = MinCostFlow.INF\n\n        res = 0\n        H = [0]*N\n        prv_v = [0]*N\n        prv_e = [0]*N\n\n        while f:\n            dist = [INF]*N\n            dist[s] = 0\n            que = [(0, s)]\n\n            while que:\n                c, v = heappop(que)\n                if dist[v] < c:\n                    continue\n                for i, (w, cap, cost, _) in enumerate(G[v]):\n                    if cap > 0 and dist[w] > dist[v] + cost + H[v] - H[w]:\n                        dist[w] = r = dist[v] + cost + H[v] - H[w]\n                        prv_v[w] = v; prv_e[w] = i\n                        heappush(que, (r, w))\n            if dist[t] == INF:\n                return -1\n\n            for i in range(N):\n                H[i] += dist[i]\n\n            d = f; v = t\n            while v != s:\n                d = min(d, G[prv_v[v]][prv_e[v]][1])\n                v = prv_v[v]\n            f -= d\n            res += d * H[t]\n            v = t\n            while v != s:\n                e = G[prv_v[v]][prv_e[v]]\n                e[1] -= d\n                G[v][e[3]][1] += d\n                v = prv_v[v]\n        return res\n\ndef solve():\n    N = int(readline())\n    if N == 0:\n        return False\n    P = []\n    for i in range(N):\n        *p, = map(int, readline().split())\n        p.sort()\n        P.append(p)\n    mcf = MinCostFlow(2*N+2)\n    P.sort()\n    su = 0\n    for i in range(N):\n        xi, yi, zi = P[i]\n        for j in range(i):\n            xj, yj, zj = P[j]\n            if xi > xj and yi > yj and zi > zj:\n                mcf.add_edge(2*j+1, 2*i, 1, -xj*yj*zj)\n        su += xi*yi*zi\n        mcf.add_edge(2*i, 2*i+1, 1, 0)\n        mcf.add_edge(2*N, 2*i, 1, 0)\n        mcf.add_edge(2*i+1, 2*N+1, 1, 0)\n    ans = su\n    for i in range(N):\n        f = mcf.flow(2*N, 2*N+1, 1)\n        su += f\n        ans = min(ans, su)\n    write(\"%d\\n\" % ans)\n    return True\nwhile solve():\n    ...\n", "public_tests": {"input": ["2\n1 2 3\n4 2 3\n3\n2 5 2\n3 3 4\n5 5 5\n5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n5\n1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n10\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9\n3 2 3\n8 4 6\n2 6 4\n3 3 8\n3 2 7\n0"], "output": ["24\n145\n125\n15\n864"]}, "private_tests": {"input": [], "output": []}, "index": 55}, {"input": "Cutlet Sandwich\n\nIn some worlds, there are $ X $ types of \"sandwiches\", $ Y $ types of \"cutlets\", and $ Z $ types of \"curry\" foods.\n\nThere is a $ N $ type of \"cutlet sandwich\" in this world, and the $ i $ type of cutlet sandwich is made from the $ A_i $ type of sand and the $ B_i $ type of cutlet.\n\nThere is also a $ M $ type of \"cutlet curry\", and the $ i $ type of cutlet curry is made from the $ C_i $ type of cutlet and the $ D_i $ type of curry.\n\nWhen you have a cutlet sandwich or cutlet curry, you can exchange it for a cutlet sandwich or cutlet curry that shares at least $ 1 $ of the ingredients.\n\nFor example, if the $ a $ type sand and the $ b $ type cutlet have the raw cutlet sand, then the $ a $ type sand or any cutlet sand made from the $ b $ type cutlet. Or, you can exchange it for any cutlet curry that contains $ b $ type of cutlet.\n\nRight now, Segtree has a $ S $ kind of cutlet sandwich, but he wants to eat a $ T $ kind of cutlet curry.\n\nDetermine if you can get the $ T $ kind of cutlet curry. If possible, ask for the minimum number of replacements to get the desired cutlet curry.\n\ninput\n\nInput is given from standard input in the following format.\n\n\n$ X $ $ Y $ $ Z $ $ N $ $ M $ $ S $ $ T $\n$ A_1 $ $ B_1 $\n$ A_2 $ $ B_2 $\n$ \\ ldots $\n$ A_N $ $ B_N $\n$ C_1 $ $ D_1 $\n$ C_2 $ $ D_2 $\n$ \\ ldots $\n$ C_M $ $ D_M $\n\n\noutput\n\nPlease output the minimum number of exchanges required to obtain the $ T $ type of cutlet curry. If you can't get it, print \"$ -1 $\" instead.\n\nHowever, insert a line break at the end.\n\nConstraint\n\n* $ 1 \\ leq X, Y, Z, N, M \\ leq 10 ^ 5 $\n* $ 1 \\ leq S \\ leq N $\n* $ 1 \\ leq T \\ leq M $\n* $ 1 \\ leq A_i \\ leq X $\n* $ 1 \\ leq B_i \\ leq Y $\n* $ 1 \\ leq C_i \\ leq Y $\n* $ 1 \\ leq D_i \\ leq Z $\n* All inputs are integers.\n\n\n\nInput example 1\n\n\n1 1 1 1 1 1 1\n1 1\n1 1\n\n\nOutput example 1\n\n\n1\n\n\nInput example 2\n\n\n2 3 4 3 5 1 5\n1 1\n1 2\ntwenty two\ntwenty one\n3 1\n3 2\n3 3\n3 4\n\n\nOutput example 2\n\n\nFour\n\n\nInput example 3\n\n\n1 2 2 1 2 1 1\n1 2\n1 2\ntwenty one\n\n\nOutput example 3\n\n\n-1\n\n\n\n\n\n\nExample\n\nInput\n\n1 1 1 1 1 1 1\n1 1\n1 1\n\n\nOutput\n\n", "output": "from collections import deque\nx,y,z,n,m,s,t=map(int,input().split())\ng=[[]for _ in range(x+y+z)]\nfor i in range(n):\n  a,b=map(int,input().split())\n  g[a-1].append(b+x-1)\n  g[b+x-1].append(a-1)\n  if i==s-1:\n    p,q=a-1,b+x-1\nfor j in range(m):\n  a,b=map(int, input().split())\n  g[a+x-1].append(b+x+y-1)\n  g[b+x+y-1].append(a+x-1)\n  if j==t-1:\n    u,v=a+x-1,b+x+y-1\nd=[-2]*(x+y+z)\nd[p],d[q]=0,0\nq=deque([p,q])\nwhile q:\n  p = q.popleft()\n  for node in g[p]:\n    if d[node]==-2:\n      q.append(node)\n      d[node]=d[p]+1\nprint(min(d[u],d[v])+1)\n", "public_tests": {"input": ["1 1 1 1 1 1 1\n1 1\n1 1"], "output": ["1"]}, "private_tests": {"input": [], "output": []}, "index": 56}, {"input": "Constraints\n\n* 1 \u2264 |V| \u2264 1000\n* 0 \u2264 |E| \u2264 2000\n* -10000 \u2264 di \u2264 10000\n* There are no parallel edges\n* There are no self-loops\n\nInput\n\nAn edge-weighted graph G (V, E) and the source r.\n\n\n|V| |E| r\ns0 t0 d0\ns1 t1 d1\n:\ns|E|-1 t|E|-1 d|E|-1\n\n\n|V| is the number of vertices and |E| is the number of edges in G. The graph vertices are named with the numbers 0, 1,..., |V|-1 respectively. r is the source of the graph.\n\nsi and ti represent source and target vertices of i-th edge (directed) and di represents the cost of the i-th edge.\n\nOutput\n\nIf the graph contains a negative cycle (a cycle whose sum of edge costs is a negative value) which is reachable from the source r, print\n\n\nNEGATIVE CYCLE\n\n\nin a line.\n\nOtherwise, print\n\n\nc0\nc1\n:\nc|V|-1\n\n\nThe output consists of |V| lines. Print the cost of the shortest path from the source r to each vertex 0, 1, ... |V|-1 in order. If there is no path from the source to a vertex, print \"INF\".\n\n", "output": "n,m,r=map(int,input().split())\na,b,c=[0]*m,[0]*m,[0]*m\nINF=10**18\nfor i in range(m):\n  a[i],b[i],c[i]=map(int,input().split())\nd=[INF]*n\nd[r]=0\nfor _ in range(n-1):\n  for i in range(m):\n    if d[a[i]]==INF:continue\n    d[b[i]]=min(d[b[i]],d[a[i]]+c[i])\nfor _ in range(n):\n  for i in range(m):\n    if d[a[i]]==INF:continue\n    if d[b[i]]>d[a[i]]+c[i]:\n      print('NEGATIVE CYCLE')\n      exit()\nfor i in d:\n  print([i,'INF'][i==INF])\n", "public_tests": {"input": ["4 5 1\n0 1 2\n0 2 3\n1 2 -5\n1 3 1\n2 3 2", "4 5 0\n0 1 2\n0 2 3\n1 2 -5\n1 3 1\n2 3 2", "4 6 0\n0 1 2\n0 2 3\n1 2 -5\n1 3 1\n2 3 2\n3 1 0"], "output": ["INF\n0\n-5\n-3", "0\n2\n-3\n-1", "NEGATIVE CYCLE"]}, "private_tests": {"input": [], "output": []}, "index": 57}, {"input": "Initially there was an array a consisting of n integers. Positions in it are numbered from 1 to n.\n\nExactly q queries were performed on the array. During the i-th query some segment (l_i, r_i) (1 \u2264 l_i \u2264 r_i \u2264 n) was selected and values of elements on positions from l_i to r_i inclusive got changed to i. The order of the queries couldn't be changed and all q queries were applied. It is also known that every position from 1 to n got covered by at least one segment.\n\nWe could have offered you the problem about checking if some given array (consisting of n integers with values from 1 to q) can be obtained by the aforementioned queries. However, we decided that it will come too easy for you.\n\nSo the enhancement we introduced to it is the following. Some set of positions (possibly empty) in this array is selected and values of elements on these positions are set to 0.\n\nYour task is to check if this array can be obtained by the aforementioned queries. Also if it can be obtained then restore this array.\n\nIf there are multiple possible arrays then print any of them.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 2 \u22c5 10^5) \u2014 the number of elements of the array and the number of queries perfomed on it.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 q) \u2014 the resulting array. If element at some position j is equal to 0 then the value of element at this position can be any integer from 1 to q.\n\nOutput\n\nPrint \"YES\" if the array a can be obtained by performing q queries. Segments (l_i, r_i) (1 \u2264 l_i \u2264 r_i \u2264 n) are chosen separately for each query. Every position from 1 to n should be covered by at least one segment. \n\nOtherwise print \"NO\".\n\nIf some array can be obtained then print n integers on the second line \u2014 the i-th number should be equal to the i-th element of the resulting array and should have value from 1 to q. This array should be obtainable by performing exactly q queries.\n\nIf there are multiple possible arrays then print any of them.\n\n", "output": "import sys\nn,q = map(int,input().split())\na = list(map(int,input().split()))\nl = len(a)\n\nzeros = []\nlast = dict()\ncur_max = 0\nlast_max = 1\n\nstack = []\n\nfor i in range(l-1,-1,-1):\n    if a[i] == 0:\n        zeros.append(i)\n    elif a[i] not in last:\n        last[a[i]] = i\nfor i in range(l):\n\n    if a[i] == 0:\n        a[i] = max(cur_max,1)\n    elif a[i] > cur_max and last[a[i]] != i:\n        stack.append(cur_max)\n        cur_max = a[i]\n    elif cur_max != 0 and i == last[cur_max]:\n        cur_max = stack.pop()\n    elif a[i] < cur_max: \n        print(\"NO\")\n        sys.exit(0)\n\nif q > max(a):\n    if zeros:\n        print(\"YES\")\n        a[zeros[0]] = q\n        print(*a)\n    else:\n        print(\"NO\")\nelif q == max(a):\n    print(\"YES\")\n    print(*a)\nelif q < max(a):\n    print(\"NO\")", "public_tests": {"input": ["4 3\n1 0 2 3\n", "3 10\n10 10 10\n", "3 5\n0 0 0\n", "5 6\n6 5 6 2 2\n"], "output": ["YES\n1 1 2 3\n", "YES\n10 10 10\n", "YES\n5 5 5\n", "NO\n"]}, "private_tests": {"input": ["50 2\n0 1 0 1 0 0 1 0 1 1 0 1 1 1 2 2 0 2 0 2 0 2 0 0 2 2 2 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 1 0 1 1 0 1 0 0\n", "1 1\n1\n", "5 5\n4 3 5 4 1\n", "6 4\n4 4 3 3 4 4\n", "1 2\n1\n", "50 500\n494 500 0 0 0 0 500 500 0 0 500 0 500 0 500 0 500 0 500 0 500 0 500 500 500 500 0 0 500 0 500 0 0 500 0 500 0 500 0 500 0 500 0 500 0 0 494 494 0 489\n", "100 100\n19 67 31 66 29 23 62 17 63 93 71 87 82 62 38 49 77 35 61 36 32 18 93 7 31 73 17 3 15 82 80 19 26 87 38 57 30 86 31 8 21 22 93 52 41 3 92 29 45 18 93 18 80 9 5 52 9 65 85 79 33 50 5 11 49 14 64 86 81 5 58 32 24 92 39 86 97 37 55 80 35 93 14 97 55 97 96 3 6 91 85 61 13 26 93 61 42 74 77 73\n", "3 10\n5 0 0\n", "3 5\n0 0 0\n", "50 500\n466 466 480 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 468 459\n", "4 3\n2 1 3 2\n", "50 200000\n0 199989 0 0 0 0 200000 200000 0 200000 0 200000 200000 0 0 200000 0 0 0 0 200000 200000 200000 200000 0 0 0 200000 0 0 0 0 200000 200000 0 200000 0 200000 0 200000 200000 0 200000 0 199999 199980 199978 199978 199964 199952\n", "5 5\n0 0 5 5 5\n", "50 5\n1 1 1 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 1 1 1\n", "5 2\n1 2 1 2 1\n", "3 7\n1 1 1\n", "50 2\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "4 3\n1 0 2 3\n", "50 5\n5 5 5 0 5 0 5 5 0 0 5 0 5 5 0 0 0 0 0 0 0 5 5 5 5 0 5 0 0 0 5 5 5 5 5 5 0 5 0 5 5 0 0 0 4 0 0 4 0 0\n", "1 1\n0\n", "4 3\n0 1 2 3\n", "1 2\n0\n"], "output": ["YES\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "YES\n1\n", "NO\n", "NO\n", "NO\n", "YES\n494 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 494 494 494 489\n", "NO\n", "YES\n5 10 10\n", "YES\n5 5 5\n", "YES\n466 466 480 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 468 459\n", "NO\n", "YES\n199989 199989 199989 199989 199989 199989 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 199999 199980 199978 199978 199964 199952\n", "YES\n5 5 5 5 5\n", "YES\n1 1 1 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 1 1 1\n", "NO\n", "NO\n", "YES\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "YES\n1 1 2 3\n", "YES\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4\n", "YES\n1\n", "YES\n1 1 2 3\n", "YES\n2\n"]}, "index": 58}, {"input": "Tattah's youngest brother, Tuftuf, is new to programming.\n\nSince his older brother is such a good programmer, his biggest dream is to outshine him. Tuftuf is a student at the German University in Cairo (GUC) where he learns to write programs in Gava.\n\nToday, Tuftuf was introduced to Gava's unsigned integer datatypes. Gava has n unsigned integer datatypes of sizes (in bits) a1, a2, ... an. The i-th datatype have size ai bits, so it can represent every integer between 0 and 2ai - 1 inclusive. \n\nTuftuf is thinking of learning a better programming language. If there exists an integer x, such that x fits in some type i (in ai bits) and x\u00b7x does not fit in some other type j (in aj bits) where ai < aj, then Tuftuf will stop using Gava.\n\nYour task is to determine Tuftuf's destiny.\n\nInput\n\nThe first line contains integer n (2 \u2264 n \u2264 105) \u2014 the number of Gava's unsigned integer datatypes' sizes. The second line contains a single-space-separated list of n integers (1 \u2264 ai \u2264 109) \u2014 sizes of datatypes in bits. Some datatypes may have equal sizes.\n\nOutput\n\nPrint \"YES\" if Tuftuf will stop using Gava, and \"NO\" otherwise.\n\n", "output": "I=input\nR=range(int(I())-1)\na=sorted(map(int,I().split()))\ns='NO'\nfor i in R:\n\tif a[i]<a[i+1]and a[i]*2>a[i+1]:s='YES'\nprint(s)", "public_tests": {"input": ["4\n4 2 1 3\n", "3\n64 16 32\n"], "output": ["YES\n", "NO\n"]}, "private_tests": {"input": ["9\n20 44 92 8 20 380 8 188 764\n", "7\n1 2 3 4 8 16 32\n", "2\n1000000000 999999999\n", "56\n43 641 626 984 107 521 266 835 707 220 402 406 558 199 988 685 843 808 182 73 553 17 765 979 116 178 489 271 532 889 26 263 654 680 240 392 980 267 264 46 888 444 874 519 735 301 743 526 376 793 40 110 811 184 82 96\n", "97\n250 58 26 506 58 122 506 506 250 506 26 58 26 58 10 26 58 58 2 506 506 10 10 2 26 26 122 58 506 10 506 58 250 2 26 122 122 10 250 58 2 58 58 122 10 506 26 122 26 2 2 2 250 506 2 506 10 2 26 122 250 2 250 122 10 250 10 26 58 122 58 2 2 10 250 250 26 250 10 250 506 122 122 122 506 26 58 10 122 10 250 10 2 2 26 250 122\n", "8\n421 250 398 257 512 329 25 972\n", "2\n1 2\n", "3\n1 2 2\n", "2\n1 1\n", "5\n1 5 3 3 2\n", "3\n1 1 2\n", "43\n906 652 445 325 991 682 173 290 731 528 432 615 698 132 874 38 643 301 223 442 722 529 150 659 593 22 679 178 410 978 201 559 115 533 586 790 703 596 492 591 781 761 384\n", "220\n10 6 6 2 8 6 6 5 6 2 10 3 9 10 10 2 3 5 2 2 4 7 6 6 7 5 6 2 10 10 1 1 2 2 3 2 4 4 8 1 1 2 1 10 9 2 1 4 2 1 7 4 8 4 2 9 7 7 6 6 8 3 1 9 10 6 3 5 9 5 1 1 8 3 10 8 10 3 7 9 2 4 8 2 8 4 10 5 7 10 6 8 3 5 7 9 4 2 6 2 2 7 7 2 10 1 1 8 7 4 8 8 9 1 1 9 5 5 5 3 5 5 3 2 6 4 7 9 10 9 3 1 10 1 7 8 8 7 6 5 1 5 6 2 1 9 9 10 8 4 9 5 4 8 10 4 9 2 3 7 10 3 3 9 10 5 7 7 6 7 3 1 5 7 10 6 3 5 4 7 8 6 10 10 10 8 3 5 1 1 1 10 2 3 5 5 2 5 8 4 7 3 1 10 1 10 9 2 10 3 4 9 1 5 9 8 2 7 7 2\n", "85\n436 23 384 417 11 227 713 910 217 177 227 161 851 396 556 948 700 819 920 451 877 249 332 189 606 986 627 468 877 682 497 579 189 443 252 795 147 642 643 569 250 863 615 560 142 752 918 167 677 49 750 871 282 721 102 884 179 980 392 509 178 977 51 241 912 599 142 975 453 353 350 130 837 955 688 7 588 239 194 277 50 865 227 848 538\n", "52\n474 24 24 954 9 234 474 114 24 114 234 24 114 114 234 9 9 24 9 54 234 54 9 954 474 9 54 54 54 234 9 114 24 54 114 954 954 474 24 54 54 234 234 474 474 24 114 9 954 954 954 474\n"], "output": ["NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n"]}, "index": 59}, {"input": "Sasha likes programming. Once, during a very long contest, Sasha decided that he was a bit tired and needed to relax. So he did. But since Sasha isn't an ordinary guy, he prefers to relax unusually. During leisure time Sasha likes to upsolve unsolved problems because upsolving is very useful.\n\nTherefore, Sasha decided to upsolve the following problem:\n\nYou have an array a with n integers. You need to count the number of funny pairs (l, r) (l \u2264 r). To check if a pair (l, r) is a funny pair, take mid = (l + r - 1)/(2), then if r - l + 1 is an even number and a_l \u2295 a_{l+1} \u2295 \u2026 \u2295 a_{mid} = a_{mid + 1} \u2295 a_{mid + 2} \u2295 \u2026 \u2295 a_r, then the pair is funny. In other words, \u2295 of elements of the left half of the subarray from l to r should be equal to \u2295 of elements of the right half. Note that \u2295 denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nIt is time to continue solving the contest, so Sasha asked you to solve this task.\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the size of the array.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i < 2^{20}) \u2014 array itself.\n\nOutput\n\nPrint one integer \u2014 the number of funny pairs. You should consider only pairs where r - l + 1 is even number.\n\n", "output": "input()\nd={(0,0):1}\nr=s=i=0\nfor x in map(int,input().split()):s^=x;i^=1;c=d.get((s,i),0);r+=c;d[s,i]=c+1\nprint(r)", "public_tests": {"input": ["3\n42 4 2\n", "6\n3 2 2 3 7 6\n", "5\n1 2 3 4 5\n"], "output": ["0", "3", "1"]}, "private_tests": {"input": ["2\n60202 951227\n"], "output": ["0"]}, "index": 60}, {"input": "The new camp by widely-known over the country Spring Programming Camp is going to start soon. Hence, all the team of friendly curators and teachers started composing the camp's schedule. After some continuous discussion, they came up with a schedule s, which can be represented as a binary string, in which the i-th symbol is '1' if students will write the contest in the i-th day and '0' if they will have a day off.\n\nAt the last moment Gleb said that the camp will be the most productive if it runs with the schedule t (which can be described in the same format as schedule s). Since the number of days in the current may be different from number of days in schedule t, Gleb required that the camp's schedule must be altered so that the number of occurrences of t in it as a substring is maximum possible. At the same time, the number of contest days and days off shouldn't change, only their order may change.\n\nCould you rearrange the schedule in the best possible way?\n\nInput\n\nThe first line contains string s (1 \u2a7d |s| \u2a7d 500 000), denoting the current project of the camp's schedule.\n\nThe second line contains string t (1 \u2a7d |t| \u2a7d 500 000), denoting the optimal schedule according to Gleb.\n\nStrings s and t contain characters '0' and '1' only.\n\nOutput\n\nIn the only line print the schedule having the largest number of substrings equal to t. Printed schedule should consist of characters '0' and '1' only and the number of zeros should be equal to the number of zeros in s and the number of ones should be equal to the number of ones in s.\n\nIn case there multiple optimal schedules, print any of them.\n\n", "output": "s=input()\nt_=input()\ntt=''\nt=t_\nans=''\nfor i in range(len(t_)-1):\n\ttt+=t_[i]\n\tif (t_.endswith(tt)):\n\t\tt=t_[i+1:]\ns0=s.count('0')\ns1=s.count('1')\nt_0=t_.count('0')\nt_1=t_.count('1')\nt0=t.count('0')\nt1=t.count('1')\nif s0>=t_0 and s1>=t_1:\n\tans+=t_\n\ts0-=t_0\n\ts1-=t_1\nelse:\n\tprint(s)\n\texit(0)\nif t0>0:\n\tn1=s0//t0\nelse:\n\tn1=1000000000\nif t1>0:\n\tn2=s1//t1\nelse:\n\tn2=1000000000\nval=min(n1,n2)\nans+=val*t\ns0-=val*t0\ns1-=val*t1\nans+=s0*\"0\"+s1*\"1\"\nprint(ans)", "public_tests": {"input": ["10\n11100\n", "10010110\n100011\n", "101101\n110\n"], "output": ["10\n", "10001101", "110110\n"]}, "private_tests": {"input": ["0101011\n0101\n", "00010000111010011101110110010110100010001101001110\n1011111000111010111001111\n", "10100110\n10\n", "10000111\n10101\n", "11111111111111111111111111111111111111111111111111\n11111111111111111111111111111111111111111111111110\n", "11111111111111111111111111111111111111111111111111\n1\n", "10101000\n101\n", "11111111\n0000\n", "10010110\n100011\n", "00000000000000000000000000000000000000000000000000\n000000000000000000000000000000\n", "00010101\n00101010\n", "11111111\n1111\n", "00000000\n0000\n", "11111111010110101100010110110110111001111010000110\n0010\n", "01101111111111010010111011001001111000000010000011\n1110001010\n", "11001111111000110010000001011001001011111101110110\n1\n", "11111111111111111111111111111111111111111111111111\n1111\n", "00000000000000000000000000000000000000000000000000\n111111111111111111111111111111\n", "00101010\n01101011\n", "11111111111111111111111111111111111111111111111111\n111111111111111111111111111111\n", "11011000\n11010\n", "10000111100011111100010100110001100110011100001100\n0001000011101001110111011\n", "00000000\n1111\n", "00001000010011010011111000001111000011011101011000\n01101111110001001101100000001010110110101100111110\n", "01101101110111000010011100000010110010100101011001\n01100001111011000011\n", "0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\n0000000000000000000000000000000000000000000000000010110101111001100010000011110100100000000011111\n", "11111111111111111111111111111111111111111111111111\n000000000000000000000000000000\n", "11111111\n11111110\n", "11100010100111101011101101011011011100010001111001\n0000011001\n", "1111111111111111111111111111111111111111111110000000000000000000000000000000000000000\n111000011\n", "11110011010010001010010010100010110110110101001111\n01101001100101101001011001101001\n", "11111111\n1\n", "0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\n000000000000000000000000000000000000000000000000000111011100110101100101000000111\n", "11100100\n01101001\n", "01110100\n101\n", "01001101001011100000100110001010010010111101100100\n00001000010011010011111000001111000011011101011000\n", "11011000\n10\n", "11000000\n0\n", "11010010\n11010\n"], "output": ["0101011\n", "10111110001110101110011110111110001100000000000000", "10101010\n", "10101010\n", "11111111111111111111111111111111111111111111111111\n", "11111111111111111111111111111111111111111111111111\n", "10101000\n", "11111111\n", "10001101", "00000000000000000000000000000000000000000000000000\n", "00101010\n", "11111111\n", "00000000\n", "00100100100100100100100100101111111111111111111111\n", "11100010101110001010111000101011100010101110001111", "11111111111111111111111111110000000000000000000000\n", "11111111111111111111111111111111111111111111111111\n", "00000000000000000000000000000000000000000000000000\n", "01101000", "11111111111111111111111111111111111111111111111111\n", "11010100\n", "00010000111010011101110110001000011101001110111000", "00000000\n", "01101111110001001101100000001010110110101100000000", "01100001111011000011110110000111101100001111000000\n", "0000000000000000000000000000000000000000000000000010110101111001100010000011110100100000000011111000000000000000000000000000000000000000000000000001011010111100110001000001111010010000000001111100000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111\n", "11111111\n", "00000110010000011001000001100111111111111111111111\n", "1110000111000011100001110000111000011100001110000111000011100001110000111111111111111\n", "01101001100101101001011001101001100101101001011011", "11111111\n", "0000000000000000000000000000000000000000000000000001110111001101011001010000001110000000000000000000000000000000000000000000000000001110111001101011001010000001110000000000000000000000000000000000000000000000000001110111001101011001010000001110000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "01101001\n", "10101010\n", "00001000010011010011111000001111000011011101011000\n", "10101010\n", "00000011\n", "11010100\n"]}, "index": 61}, {"input": "There are n pillars aligned in a row and numbered from 1 to n.\n\nInitially each pillar contains exactly one disk. The i-th pillar contains a disk having radius a_i.\n\nYou can move these disks from one pillar to another. You can take a disk from pillar i and place it on top of pillar j if all these conditions are met:\n\n  1. there is no other pillar between pillars i and j. Formally, it means that |i - j| = 1; \n  2. pillar i contains exactly one disk; \n  3. either pillar j contains no disks, or the topmost disk on pillar j has radius strictly greater than the radius of the disk you move. \n\n\n\nWhen you place a disk on a pillar that already has some disks on it, you put the new disk on top of previously placed disks, so the new disk will be used to check the third condition if you try to place another disk on the same pillar.\n\nYou may take any disk and place it on other pillar any number of times, provided that every time you do it, all three aforementioned conditions are met. Now you wonder, is it possible to place all n disks on the same pillar simultaneously?\n\nInput\n\nThe first line contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of pillars.\n\nThe second line contains n integers a_1, a_2, ..., a_i (1 \u2264 a_i \u2264 n), where a_i is the radius of the disk initially placed on the i-th pillar. All numbers a_i are distinct.\n\nOutput\n\nPrint YES if it is possible to place all the disks on the same pillar simultaneously, and NO otherwise. You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\n", "output": "n=int(input())\na=[*map(int,input().split())]\ni=a.index(n)\ns=sorted\nprint('YNEOS'[a!=s(a[:i])+s(a[i:])[::-1]::2])", "public_tests": {"input": ["3\n3 1 2\n", "4\n1 3 4 2\n"], "output": ["NO", "YES"]}, "private_tests": {"input": ["5\n3 1 5 4 2\n", "13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n", "100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n", "3\n1 2 3\n", "9\n1 2 3 4 5 6 7 8 9\n", "6\n3 1 2 6 5 4\n", "10\n1 2 4 3 5 10 9 8 7 6\n", "8\n1 2 3 4 5 6 7 8\n", "3\n3 2 1\n", "4\n2 1 4 3\n", "6\n6 5 4 3 1 2\n", "5\n1 4 5 2 3\n", "5\n3 4 5 1 2\n", "5\n1 3 5 4 2\n", "10\n1 2 3 4 5 6 7 8 9 10\n", "5\n2 1 5 4 3\n"], "output": ["NO", "YES", "YES", "YES", "YES", "NO", "NO", "YES", "YES", "NO", "NO", "NO", "NO", "YES", "YES", "NO"]}, "index": 62}, {"input": "Petya's friends made him a birthday present \u2014 a bracket sequence. Petya was quite disappointed with his gift, because he dreamed of correct bracket sequence, yet he told his friends nothing about his dreams and decided to fix present himself. \n\nTo make everything right, Petya is going to move at most one bracket from its original place in the sequence to any other position. Reversing the bracket (e.g. turning \"(\" into \")\" or vice versa) isn't allowed. \n\nWe remind that bracket sequence s is called correct if: \n\n  * s is empty; \n  * s is equal to \"(t)\", where t is correct bracket sequence; \n  * s is equal to t_1 t_2, i.e. concatenation of t_1 and t_2, where t_1 and t_2 are correct bracket sequences. \n\n\n\nFor example, \"(()())\", \"()\" are correct, while \")(\" and \"())\" are not. Help Petya to fix his birthday present and understand whether he can move one bracket so that the sequence becomes correct.\n\nInput\n\nFirst of line of input contains a single number n (1 \u2264 n \u2264 200 000) \u2014 length of the sequence which Petya received for his birthday.\n\nSecond line of the input contains bracket sequence of length n, containing symbols \"(\" and \")\".\n\nOutput\n\nPrint \"Yes\" if Petya can make his sequence correct moving at most one bracket. Otherwise print \"No\".\n\n", "output": "input()\ns=m=0\nfor c in input():s+=81-2*ord(c);m=min(m,s)\nprint('YNeos'[s!=0 or-1>m::2])", "public_tests": {"input": ["2\n)(\n", "10\n)))))(((((\n", "3\n(()\n", "2\n()\n"], "output": ["Yes\n", "No\n", "No\n", "Yes\n"]}, "private_tests": {"input": ["3\n)((\n", "100\n))))))))))))))))))))))))))))))))))))))))))))))))))((((((((((((((((((((((((((((((((((((((((((((((((((\n", "500\nn", "1\n(\n", "7\n(()))((\n", "6\n())))(\n", "99\n(())()(())(()((()))()()((((()))((())())(()()()())((()()((())))(()((()()))()()(((()())))((()))))))()\n", "100\n((((((((())(((((()))()()))))))))(()((()()))()()()((((()()))()()((()))))()()())(((((()))))())()()()))\n", "50\n((())((()()())()))))())((()())))()(())))(())))))()\n", "98\n()()(((((((())))(((()))))(())(())()()(())())))))((()()()))()(((()))()()())((())(((()(((())))()))))\n", "100\n(((()((()())(()))((())()))(()))(())(())())(((()(()))((((())))())()()())(((())())(((()()))()())()()))\n", "100\n((((((((()()))))(())((((((((()()(())())())))))()()()))(((()())()(()())((()(()))(())()(()())())))))))\n", "10\n()()((((((\n", "100\n(((()(()))((())(((())()))())((((((())())()())(()())))(((())()()())()()))(()(()(())(()))()(()()))()))\n", "100\n(((((((()))(())())())(()))(((()())(())(())))(()((()))((()(())()))(()))(((()()()(()))(()))()(()()))))\n", "100\n((((()((()())))(((()((((((()(())))())))()()()())(((()()()()()()))())(())()())))()()()(()())()()())))\n", "4\n)))(\n", "8\n)()()()(\n", "6\n(())((\n", "100\n(()()((((())()()(()()())())))((((())(((()))()()()((()))(())))((()()(((()())))((()()))()(())()())))))\n", "4\n((((\n", "100\n(((((())))(())))(((())(()(())))())())(()()))(((())()))())(()((((()))(()))(((()()))(()))((()()))())((\n", "100\n((()(((((((()()())()(())(())()))()(()((()())))(()())()(())(((())(())))))))))(()((((())))(())())))(()\n", "1\n)\n", "99\n((()()()()()()()()()((((()))()((((()())()))))())))((()())((((((())()))(((()))())()())))((()))))()()\n", "100\n((((((()()()()())(())()))()((()))))(())()((((((()()()()())()())))()(())()((()))())))()(()()(((()))))\n", "100\n((((()(())())(()))((((())((()(())(())()(()()()))))()()((()))(()()()())))()(())())(((())()()()()())))\n", "4\n((()\n", "98\n(((((((((())())((())()))))))((()))()()()(())()()(())))((())(()))((((((()(()()(())(()()()))))))(())\n", "4\n)(((\n", "100\n((((()()(((((()())))))()()()((())()())()((()()()))))))(())()()()((()))()()()()())()()(((((()))(())))\n", "50\n))(()()))())()))))())))())()()(((()((()))(((()(())\n", "4\n()((\n", "2\n((\n", "100\n(()(()(()()))(()))(())))(((((((()))))()()((()(()))))))(((((()((())()()((())(())()())()()))))(())(())\n", "4\n))((\n", "500\nn", "100\n()((((()())())(()()()(())()(((())))()((()(((()))(()))())))((((()(()())(()(()))((()())())))))((()))))\n", "3\n))(\n", "100\n(((())())()())(())(((()())(()())))(((())(()))(()(())())(()(())()))())()())((((())())((((()))))()())(\n", "6\n(((())\n"], "output": ["No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "Yes\n", "Yes\n", "No\n", "Yes\n", "Yes\n", "Yes\n", "No\n", "Yes\n", "No\n", "Yes\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "Yes\n", "Yes\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "No\n", "No\n", "No\n", "No\n", "Yes\n", "No\n", "No\n", "No\n"]}, "index": 63}, {"input": "Recall that a binary search tree is a rooted binary tree, whose nodes each store a key and each have at most two distinguished subtrees, left and right. The key in each node must be greater than any key stored in the left subtree, and less than any key stored in the right subtree.\n\nThe depth of a vertex is the number of edges on the simple path from the vertex to the root. In particular, the depth of the root is 0.\n\nLet's call a binary search tree perfectly balanced if there doesn't exist a binary search tree with the same number of vertices that has a strictly smaller sum of depths of its vertices.\n\nLet's call a binary search tree with integer keys striped if both of the following conditions are satisfied for every vertex v: \n\n  * If v has a left subtree whose root is u, then the parity of the key of v is different from the parity of the key of u. \n  * If v has a right subtree whose root is w, then the parity of the key of v is the same as the parity of the key of w. \n\n\n\nYou are given a single integer n. Find the number of perfectly balanced striped binary search trees with n vertices that have distinct integer keys between 1 and n, inclusive. Output this number modulo 998 244 353.\n\nInput\n\nThe only line contains a single integer n (1 \u2264 n \u2264 10^6), denoting the required number of vertices.\n\nOutput\n\nOutput the number of perfectly balanced striped binary search trees with n vertices and distinct integer keys between 1 and n, inclusive, modulo 998 244 353.\n\n", "output": "x = int(input())\nif (3*x) & (3*x+5) < 5:\n    print(1)\nelse:\n    print(0)", "public_tests": {"input": ["4\n", "3\n"], "output": ["1", "0"]}, "private_tests": {"input": ["1000000\n", "988727\n", "22\n", "581472\n", "796867\n", "43690\n", "84\n", "13156\n", "1\n", "7\n", "19\n", "26\n", "43689\n", "621012\n", "699050\n", "17\n", "11\n", "8\n", "181407\n", "530259\n", "259060\n", "750096\n", "2730\n", "629191\n", "472032\n", "174762\n", "9\n", "16\n", "87380\n", "2\n", "699049\n", "174761\n", "42\n", "325193\n", "175466\n", "170\n", "699048\n", "999999\n", "349525\n", "524288\n", "699051\n", "631649\n", "27\n", "681\n", "10\n", "740812\n", "5\n", "25\n", "21\n", "503375\n", "169\n", "786432\n", "360561\n", "1365\n", "737480\n", "699047\n", "87381\n", "549836\n", "557479\n", "334846\n", "85\n", "320507\n", "546029\n", "622262\n", "682\n", "341\n", "21845\n", "797049\n", "10922\n", "20\n", "28\n", "527730\n", "5460\n", "10921\n", "21844\n", "14\n", "5461\n", "12\n", "699046\n", "308545\n", "6\n", "31\n"], "output": ["0", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "1", "1", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0", "1", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "0", "0", "0", "0", "0"]}, "index": 64}, {"input": "This is the easier version of the problem. In this version, 1 \u2264 n \u2264 10^5 and 0 \u2264 a_i \u2264 1. You can hack this problem only if you solve and lock both problems.\n\nChristmas is coming, and our protagonist, Bob, is preparing a spectacular present for his long-time best friend Alice. This year, he decides to prepare n boxes of chocolate, numbered from 1 to n. Initially, the i-th box contains a_i chocolate pieces.\n\nSince Bob is a typical nice guy, he will not send Alice n empty boxes. In other words, at least one of a_1, a_2, \u2026, a_n is positive. Since Alice dislikes coprime sets, she will be happy only if there exists some integer k > 1 such that the number of pieces in each box is divisible by k. Note that Alice won't mind if there exists some empty boxes. \n\nCharlie, Alice's boyfriend, also is Bob's second best friend, so he decides to help Bob by rearranging the chocolate pieces. In one second, Charlie can pick up a piece in box i and put it into either box i-1 or box i+1 (if such boxes exist). Of course, he wants to help his friend as quickly as possible. Therefore, he asks you to calculate the minimum number of seconds he would need to make Alice happy.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of chocolate boxes.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 1) \u2014 the number of chocolate pieces in the i-th box.\n\nIt is guaranteed that at least one of a_1, a_2, \u2026, a_n is positive.\n\nOutput\n\nIf there is no way for Charlie to make Alice happy, print -1.\n\nOtherwise, print a single integer x \u2014 the minimum number of seconds for Charlie to help Bob make Alice happy.\n\n", "output": "n = int(input())\na = [int(x) for x in input().split()]\nm = 0\nb = []\nfor i in range(n):\n    m += a[i]\n    if a[i] == 1:\n        b.append(i)\nans = n * m\nfor i in range(2, m + 1):\n    preans = 0\n    if m % i != 0:\n        continue\n    c = 0\n    for j in range(m):\n        wg = (j // i) * i + i // 2\n        if j != wg:\n            preans += abs(b[wg] - b[j])\n    ans = min(ans, preans)\nif m == 1:\n    ans = -1\nprint(ans)\n", "public_tests": {"input": ["1\n1\n", "3\n1 0 1\n"], "output": ["-1\n", "2\n"]}, "private_tests": {"input": ["10\n3 3 3 5 6 9 3 1 7 3\n", "16\n47 14 19 48 2 41 38 25 5 24 38 22 1 30 38 41\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "100\n1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0\n", "3\n4 8 5\n", "19\n51 65 42 25 41 45 68 58 2 33 9 17 28 41 5 0 70 28 26\n", "100\n61 28 67 53 13 6 70 5 79 82 60 60 84 17 80 25 82 82 69 76 81 43 58 86 18 78 4 25 8 30 33 87 91 18 90 26 62 11 28 66 9 33 58 66 47 48 80 38 25 57 4 84 79 71 54 84 63 32 97 62 26 68 5 69 54 93 25 26 100 73 24 94 80 39 30 45 95 80 0 29 57 98 92 15 17 76 69 11 57 56 48 10 28 7 63 66 53 58 12 58\n", "17\n64 26 39 57 12 0 64 26 35 8 50 3 64 16 4 42 33\n", "20\n0 0 1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 1 0\n", "14\n41 24 6 2 7 24 23 2 13 21 25 14 23 7\n", "100\n1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 1 1 1 0 1 1 0 0 1 0\n", "5\n3 10 2 1 5\n", "15\n1 1 1 0 0 0 1 1 1 0 0 0 1 1 1\n", "11\n42 20 19 6 25 0 20 33 40 38 35\n", "100\n1 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1\n", "3\n0 0 1\n", "16\n12 0 9 14 12 26 21 24 3 13 7 4 26 1 17 21\n", "20\n55 21 46 36 40 11 12 59 58 2 48 7 86 52 47 48 17 4 72 30\n", "1\n2103\n", "11\n0 3 3 5 5 5 4 3 6 4 1\n", "11\n59 15 45 18 19 39 63 17 18 58 65\n", "15\n17 7 1 8 2 2 0 18 0 12 11 0 12 12 5\n", "6\n1 1 0 0 0 1\n", "4\n0 5 15 10\n", "3\n0 0 17\n"], "output": ["90\n", "1860\n", "68\n", "53\n", "47\n", "9\n", "8\n", "68\n", "6\n", "13\n", "8\n", "56\n", "2\n", "6\n", "5\n", "1908\n", "-1\n", "9\n", "3736\n", "0\n", "6\n", "7\n", "432\n", "5\n", "0\n", "0\n"]}, "index": 65}, {"input": "Santa Claus has received letters from n different kids throughout this year. Of course, each kid wants to get some presents from Santa: in particular, the i-th kid asked Santa to give them one of k_i different items as a present. Some items could have been asked by multiple kids.\n\nSanta is really busy, so he wants the New Year Bot to choose the presents for all children. Unfortunately, the Bot's algorithm of choosing presents is bugged. To choose a present for some kid, the Bot does the following:\n\n  * choose one kid x equiprobably among all n kids; \n  * choose some item y equiprobably among all k_x items kid x wants; \n  * choose a kid z who will receive the present equipropably among all n kids (this choice is independent of choosing x and y); the resulting triple (x, y, z) is called the decision of the Bot. \n\n\n\nIf kid z listed item y as an item they want to receive, then the decision valid. Otherwise, the Bot's choice is invalid.\n\nSanta is aware of the bug, but he can't estimate if this bug is really severe. To do so, he wants to know the probability that one decision generated according to the aforementioned algorithm is valid. Can you help him?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 10^6) \u2014 the number of kids who wrote their letters to Santa.\n\nThen n lines follow, the i-th of them contains a list of items wanted by the i-th kid in the following format: k_i a_{i, 1} a_{i, 2} ... a_{i, k_i} (1 \u2264 k_i, a_{i, j} \u2264 10^6), where k_i is the number of items wanted by the i-th kid, and a_{i, j} are the items themselves. No item is contained in the same list more than once.\n\nIt is guaranteed that \u2211 _{i = 1}^{n} k_i \u2264 10^6.\n\nOutput\n\nPrint the probatility that the Bot produces a valid decision as follows:\n\nLet this probability be represented as an irreducible fraction x/y. You have to print x \u22c5 y^{-1} mod 998244353, where y^{-1} is the inverse element of y modulo 998244353 (such integer that y \u22c5 y^{-1} has remainder 1 modulo 998244353). \n\n", "output": "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nP = 998244353\nN = int(input())\nX = [0] * 1001001\nA = [[int(a) for a in input().split()[1:]] for _ in range(N)]\n\nfor i in range(N):\n    for a in A[i]:\n        X[a] += 1\n\nans = 0\nfor i in range(N):\n    ans = (ans + sum([X[a] for a in A[i]]) * pow(len(A[i]), P-2, P)) % P\n\nprint(ans * pow(N*N, P-2, P) % P)", "public_tests": {"input": ["5\n2 1 2\n2 3 1\n3 2 4 3\n2 1 4\n3 4 3 2\n", "2\n2 2 1\n1 1\n"], "output": ["798595483\n", "124780545\n"]}, "private_tests": {"input": ["10\n5 48258 84644 992412 548310 132019\n5 132019 556600 548310 84644 992412\n6 132019 771663 523582 548310 463969 556600\n7 556600 132019 992412 523582 548310 70239 84644\n4 556600 548310 523582 463969\n7 548310 84644 771663 556600 132019 463969 48258\n5 556600 771663 463969 523582 84644\n6 48258 548310 84644 556600 523582 132019\n4 548310 523582 556600 132019\n5 992412 523582 556600 548310 84644\n"], "output": ["820200343\n"]}, "index": 66}, {"input": "Anna and Maria are in charge of the math club for junior students. When the club gathers together, the students behave badly. They've brought lots of shoe laces to the club and got tied with each other. Specifically, each string ties together two students. Besides, if two students are tied, then the lace connects the first student with the second one as well as the second student with the first one.\n\nTo restore order, Anna and Maria do the following. First, for each student Anna finds out what other students he is tied to. If a student is tied to exactly one other student, Anna reprimands him. Then Maria gathers in a single group all the students who have been just reprimanded. She kicks them out from the club. This group of students immediately leaves the club. These students takes with them the laces that used to tie them. Then again for every student Anna finds out how many other students he is tied to and so on. And they do so until Anna can reprimand at least one student.\n\nDetermine how many groups of students will be kicked out of the club.\n\nInput\n\nThe first line contains two integers n and m \u2014 the initial number of students and laces (<image>). The students are numbered from 1 to n, and the laces are numbered from 1 to m. Next m lines each contain two integers a and b \u2014 the numbers of students tied by the i-th lace (1 \u2264 a, b \u2264 n, a \u2260 b). It is guaranteed that no two students are tied with more than one lace. No lace ties a student to himself.\n\nOutput\n\nPrint the single number \u2014 the number of groups of students that will be kicked out from the club.\n\n", "output": "n,m=map(int,input().split())\ns=[set() for __ in range(n+1)]\nfor _ in range(m):\n a,b=map(int,input().split())\n s[a].add(b)\n s[b].add(a)\ncount=0\nwhile True:\n p=set()\n for i in range(1,n+1):\n  if len(s[i])==1:\n   p.add(i)\n   s[i]=set()\n if len(p)==0:\n  break\n count+=1\n for i in range(1,n+1):\n  s[i]-=p\nprint(count)\n  ", "public_tests": {"input": ["6 5\n1 4\n2 4\n3 4\n5 4\n6 4\n", "6 3\n1 2\n2 3\n3 4\n", "3 3\n1 2\n2 3\n3 1\n"], "output": ["1\n", "2\n", "0\n"]}, "private_tests": {"input": ["9 33\n5 7\n5 9\n9 6\n9 1\n7 4\n3 5\n7 8\n8 6\n3 6\n8 2\n3 8\n1 6\n1 8\n1 4\n4 2\n1 2\n2 5\n3 4\n8 5\n2 6\n3 1\n1 5\n1 7\n3 2\n5 4\n9 4\n3 9\n7 3\n6 4\n9 8\n7 9\n8 4\n6 5\n", "51 23\n46 47\n31 27\n1 20\n49 16\n2 10\n29 47\n13 27\n34 26\n31 2\n28 20\n17 40\n39 4\n29 26\n28 44\n3 39\n50 12\n19 1\n30 21\n41 23\n2 29\n16 3\n49 28\n49 41\n", "75 43\n46 34\n33 12\n51 39\n47 74\n68 64\n40 46\n20 51\n47 19\n4 5\n57 59\n12 26\n68 65\n38 42\n73 37\n5 74\n36 61\n8 18\n58 33\n34 73\n42 43\n10 49\n70 50\n49 18\n24 53\n71 73\n44 24\n49 56\n24 29\n44 67\n70 46\n57 25\n73 63\n3 51\n30 71\n41 44\n17 69\n17 18\n19 68\n42 7\n11 51\n1 5\n72 23\n65 53\n", "69 38\n63 35\n52 17\n43 69\n2 57\n12 5\n26 36\n13 10\n16 68\n5 18\n5 41\n10 4\n60 9\n39 22\n39 28\n53 57\n13 52\n66 38\n49 61\n12 19\n27 46\n67 7\n25 8\n23 58\n52 34\n29 2\n2 42\n8 53\n57 43\n68 11\n48 28\n56 19\n46 33\n63 21\n57 16\n68 59\n67 34\n28 43\n56 36\n", "7 11\n5 3\n6 5\n6 4\n1 6\n7 1\n2 6\n7 5\n2 5\n3 1\n3 4\n2 4\n", "82 46\n64 43\n32 24\n57 30\n24 46\n70 12\n23 41\n63 39\n46 70\n4 61\n19 12\n39 79\n14 28\n37 3\n12 27\n15 20\n35 39\n25 64\n59 16\n68 63\n37 14\n76 7\n67 29\n9 5\n14 55\n46 26\n71 79\n47 42\n5 55\n18 45\n28 40\n44 78\n74 9\n60 53\n44 19\n52 81\n65 52\n40 13\n40 19\n43 1\n24 23\n68 9\n16 20\n70 14\n41 40\n29 10\n45 65\n", "81 46\n53 58\n31 14\n18 54\n43 61\n57 65\n6 38\n49 5\n6 40\n6 10\n17 72\n27 48\n58 39\n21 75\n21 43\n78 20\n34 4\n15 35\n74 48\n76 15\n49 38\n46 51\n78 9\n80 5\n26 42\n64 31\n46 72\n1 29\n20 17\n32 45\n53 43\n24 5\n52 59\n3 80\n78 19\n61 17\n80 12\n17 8\n63 2\n8 4\n44 10\n53 72\n18 60\n68 15\n17 58\n79 71\n73 35\n", "62 30\n29 51\n29 55\n4 12\n53 25\n36 28\n32 11\n29 11\n47 9\n21 8\n25 4\n51 19\n26 56\n22 21\n37 9\n9 33\n7 25\n16 7\n40 49\n15 21\n49 58\n34 30\n20 46\n62 48\n53 57\n33 6\n60 37\n41 34\n62 36\n36 43\n11 39\n", "75 31\n32 50\n52 8\n21 9\n68 35\n12 72\n47 26\n38 58\n40 55\n31 70\n53 75\n44 1\n65 22\n33 22\n33 29\n14 39\n1 63\n16 52\n70 15\n12 27\n63 31\n47 9\n71 31\n43 17\n43 49\n8 26\n11 39\n9 22\n30 45\n65 47\n32 9\n60 70\n", "86 48\n59 34\n21 33\n45 20\n62 23\n4 68\n2 65\n63 26\n64 20\n51 34\n64 21\n68 78\n61 80\n81 3\n38 39\n47 48\n24 34\n44 71\n72 78\n50 2\n13 51\n82 78\n11 74\n14 48\n2 75\n49 55\n63 85\n20 85\n4 53\n51 15\n11 67\n1 15\n2 64\n10 81\n6 7\n68 18\n84 28\n77 69\n10 36\n15 14\n32 86\n16 79\n26 13\n38 55\n47 43\n47 39\n45 37\n58 81\n42 35\n", "12 49\n6 3\n12 9\n10 11\n3 5\n10 2\n6 9\n8 5\n6 12\n7 3\n3 12\n3 2\n5 6\n7 5\n9 2\n11 1\n7 6\n5 4\n8 7\n12 5\n5 11\n8 9\n10 3\n6 2\n10 4\n9 10\n9 11\n11 3\n5 9\n11 6\n10 8\n7 9\n10 7\n4 6\n3 8\n4 11\n12 2\n4 9\n2 11\n7 11\n1 5\n7 2\n8 1\n4 12\n9 1\n4 2\n8 2\n11 12\n3 1\n1 6\n", "95 0\n", "58 29\n27 24\n40 52\n51 28\n44 50\n7 28\n14 53\n10 16\n16 45\n8 56\n35 26\n39 6\n6 14\n45 22\n35 13\n20 17\n42 6\n37 21\n4 11\n26 56\n54 55\n3 57\n40 3\n55 27\n4 51\n35 29\n50 16\n47 7\n48 20\n1 37\n", "51 29\n36 30\n37 45\n4 24\n40 18\n47 35\n15 1\n30 38\n15 18\n32 40\n34 42\n2 47\n35 21\n25 28\n13 1\n13 28\n36 1\n46 47\n22 17\n41 45\n43 45\n40 15\n29 35\n47 15\n30 21\n9 14\n18 38\n18 50\n42 10\n31 41\n", "100 0\n", "56 22\n17 27\n48 49\n29 8\n47 20\n32 7\n44 5\n14 39\n5 13\n40 2\n50 42\n38 9\n18 37\n16 44\n21 32\n21 39\n37 54\n19 46\n30 47\n17 13\n30 31\n49 16\n56 7\n", "77 41\n48 45\n50 36\n6 69\n70 3\n22 21\n72 6\n54 3\n49 31\n2 23\n14 59\n68 58\n4 54\n60 12\n63 60\n44 24\n28 24\n40 8\n5 1\n13 24\n29 15\n19 76\n70 50\n65 71\n23 33\n58 16\n50 42\n71 28\n58 54\n24 73\n6 17\n29 13\n60 4\n42 4\n21 60\n77 39\n57 9\n51 19\n61 6\n49 36\n24 32\n41 66\n", "72 39\n9 44\n15 12\n2 53\n34 18\n41 70\n54 72\n39 19\n26 7\n4 54\n53 59\n46 49\n70 6\n9 10\n64 51\n31 60\n61 53\n59 71\n9 60\n67 16\n4 16\n34 3\n2 61\n16 23\n34 6\n10 18\n13 38\n66 40\n59 9\n40 14\n38 24\n31 48\n7 69\n20 39\n49 52\n32 67\n61 35\n62 45\n37 54\n5 27\n", "5 4\n1 4\n4 3\n4 5\n5 2\n", "56 25\n12 40\n31 27\n18 40\n1 43\n9 10\n25 47\n27 29\n26 28\n19 38\n19 40\n22 14\n21 51\n29 31\n55 29\n51 33\n20 17\n24 15\n3 48\n31 56\n15 29\n49 42\n50 4\n22 42\n25 17\n18 51\n", "7 8\n5 7\n2 7\n1 6\n1 3\n3 7\n6 3\n6 4\n2 6\n", "5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n", "11 10\n1 2\n1 3\n3 4\n1 5\n5 6\n6 7\n1 8\n8 9\n9 10\n10 11\n", "96 70\n30 37\n47 56\n19 79\n15 28\n2 43\n43 54\n59 75\n42 22\n38 18\n18 14\n47 41\n60 29\n35 11\n90 4\n14 41\n11 71\n41 24\n68 28\n45 92\n14 15\n34 63\n77 32\n67 38\n36 8\n37 4\n58 95\n68 84\n69 81\n35 23\n56 63\n78 91\n35 44\n66 63\n80 19\n87 88\n28 14\n62 35\n24 23\n83 37\n54 89\n14 40\n9 35\n94 9\n56 46\n92 70\n16 58\n96 31\n53 23\n56 5\n36 42\n89 77\n29 51\n26 13\n46 70\n25 56\n95 96\n3 51\n76 8\n36 82\n44 85\n54 56\n89 67\n32 5\n82 78\n33 65\n43 28\n35 1\n94 13\n26 24\n10 51\n", "7 7\n1 2\n2 3\n3 1\n1 4\n4 5\n4 6\n4 7\n", "76 49\n15 59\n23 26\n57 48\n49 51\n42 76\n36 40\n37 40\n29 15\n28 71\n47 70\n27 39\n76 21\n55 16\n21 18\n19 1\n25 31\n51 71\n54 42\n28 9\n61 69\n33 9\n18 19\n58 51\n51 45\n29 34\n9 67\n26 8\n70 37\n11 62\n24 22\n59 76\n67 17\n59 11\n54 1\n12 57\n23 3\n46 47\n37 20\n65 9\n51 12\n31 19\n56 13\n58 22\n26 59\n39 76\n27 11\n48 64\n59 35\n44 75\n", "10 29\n4 5\n1 7\n4 2\n3 8\n7 6\n8 10\n10 6\n4 1\n10 1\n6 2\n7 4\n7 10\n2 7\n9 8\n5 10\n2 5\n8 5\n4 9\n2 8\n5 7\n4 8\n7 3\n6 5\n1 3\n1 9\n10 4\n10 9\n10 2\n2 3\n", "6 15\n3 1\n4 5\n1 4\n6 2\n3 5\n6 3\n1 6\n1 5\n2 3\n2 5\n6 4\n5 6\n4 2\n1 2\n3 4\n", "72 45\n5 15\n8 18\n40 25\n71 66\n67 22\n6 44\n16 25\n8 23\n19 70\n26 34\n48 15\n24 2\n54 68\n44 43\n17 37\n49 19\n71 49\n34 38\n59 1\n65 70\n11 54\n5 11\n15 31\n29 50\n48 16\n70 57\n25 59\n2 59\n56 12\n66 62\n24 16\n46 27\n45 67\n68 43\n31 11\n31 30\n8 44\n64 33\n38 44\n54 10\n13 9\n7 51\n25 4\n40 70\n26 65\n", "52 26\n29 41\n16 26\n18 48\n31 17\n37 42\n26 1\n11 7\n29 6\n23 17\n12 47\n34 23\n41 16\n15 35\n25 21\n45 7\n52 2\n37 10\n28 19\n1 27\n30 47\n42 35\n50 30\n30 34\n19 30\n42 25\n47 31\n"], "output": ["0\n", "4\n", "5\n", "4\n", "0\n", "8\n", "4\n", "2\n", "4\n", "8\n", "0\n", "0\n", "3\n", "3\n", "0\n", "4\n", "3\n", "8\n", "2\n", "3\n", "1\n", "0\n", "4\n", "4\n", "2\n", "5\n", "0\n", "0\n", "5\n", "3\n"]}, "index": 67}, {"input": "Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. \n\nThe poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: \n\n<image>\n\nAfter the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? \n\nIt is allowed that the number includes leading zeros.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of digits on scoreboard and k (0 \u2264 k \u2264 2000) \u2014 the number of segments that stopped working.\n\nThe next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.\n\nEach digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.\n\n<image>\n\nThus, the sequences \"1110111\", \"0010010\", \"1011101\", \"1011011\", \"0111010\", \"1101011\", \"1101111\", \"1010010\", \"1111111\", \"1111011\" encode in sequence all digits from 0 to 9 inclusive.\n\nOutput\n\nOutput a single number consisting of n digits \u2014 the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.\n\n", "output": "D = [\n    '1110111',\n    '0010010',\n    '1011101',\n    '1011011',\n    '0111010',\n    '1101011',\n    '1101111',\n    '1010010',\n    '1111111',\n    '1111011',\n]\n\nn, k = list(map(int, input().split()))\nx = [input() for _ in range(n)]\nr = [[-1] * (k + 1) for _ in range(n + 1)]\nr[n][0] = 0\nfor i in range(n - 1, -1, -1):\n    for d in range(10):\n        dc = 0\n        for f, t in zip(x[i], D[d]):\n            if f > t:\n                break\n            else:\n                dc += f != t\n        else:\n            z = dc * 10 + d\n            for c in range(k + 1 - dc):\n                if r[i + 1][c] >= 0:\n                    r[i][c + dc] = z\nif r[0][k] >= 0:\n    for i in range(n):\n        print(r[i][k] % 10, end='')\n        k -= r[i][k] // 10\n    print()\nelse:\n    print(-1)", "public_tests": {"input": ["1 7\n0000000\n", "3 5\n0100001\n1001001\n1010011\n", "2 5\n0010010\n0010010\n"], "output": ["8\n", "-1\n", "97\n"]}, "private_tests": {"input": ["10 10\n1101001\n0110000\n0111010\n0010000\n1010000\n0111000\n1011011\n1010010\n1101011\n1111110\n", "10 10\n1100011\n1010011\n0000111\n1110110\n0101011\n0111111\n1001111\n1000000\n1111011\n0111000\n", "10 0\n0111010\n1101111\n1111011\n0111010\n1101011\n1101011\n1110111\n1010010\n1111111\n0010010\n", "2 2\n1110111\n1011101\n", "3 4\n1110111\n1011101\n1011101\n", "2 7\n0010010\n1000000\n", "6 17\n1101111\n0111000\n0000011\n1000011\n0100110\n0011101\n", "2 1\n1111011\n1010010\n", "3 7\n1100001\n1101111\n1000000\n", "3 7\n0111001\n1010011\n1000000\n", "1 1\n1010010\n", "1 2\n0010010\n", "6 16\n1011111\n0000100\n0110000\n1001111\n0111111\n0111000\n", "4 4\n1101011\n0111010\n0111010\n0111010\n", "5 12\n0100111\n1001111\n1100111\n1010110\n0110010\n", "1 1\n0110111\n", "2 2\n1101011\n1011101\n", "10 6\n1101011\n1101111\n1010000\n1110111\n1101110\n1100111\n1110011\n1011101\n0111010\n1010010\n", "3 2\n1111111\n1110111\n1011101\n", "3 8\n0111010\n1011011\n1011101\n", "10 10\n0101111\n0000000\n1111011\n1011011\n1011011\n1111011\n0010010\n1010010\n1101111\n0000000\n", "10 10\n1110111\n0111111\n1111111\n1111111\n0111111\n1111111\n0111111\n1111110\n1111111\n1111111\n", "10 10\n0000000\n0100000\n0000000\n0010000\n0000000\n0000001\n0000000\n0001000\n0000001\n0101000\n"], "output": ["9941743758\n", "-1\n", "4694550781\n", "08\n", "088\n", "87\n", "899968\n", "87\n", "965\n", "987\n", "-1\n", "4\n", "889689\n", "9844\n", "88809\n", "0\n", "82\n", "9870669247\n", "808\n", "-1\n", "8993391761\n", "-1\n", "-1\n"]}, "index": 68}, {"input": "A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nLet p be any permutation of length n. We define the fingerprint F(p) of p as the sorted array of sums of adjacent elements in p. More formally,\n\n$$$F(p)=sort([p_1+p_2,p_2+p_3,\u2026,p_{n-1}+p_n]).$$$\n\nFor example, if n=4 and p=[1,4,2,3], then the fingerprint is given by F(p)=sort([1+4,4+2,2+3])=sort([5,6,5])=[5,5,6].\n\nYou are given a permutation p of length n. Your task is to find a different permutation p' with the same fingerprint. Two permutations p and p' are considered different if there is some index i such that p_i \u2260 p'_i.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 668). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2\u2264 n\u2264 100) \u2014 the length of the permutation.\n\nThe second line of each test case contains n integers p_1,\u2026,p_n (1\u2264 p_i\u2264 n). It is guaranteed that p is a permutation.\n\nOutput\n\nFor each test case, output n integers p'_1,\u2026, p'_n \u2014 a permutation such that p'\u2260 p and F(p')=F(p).\n\nWe can prove that for every permutation satisfying the input constraints, a solution exists.\n\nIf there are multiple solutions, you may output any.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n6\n2 1 6 5 4 3\n5\n2 4 3 1 5\n\n\nOutput\n\n\n2 1\n1 2 5 6 3 4\n3 1 5 2 4\n\nNote\n\nIn the first test case, F(p)=sort([1+2])=[3].\n\nAnd F(p')=sort([2+1])=[3].\n\nIn the second test case, F(p)=sort([2+1,1+6,6+5,5+4,4+3])=sort([3,7,11,9,7])=[3,7,7,9,11].\n\nAnd F(p')=sort([1+2,2+5,5+6,6+3,3+4])=sort([3,7,11,9,7])=[3,7,7,9,11].\n\nIn the third test case, F(p)=sort([2+4,4+3,3+1,1+5])=sort([6,7,4,6])=[4,6,6,7].\n\nAnd F(p')=sort([3+1,1+5,5+2,2+4])=sort([4,6,7,6])=[4,6,6,7]", "output": "for q in[*open(0)][2::2]:print(*q.split()[::-1])", "public_tests": {"input": ["3\n2\n1 2\n6\n2 1 6 5 4 3\n5\n2 4 3 1 5\n"], "output": ["2 1\n3 4 5 6 1 2\n5 1 3 4 2\n"]}, "private_tests": {"input": ["3\n2\n1 2\n6\n2 1 6 5 4 3\n5\n2 4 3 1 5\n"], "output": ["2 1\n3 4 5 6 1 2\n5 1 3 4 2\n"]}, "index": 69}, {"input": "Initially, you have the array a consisting of one element 1 (a = [1]).\n\nIn one move, you can do one of the following things:\n\n  * Increase some (single) element of a by 1 (choose some i from 1 to the current length of a and increase a_i by one); \n  * Append the copy of some (single) element of a to the end of the array (choose some i from 1 to the current length of a and append a_i to the end of the array). \n\n\n\nFor example, consider the sequence of five moves:\n\n  1. You take the first element a_1, append its copy to the end of the array and get a = [1, 1]. \n  2. You take the first element a_1, increase it by 1 and get a = [2, 1]. \n  3. You take the second element a_2, append its copy to the end of the array and get a = [2, 1, 1]. \n  4. You take the first element a_1, append its copy to the end of the array and get a = [2, 1, 1, 2]. \n  5. You take the fourth element a_4, increase it by 1 and get a = [2, 1, 1, 3]. \n\n\n\nYour task is to find the minimum number of moves required to obtain the array with the sum at least n.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 \u2264 n \u2264 10^9) \u2014 the lower bound on the sum of the array.\n\nOutput\n\nFor each test case, print the answer: the minimum number of moves required to obtain the array with the sum at least n.\n\nExample\n\nInput\n\n\n5\n1\n5\n42\n1337\n1000000000\n\n\nOutput\n\n\n0\n3\n11\n72\n6324", "output": "from math import *\nfor s in [*open(0)][1:]: print(ceil(2*sqrt(int(s)))-2)", "public_tests": {"input": ["5\n1\n5\n42\n1337\n1000000000\n"], "output": ["0\n3\n11\n72\n63244\n"]}, "private_tests": {"input": [], "output": []}, "index": 70}, {"input": "The Super Duper Secret Meeting of the Super Duper Secret Military Squad takes place in a Super Duper Secret Place. The place is an infinite plane with introduced Cartesian coordinate system. The meeting table is represented as a rectangle whose sides are parallel to the coordinate axes and whose vertexes are located at the integer points of the plane. At each integer point which belongs to the table perimeter there is a chair in which a general sits.\n\nSome points on the plane contain radiators for the generals not to freeze in winter. Each radiator is characterized by the number ri \u2014 the radius of the area this radiator can heat. That is, if the distance between some general and the given radiator is less than or equal to ri, than the general feels comfortable and warm. Here distance is defined as Euclidean distance, so the distance between points (x1, y1) and (x2, y2) is <image>\n\nEach general who is located outside the radiators' heating area can get sick. Thus, you should bring him a warm blanket. Your task is to count the number of warm blankets you should bring to the Super Duper Secret Place.\n\nThe generals who are already comfortable do not need a blanket. Also the generals never overheat, ever if they are located in the heating area of several radiators. The radiators can be located at any integer points on the plane, even inside the rectangle (under the table) or on the perimeter (directly under some general). Even in this case their radius does not change.\n\nInput\n\nThe first input line contains coordinates of two opposite table corners xa, ya, xb, yb (xa \u2260 xb, ya \u2260 yb). The second line contains integer n \u2014 the number of radiators (1 \u2264 n \u2264 103). Then n lines contain the heaters' coordinates as \"xi yi ri\", the numbers are separated by spaces. All input data numbers are integers. The absolute value of all coordinates does not exceed 1000, 1 \u2264 ri \u2264 1000. Several radiators can be located at the same point.\n\nOutput\n\nPrint the only number \u2014 the number of blankets you should bring.\n\n", "output": "I=lambda:list(map(int,input().split()))\na,b,c,d=I()\nif a>c:a,c=c,a\nif b>d:b,d=d,b\np=[I()for i in ' '*I()[0]]\nk=0\nfor x in range(a,c+1):\n    for q,w,e in p:\n        if (x-q)**2+(b-w)**2<=e**2:break\n    else:k+=1\n    for q,w,e in p:\n        if (x-q)**2+(d-w)**2<=e**2:break\n    else:k+=1\nfor y in range(b+1,d):\n    for q,w,e in p:\n        if (a-q)**2+(y-w)**2<=e**2:break\n    else:k+=1\n    for q,w,e in p:\n        if (c-q)**2+(y-w)**2<=e**2:break\n    else:k+=1\nprint(k)", "public_tests": {"input": ["5 2 6 3\n2\n6 2 2\n6 5 3\n", "2 5 4 2\n3\n3 1 2\n5 3 1\n1 3 2\n"], "output": ["0", "4"]}, "private_tests": {"input": ["-210 783 -260 833\n10\n406 551 1000\n372 -373 999\n-12 -532 999\n371 -30 999\n258 480 558\n648 -957 1000\n-716 654 473\n156 813 366\n-870 425 707\n-288 -426 1000\n", "0 0 1 1\n1\n-1 -1000 1000\n", "-705 595 -702 600\n1\n-589 365 261\n", "1 1 1000 1000\n1\n50 50 1\n", "-343 -444 -419 -421\n30\n363 -249 790\n704 57 999\n-316 -305 119\n-778 -543 373\n-589 466 904\n516 -174 893\n-742 -662 390\n-382 825 1000\n520 -732 909\n-220 -985 555\n-39 -697 396\n-701 -882 520\n-105 227 691\n-113 -470 231\n-503 98 525\n236 69 759\n150 393 951\n414 381 1000\n849 530 999\n-357 485 905\n432 -616 794\n123 -465 467\n768 -875 1000\n61 -932 634\n375 -410 718\n-860 -624 477\n49 264 789\n-409 -874 429\n876 -169 999\n-458 345 767\n", "671 244 771 1000\n20\n701 904 662\n170 -806 1000\n-330 586 1000\n466 467 205\n-736 266 999\n629 734 42\n-616 630 999\n-94 416 765\n-98 280 770\n288 597 384\n-473 266 999\n-330 969 999\n492 -445 713\n352 -967 1000\n401 -340 645\n400 -80 425\n-177 560 848\n361 -7 400\n-564 -807 1000\n621 333 51\n", "-555 674 -553 774\n5\n-656 128 631\n597 -220 999\n-399 793 155\n-293 -363 1000\n-557 -914 1000\n"], "output": ["0", "4", "4", "3996", "42", "20", "49"]}, "index": 71}, {"input": "Let's define a multiplication operation between a string a and a positive integer x: a \u22c5 x is the string that is a result of writing x copies of a one after another. For example, \"abc\" \u22c5~2~= \"abcabc\", \"a\" \u22c5~5~= \"aaaaa\".\n\nA string a is divisible by another string b if there exists an integer x such that b \u22c5 x = a. For example, \"abababab\" is divisible by \"ab\", but is not divisible by \"ababab\" or \"aa\".\n\nLCM of two strings s and t (defined as LCM(s, t)) is the shortest non-empty string that is divisible by both s and t.\n\nYou are given two strings s and t. Find LCM(s, t) or report that it does not exist. It can be shown that if LCM(s, t) exists, it is unique.\n\nInput\n\nThe first line contains one integer q (1 \u2264 q \u2264 2000) \u2014 the number of test cases.\n\nEach test case consists of two lines, containing strings s and t (1 \u2264 |s|, |t| \u2264 20). Each character in each of these strings is either 'a' or 'b'.\n\nOutput\n\nFor each test case, print LCM(s, t) if it exists; otherwise, print -1. It can be shown that if LCM(s, t) exists, it is unique.\n\nExample\n\nInput\n\n\n3\nbaba\nba\naa\naaa\naba\nab\n\n\nOutput\n\n\nbaba\naaaaaa\n-1\n\nNote\n\nIn the first test case, \"baba\" = \"baba\" \u22c5~1~= \"ba\" \u22c5~2.\n\nIn the second test case, \"aaaaaa\" = \"aa\" \u22c5~3~= \"aaa\" \u22c5~2", "output": "import math\nI=input\nexec(int(I())*'s=I();t=I();n=len(s);m=len(t);d=math.gcd(n,m);print((m//d*s,-1)[m//d*s!=n//d*t]);')\n", "public_tests": {"input": ["3\nbaba\nba\naa\naaa\naba\nab\n"], "output": ["\nbaba\naaaaaa\n-1\n"]}, "private_tests": {"input": ["13\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\n", "1\nabababababbb\nab\n"], "output": ["a\na\na\na\na\na\na\na\na\na\na\na\na\n", "-1\n"]}, "index": 72}, {"input": "Nastia has received an array of n positive integers as a gift.\n\nShe calls such an array a good that for all i (2 \u2264 i \u2264 n) takes place gcd(a_{i - 1}, a_{i}) = 1, where gcd(u, v) denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers u and v.\n\nYou can perform the operation: select two different indices i, j (1 \u2264 i, j \u2264 n, i \u2260 j) and two integers x, y (1 \u2264 x, y \u2264 2 \u22c5 10^9) so that min{(a_i, a_j)} = min{(x, y)}. Then change a_i to x and a_j to y.\n\nThe girl asks you to make the array good using at most n operations.\n\nIt can be proven that this is always possible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the array.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_{n} (1 \u2264 a_i \u2264 10^9) \u2014 the array which Nastia has received as a gift.\n\nIt's guaranteed that the sum of n in one test doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each of t test cases print a single integer k (0 \u2264 k \u2264 n) \u2014 the number of operations. You don't need to minimize this number.\n\nIn each of the next k lines print 4 integers i, j, x, y (1 \u2264 i \u2260 j \u2264 n, 1 \u2264 x, y \u2264 2 \u22c5 10^9) so that min{(a_i, a_j)} = min{(x, y)} \u2014 in this manner you replace a_i with x and a_j with y.\n\nIf there are multiple answers, print any.\n\nExample\n\nInput\n\n\n2\n5\n9 6 3 11 15\n3\n7 5 13\n\n\nOutput\n\n\n2\n1 5 11 9\n2 5 7 6\n0\n\nNote\n\nConsider the first test case.\n\nInitially a = [9, 6, 3, 11, 15].\n\nIn the first operation replace a_1 with 11 and a_5 with 9. It's valid, because min{(a_1, a_5)} = min{(11, 9)} = 9.\n\nAfter this a = [11, 6, 3, 11, 9].\n\nIn the second operation replace a_2 with 7 and a_5 with 6. It's valid, because min{(a_2, a_5)} = min{(7, 6)} = 6.\n\nAfter this a = [11, 7, 3, 11, 6] \u2014 a good array.\n\nIn the second test case, the initial array is already good", "output": "for s in[*open(0)][2::2]:\n a=s.split();n=len(a);print(n//2)\n while n>1:print(n,n-1,min(a[n-2:n],key=int),10**9+7);n-=2", "public_tests": {"input": ["2\n5\n9 6 3 11 15\n3\n7 5 13\n"], "output": ["\n2\n1 5 11 9\n2 5 7 6\n0"]}, "private_tests": {"input": ["2\n5\n9 6 3 11 15\n3\n7 5 13\n"], "output": ["4\n3 1 3 5\n3 2 3 4\n3 4 3 4\n3 5 3 5\n2\n2 1 5 6\n2 3 5 6\n"]}, "index": 73}, {"input": "You are given a string s of length n consisting only of the characters 0 and 1.\n\nYou perform the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue the remaining two parts together (any of them can be empty) in the same order. For example, if you erase the substring 111 from the string 111110, you will get the string 110. When you delete a substring of length l, you get a \u22c5 l + b points.\n\nYour task is to calculate the maximum number of points that you can score in total, if you have to make the given string empty.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 2000) \u2014 the number of testcases.\n\nThe first line of each testcase contains three integers n, a and b (1 \u2264 n \u2264 100; -100 \u2264 a, b \u2264 100) \u2014 the length of the string s and the parameters a and b.\n\nThe second line contains the string s. The string s consists only of the characters 0 and 1.\n\nOutput\n\nFor each testcase, print a single integer \u2014 the maximum number of points that you can score.\n\nExample\n\nInput\n\n\n3\n3 2 0\n000\n5 -2 5\n11001\n6 1 -4\n100111\n\n\nOutput\n\n\n6\n15\n-2\n\nNote\n\nIn the first example, it is enough to delete the entire string, then we will get 2 \u22c5 3 + 0 = 6 points.\n\nIn the second example, if we delete characters one by one, then for each deleted character we will get (-2) \u22c5 1 + 5 = 3 points, i. e. 15 points in total.\n\nIn the third example, we can delete the substring 00 from the string 100111, we get 1 \u22c5 2 + (-4) = -2 points, and the string will be equal to 1111, removing it entirely we get 1 \u22c5 4 + (-4) = 0 points. In total, we got -2 points for 2 operations", "output": "I=input\nexec(int(I())*\"n,a,b=map(int,I().split());s=x,*_=I();print(a*n+b*(n,s.count(x+'01'[x<'1'])+1)[b<0]);\")", "public_tests": {"input": ["3\n3 2 0\n000\n5 -2 5\n11001\n6 1 -4\n100111\n"], "output": ["6\n15\n-2\n"]}, "private_tests": {"input": [], "output": []}, "index": 74}, {"input": "You are given two polynomials:\n\n  * P(x) = a0\u00b7xn + a1\u00b7xn - 1 + ... + an - 1\u00b7x + an and \n  * Q(x) = b0\u00b7xm + b1\u00b7xm - 1 + ... + bm - 1\u00b7x + bm. \n\n\n\nCalculate limit <image>.\n\nInput\n\nThe first line contains two space-separated integers n and m (0 \u2264 n, m \u2264 100) \u2014 degrees of polynomials P(x) and Q(x) correspondingly.\n\nThe second line contains n + 1 space-separated integers \u2014 the factors of polynomial P(x): a0, a1, ..., an - 1, an ( - 100 \u2264 ai \u2264 100, a0 \u2260 0).\n\nThe third line contains m + 1 space-separated integers \u2014 the factors of polynomial Q(x): b0, b1, ..., bm - 1, bm ( - 100 \u2264 bi \u2264 100, b0 \u2260 0).\n\nOutput\n\nIf the limit equals  + \u221e, print \"Infinity\" (without quotes). If the limit equals  - \u221e, print \"-Infinity\" (without the quotes).\n\nIf the value of the limit equals zero, print \"0/1\" (without the quotes).\n\nOtherwise, print an irreducible fraction \u2014 the value of limit <image>, in the format \"p/q\" (without the quotes), where p is the \u2014 numerator, q (q > 0) is the denominator of the fraction.\n\n", "output": "import math\nR=lambda:list(map(int,input().split()))\nn,m=R()\na=R()[0]\nb=R()[0]\nif n>m: print(('-'if a*b<0 else'')+'Infinity')\nelif n<m: print('0/1')\nelse:\n  g=math.gcd(abs(a),abs(b))\n  a//=g\n  b//=g\n  if b<0:a,b=-a,-b\n  print(str(a)+'/'+str(b))", "public_tests": {"input": ["2 1\n1 1 1\n2 5\n", "1 0\n-1 3\n2\n", "1 1\n9 0\n-5 2\n", "2 2\n2 1 6\n4 5 -7\n", "0 1\n1\n1 0\n"], "output": ["Infinity\n", "-Infinity\n", "-9/5\n", "1/2\n", "0/1\n"]}, "private_tests": {"input": ["1 1\n-2 1\n4 1\n", "0 0\n36\n-8\n", "2 2\n-4 2 1\n-5 8 -19\n", "84 54\n82 -54 28 68 74 -61 54 98 59 67 -65 -1 16 65 -78 -16 61 -79 2 14 44 96 -62 77 51 87 37 66 65 28 88 -99 -21 -83 24 80 39 64 -65 45 86 -53 -49 94 -75 -31 -42 -1 -35 -18 74 30 31 -40 30 -6 47 58 -71 -21 20 13 75 -79 15 -98 -26 76 99 -77 -9 85 48 51 -87 56 -53 37 47 -3 94 64 -7 74 86\n72 51 -74 20 41 -76 98 58 24 -61 -97 -73 62 29 6 42 -92 -6 -65 89 -32 -9 82 -13 -88 -70 -97 25 -48 12 -54 33 -92 -29 48 60 -21 86 -17 -86 45 -34 -3 -9 -62 12 25 -74 -76 -89 48 55 -30 86 51\n", "47 56\n31 -99 -97 6 -45 -5 89 35 -77 69 57 91 -32 -66 -36 16 30 61 -36 32 48 67 5 -85 65 -11 -51 -63 -51 -16 39 -26 -60 -28 91 43 -90 32 44 83 70 -53 51 56 68 -81 76 79\n61 -21 -75 -36 -24 -19 80 26 -28 93 27 72 -39 -46 -38 68 -29 -16 -63 84 -13 64 55 63 77 5 68 70 15 99 12 -69 50 -48 -82 -3 52 -54 68 91 -37 -100 -5 74 24 91 -1 74 28 29 -87 -13 -88 82 -13 58 23\n", "77 51\n89 45 -33 -87 33 -61 -79 40 -76 16 -17 31 27 25 99 82 51 -40 85 -66 19 89 -62 24 -61 -53 -77 17 21 83 53 -18 -56 75 9 -78 33 -11 -6 96 -33 -2 -57 97 30 20 -41 42 -13 45 -99 67 37 -20 51 -33 88 -62 2 40 17 36 45 71 4 -44 24 20 -2 29 -12 -84 -7 -84 -38 48 -73 79\n60 -43 60 1 90 -1 19 -18 -21 31 -76 51 79 91 12 39 -33 -14 71 -90 -65 -93 -58 93 49 17 77 19 32 -8 14 58 -9 85 -95 -73 0 85 -91 -99 -30 -43 61 20 -89 93 53 20 -33 -38 79 54\n", "20 20\n5 4 91 -66 -57 55 -79 -2 -54 -72 -49 21 -23 -5 57 -48 70 -16 -86 -26 -19\n51 -60 64 -8 89 27 -96 4 95 -24 -2 -27 -41 -14 -88 -19 24 68 -31 34 -62\n", "58 58\n-25 40 -34 23 -52 94 -30 -99 -71 -90 -44 -71 69 48 -45 -59 0 66 -70 -96 95 91 82 90 -95 87 3 -77 -77 -26 15 87 -82 5 -24 82 -11 99 35 49 22 44 18 -60 -26 79 67 71 -13 29 -23 9 58 -90 88 18 77 5 -7\n-30 -11 -13 -50 61 -78 11 -74 -73 13 -66 -65 -82 38 58 25 -64 -24 78 -87 6 6 -80 -96 47 -25 -54 10 -41 -22 -50 -1 -6 -22 27 54 -32 30 93 88 -70 -100 -69 -47 -20 -92 -24 70 -93 42 78 42 -35 41 31 75 -67 -62 -83\n", "0 0\n20\n20\n", "0 0\n-21\n13\n", "0 0\n-55\n34\n", "1 2\n5 3\n-3 2 -1\n", "0 0\n-34\n21\n", "0 0\n2\n-4\n", "0 100\n1\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "0 0\n36\n-54\n", "0 0\n4\n-2\n", "39 87\n78 -50 18 -32 -12 -65 83 41 -6 53 -26 64 -19 -53 -61 91 -49 -66 67 69 100 -39 95 99 86 -67 -66 63 48 26 -4 95 -54 -71 26 -74 -93 79 -91 -45\n-18 23 48 59 76 82 95 2 -26 18 -39 -74 44 -92 40 -44 1 -97 -100 -63 -54 -3 -86 85 28 -50 41 -53 -74 -29 -91 87 27 -42 -90 -15 -26 -15 -100 -70 -10 -41 16 85 71 -39 -31 -65 80 98 9 23 -40 14 -88 15 -34 10 -67 -94 -58 -24 75 48 -42 56 -77 -13 -25 -79 -100 -57 89 45 22 85 78 -93 -79 69 63 44 74 94 35 -65 -12 -88\n", "2 2\n-13 1 3\n6 3 2\n", "0 0\n-1\n2\n", "0 0\n1\n-2\n", "0 0\n-6\n-8\n", "1 1\n1 1\n1 1\n", "1 1\n36 -49\n-32 -40\n", "2 1\n-3 5 1\n-8 0\n", "9 100\n-34 88 33 -80 87 31 -53 -3 8 -70\n31 -25 46 78 8 82 -92 -36 -30 85 -93 86 -87 75 8 -71 44 -41 -83 19 89 -28 81 42 79 86 41 -23 64 -31 46 24 -79 23 71 63 99 90 -16 -70 -1 88 10 65 3 -99 95 52 -80 53 -24 -43 -30 -7 51 40 -47 44 -10 -18 -61 -67 -84 37 45 93 -5 68 32 3 -61 -100 38 -21 -91 90 83 -45 75 89 17 -44 75 14 -28 1 -84 -100 -36 84 -40 88 -84 -54 2 -32 92 -49 77 85 91\n", "0 0\n5\n5\n", "0 0\n2\n-1\n", "28 87\n-77 49 37 46 -92 65 89 100 53 76 -43 47 -80 -46 -94 -4 20 46 81 -41 86 25 69 60 15 -78 -98 -7 -42\n-85 96 59 -40 90 -72 41 -17 -40 -15 -98 66 47 9 -33 -63 59 -25 -31 25 -94 35 28 -36 -41 -38 -38 -54 -40 90 7 -10 98 -19 54 -10 46 -58 -88 -21 90 82 37 -70 -98 -63 41 75 -50 -59 -69 79 -93 -3 -45 14 76 28 -28 -98 -44 -39 71 44 90 91 0 45 7 65 68 39 -27 58 68 -47 -41 100 14 -95 -80 69 -88 -51 -89 -70 -23 95\n", "3 2\n4 3 1 2\n-5 7 0\n", "69 69\n-90 -63 -21 23 23 -14 -82 65 42 -60 -42 -39 67 34 96 93 -42 -24 21 -80 44 -81 45 -74 -19 -88 39 58 90 87 16 48 -19 -2 36 87 4 -66 -82 -49 -32 -43 -65 12 34 -29 -58 46 -67 -20 -30 91 21 65 15 2 3 -92 -67 -68 39 -24 77 76 -17 -34 5 63 88 83\n-55 98 -79 18 -100 -67 -79 -85 -75 -44 -6 -73 -11 -12 -24 -78 47 -51 25 -29 -34 25 27 11 -87 15 -44 41 -44 46 -67 70 -35 41 62 -36 27 -41 -42 -50 96 31 26 -66 9 74 34 31 25 6 -84 41 74 -7 49 5 35 -5 -71 -37 28 58 -8 -40 -19 -83 -34 64 7 15\n", "1 1\n4 1\n2 1\n", "33 100\n-15 -90 -84 57 67 60 -40 -82 83 -80 43 -15 -36 -14 -37 -49 42 -79 49 -7 -12 53 -44 -21 87 -91 -73 -27 13 65 5 74 -21 -52\n-67 -17 36 -46 -5 31 -45 -35 -49 13 -7 -82 92 -55 -67 -96 31 -70 76 24 -29 26 96 19 -40 99 -26 74 -17 -56 -72 24 -71 -62 10 -56 -74 75 -48 -98 -67 -26 47 7 63 -38 99 66 -25 -31 -24 -42 -49 -27 -45 -2 -37 -16 5 -21 97 33 85 -33 93 30 84 73 -48 18 -36 71 -38 -41 28 1 -7 -15 60 59 -20 -38 -86 90 2 -12 72 -43 26 76 97 7 -2 -47 -4 100 -40 -48 53 -54 0\n", "100 4\n-5 -93 89 -26 -79 14 -28 13 -45 69 50 -84 21 -68 62 30 -26 99 -12 39 20 -74 -39 -41 -28 -72 -55 28 20 31 -92 -20 76 -65 57 72 -36 4 33 -28 -19 -41 -40 40 84 -36 -83 75 -74 -80 32 -50 -56 72 16 75 57 90 -19 -10 67 -71 69 -48 -48 23 37 -31 -64 -86 20 67 97 14 82 -41 2 87 65 -81 -27 9 -79 -1 -5 84 -8 29 -34 31 82 40 21 -53 -31 -45 17 -33 79 50 -94\n56 -4 -90 36 84\n", "69 69\n-7 38 -3 -22 65 -78 -65 -99 -76 63 0 -4 -78 -51 54 -61 -53 60 80 34 -96 99 -78 -96 21 -10 -86 33 -9 -81 -19 -2 -76 -3 -66 -80 -55 -21 -50 37 -86 -37 47 44 76 -39 54 -25 41 -86 -3 -25 -67 94 18 67 27 -5 -30 -69 2 -76 7 -97 -52 -35 -55 -20 92 2\n90 -94 37 41 -27 -54 96 -15 -60 -29 -75 -93 -57 62 48 -88 -99 -62 4 -9 85 33 65 -95 -30 16 -29 -89 -33 -83 -35 -21 53 -52 80 -40 76 -33 86 47 18 43 -67 -36 -99 -42 1 -94 -78 34 -41 73 96 2 -60 29 68 -96 -21 -61 -98 -67 1 40 85 55 66 -25 -50 -83\n", "0 0\n1\n1\n", "100 0\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n1\n", "0 0\n50\n20\n", "0 0\n2\n2\n", "33 1\n-75 -83 87 -27 -48 47 -90 -84 -18 -4 14 -1 -83 -98 -68 -85 -86 28 2 45 96 -59 86 -25 -2 -64 -92 65 69 72 72 -58 -99 90\n-1 72\n", "0 0\n2\n1\n", "0 0\n4\n-6\n", "73 15\n-70 78 51 -33 -95 46 87 -33 16 62 67 -85 -57 75 -93 -59 98 -45 -90 -88 9 53 35 37 28 3 40 -87 28 5 18 11 9 1 72 69 -65 -62 1 73 -3 3 35 17 -28 -31 -45 60 64 18 60 38 -47 12 2 -90 -4 33 -51 -55 -54 90 38 -65 39 32 -70 0 -5 3 -12 100 78 55\n46 33 41 52 -89 -9 53 -81 34 -45 -11 -41 14 -28 95 -50\n", "1 1\n-5 7\n3 1\n", "1 2\n-4 8\n-2 5 -3\n", "0 0\n4\n2\n", "0 2\n-3\n1 4 6\n", "0 0\n46\n-33\n", "67 67\n-8 11 55 80 -26 -38 58 73 -48 -10 35 75 16 -84 55 -51 98 58 -28 98 77 81 51 -86 -46 68 -87 -80 -49 81 96 -97 -42 25 6 -8 -55 -25 93 -29 -33 -6 -26 -85 73 97 63 57 51 92 -6 -8 4 86 46 -45 36 -19 -71 1 71 39 97 -44 -34 -1 2 -46\n91 -32 -76 11 -40 91 -8 -100 73 80 47 82 24 0 -71 82 -93 38 -54 1 -55 -53 90 -86 0 10 -35 49 90 56 25 17 46 -43 13 16 -82 -33 64 -83 -56 22 12 -74 4 -68 85 -27 60 -28 -47 73 -93 69 -37 54 -3 90 -56 56 78 61 7 -79 48 -42 -10 -48\n", "17 17\n-54 59 -95 87 3 -27 -30 49 -87 74 45 78 36 60 -95 41 -53 -70\n-27 16 -67 -24 10 -73 -41 12 -52 53 -73 -17 -56 -74 -33 -8 100 -39\n", "99 99\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n", "0 0\n4\n-3\n", "0 0\n17\n-10\n"], "output": ["-1/2\n", "-9/2\n", "4/5\n", "Infinity\n", "0/1\n", "Infinity\n", "5/51\n", "5/6\n", "1/1\n", "-21/13\n", "-55/34\n", "0/1\n", "-34/21\n", "-1/2\n", "0/1\n", "-2/3\n", "-2/1\n", "0/1\n", "-13/6\n", "-1/2\n", "-1/2\n", "3/4\n", "1/1\n", "-9/8\n", "Infinity\n", "0/1\n", "1/1\n", "-2/1\n", "0/1\n", "-Infinity\n", "18/11\n", "2/1\n", "0/1\n", "-Infinity\n", "-7/90\n", "1/1\n", "Infinity\n", "5/2\n", "1/1\n", "Infinity\n", "2/1\n", "-2/3\n", "-Infinity\n", "-5/3\n", "0/1\n", "2/1\n", "0/1\n", "-46/33\n", "-8/91\n", "2/1\n", "1/2\n", "-4/3\n", "-17/10\n"]}, "index": 75}, {"input": "A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters \u00ab+\u00bb and \u00ab1\u00bb into this sequence. For example, sequences \u00ab(())()\u00bb, \u00ab()\u00bb and \u00ab(()(()))\u00bb are regular, while \u00ab)(\u00bb, \u00ab(()\u00bb and \u00ab(()))(\u00bb are not.\n\nOne day Johnny got bracket sequence. He decided to remove some of the brackets from it in order to obtain a regular bracket sequence. What is the maximum length of a regular bracket sequence which can be obtained?\n\nInput\n\nInput consists of a single line with non-empty string of \u00ab(\u00bb and \u00ab)\u00bb characters. Its length does not exceed 106.\n\nOutput\n\nOutput the maximum possible length of a regular bracket sequence.\n\n", "output": "x,y=0,0\nfor i in input():\n    if i=='(':x+=1\n    elif x>0:x-=1;y+=2\nprint(y)\n", "public_tests": {"input": ["(()))(\n", "((()())\n"], "output": ["4\n", "6\n"]}, "private_tests": {"input": ["))()()((()()))())()(((((((())((((((((())()()((())(\n", ")))((((())(()((()((((()()())((\n", "()()(()(((\n", "(\n", "()))(()((((()(())\n", "())))((()())())))))())\n", "))())))))))())))))()()))()()))))())))))()))))))))))))(()))())(()))))(()))))())))((((()()))))()))()))\n", ")(()(\n", ")\n", "))))))(\n"], "output": ["32\n", "16\n", "6\n", "0\n", "10\n", "14\n", "48\n", "2\n", "0\n", "0\n"]}, "index": 76}, {"input": "Iahub has drawn a set of n points in the cartesian plane which he calls \"special points\". A quadrilateral is a simple polygon without self-intersections with four sides (also called edges) and four vertices (also called corners). Please note that a quadrilateral doesn't have to be convex. A special quadrilateral is one which has all four vertices in the set of special points. Given the set of special points, please calculate the maximal area of a special quadrilateral. \n\nInput\n\nThe first line contains integer n (4 \u2264 n \u2264 300). Each of the next n lines contains two integers: xi, yi ( - 1000 \u2264 xi, yi \u2264 1000) \u2014 the cartesian coordinates of ith special point. It is guaranteed that no three points are on the same line. It is guaranteed that no two points coincide. \n\nOutput\n\nOutput a single real number \u2014 the maximal area of a special quadrilateral. The answer will be considered correct if its absolute or relative error does't exceed 10 - 9.\n\n", "output": "import sys\ns, n = 0, int(input())\nt = list(map(int, sys.stdin.read().split()))\np = [(t[2 * i], t[2 * i + 1]) for i in range(n)]\nfor x, i in enumerate(p, 1):\n    for j in p[x:]:\n        a = b = 0\n        for k in p:\n            d = (i[0] - k[0]) * (j[1] - k[1]) - (i[1] - k[1]) * (j[0] - k[0])\n            a, b = min(d, a), max(d, b)\n        if a and b: s = max(s, b - a)\nprint(s / 2)", "public_tests": {"input": ["5\n0 0\n0 4\n4 0\n4 4\n2 3\n"], "output": ["16.000000\n"]}, "private_tests": {"input": ["7\n-2 -1\n4 3\n2 2\n-4 0\n-2 4\n0 0\n1 -3\n", "10\n-6 -4\n-7 5\n-7 -7\n5 -7\n4 -9\n-6 7\n2 9\n-4 -6\n2 10\n-10 -4\n", "4\n0 0\n0 5\n5 0\n1 1\n", "6\n-4 -3\n-1 3\n0 0\n2 2\n2 1\n-3 1\n", "4\n-3 3\n0 3\n-2 -1\n2 2\n", "4\n-874 606\n-996 -207\n897 847\n775 191\n", "5\n-4 -3\n-3 -2\n3 3\n-1 2\n3 -3\n", "10\n156 -415\n879 198\n-250 -676\n-594 -433\n-207 368\n296 -641\n-387 -795\n143 -304\n-468 390\n-873 226\n", "50\n-768 -243\n-741 -984\n-370 213\n-808 571\n-726 442\n234 452\n-105 -990\n-876 -278\n987 473\n-968 -531\n-274 -842\n259 -655\n-59 -555\n976 -396\n878 -85\n551 213\n675 599\n-990 -507\n1 48\n-147 919\n-218 798\n-191 928\n916 263\n-975 169\n567 -967\n394 16\n-224 915\n280 -613\n804 -877\n988 -576\n-256 -708\n757 546\n777 99\n-579 -608\n-102 1\n-309 636\n-24 -718\n644 -84\n111 -822\n-722 544\n78 595\n-194 716\n-409 -845\n-291 441\n388 379\n-950 277\n-718 359\n881 198\n198 670\n828 -820\n"], "output": ["32.500000\n", "166.000000\n", "10.000000\n", "15.000000\n", "11.000000\n", "1261820.500000\n", "29.500000\n", "1129219.500000\n", "2425414.000000\n"]}, "index": 77}, {"input": "A group of n schoolboys decided to ride bikes. As nobody of them has a bike, the boys need to rent them.\n\nThe renting site offered them m bikes. The renting price is different for different bikes, renting the j-th bike costs pj rubles.\n\nIn total, the boys' shared budget is a rubles. Besides, each of them has his own personal money, the i-th boy has bi personal rubles. The shared budget can be spent on any schoolchildren arbitrarily, but each boy's personal money can be spent on renting only this boy's bike.\n\nEach boy can rent at most one bike, one cannot give his bike to somebody else.\n\nWhat maximum number of schoolboys will be able to ride bikes? What minimum sum of personal money will they have to spend in total to let as many schoolchildren ride bikes as possible?\n\nInput\n\nThe first line of the input contains three integers n, m and a (1 \u2264 n, m \u2264 105; 0 \u2264 a \u2264 109). The second line contains the sequence of integers b1, b2, ..., bn (1 \u2264 bi \u2264 104), where bi is the amount of the i-th boy's personal money. The third line contains the sequence of integers p1, p2, ..., pm (1 \u2264 pj \u2264 109), where pj is the price for renting the j-th bike.\n\nOutput\n\nPrint two integers r and s, where r is the maximum number of schoolboys that can rent a bike and s is the minimum total personal money needed to rent r bikes. If the schoolchildren cannot rent any bikes, then r = s = 0.\n\n", "output": "#!/usr/bin/python3\ndef readn():\n  return map(int, input().split())\n\nn, m, a = readn()\nn = min(n, m)\nm = n\nb = sorted(readn())[-n:]\np = sorted(readn())\nr = 0\nwhile r < n:\n t = (r+1 + n)//2\n a1 = sum([max(0, p[i]-b[m+i-t]) for i in range(t)])\n if a1 <= a:\n   r = t\n else:\n   n = t-1\nprint(r, max(0, sum(p[:r])-a))", "public_tests": {"input": ["2 2 10\n5 5\n7 6\n", "4 5 2\n8 1 1 2\n6 3 7 5 2\n"], "output": ["2 3\n", "3 8\n"]}, "private_tests": {"input": ["3 3 3\n1 1 2\n3 5 6\n", "20 10 31\n17 27 2 6 11 12 5 3 12 4 2 10 4 8 2 10 7 9 12 1\n24 11 18 10 30 16 20 18 24 24\n", "6 6 2\n6 1 5 3 10 1\n11 4 7 8 11 7\n", "4 8 10\n2 1 2 2\n10 12 10 8 7 9 10 9\n", "40 40 61\n28 59 8 27 45 67 33 32 61 3 42 2 3 37 8 8 10 61 1 5 65 28 34 27 8 35 45 49 31 49 13 23 23 53 20 48 14 74 16 6\n69 56 34 66 42 73 45 49 29 70 67 77 73 26 78 11 50 69 64 72 78 66 66 29 80 40 50 75 68 47 78 63 41 70 52 52 69 22 69 66\n", "1 1 2\n1\n2\n", "8 4 18\n9 4 2 2 7 5 1 1\n11 12 8 9\n", "4 1 1\n3 2 3 2\n3\n", "9 8 0\n1 2 3 4 5 6 7 8 9\n2 3 4 5 6 7 8 9\n", "9 8 0\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8\n", "10 10 7\n6 7 15 1 3 1 14 6 7 4\n15 3 13 17 11 19 20 14 8 17\n", "10 10 0\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\n", "4 5 6\n5 1 7 2\n8 7 3 9 8\n", "1 4 1\n3\n2 4 5 5\n", "10 20 36\n12 4 7 18 4 4 2 7 4 10\n9 18 7 7 30 19 26 27 16 20 30 25 23 17 5 30 22 7 13 6\n", "14 14 22\n23 1 3 16 23 1 7 5 18 7 3 6 17 8\n22 14 22 18 12 11 7 24 20 27 10 22 16 7\n"], "output": ["1 0\n", "7 86\n", "3 16\n", "1 0\n", "22 939\n", "1 0\n", "4 22\n", "1 2\n", "8 44\n", "8 36\n", "5 42\n", "0 0\n", "3 12\n", "1 1\n", "10 69\n", "10 115\n"]}, "index": 78}, {"input": "George is a cat, so he really likes to play. Most of all he likes to play with his array of positive integers b. During the game, George modifies the array by using special changes. Let's mark George's current array as b1, b2, ..., b|b| (record |b| denotes the current length of the array). Then one change is a sequence of actions: \n\n  * Choose two distinct indexes i and j (1 \u2264 i, j \u2264 |b|; i \u2260 j), such that bi \u2265 bj. \n  * Get number v = concat(bi, bj), where concat(x, y) is a number obtained by adding number y to the end of the decimal record of number x. For example, concat(500, 10) = 50010, concat(2, 2) = 22. \n  * Add number v to the end of the array. The length of the array will increase by one. \n  * Remove from the array numbers with indexes i and j. The length of the array will decrease by two, and elements of the array will become re-numbered from 1 to current length of the array. \n\n\n\nGeorge played for a long time with his array b and received from array b an array consisting of exactly one number p. Now George wants to know: what is the maximum number of elements array b could contain originally? Help him find this number. Note that originally the array could contain only positive integers.\n\nInput\n\nThe first line of the input contains a single integer p (1 \u2264 p < 10100000). It is guaranteed that number p doesn't contain any leading zeroes.\n\nOutput\n\nPrint an integer \u2014 the maximum number of elements array b could contain originally.\n\n", "output": "s=input().strip()\nn=len(s)\n\ni=0\nk=0\nwhile i<n:\n\tj=i;\n\ti+=1\n\twhile i<n and s[i]=='0':\n\t\ti+=1;\n\tif j>(i-j) or  (j==i-j and s[:j]>=s[j:i]):\n\t\tk+=1\n\telse:\n\t\tk=1\nprint(k)", "public_tests": {"input": ["9555\n", "19992000\n", "10000000005\n", "45\n", "800101\n", "310200\n", "1000000000000001223300003342220044555\n"], "output": ["4", "1", "2", "1", "3", "2", "17"]}, "private_tests": {"input": ["20900000000090009000070069000026000000000000020008\n", "542\n", "10000000000000000000000000000000000000400500000000000000000000000000000000030020010300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n", "1\n", "54000\n", "1111200\n", "60000000000000000000000000000000000000000000000000\n", "999\n", "11001000\n", "110003000054\n", "6944262915652659458125599978116114458736683259866511789545994938161622536342972115877623999684282136\n", "10001000\n", "11\n", "112000\n", "456\n", "45000\n", "7\n", "63100605000394089000505000600600062000170273350000\n", "10\n"], "output": ["10", "3", "2", "1", "1", "5", "1", "3", "2", "3", "99", "2", "2", "1", "2", "1", "1", "21", "1"]}, "index": 79}, {"input": "Little Vasya went to the supermarket to get some groceries. He walked about the supermarket for a long time and got a basket full of products. Now he needs to choose the cashier to pay for the products.\n\nThere are n cashiers at the exit from the supermarket. At the moment the queue for the i-th cashier already has ki people. The j-th person standing in the queue to the i-th cashier has mi, j items in the basket. Vasya knows that:\n\n  * the cashier needs 5 seconds to scan one item; \n  * after the cashier scans each item of some customer, he needs 15 seconds to take the customer's money and give him the change. \n\n\n\nOf course, Vasya wants to select a queue so that he can leave the supermarket as soon as possible. Help him write a program that displays the minimum number of seconds after which Vasya can get to one of the cashiers.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of cashes in the shop. The second line contains n space-separated integers: k1, k2, ..., kn (1 \u2264 ki \u2264 100), where ki is the number of people in the queue to the i-th cashier.\n\nThe i-th of the next n lines contains ki space-separated integers: mi, 1, mi, 2, ..., mi, ki (1 \u2264 mi, j \u2264 100) \u2014 the number of products the j-th person in the queue for the i-th cash has.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of seconds Vasya needs to get to the cashier.\n\n", "output": "R = lambda:map(int,input().split())\nn, = R()\n\nprint(min(15*k+5*sum(R())for k in R()))", "public_tests": {"input": ["1\n1\n1\n", "4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\n"], "output": ["20\n", "100\n"]}, "private_tests": {"input": ["1\n1\n100\n", "5\n10 10 10 10 10\n6 7 8 6 8 5 9 8 10 5\n9 6 9 8 7 8 8 10 8 5\n8 7 7 8 7 5 6 8 9 5\n6 5 10 5 5 10 7 8 5 5\n10 9 8 7 6 9 7 9 6 5\n", "10\n9 10 10 10 9 5 9 7 8 7\n11 6 10 4 4 15 7 15 5\n3 9 11 12 11 1 13 13 1 5\n6 15 9 12 3 2 8 12 11 10\n7 1 1 6 10 2 6 1 14 2\n8 14 2 3 6 1 14 1 12\n6 10 9 3 5\n13 12 12 7 13 4 4 8 10\n5 6 4 3 14 9 13\n8 12 1 5 7 4 13 1\n1 9 5 3 5 1 4\n", "4\n5 4 5 5\n3 1 3 1 2\n3 1 1 3\n1 1 1 2 2\n2 2 1 1 3\n", "10\n5 5 5 5 5 5 5 5 5 5\n5 5 4 5 4\n6 5 7 7 6\n5 4 4 5 5\n4 4 5 5 5\n7 6 4 5 7\n4 6 5 4 5\n6 6 7 6 6\n4 5 4 4 7\n7 5 4 4 5\n6 6 7 4 4\n", "1\n90\n90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90\n", "5\n5 3 6 6 4\n7 5 3 3 9\n6 8 2\n1 10 8 5 9 2\n9 7 8 5 9 10\n9 8 3 3\n"], "output": ["515\n", "480\n", "240\n", "100\n", "190\n", "41850\n", "125\n"]}, "index": 80}, {"input": "Pasha has a positive integer a without leading zeroes. Today he decided that the number is too small and he should make it larger. Unfortunately, the only operation Pasha can do is to swap two adjacent decimal digits of the integer.\n\nHelp Pasha count the maximum number he can get if he has the time to make at most k swaps.\n\nInput\n\nThe single line contains two integers a and k (1 \u2264 a \u2264 1018; 0 \u2264 k \u2264 100).\n\nOutput\n\nPrint the maximum number that Pasha can get if he makes at most k swaps.\n\n", "output": "a,k=map(int,input().split())\na=list(str(a))\nb=\"\"\nwhile(len(a)>0):\n\tm=a.index(max(a[:k+1]))\n\tk-=m\n\tb+=a[m]\n\ta.pop(m)\nprint(b)\n", "public_tests": {"input": ["1990 1\n", "9090000078001234 6\n", "300 0\n", "1034 2\n"], "output": ["9190\n", "9907000008001234\n", "300\n", "3104\n"]}, "private_tests": {"input": ["9022 2\n", "1234567891234567 99\n", "191919191919119911 100\n", "787464780004 2\n", "1234 5\n", "901000000954321789 28\n", "12 100\n", "219810011901120912 100\n", "901000000954321789 40\n", "619911311932347059 3\n", "39940894417248510 10\n", "92153348 6\n", "15603712376708 28\n", "621563797296514835 3\n", "901000000954321789 5\n", "620737553540689123 2\n", "521325125110071928 4\n", "5 100\n", "74604713975 29\n", "929201010190831892 30\n", "66838 4\n", "901000000954321789 70\n", "784069392990841 0\n", "1234 6\n", "4529 8\n", "12345670123456789 100\n", "11223344556677889 47\n", "915277434701161 9\n", "5846059 3\n", "10120921290110921 20\n", "123456789123456789 100\n", "77172428736634377 29\n", "5314 4\n", "901000000954321789 10\n", "801211288881101019 22\n", "111111111111111119 8\n", "83811284 3\n", "1026 9\n", "1234 3\n", "116995340392134308 27\n", "337775999910796051 37\n"], "output": ["9220\n", "9877665544332211\n", "999999991111111111\n", "877644780004\n", "4312\n", "999100050000432178\n", "21\n", "999822211111110000\n", "999810000050043217\n", "969111311932347059\n", "99984304417248510\n", "98215334\n", "87761503123670\n", "662153797296514835\n", "910009000054321789\n", "672037553540689123\n", "552132125110071928\n", "5\n", "97776544310\n", "999928201010103182\n", "86863\n", "999875410000300021\n", "784069392990841\n", "4321\n", "9542\n", "98776655443322101\n", "98821213344556677\n", "977541234701161\n", "8654059\n", "99221010120110921\n", "998877665544213123\n", "87777764122363437\n", "5431\n", "991000000504321789\n", "982111028888110101\n", "111111111911111111\n", "88321184\n", "6210\n", "4123\n", "999654331120134308\n", "999997733751076051\n"]}, "index": 81}, {"input": "One day Vasya came across three Berland coins. They didn't have any numbers that's why Vasya didn't understand how their denominations differ. He supposed that if one coin is heavier than the other one, then it should be worth more. Vasya weighed all the three pairs of coins on pan balance scales and told you the results. Find out how the deminations of the coins differ or if Vasya has a mistake in the weighting results. No two coins are equal.\n\nInput\n\nThe input data contains the results of all the weighting, one result on each line. It is guaranteed that every coin pair was weighted exactly once. Vasya labelled the coins with letters \u00abA\u00bb, \u00abB\u00bb and \u00abC\u00bb. Each result is a line that appears as (letter)(> or < sign)(letter). For example, if coin \"A\" proved lighter than coin \"B\", the result of the weighting is A<B.\n\nOutput\n\nIt the results are contradictory, print Impossible. Otherwise, print without spaces the rearrangement of letters \u00abA\u00bb, \u00abB\u00bb and \u00abC\u00bb which represent the coins in the increasing order of their weights.\n\n", "output": "P=print\nI=input\ns=I(),I(),I()\nt=0,1,2\nd={}\nr='Impossible'\nfor A in t:\n\tfor B in t:\n\t\tfor C in t:\n\t\t\tif all(eval(x)for x in s):d[A]='A';d[B]='B';d[C]='C';r=d[0]+d[1]+d[2]\nP(r)", "public_tests": {"input": ["A&gt;B\nC&lt;B\nA&gt;C\n", "A&lt;B\nB&gt;C\nC&gt;A\n"], "output": ["Impossible\n", "Impossible\n"]}, "private_tests": {"input": ["C>A\nC<B\nB>A\n", "C<B\nB<A\nC>A\n", "C<B\nB>A\nA<C\n", "A>C\nC>B\nB<A\n", "C<B\nC<A\nB<A\n", "A>B\nC>B\nA<C\n", "A>C\nC<B\nB>A\n", "B>A\nC<A\nC>B\n", "B<A\nC>B\nC>A\n", "A>B\nC>A\nB<C\n", "B>A\nC<B\nC>A\n", "C>A\nA<B\nC>B\n", "B>C\nA<B\nA<C\n", "B>A\nB>C\nA<C\n", "B<A\nB>C\nC<A\n", "A<C\nA<B\nB>C\n", "A<C\nB>C\nA>B\n", "A>B\nC<B\nC<A\n", "A<C\nB<A\nB>C\n", "A>B\nC<B\nA>C\n", "A>C\nA>B\nB>C\n", "A>B\nB>C\nC<A\n", "C<B\nB>A\nA>C\n", "B<C\nA>B\nA<C\n", "B<A\nA<C\nC<B\n", "A<B\nA<C\nB>C\n", "C>B\nA<B\nC<A\n", "A<C\nA>B\nB>C\n", "B>C\nC>A\nA>B\n", "A<B\nC>B\nA<C\n", "B<A\nB>C\nA<C\n", "A>C\nA>B\nB<C\n", "C>A\nB>A\nB>C\n", "C>B\nB>A\nA<C\n", "A<C\nC<B\nA>B\n", "C>A\nA<B\nB>C\n", "B>C\nC<A\nB<A\n", "C<B\nA>B\nC<A\n", "A<B\nB>C\nC>A\n", "B<C\nB<A\nA>C\n", "B<C\nA<B\nC>A\n", "C>B\nB>A\nC>A\n", "A<B\nC<A\nB<C\n", "B>A\nC>B\nA>C\n", "B>C\nB>A\nA<C\n", "B>A\nA>C\nB>C\n", "B<C\nC<A\nA>B\n"], "output": ["ACB\n", "Impossible\n", "ACB\n", "BCA\n", "CBA\n", "BAC\n", "CAB\n", "Impossible\n", "BAC\n", "BAC\n", "ACB\n", "ABC\n", "ACB\n", "ACB\n", "CBA\n", "ACB\n", "Impossible\n", "CBA\n", "Impossible\n", "CBA\n", "CBA\n", "CBA\n", "CAB\n", "BAC\n", "Impossible\n", "ACB\n", "Impossible\n", "Impossible\n", "Impossible\n", "ABC\n", "Impossible\n", "BCA\n", "ACB\n", "ABC\n", "Impossible\n", "ACB\n", "CBA\n", "CBA\n", "ACB\n", "BCA\n", "ABC\n", "ABC\n", "Impossible\n", "Impossible\n", "ACB\n", "CAB\n", "BCA\n"]}, "index": 82}, {"input": "Let's define the sum of two permutations p and q of numbers 0, 1, ..., (n - 1) as permutation <image>, where Perm(x) is the x-th lexicographically permutation of numbers 0, 1, ..., (n - 1) (counting from zero), and Ord(p) is the number of permutation p in the lexicographical order.\n\nFor example, Perm(0) = (0, 1, ..., n - 2, n - 1), Perm(n! - 1) = (n - 1, n - 2, ..., 1, 0)\n\nMisha has two permutations, p and q. Your task is to find their sum.\n\nPermutation a = (a0, a1, ..., an - 1) is called to be lexicographically smaller than permutation b = (b0, b1, ..., bn - 1), if for some k following conditions hold: a0 = b0, a1 = b1, ..., ak - 1 = bk - 1, ak < bk.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 200 000).\n\nThe second line contains n distinct integers from 0 to n - 1, separated by a space, forming permutation p.\n\nThe third line contains n distinct integers from 0 to n - 1, separated by spaces, forming permutation q.\n\nOutput\n\nPrint n distinct integers from 0 to n - 1, forming the sum of the given permutations. Separate the numbers by spaces.\n\n", "output": "def sum(BIT, i):\n    s = 0\n    while i > 0:\n        s += BIT[i]\n        i -= i & (-i)\n    return s\n\n\ndef update(BIT, i, v):\n    while i < len(BIT):\n        BIT[i] += v\n\n        i += i & (-i)\n\n\ndef find(fen, k):\n    curr = 0\n    ans = 0\n    prevsum = 0\n    for i in range(19, -1, -1):\n        if ((curr + (1 << i) < n) and fen[curr + (1 << i)] + prevsum < k):\n            ans = curr + (1 << i)\n            curr = ans\n            prevsum += fen[curr]\n    return ans + 1\n\ndef Rank(x,BIT) :\n\n    return sum(BIT,x)\n\n\n\n\nn = int(input())\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\nfactp = []\nfactq = []\n\n\n\n\nBIT = [0] * (n + 1)\nfor j in range(n):\n    update(BIT,j+1,1)\n\n\nfor val in p:\n    factp.append(Rank(val+1,BIT)-1)\n    update(BIT,val+1,-1)\n\n\n\n\nBIT = [0] * (n + 1)\nfor j in range(n):\n    update(BIT,j+1,1)\n\n\nfor val in q:\n    factq.append(Rank(val+1,BIT)-1)\n    update(BIT,val+1,-1)\n\n\n\n\n\ncarry = 0\nfor i in range(n - 1, -1, -1):\n    radix = n - i\n    factp[i] = factp[i] + factq[i] + carry\n    if factp[i] < radix:\n        carry = 0\n    else:\n        carry = 1\n        factp[i] -= radix\n\n\nBIT = [0] * (n + 1)\nfor j in range(n):\n    update(BIT,j+1,1)\nres=[]\nfor i in range(n):\n    k = factp[i]+1\n    res.append(find(BIT,k)-1)\n    update(BIT,res[-1]+1,-1)\n\nprint(*res)", "public_tests": {"input": ["2\n0 1\n0 1\n", "2\n0 1\n1 0\n", "3\n1 2 0\n2 1 0\n"], "output": ["0 1 \n", "1 0 \n", "1 0 2 \n"]}, "private_tests": {"input": ["10\n3 5 7 0 2 8 9 6 1 4\n4 3 8 7 9 6 0 5 2 1\n", "8\n2 3 0 5 4 7 6 1\n6 3 2 5 0 4 7 1\n", "8\n5 2 4 6 1 0 3 7\n7 4 3 0 2 6 1 5\n", "10\n7 4 6 1 0 9 2 8 5 3\n4 7 0 5 2 8 9 6 1 3\n", "9\n8 5 0 1 6 7 4 2 3\n6 5 0 8 7 1 4 3 2\n", "75\n71 69 34 23 13 68 19 45 40 6 74 11 53 24 27 7 50 5 70 47 4 21 25 54 62 30 17 33 52 16 67 15 14 57 38 18 48 29 58 1 8 36 2 35 56 43 44 39 20 10 0 64 3 61 32 22 37 28 26 55 63 60 49 42 59 51 66 46 73 41 9 65 12 72 31\n48 2 4 57 73 15 60 32 66 19 21 68 31 10 59 20 16 14 34 51 37 58 28 49 35 46 1 23 74 42 62 72 45 30 11 13 71 12 22 65 55 7 36 26 39 33 44 53 69 52 25 56 54 17 41 70 8 0 3 67 9 64 40 27 6 61 63 5 24 38 18 47 29 43 50\n", "10\n5 2 9 1 8 6 7 4 3 0\n7 4 8 9 6 3 2 1 0 5\n", "84\n83 4 68 34 24 2 48 38 22 51 5 62 31 67 66 53 49 70 9 71 46 41 30 8 50 17 28 79 15 80 32 43 14 74 29 42 81 60 56 65 23 0 77 76 58 78 1 11 37 27 75 35 18 73 54 20 57 33 36 6 61 69 64 55 39 10 3 45 13 26 59 82 21 25 63 52 16 44 47 72 19 12 7 40\n63 41 80 52 36 45 17 69 22 66 37 21 46 44 64 9 48 74 58 81 10 32 0 78 68 35 26 83 14 25 79 33 13 29 75 61 6 11 49 1 31 71 59 47 62 54 2 55 30 3 53 4 16 34 77 12 43 8 28 56 18 42 5 76 82 73 27 20 70 40 23 51 38 39 7 67 50 19 60 72 24 65 57 15\n", "3\n0 2 1\n1 0 2\n", "4\n2 0 1 3\n0 2 1 3\n", "7\n6 0 3 1 5 4 2\n6 0 2 4 3 5 1\n", "5\n2 1 3 0 4\n2 0 4 3 1\n", "5\n4 3 0 1 2\n2 4 3 1 0\n", "10\n1 2 0 3 4 8 6 5 7 9\n5 2 9 1 6 0 4 7 3 8\n", "10\n0 1 7 3 2 5 8 6 9 4\n9 5 2 7 1 4 0 6 8 3\n", "10\n4 2 3 9 8 0 7 5 6 1\n7 3 1 2 9 8 6 4 0 5\n", "10\n1 7 8 0 2 5 4 6 3 9\n0 8 3 7 1 6 2 4 5 9\n", "1\n0\n0\n"], "output": ["7 9 3 8 1 5 0 4 6 2 \n", "0 6 4 1 5 3 2 7 \n", "5 0 1 6 4 7 2 3 \n", "2 1 7 6 4 8 0 5 9 3 \n", "6 2 1 0 7 3 5 8 4 \n", "44 72 38 6 13 10 5 3 33 28 22 8 14 39 16 31 66 26 34 27 48 2 55 35 24 74 21 57 54 62 60 17 65 15 51 40 49 43 73 69 64 41 36 53 9 70 7 12 11 61 32 46 59 0 68 4 42 20 23 45 67 52 1 56 58 30 47 50 18 71 25 19 29 63 37 \n", "2 8 7 1 9 4 5 0 6 3 \n", "62 46 66 3 61 47 68 21 44 30 41 0 78 27 45 65 13 56 70 64 58 80 31 4 32 54 57 77 28 20 24 81 29 17 22 19 6 75 15 69 55 74 52 39 40 49 1 67 76 33 43 34 26 23 50 35 12 38 71 53 82 16 79 59 36 5 14 72 2 83 7 37 51 60 73 25 42 63 10 48 8 9 18 11 \n", "1 2 0 \n", "2 1 0 3 \n", "5 0 4 6 2 1 3 \n", "4 2 0 3 1 \n", "2 3 4 1 0 \n", "6 3 9 1 5 7 4 2 0 8 \n", "9 5 8 7 1 4 6 0 2 3 \n", "1 6 5 2 9 0 7 8 4 3 \n", "2 6 0 8 3 1 5 7 4 9 \n", "0 \n"]}, "index": 83}, {"input": "There are many anime that are about \"love triangles\": Alice loves Bob, and Charlie loves Bob as well, but Alice hates Charlie. You are thinking about an anime which has n characters. The characters are labeled from 1 to n. Every pair of two characters can either mutually love each other or mutually hate each other (there is no neutral state).\n\nYou hate love triangles (A-B are in love and B-C are in love, but A-C hate each other), and you also hate it when nobody is in love. So, considering any three characters, you will be happy if exactly one pair is in love (A and B love each other, and C hates both A and B), or if all three pairs are in love (A loves B, B loves C, C loves A).\n\nYou are given a list of m known relationships in the anime. You know for sure that certain pairs love each other, and certain pairs hate each other. You're wondering how many ways you can fill in the remaining relationships so you are happy with every triangle. Two ways are considered different if two characters are in love in one way but hate each other in the other. Print this count modulo 1 000 000 007.\n\nInput\n\nThe first line of input will contain two integers n, m (3 \u2264 n \u2264 100 000, 0 \u2264 m \u2264 100 000).\n\nThe next m lines will contain the description of the known relationships. The i-th line will contain three integers ai, bi, ci. If ci is 1, then ai and bi are in love, otherwise, they hate each other (1 \u2264 ai, bi \u2264 n, ai \u2260 bi, <image>).\n\nEach pair of people will be described no more than once.\n\nOutput\n\nPrint a single integer equal to the number of ways to fill in the remaining pairs so that you are happy with every triangle modulo 1 000 000 007. \n\n", "output": "class DSU(object):\n    def __init__(self, n):\n        self.father = list(range(n))\n        self.size = n\n\n    def union(self, x, s):\n        x = self.find(x)\n        s = self.find(s)\n        if x == s:\n            return\n        self.father[s] = x\n        self.size -= 1\n\n    def find(self, x):\n        xf = self.father[x]\n        if xf != x:\n            self.father[x] = self.find(xf)\n        return self.father[x]\n\n\ndef is_invalid(a, b, ds):\n    return ds.find(a) == ds.find(b)\n\n\nn, k = map(int, input().split())\nds = DSU(n * 2)\nfor i in range(k):\n    first, second, color = map(int, input().split())\n    first -= 1\n    second -= 1\n    if color == 0:\n        if is_invalid(first, second, ds):\n            print(0)\n            exit()\n        ds.union(first, second + n)\n        ds.union(first + n, second)\n    else:\n        if is_invalid(first, second + n, ds):\n            print(0)\n            exit()\n        ds.union(first, second)\n        ds.union(first + n, second + n)\n\nsum = 1\nfor i in range(ds.size // 2 - 1):\n    sum = (sum * 2) % (10 ** 9 + 7)\nprint(sum)\n", "public_tests": {"input": ["4 4\n1 2 1\n2 3 1\n3 4 0\n4 1 1\n", "3 0\n", "4 4\n1 2 1\n2 3 1\n3 4 0\n4 1 0\n"], "output": ["0\n", "                                                               4\n", "                                                               1\n"]}, "private_tests": {"input": ["4 4\n1 2 0\n2 3 0\n2 4 0\n3 4 0\n", "6 6\n1 2 0\n2 3 1\n3 4 0\n4 5 1\n5 6 0\n6 1 1\n", "100000 0\n", "4 3\n2 3 0\n3 4 0\n2 4 0\n", "100 3\n1 2 0\n2 3 0\n3 1 0\n", "28567 13\n28079 24675 1\n18409 26720 1\n980 10815 1\n20794 16571 1\n7376 19861 1\n11146 706 1\n4255 16391 1\n27376 18263 1\n10019 28444 1\n6574 28053 1\n5036 16610 1\n3543 7122 1\n512 9554 1\n", "5 5\n1 2 0\n2 3 0\n3 4 0\n4 5 0\n1 5 0\n", "9 2\n1 2 0\n2 3 0\n"], "output": ["0\n", "0\n", "                                                       303861760\n", "0\n", "0\n", "                                                       928433852\n", "0\n", "                                                              64\n"]}, "index": 84}, {"input": "In Absurdistan, there are n towns (numbered 1 through n) and m bidirectional railways. There is also an absurdly simple road network \u2014 for each pair of different towns x and y, there is a bidirectional road between towns x and y if and only if there is no railway between them. Travelling to a different town using one railway or one road always takes exactly one hour.\n\nA train and a bus leave town 1 at the same time. They both have the same destination, town n, and don't make any stops on the way (but they can wait in town n). The train can move only along railways and the bus can move only along roads.\n\nYou've been asked to plan out routes for the vehicles; each route can use any road/railway multiple times. One of the most important aspects to consider is safety \u2014 in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town (except town n) simultaneously.\n\nUnder these constraints, what is the minimum number of hours needed for both vehicles to reach town n (the maximum of arrival times of the bus and the train)? Note, that bus and train are not required to arrive to the town n at the same moment of time, but are allowed to do so.\n\nInput\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 400, 0 \u2264 m \u2264 n(n - 1) / 2) \u2014 the number of towns and the number of railways respectively.\n\nEach of the next m lines contains two integers u and v, denoting a railway between towns u and v (1 \u2264 u, v \u2264 n, u \u2260 v).\n\nYou may assume that there is at most one railway connecting any two towns.\n\nOutput\n\nOutput one integer \u2014 the smallest possible time of the later vehicle's arrival in town n. If it's impossible for at least one of the vehicles to reach town n, output  - 1.\n\n", "output": "n,m=map(int,input().split())\na=[[0]*n for i in range(n)]\nfor i in range(m):\n    x,y=map(int,input().split())\n    a[x-1][y-1]=a[y-1][x-1]=1;\nb=[-1]*n\nb[0]=0\nq=[0]\nwhile q:\n    u=q.pop(0)\n    for v in range(n):\n        if a[u][v]!=a[0][n-1] and b[v] ==-1:\n            b[v]=b[u]+1\n            q.append(v)\nprint(b[n-1])\n\n", "public_tests": {"input": ["4 2\n1 3\n3 4\n", "5 5\n4 2\n3 5\n4 5\n5 1\n1 2\n", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n"], "output": ["2", "3", "-1"]}, "private_tests": {"input": ["100 1\n100 1\n", "4 1\n1 4\n", "3 1\n1 2\n", "4 5\n1 3\n2 1\n3 4\n4 2\n2 3\n", "400 1\n1 400\n", "381 0\n", "3 0\n", "3 2\n2 3\n3 1\n", "5 4\n1 2\n3 2\n3 4\n5 4\n", "5 5\n2 5\n1 2\n1 4\n1 3\n3 2\n", "2 0\n", "3 1\n1 3\n", "20 1\n20 1\n", "3 3\n1 2\n2 3\n3 1\n", "2 1\n1 2\n", "20 0\n", "21 1\n21 1\n"], "output": ["2", "2", "-1", "2", "2", "-1", "-1", "-1", "4", "2", "-1", "2", "2", "-1", "-1", "-1", "2"]}, "index": 85}, {"input": "A MIPT student named Misha has a birthday today, and he decided to celebrate it in his country house in suburban Moscow. n friends came by, and after a typical party they decided to play blind man's buff.\n\nThe birthday boy gets blindfolded and the other players scatter around the house. The game is played in several rounds. In each round, Misha catches exactly one of his friends and has to guess who it is. The probability of catching the i-th friend does not change between rounds and is equal to pi percent (as we know, it is directly proportional to the amount of alcohol consumed by the i-th friend) and p1 + p2 + ... + pn = 100 holds. Misha has no information about who he caught. After Misha makes an attempt to guess the caught person, the round ends. Even then, Misha isn't told whether he guessed correctly, and a new round begins.\n\nThe game ends when Misha guesses every friend at least once, that is, there exists such set of rounds k1, k2, ..., kn, that during round number ki Misha caught the i-th friend and guessed him. Misha wants to minimize the expectation of the number of rounds of the game. Despite the fact that at any point in the game Misha has no information about who he has already guessed, his friends are honest, and if they see that the condition for the end of the game is fulfilled, the game ends immediately. Find the expectation of the number of rounds in the game if Misha plays optimally.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of Misha's friends.\n\nThe second line contains n integers pi (<image>), giving the probability to catch the i-th friend in one particular round in percent.\n\nOutput\n\nPrint a single real value \u2014 the expectation of the number of rounds provided that Misha plays optimally. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if <image>.\n\n", "output": "import random\n\nN = int(input())\nprob = [float(x)/100 for x in input().strip().split()]\nprob_sum = []\ncur = 0\nfor i in range(N):\n    cur += prob[i]\n    prob_sum.append(cur)\n\ndef experiment():\n    cur_prob = [1.] * N\n    cur_exp = 0\n    for i in range(200000):\n\n        bp = [prob[i] * cur_prob[i] / (1-cur_prob[i]+1E-100) for i in range(N)]\n        mn = max(bp)\n        for j in range(N):\n            if bp[j] == mn:\n                choice = j\n        cur_prob[choice] *= 1-prob[choice]\n        tp = 1\n        for j in range(N):\n            tp *= (1-cur_prob[j])\n        tp = 1 - tp\n        cur_exp += tp\n\n    return cur_exp + 1\n\nans = experiment()\nprint(ans)\n", "public_tests": {"input": ["4\n50 20 20 10\n", "2\n50 50\n"], "output": ["39.284626344368\n", "5.000000000000\n"]}, "private_tests": {"input": ["6\n14 14 18 21 20 13\n", "12\n6 10 11 9 6 9 9 12 8 8 5 7\n", "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "4\n25 25 25 25\n", "2\n52 48\n", "36\n1 1 1 1 1 1 1 43 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 23 1 1 1 1 1 1 1 1 1 1 1\n", "5\n20 20 20 20 20\n", "20\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n", "2\n99 1\n", "95\n1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "53\n1 2 1 1 2 2 3 1 3 1 2 2 4 2 1 2 1 2 2 2 1 1 2 2 2 3 2 4 1 1 2 1 4 1 2 1 3 3 4 2 3 1 1 1 2 2 1 2 3 2 1 1 1\n", "14\n11 8 5 8 7 4 8 6 8 7 5 6 9 8\n", "50\n2 2 4 2 1 2 1 1 3 1 2 3 1 6 1 3 4 1 3 1 2 2 2 2 1 1 1 1 3 3 3 2 2 3 1 2 3 1 3 2 2 4 1 1 2 2 1 1 1 1\n", "2\n51 49\n", "1\n100\n", "34\n1 1 1 1 1 1 1 1 19 1 1 1 1 1 1 1 1 1 16 1 16 13 1 1 1 1 1 1 1 1 1 7 1 1\n", "32\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 9 1 20 1 1 1 1 10 1 1 1 1 1 1 17 17 1\n", "95\n1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2\n", "92\n1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1\n", "32\n20 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 28 1 1 1 1 1 1 1 1 1 1 1 1 1 23\n", "34\n8 4 5 4 4 6 1 1 1 1 1 1 7 1 1 6 5 2 5 1 1 4 5 1 1 1 4 5 1 1 1 3 6 1\n", "46\n1 1 2 1 4 2 3 3 1 2 2 3 3 2 3 2 1 4 2 2 1 2 2 4 2 4 1 2 2 1 3 1 1 1 3 3 3 2 4 2 2 3 2 1 2 2\n", "54\n2 2 2 2 1 2 2 1 1 2 1 2 14 2 1 2 1 2 1 2 2 2 1 1 2 2 2 2 2 1 2 2 1 2 2 2 1 1 1 2 2 1 2 2 1 2 1 2 1 2 1 2 1 2\n", "55\n1 1 2 2 1 2 2 2 1 1 1 1 2 2 1 2 2 1 2 2 2 2 1 2 1 2 2 14 2 1 2 1 2 2 1 2 1 2 2 1 2 2 1 2 1 2 1 2 2 2 1 1 2 2 1\n", "10\n10 10 10 10 10 10 10 10 10 10\n", "97\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1\n", "43\n2 2 4 3 3 1 3 2 4 2 1 1 3 2 1 3 2 1 2 3 3 2 3 3 3 2 1 2 2 4 2 1 1 5 1 1 3 1 1 4 3 4 3\n", "9\n14 7 17 11 9 10 9 9 14\n", "93\n1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1\n", "10\n6 12 11 8 13 7 12 10 13 8\n", "91\n1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 2 2 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "79\n2 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 2 2 2 1 1 1 2 2 2 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 2 1 1 1 1 3 1 1 2 1 1 3 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1\n", "20\n5 5 5 6 7 3 7 4 4 4 7 6 6 5 3 7 2 2 3 9\n", "25\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n", "96\n1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "8\n18 18 9 7 18 11 9 10\n", "2\n41 59\n", "2\n10 90\n", "75\n1 1 2 1 1 1 2 1 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 1 2 1 1 2 1 2 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 1 2 1 1 1 2 1 2 1 2 1 2 1 1 1 2 1\n", "8\n12 16 12 12 12 12 12 12\n", "94\n1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1\n", "7\n18 17 14 13 14 12 12\n", "99\n1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "32\n1 1 1 1 1 37 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 33 1 1 1 1\n", "32\n1 1 1 1 1 1 4 1 4 1 5 5 6 1 1 6 6 6 1 6 1 12 4 1 1 8 1 1 5 1 5 1\n", "3\n33 33 34\n", "63\n2 1 2 1 3 1 1 2 2 1 2 2 1 2 2 1 1 3 1 1 1 3 1 1 1 1 1 4 1 1 2 1 3 2 1 2 1 2 2 1 1 1 1 1 1 2 2 1 1 3 2 2 1 4 1 1 1 3 2 1 1 2 1\n", "36\n1 1 1 1 23 1 1 1 1 1 28 1 1 1 1 1 1 1 1 1 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "14\n6 5 10 9 5 8 4 6 8 9 9 7 6 8\n", "93\n1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 2 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1\n", "36\n1 6 7 1 6 3 4 1 1 1 1 8 4 1 5 1 1 3 1 1 4 1 1 1 4 1 1 1 3 1 6 6 7 1 1 4\n", "23\n5 4 2 3 7 5 3 4 4 6 2 3 4 3 6 7 7 3 6 5 3 3 5\n", "36\n1 1 1 1 19 12 13 1 1 1 1 1 1 1 1 1 1 14 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 11 1\n", "44\n1 3 3 3 3 3 3 3 3 1 3 3 1 1 3 3 3 1 7 1 1 1 3 1 3 1 1 3 3 1 3 3 1 3 1 3 3 1 1 3 3 3 1 1\n", "91\n1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 3 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "98\n1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "34\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 67 1 1 1\n", "94\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1\n", "50\n2 4 2 2 4 3 2 2 2 1 2 2 3 3 3 1 3 2 1 1 1 1 2 1 2 2 1 4 2 1 2 2 1 2 2 3 3 2 3 1 1 2 1 2 1 2 3 1 2 2\n", "2\n46 54\n", "36\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 65 1 1 1 1 1 1 1\n", "79\n1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 3 2 2 1 1 1 1 1 1 1 1 3 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 2 2 3 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 2 1 1\n", "69\n2 2 1 1 2 1 1 1 1 1 1 2 2 2 1 1 1 1 2 1 1 1 2 2 2 1 1 1 2 1 1 1 1 1 1 1 3 2 3 2 1 1 1 2 1 2 1 1 1 1 2 3 2 2 2 1 2 2 1 1 1 2 1 1 1 1 1 3 2\n", "20\n1 1 1 1 1 1 81 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "34\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 23 1 1 33 1 1 1 1 1 13 1 1 1 1 1 1\n", "34\n1 1 1 1 1 1 1 33 35 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "84\n1 1 1 1 2 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 2 2 1 2 1 1 2 1 2 1 2 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2\n", "32\n1 1 1 1 1 69 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "42\n3 1 1 2 1 6 2 3 2 1 4 2 3 3 5 1 2 3 2 5 2 1 2 5 2 2 1 2 3 2 2 2 4 1 2 3 3 2 2 3 1 1\n", "92\n1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "89\n1 1 2 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 3 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1\n", "58\n3 1 2 1 1 2 2 1 1 1 1 3 1 2 2 3 2 2 1 2 1 1 2 1 3 1 2 1 2 3 1 3 1 2 3 1 3 1 1 1 2 2 1 2 1 1 3 1 3 1 2 4 1 1 2 1 3 1\n", "10\n10 8 9 12 3 8 12 14 12 12\n", "74\n1 1 1 1 1 2 1 1 2 2 1 1 1 1 2 1 2 1 2 1 1 1 1 2 1 2 1 3 3 1 1 2 2 1 3 1 1 1 2 1 1 1 1 2 1 1 1 1 2 2 2 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2 3 1 1 1 1 1\n", "29\n5 1 7 4 4 2 4 4 3 2 4 4 3 5 3 2 3 3 3 3 8 1 3 5 2 4 3 3 2\n"], "output": ["83.755142422869\n", "452.779598074335\n", "51614.556434047350\n", "29.586872586873\n", "4.987131436200\n", "13980.506519384644\n", "51.774356923897\n", "1403.400672569005\n", "101.739358224840\n", "47194.148820571827\n", "15416.819636134000\n", "651.837635823289\n", "14041.834822044068\n", "4.990136228919\n", "1.000000000000\n", "11708.586074806612\n", "10717.845279109268\n", "47194.148820571827\n", "44740.019651570503\n", "11524.751488497597\n", "8053.919033978538\n", "11140.789094817141\n", "16349.347104192328\n", "17092.125728176659\n", "278.591429630813\n", "48955.302722382126\n", "9945.986986877972\n", "230.600481375109\n", "45442.692554121080\n", "295.612891604642\n", "43870.006761155644\n", "33968.004795680157\n", "1623.396180649602\n", "2337.538306785904\n", "48073.533029060214\n", "181.939612251533\n", "5.096693592729\n", "11.961389607456\n", "30178.210309967468\n", "164.759741508484\n", "46317.188703984852\n", "120.616130820166\n", "50725.850121016636\n", "11966.118567853353\n", "7820.778548866847\n", "14.189750571421\n", "22191.535848726337\n", "13529.262883622790\n", "653.185538236296\n", "45442.692554121095\n", "9268.863808825810\n", "2179.715799751672\n", "12689.561892283800\n", "11085.232484708733\n", "43870.006761155972\n", "49839.420501778084\n", "13434.835490978499\n", "46317.188703984852\n", "13211.778374381722\n", "4.998086623176\n", "14450.921967962468\n", "33968.004795680157\n", "25941.034715195594\n", "6713.312821761126\n", "12530.531716387490\n", "12964.856269990716\n", "37690.402117878119\n", "12430.836185608867\n", "9484.347571593637\n", "44570.701576638276\n", "42305.483110875160\n", "18743.599427275098\n", "321.675488450290\n", "29990.260237688723\n", "3952.703459384203\n"]}, "index": 86}, {"input": "In an attempt to escape the Mischievous Mess Makers' antics, Farmer John has abandoned his farm and is traveling to the other side of Bovinia. During the journey, he and his k cows have decided to stay at the luxurious Grand Moo-dapest Hotel. The hotel consists of n rooms located in a row, some of which are occupied.\n\nFarmer John wants to book a set of k + 1 currently unoccupied rooms for him and his cows. He wants his cows to stay as safe as possible, so he wishes to minimize the maximum distance from his room to the room of his cow. The distance between rooms i and j is defined as |j - i|. Help Farmer John protect his cows by calculating this minimum possible distance.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k < n \u2264 100 000) \u2014 the number of rooms in the hotel and the number of cows travelling with Farmer John.\n\nThe second line contains a string of length n describing the rooms. The i-th character of the string will be '0' if the i-th room is free, and '1' if the i-th room is occupied. It is guaranteed that at least k + 1 characters of this string are '0', so there exists at least one possible choice of k + 1 rooms for Farmer John and his cows to stay in.\n\nOutput\n\nPrint the minimum possible distance between Farmer John's room and his farthest cow.\n\n", "output": "n, k = map(int, input().split())\nt = [i for i, v in enumerate(input()) if v == '0']\ns, m = n, 0\nf = lambda m: max(r - t[m], t[m] - l)\nfor l, r in zip(t, t[k:]):\n    while f(m) > f(m + 1): m += 1\n    s = min(s, f(m))\nprint(s)\n", "public_tests": {"input": ["3 2\n000\n", "5 1\n01010\n", "7 2\n0100100\n"], "output": ["1\n", "2\n", "2\n"]}, "private_tests": {"input": ["5 3\n00000\n", "9 3\n010001000\n", "7 6\n0000000\n", "9 8\n000000000\n", "491 89\n01111101111111100000111010110001010001110111000010101111101000100010010111011101110110111101101010111000111000011100011010010010111111000011011010100110001000011100111000001011100010001111101111101000111001100110010100101000001110010100100100100101001100010101001000010000111110011000000100000100101000100101000001001101011011100000110101111110101001001000100110010000010110101011000101011001001011001000110000011111001110101011000000110101000000100110001101111000101001001001100001001110101\n", "47 46\n00000000000000000000000000000000000000000000000\n", "93 79\n000000000000000000011000000000000000000000000000000000000000000000010000000000100000100000000\n", "18 2\n010111110111011110\n", "8 7\n00000000\n", "10 1\n1101111101\n", "2 1\n00\n", "100 40\n0010010100000100011100010100110001101100110000110010000000001010000111100000100100100101010010001100\n", "112 12\n0110101000000010101110010111100101011010011110100111111100011101011111000111101101110100111011110001100110110010\n", "8 4\n00111000\n", "3 1\n010\n", "31 11\n0000001011011100010000000110001\n", "6 1\n000011\n", "308 17\n01000000100000000000000001000001000010000000000000000001001110000001010001000110000000000000100101000000010000001000000000001100000110000000000000000001000000000000000100000001000010001000000001000000000000000100010000000000000000000000000000000000001000000000001001101100000000000010000000000000000000000000\n", "29 3\n01110011111111111111110110110\n", "100 96\n0000000000000010000010000000000000000000000000000000000000000000000000000010000000000000000000000000\n"], "output": ["2\n", "2\n", "3\n", "4\n", "73\n", "23\n", "42\n", "5\n", "4\n", "6\n", "1\n", "30\n", "10\n", "5\n", "2\n", "7\n", "1\n", "9\n", "17\n", "50\n"]}, "index": 87}, {"input": "Every year, hundreds of people come to summer camps, they learn new algorithms and solve hard problems.\n\nThis is your first year at summer camp, and you are asked to solve the following problem. All integers starting with 1 are written in one line. The prefix of these line is \"123456789101112131415...\". Your task is to print the n-th digit of this string (digits are numbered starting with 1.\n\nInput\n\nThe only line of the input contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the position of the digit you need to print.\n\nOutput\n\nPrint the n-th digit of the line.\n\n", "output": "print(''.join(map(str,range(555)))[int(input())])", "public_tests": {"input": ["11\n", "3\n"], "output": ["0\n", "3\n"]}, "private_tests": {"input": ["942\n", "952\n", "191\n", "289\n", "179\n", "453\n", "945\n", "157\n", "879\n", "781\n", "500\n", "12\n", "270\n", "491\n", "171\n", "999\n", "108\n", "121\n", "613\n", "643\n", "423\n", "8\n", "29\n", "100\n", "394\n", "570\n", "123\n", "1\n", "750\n", "2\n", "13\n", "30\n", "189\n", "1000\n"], "output": ["0\n", "3\n", "0\n", "1\n", "4\n", "7\n", "1\n", "3\n", "9\n", "2\n", "0\n", "1\n", "6\n", "0\n", "0\n", "9\n", "5\n", "5\n", "2\n", "2\n", "7\n", "8\n", "9\n", "5\n", "1\n", "6\n", "6\n", "1\n", "6\n", "2\n", "1\n", "2\n", "9\n", "3\n"]}, "index": 88}, {"input": "Barney lives in NYC. NYC has infinite number of intersections numbered with positive integers starting from 1. There exists a bidirectional road between intersections i and 2i and another road between i and 2i + 1 for every positive integer i. You can clearly see that there exists a unique shortest path between any two intersections.\n\n<image>\n\nInitially anyone can pass any road for free. But since SlapsGiving is ahead of us, there will q consecutive events happen soon. There are two types of events:\n\n1. Government makes a new rule. A rule can be denoted by integers v, u and w. As the result of this action, the passing fee of all roads on the shortest path from u to v increases by w dollars. \n\n2. Barney starts moving from some intersection v and goes to intersection u where there's a girl he wants to cuddle (using his fake name Lorenzo Von Matterhorn). He always uses the shortest path (visiting minimum number of intersections or roads) between two intersections.\n\nGovernment needs your calculations. For each time Barney goes to cuddle a girl, you need to tell the government how much money he should pay (sum of passing fee of all roads he passes).\n\nInput\n\nThe first line of input contains a single integer q (1 \u2264 q \u2264 1 000).\n\nThe next q lines contain the information about the events in chronological order. Each event is described in form 1 v u w if it's an event when government makes a new rule about increasing the passing fee of all roads on the shortest path from u to v by w dollars, or in form 2 v u if it's an event when Barnie goes to cuddle from the intersection v to the intersection u.\n\n1 \u2264 v, u \u2264 1018, v \u2260 u, 1 \u2264 w \u2264 109 states for every description line.\n\nOutput\n\nFor each event of second type print the sum of passing fee of all roads Barney passes in this event, in one line. Print the answers in chronological order of corresponding events.\n\nExample\n\nInput\n\n7\n1 3 4 30\n1 4 1 2\n1 3 6 8\n2 4 3\n1 6 1 40\n2 3 7\n2 2 4\n\n\nOutput\n\n94\n0\n32\n\nNote\n\nIn the example testcase:\n\nHere are the intersections used:\n\n<image>\n\n  1. Intersections on the path are 3, 1, 2 and 4. \n  2. Intersections on the path are 4, 2 and 1. \n  3. Intersections on the path are only 3 and 6. \n  4. Intersections on the path are 4, 2, 1 and 3. Passing fee of roads on the path are 32, 32 and 30 in order. So answer equals to 32 + 32 + 30 = 94. \n  5. Intersections on the path are 6, 3 and 1. \n  6. Intersections on the path are 3 and 7. Passing fee of the road between them is 0. \n  7. Intersections on the path are 2 and 4. Passing fee of the road between them is 32 (increased by 30 in the first event and by 2 in the second).", "output": "d={}\ndef pro(x,y,w):\n\tres=0\n\twhile x!=y:\n\t\tif x<y: x,y=y,x\n\t\td[x]=d.get(x,0)+w\n\t\tres+=d[x];\n\t\tx//=2\n\treturn res\nq=int(input())\nwhile q>0:\n\tq-=1\n\ts=list(map(int,input().split()))\n\tif s[0]==1:\n\t\tpro(s[1],s[2],s[3])\n\telse:\n\t\tprint(pro(s[1],s[2],0))", "public_tests": {"input": ["7\n1 3 4 30\n1 4 1 2\n1 3 6 8\n2 4 3\n1 6 1 40\n2 3 7\n2 2 4\n"], "output": ["94\n0\n32\n"]}, "private_tests": {"input": ["1\n2 1 343417335313797025\n", "2\n1 100 50 1\n2 4294967396 1\n", "2\n1 562949953421312 562949953421311 1\n2 562949953421312 562949953421311\n", "1\n2 666077344481199252 881371880336470888\n", "2\n1 239841676148963 1 20\n2 2112405731 1\n", "2\n1 4294967298 4294967299 10\n2 2 3\n", "10\n1 1 63669439577744021 396980128\n1 2582240553355225 63669439577744021 997926286\n1 2582240553355225 1 619026011\n1 1 4 231881718\n2 63669439577744021 3886074192977\n2 4 63669439577744021\n2 124354374175272 10328962213420903\n1 10328962213420903 3886074192977 188186816\n1 124354374175272 31088593543820 705639304\n2 2582240553355225 254677758310976084\n", "10\n2 37526406560905229 37526426361107171\n2 37526424114740747 18763396439955441\n2 300485276957081578 301492476099962199\n1 75035386466351570 441803674395985082 642312512\n2 300197522144700185 220954108245114486\n1 150105696341181576 559187296 100113944\n1 300197522135707767 150242638470761995 170574370\n2 150105691058036871 220954108245108400\n2 37560659619635168 150070774425697078\n2 18780329809814344 300222324900057526\n", "2\n1 100000000000000 200000000000000 1\n2 276447232 552894464\n", "2\n1 500000000000 250000000000 1\n2 1783793664 891896832\n", "10\n1 1 399719082491 159376944\n1 186 1 699740230\n2 410731850987390 1\n1 410731850987390 399719082491 699271234\n1 1 186 255736462\n1 1 186 544477714\n1 399719082491 410731850987390 366708275\n2 1 186\n2 410731850987390 1\n2 399719082491 186\n", "2\n1 2147540141 4295080282 1\n2 1 112986\n"], "output": ["0\n", "0\n", "97\n", "0\n", "20\n", "0\n", "19528689796\n80417520800\n140119493557\n179078288337\n", "0\n0\n0\n13488562752\n14270974176\n13899046930\n5418394872\n", "0\n", "0\n", "6013820218\n11615319450\n55320479319\n37986050043\n", "0\n"]}, "index": 89}, {"input": "Efim just received his grade for the last test. He studies in a special school and his grade can be equal to any positive decimal fraction. First he got disappointed, as he expected a way more pleasant result. Then, he developed a tricky plan. Each second, he can ask his teacher to round the grade at any place after the decimal point (also, he can ask to round to the nearest integer). \n\nThere are t seconds left till the end of the break, so Efim has to act fast. Help him find what is the maximum grade he can get in no more than t seconds. Note, that he can choose to not use all t seconds. Moreover, he can even choose to not round the grade at all.\n\nIn this problem, classic rounding rules are used: while rounding number to the n-th digit one has to take a look at the digit n + 1. If it is less than 5 than the n-th digit remain unchanged while all subsequent digits are replaced with 0. Otherwise, if the n + 1 digit is greater or equal to 5, the digit at the position n is increased by 1 (this might also change some other digits, if this one was equal to 9) and all subsequent digits are replaced with 0. At the end, all trailing zeroes are thrown away.\n\nFor example, if the number 1.14 is rounded to the first decimal place, the result is 1.1, while if we round 1.5 to the nearest integer, the result is 2. Rounding number 1.299996121 in the fifth decimal place will result in number 1.3.\n\nInput\n\nThe first line of the input contains two integers n and t (1 \u2264 n \u2264 200 000, 1 \u2264 t \u2264 109) \u2014 the length of Efim's grade and the number of seconds till the end of the break respectively.\n\nThe second line contains the grade itself. It's guaranteed that the grade is a positive number, containing at least one digit after the decimal points, and it's representation doesn't finish with 0.\n\nOutput\n\nPrint the maximum grade that Efim can get in t seconds. Do not print trailing zeroes.\n\n", "output": "n, t = map(int, input().split())\nx = input()\ni = x.find('.')\nfor j in range(i + 1, n):\n    if x[j] > '4':\n        for k in range(t):\n            j -= 1\n            if x[j] != '4': break\n        if j == i:\n            j -= 1\n            while j and x[j] == '9': j -= 1\n            x = x[:j] + str(int(x[j]) + 1) + '0' * (i - j - 1)\n        else:\n            x = x[:j] + str(int(x[j]) + 1)\n        break\nprint(x)", "public_tests": {"input": ["6 2\n10.245\n", "3 100\n9.2\n", "6 1\n10.245\n"], "output": ["10.3\n", "9.2\n", "10.25\n"]}, "private_tests": {"input": ["7 1000\n409.659\n", "4 10\n99.9\n", "5 100\n6.666\n", "4 1\n5.59\n", "8 6\n9.444445\n", "9 2\n23999.448\n", "6 1\n0.9454\n", "31 15\n2707786.24030444444444444724166\n", "16 999\n9595959.95959595\n", "7 235562\n999.999\n", "13 1\n761.044449428\n", "5 1\n99.99\n", "3 121\n9.9\n", "4 1\n19.5\n", "4 100\n99.9\n", "3 100\n9.9\n", "5 100\n144.5\n", "18 6\n102345678999.44449\n", "4 10\n10.9\n", "6 1\n9.9999\n", "5 100\n99.45\n", "4 10\n99.5\n", "3 10\n9.9\n", "5 1\n999.9\n", "4 100\n99.5\n", "7 1\n99999.9\n", "3 3\n9.9\n", "5 10\n1.555\n", "7 1000000000\n239.923\n", "4 1\n99.9\n", "8 100\n9.444445\n", "3 1\n0.1\n", "320 142\n2704701300865535.432223312233434114130011113220102420131323010344144201124303144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444447444444444444444444444444444444615444444482101673308979557675074444444444444446867245414595534444693160202254444449544495367\n", "10 1\n0.50444445\n", "35 8\n984227318.2031144444444444494637612\n", "22 100\n11111111111111111111.5\n", "3 1\n9.9\n", "5 1\n9.999\n", "6 2\n999.45\n", "9 3\n23999.448\n", "3 100\n8.9\n", "5 1\n199.9\n", "3 1\n0.9\n", "3 100\n9.5\n", "4 100\n9.99\n", "4 1\n99.5\n", "3 1\n9.5\n", "12 5\n872.04488525\n", "5 2\n999.9\n", "7 1\n1.51111\n", "3 1231\n9.9\n", "10 1\n999.999999\n", "18 100\n9.4444444444454444\n"], "output": ["410\n", "100\n", "7\n", "6\n", "10\n", "23999.5\n", "1\n", "2707786.24031\n", "9595960\n", "1000\n", "761.04445\n", "100\n", "10\n", "20\n", "100\n", "10\n", "145\n", "102345679000\n", "11\n", "10\n", "100\n", "100\n", "10\n", "1000\n", "100\n", "100000\n", "10\n", "2\n", "240\n", "100\n", "10\n", "0.1\n", "2704701300865535.4322233122334341141300111132201024201313230103441442011243032\n", "1\n", "984227318.2031144445\n", "11111111111111111112\n", "10\n", "10\n", "1000\n", "24000\n", "9\n", "200\n", "1\n", "10\n", "10\n", "100\n", "10\n", "872.1\n", "1000\n", "2\n", "10\n", "1000\n", "10\n"]}, "index": 90}, {"input": "Vasya plays The Elder Trolls IV: Oblivon. Oh, those creators of computer games! What they do not come up with! Absolutely unique monsters have been added to the The Elder Trolls IV: Oblivon. One of these monsters is Unkillable Slug. Why it is \"Unkillable\"? Firstly, because it can be killed with cutting weapon only, so lovers of two-handed amber hammers should find suitable knife themselves. Secondly, it is necessary to make so many cutting strokes to Unkillable Slug. Extremely many. Too many! \n\nVasya has already promoted his character to 80-th level and in order to gain level 81 he was asked to kill Unkillable Slug. The monster has a very interesting shape. It looks like a rectangular parallelepiped with size x \u00d7 y \u00d7 z, consisting of undestructable cells 1 \u00d7 1 \u00d7 1. At one stroke Vasya can cut the Slug along an imaginary grid, i.e. cut with a plane parallel to one of the parallelepiped side. Monster dies when amount of parts it is divided reaches some critical value.\n\nAll parts of monster do not fall after each cut, they remains exactly on its places. I. e. Vasya can cut several parts with one cut.\n\nVasya wants to know what the maximum number of pieces he can cut the Unkillable Slug into striking him at most k times.\n\nVasya's character uses absolutely thin sword with infinite length.\n\nInput\n\nThe first line of input contains four integer numbers x, y, z, k (1 \u2264 x, y, z \u2264 106, 0 \u2264 k \u2264 109).\n\nOutput\n\nOutput the only number \u2014 the answer for the problem.\n\nPlease, do not use %lld specificator to read or write 64-bit integers in C++. It is preffered to use cout (also you may use %I64d).\n\n", "output": "x, y, z, k = map(int, input().split())\nx, y, z = sorted((x, y, z))\na = min(k // 3, x - 1)\nb = min((k - a) // 2, y - 1)\nc = min(k - a - b, z - 1)\nprint((a + 1) * (b + 1) * (c + 1))\n", "public_tests": {"input": ["2 2 2 1\n", "2 2 2 3\n"], "output": ["2\n", "8\n"]}, "private_tests": {"input": ["1000000 1000000 1000000 1000000000\n", "1000 988 1000000 3000\n", "418223 118667 573175 776998\n", "2 2 2 0\n", "2 1000 1000000 1000000000\n", "500000 1000000 750000 100000\n", "797745 854005 98703 735186\n", "100500 5000 500 100000000\n", "781081 414037 495753 892089\n", "1 1 1 0\n", "100 500 100500 1000000000\n", "10000 1000000 500000 29996\n", "1 2 3 3\n", "1000 1 1 1000\n", "500000 10000 1000000 29998\n", "1 1 1 1\n", "1000 1 1 1\n", "10000 500000 1000000 29999\n", "219482 801483 941695 280976\n", "428676 64403 677407 626161\n", "178008 590076 624581 201286\n", "559002 326875 150818 157621\n", "2 5 5 9\n", "11 1 11 11\n", "1 1000000 1 1000000000\n", "999999 123456 987654 0\n", "1000000 1000000 1000000 2999997\n", "1000000 1000000 1000000 2444441\n", "1000 1 1 998\n", "661377 149342 523189 353305\n", "39436 384053 48008 313346\n", "999999 1 999998 1333333\n", "33334 66667 1000000 100000\n", "999900 999990 4 129\n", "593408 709898 624186 915570\n", "1024 100000 4 13\n", "808994 288453 204353 580644\n", "999999 1000000 999997 999999999\n", "402353 679460 969495 930195\n", "20 4 5 12\n", "1000000 1000000 1000000 2999996\n", "999999 2 1000000 1000000000\n", "91839 2 3 50\n", "1 1000000 2 23123\n"], "output": ["1000000000000000000\n", "1002820000\n", "12857677898465963\n", "1\n", "2000000000\n", "37040370459260\n", "9996502351557447\n", "251250000000\n", "26294515330164544\n", "1\n", "5025000000\n", "999900000000\n", "6\n", "1000\n", "1000100000000\n", "1\n", "2\n", "1000200010000\n", "821595067700400\n", "5081000961597840\n", "302062187173952\n", "145045169133102\n", "50\n", "42\n", "1000000\n", "1\n", "1000000000000000000\n", "540974149875309150\n", "999\n", "1633415415004970\n", "427693170156640\n", "444445555556\n", "37040370459260\n", "16384\n", "28425961712082871\n", "144\n", "7250580779648149\n", "999996000003000000\n", "29810031851367496\n", "120\n", "999999000000000000\n", "1999998000000\n", "288\n", "46246\n"]}, "index": 91}, {"input": "Rick and Morty are playing their own version of Berzerk (which has nothing in common with the famous Berzerk game). This game needs a huge space, so they play it with a computer.\n\nIn this game there are n objects numbered from 1 to n arranged in a circle (in clockwise order). Object number 1 is a black hole and the others are planets. There's a monster in one of the planet. Rick and Morty don't know on which one yet, only that he's not initially in the black hole, but Unity will inform them before the game starts. But for now, they want to be prepared for every possible scenario.\n\n<image>\n\nEach one of them has a set of numbers between 1 and n - 1 (inclusive). Rick's set is s1 with k1 elements and Morty's is s2 with k2 elements. One of them goes first and the player changes alternatively. In each player's turn, he should choose an arbitrary number like x from his set and the monster will move to his x-th next object from its current position (clockwise). If after his move the monster gets to the black hole he wins.\n\nYour task is that for each of monster's initial positions and who plays first determine if the starter wins, loses, or the game will stuck in an infinite loop. In case when player can lose or make game infinity, it more profitable to choose infinity game.\n\nInput\n\nThe first line of input contains a single integer n (2 \u2264 n \u2264 7000) \u2014 number of objects in game.\n\nThe second line contains integer k1 followed by k1 distinct integers s1, 1, s1, 2, ..., s1, k1 \u2014 Rick's set.\n\nThe third line contains integer k2 followed by k2 distinct integers s2, 1, s2, 2, ..., s2, k2 \u2014 Morty's set\n\n1 \u2264 ki \u2264 n - 1 and 1 \u2264 si, 1, si, 2, ..., si, ki \u2264 n - 1 for 1 \u2264 i \u2264 2.\n\nOutput\n\nIn the first line print n - 1 words separated by spaces where i-th word is \"Win\" (without quotations) if in the scenario that Rick plays first and monster is initially in object number i + 1 he wins, \"Lose\" if he loses and \"Loop\" if the game will never end.\n\nSimilarly, in the second line print n - 1 words separated by spaces where i-th word is \"Win\" (without quotations) if in the scenario that Morty plays first and monster is initially in object number i + 1 he wins, \"Lose\" if he loses and \"Loop\" if the game will never end.\n\n", "output": "class T:\n    h = ('Lose', 'Loop', 'Win')\n    def __init__(t):\n        t.s = list(map(int, input().split()))[1:]\n        t.p = [len(t.s)] * n\n        t.p[0] = 0\n    def f(t, i):\n        for d in t.s:\n            j = (i - d) % n\n            if t.p[j] > 0: yield j\n    def g(t):\n        print(*[t.h[min(q, 1)] for q in t.p[1:]])\nn = int(input())\nr, m = T(), T()\nq = [(r, m, 0), (m, r, 0)]\nwhile q:\n    x, y, i = q.pop()\n    for j in y.f(i):\n        y.p[j] = -1\n        for k in x.f(j):\n            x.p[k] -= 1\n            if not x.p[k]: q.append((x, y, k))\nr.g()\nm.g()", "public_tests": {"input": ["5\n2 3 2\n3 1 2 3\n", "8\n4 6 2 3 4\n2 3 6\n"], "output": ["Lose Win Win Loop \nLoop Win Win Win \n", "Win Win Win Win Win Win Win \nLose Win Lose Lose Win Lose Lose \n"]}, "private_tests": {"input": ["1000\n14 77 649 670 988 469 453 445 885 101 58 728 474 488 230\n8 83 453 371 86 834 277 847 958\n", "4096\n6 3736 3640 553 2608 1219 1640\n4 112 2233 3551 2248\n", "7000\n1 6694\n1 2973\n", "17\n1 10\n1 12\n", "100\n66 70 54 10 72 81 84 56 15 27 19 43 55 49 44 52 33 63 40 95 17 58 2 51 39 22 18 82 1 16 99 32 29 24 94 9 98 5 37 47 14 42 73 41 31 79 64 12 6 53 26 68 67 89 13 90 4 21 93 46 74 75 88 66 57 23 7\n18 8 47 76 39 34 52 62 5 36 19 22 80 32 71 55 7 37 57\n", "1000\n1 481\n2 468 9\n", "1000\n3 469 637 369\n2 801 339\n", "10\n3 4 7 5\n2 8 5\n", "2\n1 1\n1 1\n", "7000\n3 6965 1271 5818\n3 6331 5681 6636\n", "85\n12 76 7 75 51 43 41 66 13 59 48 81 73\n3 65 60 25\n", "7000\n1 3041\n1 6128\n", "7000\n3 2706 2040 6698\n10 4118 846 1075 1624 2342 766 6441 2361 4662 1574\n", "1000\n1 312\n1 171\n", "300\n1 179\n2 293 180\n", "6341\n9 6045 2567 3242 5083 5429 1002 4547 1838 4829\n5 5533 3084 6323 4015 2889\n", "20\n1 1\n1 11\n", "7000\n5 5080 4890 1201 4903 1360\n5 2415 6678 5200 2282 4648\n", "3\n1 1\n1 2\n", "309\n30 197 38 142 159 163 169 263 70 151 288 264 41 285 225 216 306 128 242 221 94 39 43 292 54 157 78 272 257 97 57\n3 97 172 165\n", "7000\n12 3489 6630 4582 292 5489 1456 5101 6920 632 2963 5136 5886\n11 434 5878 3806 656 3047 6614 1073 5932 6537 704 5253\n", "100\n84 80 73 28 76 21 44 97 63 59 6 77 41 2 8 71 57 19 33 46 92 5 61 88 53 68 94 56 14 35 4 47 17 79 84 10 67 58 45 38 13 12 87 3 91 30 15 11 24 55 62 39 83 43 89 1 81 75 50 86 72 18 52 78 7 29 64 42 70 49 37 25 66 74 95 36 85 48 99 60 51 98 27 40 93\n47 52 76 9 4 25 8 63 29 74 97 61 93 35 49 62 5 10 57 73 42 3 19 23 71 70 43 67 48 2 34 31 41 90 18 6 40 83 98 72 14 51 38 46 21 99 65 37\n", "7000\n1 5244\n1 2980\n", "6999\n2 3992 782\n2 4903 6815\n", "23\n1 20\n3 9 2 12\n", "7000\n7 419 1631 1925 3861 6940 379 493\n29 5389 5925 2923 4696 972 6125 3779 6044 5477 1305 6488 5059 5515 3238 3863 248 6947 4023 6168 1915 6607 2991 2220 2023 200 4457 6398 1017 447\n"], "output": ["Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop Lose Loop Loop Loop Loop Win Loop \nLoop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop Lose Loop Win Loop Loop Loop Loop \n", "Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win \nLose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose \n", "Win Win Loop Loop Win Win Win Loop Loop Win Win Win Loop Loop Loop Win Loop Win Win Loop Win Loop Loop Loop Win Win Win Win Loop Win Loop Win Win Win Loop Win Win Loop Loop Loop Loop Win Win Win Win Win Win Win Win Loop Win Loop Win Win Loop Win Win Win Win Win Win Loop Win Loop Loop Loop Win Win Win Loop Win Loop Win Win Loop Win Win Win Win Loop Win Win Win Win Win Win Win Win Loop Win Win Loop Win Win Win Win Loop Win Win \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Win Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Win Loop Win Loop Loop Win Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Win Loop Win Win Loop Win Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Win Loop Win Loop Loop Loop Loop \n", "Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose \nWin Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Win Win Win Win Win Win Win Loop Win \nLose Win Loop Lose Win Lose Lose Lose Lose \n", "Win \nWin \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Loop Loop Loop Win Loop Loop Loop Loop Win Win Loop Win Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Win Loop Loop Loop Loop Win Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win \nLose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose \nWin Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win Lose Win Win Win Win Win Win \n", "Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose \nWin Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Loop Loop Win Lose Loop Loop Win Lose Loop Loop Win Lose Loop Loop Win Lose Loop Loop Win \nWin Loop Loop Lose Win Loop Loop Lose Win Loop Loop Lose Win Loop Loop Lose Win Loop Loop \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Loop Win \nWin Loop \n", "Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Win Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Win Win Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Win Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Win Loop Loop Loop Win Loop Win Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Win Loop Win Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Win Win Win Loop Win Win Win Win Win Loop Win Win Win Win Win Win Win Loop Win Win Win Win Win Win Win Win Win Win Win Win Loop Win Win Win Loop Win Win Win Win Win Win Win Win Win Win Loop Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Loop Win Loop Loop Win Win Win Win Loop Win Win Loop Loop Win Loop Win Win Win Loop Win Win Win Win Win Win Loop Win Win Win Win Win Win Win Win \nWin Win Win Loop Loop Loop Win Loop Loop Win Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Win Loop Win Win Win Win Win Loop Loop Win Loop Win Loop Win Win Win Loop Loop Loop Win Loop Loop Loop Loop Win Win Loop Win Win Loop Win Loop Loop Win Win Win Win Loop Win Win Loop Win Win Loop Loop Win Loop Win Loop Loop Loop Win Loop Win Loop Win Loop Win Win Loop Loop Loop Win Loop Loop Loop Win Win Win Loop Win Win Win Win Win Loop \n", "Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop \nLoop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop Lose Loop Loop Loop Win Loop Loop Loop \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n", "Lose Lose Win Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose Lose \nWin Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win Win \n", "Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \nLoop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Win Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop Loop \n"]}, "index": 92}, {"input": "It's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 1018, k \u2264 n) \u2014 the number of sticks drawn by Sasha and the number k \u2014 the number of sticks to be crossed out on each turn.\n\nOutput\n\nIf Sasha wins, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print each letter in arbitrary case (upper of lower).\n\n", "output": "a,b=map(int,input().split())\nprint('NYOE S'[a//b%2::2])", "public_tests": {"input": ["1 1\n", "10 4\n"], "output": ["YES\n", "NO\n"]}, "private_tests": {"input": ["871412474 749817171\n", "257439908778973480 64157133126869976\n", "999999999 1247\n", "6 6\n", "828159210 131819483\n", "851941088 712987048\n", "825175814723458 324\n", "545668929424440387 508692735816921376\n", "2 1\n", "547321411485639939 36665750286082900\n", "293908937 37520518\n", "100000 3\n", "252482458300407528 89907711721009125\n", "6 1\n", "10000000005 1\n", "999999999999999 1\n", "251656215122324104 164397544865601257\n", "2 2\n", "502007866464507926 71266379084204128\n", "6 4\n", "559922900 418944886\n", "253308697183523656 25332878317796706\n", "83504367885565783 52285355047292458\n", "669038685745448997 501718093668307460\n", "999999999999999999 9\n", "946744073709551614 10\n", "697884949 626323363\n", "814768821 312514745\n", "6 2\n", "650075786 130049650\n", "13099714659575475 6549849616514894\n", "766959657 370931668\n", "258266151957056904 30153168463725364\n", "1000000000000000000 4\n", "1000000000 1000000000\n", "6242634 4110365\n", "458601973 245084155\n", "1000000000000000000 2\n", "100000176877 4\n", "232709385 91708542\n", "6 5\n", "667011589 54866795\n", "255787422422806632 146884995820359999\n", "6 3\n", "1000000000000000000 3\n", "12 4\n", "1000000000000000 2\n", "100000000000000001 1\n", "1000000000000 3\n", "20 4\n", "116453141993601660 87060381463547965\n", "10000000000000009 2\n", "544068082 193116851\n", "963577813436662285 206326039287271924\n", "17 4\n", "548973893546839491 183137237979822911\n", "548147654663723363 107422751713800746\n", "1000000000000000000 1\n", "349593257 18089089\n", "12457895452123 1\n"], "output": ["YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n"]}, "index": 93}, {"input": "Slava plays his favorite game \"Peace Lightning\". Now he is flying a bomber on a very specific map.\n\nFormally, map is a checkered field of size 1 \u00d7 n, the cells of which are numbered from 1 to n, in each cell there can be one or several tanks. Slava doesn't know the number of tanks and their positions, because he flies very high, but he can drop a bomb in any cell. All tanks in this cell will be damaged.\n\nIf a tank takes damage for the first time, it instantly moves to one of the neighboring cells (a tank in the cell n can only move to the cell n - 1, a tank in the cell 1 can only move to the cell 2). If a tank takes damage for the second time, it's counted as destroyed and never moves again. The tanks move only when they are damaged for the first time, they do not move by themselves.\n\nHelp Slava to destroy all tanks using as few bombs as possible.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 100 000) \u2014 the size of the map.\n\nOutput\n\nIn the first line print m \u2014 the minimum number of bombs Slava needs to destroy all tanks.\n\nIn the second line print m integers k1, k2, ..., km. The number ki means that the i-th bomb should be dropped at the cell ki.\n\nIf there are multiple answers, you can print any of them.\n\n", "output": "n = int(input())\na = [*range(2,n+1,2)]\nprint(int(n*1.5),'\\n',*a,*range(1,n+1,2),*a)\n", "public_tests": {"input": ["3\n", "2\n"], "output": ["4\n2 1 3 2\n", "3\n2 1 2\n"]}, "private_tests": {"input": ["11124\n", "10931\n", "4\n", "6591\n", "6\n", "15\n", "10\n", "8954\n", "100\n", "5\n", "23347\n", "23540\n"], "output": ["16686\nn", "16396\nn", "6\n2 4 1 3 2 4\n", "9886\nn", "9\n2 4 6 1 3 5 2 4 6\n", "22\n2 4 6 8 10 12 14 1 3 5 7 9 11 13 15 2 4 6 8 10 12 14\n", "15\n2 4 6 8 10 1 3 5 7 9 2 4 6 8 10\n", "13431\nn", "150\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100\n", "7\n2 4 1 3 5 2 4\n", "35020\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 378 380 382 384 386 388 390 392 394 396 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432 434 436 438 440 442 444 446 448 450 452 454 456 458 460 462 464 466 468 470 472 474 476 478 480 482 484 486 488 490 492 494 496 498 500 502 504 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 564 566 568 570 572 574 576 578 580 582 584 586 588 590 592 594 596 598 600 602 604 606 608 610 612 614 616 618 620 622 624 626 628 630 632 634 636 638 640 642 644 646 648 650 652 654 656 658 660 662 664 666 668 670 672 674 676 678 680 682 684 686 688 690 692 694 696 698 700 702 704 706 708 710 712 714 716 718 720 722 724 726 728 730 732 734 736 738 740 742 744 746 748 750 752 754 756 758 760 762 764 766 768 770 772 774 776 778 780 782 784 786 788 790 792 794 796 798 800 802 804 806 808 810 812 814 816 818 820 822 824 826 828 830 832 834 836 838 840 842 844 846 848 850 852 854 856 858 860 862 864 866 868 870 872 874 876 878 880 882 884 886 888 890 892 894 896 898 900 902 904 906 908 910 912 914 916 918 920 922 924 926 928 930 932 934 936 938 940 942 944 946 948 950 952 954 956 958 960 962 964 966 968 970 972 974 976 978 980 982 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1008 1010 1012 1014 1016 1018 1020 1022 1024 1026 1028 1030 1032 1034 1036 1038 1040 1042 1044 1046 1048 1050 1052 1054 1056 1058 1060 1062 1064 1066 1068 1070 1072 1074 1076 1078 1080 1082 1084 1086 1088 1090 1092 1094 1096 1098 1100 1102 1104 1106 1108 1110 1112 1114 1116 1118 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1154 1156 1158 1160 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1216 1218 1220 1222 1224 1226 1228 1230 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 1316 1318 1320 1322 1324 1326 1328 1330 1332 1334 1336 1338 1340 1342 1344 1346 1348 1350 1352 1354 1356 1358 1360 1362 1364 1366 1368 1370 1372 1374 1376 1378 1380 1382 1384 1386 1388 1390 1392 1394 1396 1398 1400 1402 1404 1406 1408 1410 1412 1414 1416 1418 1420 1422 1424 1426 1428 1430 1432 1434 1436 1438 1440 1442 1444 1446 1448 1450 1452 1454 1456 1458 1460 1462 1464 1466 1468 1470 1472 1474 1476 1478 1480 1482 1484 1486 1488 1490 1492 1494 1496 1498 1500 1502 1504 1506 1508 1510 1512 1514 1516 1518 1520 1522 1524 1526 1528 1530 1532 1534 1536 1538 1540 1542 1544 1546 1548 1550 1552 1554 1556 1558 1560 1562 1564 1566 1568 1570 1572 1574 1576 1578 1580 1582 1584 1586 1588 1590 1592 1594 1596 1598 1600 1602 1604 1606 1608 1610 1612 1614 1616 1618 1620 1622 1624 1626 1628 1630 1632 1634 1636 1638 1640 1642 1644 1646 1648 1650 1652 1654 1656 1658 1660 1662 1664 1666 1668 1670 1672 1674 1676 1678 1680 1682 1684 1686 1688 1690 1692 1694 1696 1698 1700 1702 1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800 1802 1804 1806 1808 1810 1812 1814 1816 1818 1820 1822 1824 1826 1828 1830 1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858 1860 1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 1884 1886 1888 1890 1892 1894 1896 1898 1900 1902 1904 1906 1908 1910 1912 1914 1916 1918 1920 1922 1924 1926 1928 1930 1932 1934 1936 1938 1940 1942 1944 1946 1948 1950 1952 1954 1956 1958 1960 1962 1964 1966 1968 1970 1972 1974 1976 1978 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 2016 2018 2020 2022 2024 2026 2028 2030 2032 2034 2036 2038 2040 2042 2044 2046 2048 2050 2052 2054 2056 2058 2060 2062 2064 2066 2068 2070 2072 2074 2076 2078 2080 2082 2084 2086 2088 2090 2092 2094 2096 2098 2100 2102 2104 2106 2108 2110 2112 2114 2116 2118 2120 2122 2124 2126 2128 2130 2132 2134 2136 2138 2140 2142 2144 2146 2148 2150 2152 2154 2156 2158 2160 2162 2164 2166 2168 2170 2172 2174 2176 2178 2180 2182 2184 2186 2188 2190 2192 2194 2196 2198 2200 2202 2204 2206 2208 2210 2212 2214 2216 2218 2220 2222 2224 2226 2228 2230 2232 2234 2236 2238 2240 2242 2244 2246 2248 2250 2252 2254 2256 2258 2260 2262 2264 2266 2268 2270 2272 2274 2276 2278 2280 2282 2284 2286 2288 2290 2292 2294 2296 2298 2300 2302 2304 2306 2308 2310 2312 2314 2316 2318 2320 2322 2324 2326 2328 2330 2332 2334 2336 2338 2340 2342 2344 2346 2348 2350 2352 2354 2356 2358 2360 2362 2364 2366 2368 2370 2372 2374 2376 2378 2380 2382 2384 2386 2388 2390 2392 2394 2396 2398 2400 2402 2404 2406 2408 2410 2412 2414 2416 2418 2420 2422 2424 2426 2428 2430 2432 2434 2436 2438 2440 2442 2444 2446 2448 2450 2452 2454 2456 2458 2460 2462 2464 2466 2468 2470 2472 2474 2476 2478 2480 2482 2484 2486 2488 2490 2492 2494 2496 2498 2500 2502 2504 2506 2508 2510 2512 2514 2516 2518 2520 2522 2524 2526 2528 2530 2532 2534 2536 2538 2540 2542 2544 2546 2548 2550 2552 2554 2556 2558 2560 2562 2564 2566 2568 2570 2572 2574 2576 2578 2580 2582 2584 2586 2588 2590 2592 2594 2596 2598 2600 2602 2604 2606 2608 2610 2612 2614 2616 2618 2620 2622 2624 2626 2628 2630 2632 2634 2636 2638 2640 2642 2644 2646 2648 2650 2652 2654 2656 2658 2660 2662 2664 2666 2668 2670 2672 2674 2676 2678 2680 2682 2684 2686 2688 2690 2692 2694 2696 2698 2700 2702 2704 2706 2708 2710 2712 2714 2716 2718 2720 2722 2724 2726 2728 2730 2732 2734 2736 2738 2740 2742 2744 2746 2748 2750 2752 2754 2756 2758 2760 2762 2764 2766 2768 2770 2772 2774 2776 2778 2780 2782 2784 2786 2788 2790 2792 2794 2796 2798 2800 2802 2804 2806 2808 2810 2812 2814 2816 2818 2820 2822 2824 2826 2828 2830 2832 2834 2836 2838 2840 2842 2844 2846 2848 2850 2852 2854 2856 2858 2860 2862 2864 2866 2868 2870 2872 2874 2876 2878 2880 2882 2884 2886 2888 2890 2892 2894 2896 2898 2900 2902 2904 2906 2908 2910 2912 2914 2916 2918 2920 2922 2924 2926 2928 2930 2932 2934 2936 2938 2940 2942 2944 2946 2948 2950 2952 2954 2956 2958 2960 2962 2964 2966 2968 2970 2972 2974 2976 2978 2980 2982 2984 2986 2988 2990 2992 2994 2996 2998 3000 3002 3004 3006 3008 3010 3012 3014 3016 3018 3020 3022 3024 3026 3028 3030 3032 3034 3036 3038 3040 3042 3044 3046 3048 3050 3052 3054 3056 3058 3060 3062 3064 3066 3068 3070 3072 3074 3076 3078 3080 3082 3084 3086 3088 3090 3092 3094 3096 3098 3100 3102 3104 3106 3108 3110 3112 3114 3116 3118 3120 3122 3124 3126 3128 3130 3132 3134 3136 3138 3140 3142 3144 3146 3148 3150 3152 3154 3156 3158 3160 3162 3164 3166 3168 3170 3172 3174 3176 3178 3180 3182 3184 3186 3188 3190 3192 3194 3196 3198 3200 3202 3204 3206 3208 3210 3212 3214 3216 3218 3220 3222 3224 3226 3228 3230 3232 3234 3236 3238 3240 3242 3244 3246 3248 3250 3252 3254 3256 3258 3260 3262 3264 3266 3268 3270 3272 3274 3276 3278 3280 3282 3284 3286 3288 3290 3292 3294 3296 3298 3300 3302 3304 3306 3308 3310 3312 3314 3316 3318 3320 3322 3324 3326 3328 3330 3332 3334 3336 3338 3340 3342 3344 3346 3348 3350 3352 3354 3356 3358 3360 3362 3364 3366 3368 3370 3372 3374 3376 3378 3380 3382 3384 3386 3388 3390 3392 3394 3396 3398 3400 3402 3404 3406 3408 3410 3412 3414 3416 3418 3420 3422 3424 3426 3428 3430 3432 3434 3436 3438 3440 3442 3444 3446 3448 3450 3452 3454 3456 3458 3460 3462 3464 3466 3468 3470 3472 3474 3476 3478 3480 3482 3484 3486 3488 3490 3492 3494 3496 3498 3500 3502 3504 3506 3508 3510 3512 3514 3516 3518 3520 3522 3524 3526 3528 3530 3532 3534 3536 3538 3540 3542 3544 3546 3548 3550 3552 3554 3556 3558 3560 3562 3564 3566 3568 3570 3572 3574 3576 3578 3580 3582 3584 3586 3588 3590 3592 3594 3596 3598 3600 3602 3604 3606 3608 3610 3612 3614 3616 3618 3620 3622 3624 3626 3628 3630 3632 3634 3636 3638 3640 3642 3644 3646 3648 3650 3652 3654 3656 3658 3660 3662 3664 3666 3668 3670 3672 3674 3676 3678 3680 3682 3684 3686 3688 3690 3692 3694 3696 3698 3700 3702 3704 3706 3708 3710 3712 3714 3716 3718 3720 3722 3724 3726 3728 3730 3732 3734 3736 3738 3740 3742 3744 3746 3748 3750 3752 3754 3756 3758 3760 3762 3764 3766 3768 3770 3772 3774 3776 3778 3780 3782 3784 3786 3788 3790 3792 3794 3796 3798 3800 3802 3804 3806 3808 3810 3812 3814 3816 3818 3820 3822 3824 3826 3828 3830 3832 3834 3836 3838 3840 3842 3844 3846 3848 3850 3852 3854 3856 3858 3860 3862 3864 3866 3868 3870 3872 3874 3876 3878 3880 3882 3884 3886 3888 3890 3892 3894 3896 3898 3900 3902 3904 3906 3908 3910 3912 3914 3916 3918 3920 3922 3924 3926 3928 3930 3932 3934 3936 3938 3940 3942 3944 3946 3948 3950 3952 3954 3956 3958 3960 3962 3964 3966 3968 3970 3972 3974 3976 3978 3980 3982 3984 3986 3988 3990 3992 3994 3996 3998 4000 4002 4004 4006 4008 4010 4012 4014 4016 4018 4020 4022 4024 4026 4028 4030 4032 4034 4036 4038 4040 4042 4044 4046 4048 4050 4052 4054 4056 4058 4060 4062 4064 4066 4068 4070 4072 4074 4076 4078 4080 4082 4084 4086 4088 4090 4092 4094 4096 4098 4100 4102 4104 4106 4108 4110 4112 4114 4116 4118 4120 4122 4124 4126 4128 4130 4132 4134 4136 4138 4140 4142 4144 4146 4148 4150 4152 4154 4156 4158 4160 4162 4164 4166 4168 4170 4172 4174 4176 4178 4180 4182 4184 4186 4188 4190 4192 4194 4196 4198 4200 4202 4204 4206 4208 4210 4212 4214 4216 4218 4220 4222 4224 4226 4228 4230 4232 4234 4236 4238 4240 4242 4244 4246 4248 4250 4252 4254 4256 4258 4260 4262 4264 4266 4268 4270 4272 4274 4276 4278 4280 4282 4284 4286 4288 4290 4292 4294 4296 4298 4300 4302 4304 4306 4308 4310 4312 4314 4316 4318 4320 4322 4324 4326 4328 4330 4332 4334 4336 4338 4340 4342 4344 4346 4348 4350 4352 4354 4356 4358 4360 4362 4364 4366 4368 4370 4372 4374 4376 4378 4380 4382 4384 4386 4388 4390 4392 4394 4396 4398 4400 4402 4404 4406 4408 4410 4412 4414 4416 4418 4420 4422 4424 4426 4428 4430 4432 4434 4436 4438 4440 4442 4444 4446 4448 4450 4452 4454 4456 4458 4460 4462 4464 4466 4468 4470 4472 4474 4476 4478 4480 4482 4484 4486 4488 4490 4492 4494 4496 4498 4500 4502 4504 4506 4508 4510 4512 4514 4516 4518 4520 4522 4524 4526 4528 4530 4532 4534 4536 4538 4540 4542 4544 4546 4548 4550 4552 4554 4556 4558 4560 4562 4564 4566 4568 4570 4572 4574 4576 4578 4580 4582 4584 4586 4588 4590 4592 4594 4596 4598 4600 4602 4604 4606 4608 4610 4612 4614 4616 4618 4620 4622 4624 4626 4628 4630 4632 4634 4636 4638 4640 4642 4644 4646 4648 4650 4652 4654 4656 4658 4660 4662 4664 4666 4668 4670 4672 4674 4676 4678 4680 4682 4684 4686 4688 4690 4692 4694 4696 4698 4700 4702 4704 4706 4708 4710 4712 4714 4716 4718 4720 4722 4724 4726 4728 4730 4732 4734 4736 4738 4740 4742 4744 4746 4748 4750 4752 4754 4756 4758 4760 4762 4764 4766 4768 4770 4772 4774 4776 4778 4780 4782 4784 4786 4788 4790 4792 4794 4796 4798 4800 4802 4804 4806 4808 4810 4812 4814 4816 4818 4820 4822 4824 4826 4828 4830 4832 4834 4836 4838 4840 4842 4844 4846 4848 4850 4852 4854 4856 4858 4860 4862 4864 4866 4868 4870 4872 4874 4876 4878 4880 4882 4884 4886 4888 4890 4892 4894 4896 4898 4900 4902 4904 4906 4908 4910 4912 4914 4916 4918 4920 4922 4924 4926 4928 4930 4932 4934 4936 4938 4940 4942 4944 4946 4948 4950 4952 4954 4956 4958 4960 4962 4964 4966 4968 4970 4972 4974 4976 4978 4980 4982 4984 4986 4988 4990 4992 4994 4996 4998 5000 5002 5004 5006 5008 5010 5012 5014 5016 5018 5020 5022 5024 5026 5028 5030 5032 5034 5036 5038 5040 5042 5044 5046 5048 5050 5052 5054 5056 5058 5060 5062 5064 5066 5068 5070 5072 5074 5076 5078 5080 5082 5084 5086 5088 5090 5092 5094 5096 5098 5100 5102 5104 5106 5108 5110 5112 5114 5116 5118 5120 5122 5124 5126 5128 5130 5132 5134 5136 5138 5140 5142 5144 5146 5148 5150 5152 5154 5156 5158 5160 5162 5164 5166 5168 5170 5172 5174 5176 5178 5180 5182 5184 5186 5188 5190 5192 5194 5196 5198 5200 5202 5204 5206 5208 5210 5212 5214 5216 5218 5220 5222 5224 5226 5228 5230 5232 5234 5236 5238 5240 5242 5244 5246 5248 5250 5252 5254 5256 5258 5260 5262 5264 5266 5268 5270 5272 5274 5276 5278 5280 5282 5284 5286 5288 5290 5292 5294 5296 5298 5300 5302 5304 5306 5308 5310 5312 5314 5316 5318 5320 5322 5324 5326 5328 5330 5332 5334 5336 5338 5340 5342 5344 5346 5348 5350 5352 5354 5356 5358 5360 5362 5364 5366 5368 5370 5372 5374 5376 5378 5380 5382 5384 5386 5388 5390 5392 5394 5396 5398 5400 5402 5404 5406 5408 5410 5412 5414 5416 5418 5420 5422 5424 5426 5428 5430 5432 5434 5436 5438 5440 5442 5444 5446 5448 5450 5452 5454 5456 5458 5460 5462 5464 5466 5468 5470 5472 5474 5476 5478 5480 5482 5484 5486 5488 5490 5492 5494 5496 5498 5500 5502 5504 5506 5508 5510 5512 5514 5516 5518 5520 5522 5524 5526 5528 5530 5532 5534 5536 5538 5540 5542 5544 5546 5548 5550 5552 5554 5556 5558 5560 5562 5564 5566 5568 5570 5572 5574 5576 5578 5580 5582 5584 5586 5588 5590 5592 5594 5596 5598 5600 5602 5604 5606 5608 5610 5612 5614 5616 5618 5620 5622 5624 5626 5628 5630 5632 5634 5636 5638 5640 5642 5644 5646 5648 5650 5652 5654 5656 5658 5660 5662 5664 5666 5668 5670 5672 5674 5676 5678 5680 5682 5684 5686 5688 5690 5692 5694 5696 5698 5700 5702 5704 5706 5708 5710 5712 5714 5716 5718 5720 5722 5724 5726 5728 5730 5732 5734 5736 5738 5740 5742 5744 5746 5748 5750 5752 5754 5756 5758 5760 5762 5764 5766 5768 5770 5772 5774 5776 5778 5780 5782 5784 5786 5788 5790 5792 5794 5796 5798 5800 5802 5804 5806 5808 5810 5812 5814 5816 5818 5820 5822 5824 5826 5828 5830 5832 5834 5836 5838 5840 5842 5844 5846 5848 5850 5852 5854 5856 5858 5860 5862 5864 5866 5868 5870 5872 5874 5876 5878 5880 5882 5884 5886 5888 5890 5892 5894 5896 5898 5900 5902 5904 5906 5908 5910 5912 5914 5916 5918 5920 5922 5924 5926 5928 5930 5932 5934 5936 5938 5940 5942 5944 5946 5948 5950 5952 5954 5956 5958 5960 5962 5964 5966 5968 5970 5972 5974 5976 5978 5980 5982 5984 5986 5988 5990 5992 5994 5996 5998 6000 6002 6004 6006 6008 6010 6012 6014 6016 6018 6020 6022 6024 6026 6028 6030 6032 6034 6036 6038 6040 6042 6044 6046 6048 6050 6052 6054 6056 6058 6060 6062 6064 6066 6068 6070 6072 6074 6076 6078 6080 6082 6084 6086 6088 6090 6092 6094 6096 6098 6100 6102 6104 6106 6108 6110 6112 6114 6116 6118 6120 6122 6124 6126 6128 6130 6132 6134 6136 6138 6140 6142 6144 6146 6148 6150 6152 6154 6156 6158 6160 6162 6164 6166 6168 6170 6172 6174 6176 6178 6180 6182 6184 6186 6188 6190 6192 6194 6196 6198 6200 6202 6204 6206 6208 6210 6212 6214 6216 6218 6220 6222 6224 6226 6228 6230 6232 6234 6236 6238 6240 6242 6244 6246 6248 6250 6252 6254 6256 6258 6260 6262 6264 6266 6268 6270 6272 6274 6276 6278 6280 6282 6284 6286 6288 6290 6292 6294 6296 6298 6300 6302 6304 6306 6308 6310 6312 6314 6316 6318 6320 6322 6324 6326 6328 6330 6332 6334 6336 6338 6340 6342 6344 6346 6348 6350 6352 6354 6356 6358 6360 6362 6364 6366 6368 6370 6372 6374 6376 6378 6380 6382 6384 6386 6388 6390 6392 6394 6396 6398 6400 6402 6404 6406 6408 6410 6412 6414 6416 6418 6420 6422 6424 6426 6428 6430 6432 6434 6436 6438 6440 6442 6444 6446 6448 6450 6452 6454 6456 6458 6460 6462 6464 6466 6468 6470 6472 6474 6476 6478 6480 6482 6484 6486 6488 6490 6492 6494 6496 6498 6500 6502 6504 6506 6508 6510 6512 6514 6516 6518 6520 6522 6524 6526 6528 6530 6532 6534 6536 6538 6540 6542 6544 6546 6548 6550 6552 6554 6556 6558 6560 6562 6564 6566 6568 6570 6572 6574 6576 6578 6580 6582 6584 6586 6588 6590 6592 6594 6596 6598 6600 6602 6604 6606 6608 6610 6612 6614 6616 6618 6620 6622 6624 6626 6628 6630 6632 6634 6636 6638 6640 6642 6644 6646 6648 6650 6652 6654 6656 6658 6660 6662 6664 6666 6668 6670 6672 6674 6676 6678 6680 6682 6684 6686 6688 6690 6692 6694 6696 6698 6700 6702 6704 6706 6708 6710 6712 6714 6716 6718 6720 6722 6724 6726 6728 6730 6732 6734 6736 6738 6740 6742 6744 6746 6748 6750 6752 6754 6756 6758 6760 6762 6764 6766 6768 6770 6772 6774 6776 6778 6780 6782 6784 6786 6788 6790 6792 6794 6796 6798 6800 6802 6804 6806 6808 6810 6812 6814 6816 6818 6820 6822 6824 6826 6828 6830 6832 6834 6836 6838 6840 6842 6844 6846 6848 6850 6852 6854 6856 6858 6860 6862 6864 6866 6868 6870 6872 6874 6876 6878 6880 6882 6884 6886 6888 6890 6892 6894 6896 6898 6900 6902 6904 6906 6908 6910 6912 6914 6916 6918 6920 6922 6924 6926 6928 6930 6932 6934 6936 6938 6940 6942 6944 6946 6948 6950 6952 6954 6956 6958 6960 6962 6964 6966 6968 6970 6972 6974 6976 6978 6980 6982 6984 6986 6988 6990 6992 6994 6996 6998 7000 7002 7004 7006 7008 7010 7012 7014 7016 7018 7020 7022 7024 7026 7028 7030 7032 7034 7036 7038 7040 7042 7044 7046 7048 7050 7052 7054 7056 7058 7060 7062 7064 7066 7068 7070 7072 7074 7076 7078 7080 7082 7084 7086 7088 7090 7092 7094 7096 7098 7100 7102 7104 7106 7108 7110 7112 7114 7116 7118 7120 7122 7124 7126 7128 7130 7132 7134 7136 7138 7140 7142 7144 7146 7148 7150 7152 7154 7156 7158 7160 7162 7164 7166 7168 7170 7172 7174 7176 7178 7180 7182 7184 7186 7188 7190 7192 7194 7196 7198 7200 7202 7204 7206 7208 7210 7212 7214 7216 7218 7220 7222 7224 7226 7228 7230 7232 7234 7236 7238 7240 7242 7244 7246 7248 7250 7252 7254 7256 7258 7260 7262 7264 7266 7268 7270 7272 7274 7276 7278 7280 7282 7284 7286 7288 7290 7292 7294 7296 7298 7300 7302 7304 7306 7308 7310 7312 7314 7316 7318 7320 7322 7324 7326 7328 7330 7332 7334 7336 7338 7340 7342 7344 7346 7348 7350 7352 7354 7356 7358 7360 7362 7364 7366 7368 7370 7372 7374 7376 7378 7380 7382 7384 7386 7388 7390 7392 7394 7396 7398 7400 7402 7404 7406 7408 7410 7412 7414 7416 7418 7420 7422 7424 7426 7428 7430 7432 7434 7436 7438 7440 7442 7444 7446 7448 7450 7452 7454 7456 7458 7460 7462 7464 7466 7468 7470 7472 7474 7476 7478 7480 7482 7484 7486 7488 7490 7492 7494 7496 7498 7500 7502 7504 7506 7508 7510 7512 7514 7516 7518 7520 7522 7524 7526 7528 7530 7532 7534 7536 7538 7540 7542 7544 7546 7548 7550 7552 7554 7556 7558 7560 7562 7564 7566 7568 7570 7572 7574 7576 7578 7580 7582 7584 7586 7588 7590 7592 7594 7596 7598 7600 7602 7604 7606 7608 7610 7612 7614 7616 7618 7620 7622 7624 7626 7628 7630 7632 7634 7636 7638 7640 7642 7644 7646 7648 7650 7652 7654 7656 7658 7660 7662 7664 7666 7668 7670 7672 7674 7676 7678 7680 7682 7684 7686 7688 7690 7692 7694 7696 7698 7700 7702 7704 7706 7708 7710 7712 7714 7716 7718 7720 7722 7724 7726 7728 7730 7732 7734 7736 7738 7740 7742 7744 7746 7748 7750 7752 7754 7756 7758 7760 7762 7764 7766 7768 7770 7772 7774 7776 7778 7780 7782 7784 7786 7788 7790 7792 7794 7796 7798 7800 7802 7804 7806 7808 7810 7812 7814 7816 7818 7820 7822 7824 7826 7828 7830 7832 7834 7836 7838 7840 7842 7844 7846 7848 7850 7852 7854 7856 7858 7860 7862 7864 7866 7868 7870 7872 7874 7876 7878 7880 7882 7884 7886 7888 7890 7892 7894 7896 7898 7900 7902 7904 7906 7908 7910 7912 7914 7916 7918 7920 7922 7924 7926 7928 7930 7932 7934 7936 7938 7940 7942 7944 7946 7948 7950 7952 7954 7956 7958 7960 7962 7964 7966 7968 7970 7972 7974 7976 7978 7980 7982 7984 7986 7988 7990 7992 7994 7996 7998 8000 8002 8004 8006 8008 8010 8012 8014 8016 8018 8020 8022 8024 8026 8028 8030 8032 8034 8036 8038 8040 8042 8044 8046 8048 8050 8052 8054 8056 8058 8060 8062 8064 8066 8068 8070 8072 8074 8076 8078 8080 8082 8084 8086 8088 8090 8092 8094 8096 8098 8100 8102 8104 8106 8108 8110 8112 8114 8116 8118 8120 8122 8124 8126 8128 8130 8132 8134 8136 8138 8140 8142 8144 8146 8148 8150 8152 8154 8156 8158 8160 8162 8164 8166 8168 8170 8172 8174 8176 8178 8180 8182 8184 8186 8188 8190 8192 8194 8196 8198 8200 8202 8204 8206 8208 8210 8212 8214 8216 8218 8220 8222 8224 8226 8228 8230 8232 8234 8236 8238 8240 8242 8244 8246 8248 8250 8252 8254 8256 8258 8260 8262 8264 8266 8268 8270 8272 8274 8276 8278 8280 8282 8284 8286 8288 8290 8292 8294 8296 8298 8300 8302 8304 8306 8308 8310 8312 8314 8316 8318 8320 8322 8324 8326 8328 8330 8332 8334 8336 8338 8340 8342 8344 8346 8348 8350 8352 8354 8356 8358 8360 8362 8364 8366 8368 8370 8372 8374 8376 8378 8380 8382 8384 8386 8388 8390 8392 8394 8396 8398 8400 8402 8404 8406 8408 8410 8412 8414 8416 8418 8420 8422 8424 8426 8428 8430 8432 8434 8436 8438 8440 8442 8444 8446 8448 8450 8452 8454 8456 8458 8460 8462 8464 8466 8468 8470 8472 8474 8476 8478 8480 8482 8484 8486 8488 8490 8492 8494 8496 8498 8500 8502 8504 8506 8508 8510 8512 8514 8516 8518 8520 8522 8524 8526 8528 8530 8532 8534 8536 8538 8540 8542 8544 8546 8548 8550 8552 8554 8556 8558 8560 8562 8564 8566 8568 8570 8572 8574 8576 8578 8580 8582 8584 8586 8588 8590 8592 8594 8596 8598 8600 8602 8604 8606 8608 8610 8612 8614 8616 8618 8620 8622 8624 8626 8628 8630 8632 8634 8636 8638 8640 8642 8644 8646 8648 8650 8652 8654 8656 8658 8660 8662 8664 8666 8668 8670 8672 8674 8676 8678 8680 8682 8684 8686 8688 8690 8692 8694 8696 8698 8700 8702 8704 8706 8708 8710 8712 8714 8716 8718 8720 8722 8724 8726 8728 8730 8732 8734 8736 8738 8740 8742 8744 8746 8748 8750 8752 8754 8756 8758 8760 8762 8764 8766 8768 8770 8772 8774 8776 8778 8780 8782 8784 8786 8788 8790 8792 8794 8796 8798 8800 8802 8804 8806 8808 8810 8812 8814 8816 8818 8820 8822 8824 8826 8828 8830 8832 8834 8836 8838 8840 8842 8844 8846 8848 8850 8852 8854 8856 8858 8860 8862 8864 8866 8868 8870 8872 8874 8876 8878 8880 8882 8884 8886 8888 8890 8892 8894 8896 8898 8900 8902 8904 8906 8908 8910 8912 8914 8916 8918 8920 8922 8924 8926 8928 8930 8932 8934 8936 8938 8940 8942 8944 8946 8948 8950 8952 8954 8956 8958 8960 8962 8964 8966 8968 8970 8972 8974 8976 8978 8980 8982 8984 8986 8988 8990 8992 8994 8996 8998 9000 9002 9004 9006 9008 9010 9012 9014 9016 9018 9020 9022 9024 9026 9028 9030 9032 9034 9036 9038 9040 9042 9044 9046 9048 9050 9052 9054 9056 9058 9060 9062 9064 9066 9068 9070 9072 9074 9076 9078 9080 9082 9084 9086 9088 9090 9092 9094 9096 9098 9100 9102 9104 9106 9108 9110 9112 9114 9116 9118 9120 9122 9124 9126 9128 9130 9132 9134 9136 9138 9140 9142 9144 9146 9148 9150 9152 9154 9156 9158 9160 9162 9164 9166 9168 9170 9172 9174 9176 9178 9180 9182 9184 9186 9188 9190 9192 9194 9196 9198 9200 9202 9204 9206 9208 9210 9212 9214 9216 9218 9220 9222 9224 9226 9228 9230 9232 9234 9236 9238 9240 9242 9244 9246 9248 9250 9252 9254 9256 9258 9260 9262 9264 9266 9268 9270 9272 9274 9276 9278 9280 9282 9284 9286 9288 9290 9292 9294 9296 9298 9300 9302 9304 9306 9308 9310 9312 9314 9316 9318 9320 9322 9324 9326 9328 9330 9332 9334 9336 9338 9340 9342 9344 9346 9348 9350 9352 9354 9356 9358 9360 9362 9364 9366 9368 9370 9372 9374 9376 9378 9380 9382 9384 9386 9388 9390 9392 9394 9396 9398 9400 9402 9404 9406 9408 9410 9412 9414 9416 9418 9420 9422 9424 9426 9428 9430 9432 9434 9436 9438 9440 9442 9444 9446 9448 9450 9452 9454 9456 9458 9460 9462 9464 9466 9468 9470 9472 9474 9476 9478 9480 9482 9484 9486 9488 9490 9492 9494 9496 9498 9500 9502 9504 9506 9508 9510 9512 9514 9516 9518 9520 9522 9524 9526 9528 9530 9532 9534 9536 9538 9540 9542 9544 9546 9548 9550 9552 9554 9556 9558 9560 9562 9564 9566 9568 9570 9572 9574 9576 9578 9580 9582 9584 9586 9588 9590 9592 9594 9596 9598 9600 9602 9604 9606 9608 9610 9612 9614 9616 9618 9620 9622 9624 9626 9628 9630 9632 9634 9636 9638 9640 9642 9644 9646 9648 9650 9652 9654 9656 9658 9660 9662 9664 9666 9668 9670 9672 9674 9676 9678 9680 9682 9684 9686 9688 9690 9692 9694 9696 9698 9700 9702 9704 9706 9708 9710 9712 9714 9716 9718 9720 9722 9724 9726 9728 9730 9732 9734 9736 9738 9740 9742 9744 9746 9748 9750 9752 9754 9756 9758 9760 9762 9764 9766 9768 9770 9772 9774 9776 9778 9780 9782 9784 9786 9788 9790 9792 9794 9796 9798 9800 9802 9804 9806 9808 9810 9812 9814 9816 9818 9820 9822 9824 9826 9828 9830 9832 9834 9836 9838 9840 9842 9844 9846 9848 9850 9852 9854 9856 9858 9860 9862 9864 9866 9868 9870 9872 9874 9876 9878 9880 9882 9884 9886 9888 9890 9892 9894 9896 9898 9900 9902 9904 9906 9908 9910 9912 9914 9916 9918 9920 9922 9924 9926 9928 9930 9932 9934 9936 9938 9940 9942 9944 9946 9948 9950 9952 9954 9956 9958 9960 9962 9964 9966 9968 9970 9972 9974 9976 9978 9980 9982 9984 9986 9988 9990 9992 9994 9996 9998 10000 10002 10004 10006 10008 10010 10012 10014 10016 10018 10020 10022 10024 10026 10028 10030 10032 10034 10036 10038 10040 10042 10044 10046 10048 10050 10052 10054 10056 10058 10060 10062 10064 10066 10068 10070 10072 10074 10076 10078 10080 10082 10084 10086 10088 10090 10092 10094 10096 10098 10100 10102 10104 10106 10108 10110 10112 10114 10116 10118 10120 10122 10124 10126 10128 10130 10132 10134 10136 10138 10140 10142 10144 10146 10148 10150 10152 10154 10156 10158 10160 10162 10164 10166 10168 10170 10172 10174 10176 10178 10180 10182 10184 10186 10188 10190 10192 10194 10196 10198 10200 10202 10204 10206 10208 10210 10212 10214 10216 10218 10220 10222 10224 10226 10228 10230 10232 10234 10236 10238 10240 10242 10244 10246 10248 10250 10252 10254 10256 10258 10260 10262 10264 10266 10268 10270 10272 10274 10276 10278 10280 10282 10284 10286 10288 10290 10292 10294 10296 10298 10300 10302 10304 10306 10308 10310 10312 10314 10316 10318 10320 10322 10324 10326 10328 10330 10332 10334 10336 10338 10340 10342 10344 10346 10348 10350 10352 10354 10356 10358 10360 10362 10364 10366 10368 10370 10372 10374 10376 10378 10380 10382 10384 10386 10388 10390 10392 10394 10396 10398 10400 10402 10404 10406 10408 10410 10412 10414 10416 10418 10420 10422 10424 10426 10428 10430 10432 10434 10436 10438 10440 10442 10444 10446 10448 10450 10452 10454 10456 10458 10460 10462 10464 10466 10468 10470 10472 10474 10476 10478 10480 10482 10484 10486 10488 10490 10492 10494 10496 10498 10500 10502 10504 10506 10508 10510 10512 10514 10516 10518 10520 10522 10524 10526 10528 10530 10532 10534 10536 10538 10540 10542 10544 10546 10548 10550 10552 10554 10556 10558 10560 10562 10564 10566 10568 10570 10572 10574 10576 10578 10580 10582 10584 10586 10588 10590 10592 10594 10596 10598 10600 10602 10604 10606 10608 10610 10612 10614 10616 10618 10620 10622 10624 10626 10628 10630 10632 10634 10636 10638 10640 10642 10644 10646 10648 10650 10652 10654 10656 10658 10660 10662 10664 10666 10668 10670 10672 10674 10676 10678 10680 10682 10684 10686 10688 10690 10692 10694 10696 10698 10700 10702 10704 10706 10708 10710 10712 10714 10716 10718 10720 10722 10724 10726 10728 10730 10732 10734 10736 10738 10740 10742 10744 10746 10748 10750 10752 10754 10756 10758 10760 10762 10764 10766 10768 10770 10772 10774 10776 10778 10780 10782 10784 10786 10788 10790 10792 10794 10796 10798 10800 10802 10804 10806 10808 10810 10812 10814 10816 10818 10820 10822 10824 10826 10828 10830 10832 10834 10836 10838 10840 10842 10844 10846 10848 10850 10852 10854 10856 10858 10860 10862 10864 10866 10868 10870 10872 10874 10876 10878 10880 10882 10884 10886 10888 10890 10892 10894 10896 10898 10900 10902 10904 10906 10908 10910 10912 10914 10916 10918 10920 10922 10924 10926 10928 10930 10932 10934 10936 10938 10940 10942 10944 10946 10948 10950 10952 10954 10956 10958 10960 10962 10964 10966 10968 10970 10972 10974 10976 10978 10980 10982 10984 10986 10988 10990 10992 10994 10996 10998 11000 11002 11004 11006 11008 11010 11012 11014 11016 11018 11020 11022 11024 11026 11028 11030 11032 11034 11036 11038 11040 11042 11044 11046 11048 11050 11052 11054 11056 11058 11060 11062 11064 11066 11068 11070 11072 11074 11076 11078 11080 11082 11084 11086 11088 11090 11092 11094 11096 11098 11100 11102 11104 11106 11108 11110 11112 11114 11116 11118 11120 11122 11124 11126 11128 11130 11132 11134 11136 11138 11140 11142 11144 11146 11148 11150 11152 11154 11156 11158 11160 11162 11164 11166 11168 11170 11172 11174 11176 11178 11180 11182 11184 11186 11188 11190 11192 11194 11196 11198 11200 11202 11204 11206 11208 11210 11212 11214 11216 11218 11220 11222 11224 11226 11228 11230 11232 11234 11236 11238 11240 11242 11244 11246 11248 11250 11252 11254 11256 11258 11260 11262 11264 11266 11268 11270 11272 11274 11276 11278 11280 11282 11284 11286 11288 11290 11292 11294 11296 11298 11300 11302 11304 11306 11308 11310 11312 11314 11316 11318 11320 11322 11324 11326 11328 11330 11332 11334 11336 11338 11340 11342 11344 11346 11348 11350 11352 11354 11356 11358 11360 11362 11364 11366 11368 11370 11372 11374 11376 11378 11380 11382 11384 11386 11388 11390 11392 11394 11396 11398 11400 11402 11404 11406 11408 11410 11412 11414 11416 11418 11420 11422 11424 11426 11428 11430 11432 11434 11436 11438 11440 11442 11444 11446 11448 11450 11452 11454 11456 11458 11460 11462 11464 11466 11468 11470 11472 11474 11476 11478 11480 11482 11484 11486 11488 11490 11492 11494 11496 11498 11500 11502 11504 11506 11508 11510 11512 11514 11516 11518 11520 11522 11524 11526 11528 11530 11532 11534 11536 11538 11540 11542 11544 11546 11548 11550 11552 11554 11556 11558 11560 11562 11564 11566 11568 11570 11572 11574 11576 11578 11580 11582 11584 11586 11588 11590 11592 11594 11596 11598 11600 11602 11604 11606 11608 11610 11612 11614 11616 11618 11620 11622 11624 11626 11628 11630 11632 11634 11636 11638 11640 11642 11644 11646 11648 11650 11652 11654 11656 11658 11660 11662 11664 11666 11668 11670 11672 11674 11676 11678 11680 11682 11684 11686 11688 11690 11692 11694 11696 11698 11700 11702 11704 11706 11708 11710 11712 11714 11716 11718 11720 11722 11724 11726 11728 11730 11732 11734 11736 11738 11740 11742 11744 11746 11748 11750 11752 11754 11756 11758 11760 11762 11764 11766 11768 11770 11772 11774 11776 11778 11780 11782 11784 11786 11788 11790 11792 11794 11796 11798 11800 11802 11804 11806 11808 11810 11812 11814 11816 11818 11820 11822 11824 11826 11828 11830 11832 11834 11836 11838 11840 11842 11844 11846 11848 11850 11852 11854 11856 11858 11860 11862 11864 11866 11868 11870 11872 11874 11876 11878 11880 11882 11884 11886 11888 11890 11892 11894 11896 11898 11900 11902 11904 11906 11908 11910 11912 11914 11916 11918 11920 11922 11924 11926 11928 11930 11932 11934 11936 11938 11940 11942 11944 11946 11948 11950 11952 11954 11956 11958 11960 11962 11964 11966 11968 11970 11972 11974 11976 11978 11980 11982 11984 11986 11988 11990 11992 11994 11996 11998 12000 12002 12004 12006 12008 12010 12012 12014 12016 12018 12020 12022 12024 12026 12028 12030 12032 12034 12036 12038 12040 12042 12044 12046 12048 12050 12052 12054 12056 12058 12060 12062 12064 12066 12068 12070 12072 12074 12076 12078 12080 12082 12084 12086 12088 12090 12092 12094 12096 12098 12100 12102 12104 12106 12108 12110 12112 12114 12116 12118 12120 12122 12124 12126 12128 12130 12132 12134 12136 12138 12140 12142 12144 12146 12148 12150 12152 12154 12156 12158 12160 12162 12164 12166 12168 12170 12172 12174 12176 12178 12180 12182 12184 12186 12188 12190 12192 12194 12196 12198 12200 12202 12204 12206 12208 12210 12212 12214 12216 12218 12220 12222 12224 12226 12228 12230 12232 12234 12236 12238 12240 12242 12244 12246 12248 12250 12252 12254 12256 12258 12260 12262 12264 12266 12268 12270 12272 12274 12276 12278 12280 12282 12284 12286 12288 12290 12292 12294 12296 12298 12300 12302 12304 12306 12308 12310 12312 12314 12316 12318 12320 12322 12324 12326 12328 12330 12332 12334 12336 12338 12340 12342 12344 12346 12348 12350 12352 12354 12356 12358 12360 12362 12364 12366 12368 12370 12372 12374 12376 12378 12380 12382 12384 12386 12388 12390 12392 12394 12396 12398 12400 12402 12404 12406 12408 12410 12412 12414 12416 12418 12420 12422 12424 12426 12428 12430 12432 12434 12436 12438 12440 12442 12444 12446 12448 12450 12452 12454 12456 12458 12460 12462 12464 12466 12468 12470 12472 12474 12476 12478 12480 12482 12484 12486 12488 12490 12492 12494 12496 12498 12500 12502 12504 12506 12508 12510 12512 12514 12516 12518 12520 12522 12524 12526 12528 12530 12532 12534 12536 12538 12540 12542 12544 12546 12548 12550 12552 12554 12556 12558 12560 12562 12564 12566 12568 12570 12572 12574 12576 12578 12580 12582 12584 12586 12588 12590 12592 12594 12596 12598 12600 12602 12604 12606 12608 12610 12612 12614 12616 12618 12620 12622 12624 12626 12628 12630 12632 12634 12636 12638 12640 12642 12644 12646 12648 12650 12652 12654 12656 12658 12660 12662 12664 12666 12668 12670 12672 12674 12676 12678 12680 12682 12684 12686 12688 12690 12692 12694 12696 12698 12700 12702 12704 12706 12708 12710 12712 12714 12716 12718 12720 12722 12724 12726 12728 12730 12732 12734 12736 12738 12740 12742 12744 12746 12748 12750 12752 12754 12756 12758 12760 12762 12764 12766 12768 12770 12772 12774 12776 12778 12780 12782 12784 12786 12788 12790 12792 12794 12796 12798 12800 12802 12804 12806 12808 12810 12812 12814 12816 12818 12820 12822 12824 12826 12828 12830 12832 12834 12836 12838 12840 12842 12844 12846 12848 12850 12852 12854 12856 12858 12860 12862 12864 12866 12868 12870 12872 12874 12876 12878 12880 12882 12884 12886 12888 12890 12892 12894 12896 12898 12900 12902 12904 12906 12908 12910 12912 12914 12916 12918 12920 12922 12924 12926 12928 12930 12932 12934 12936 12938 12940 12942 12944 12946 12948 12950 12952 12954 12956 12958 12960 12962 12964 12966 12968 12970 12972 12974 12976 12978 12980 12982 12984 12986 12988 12990 12992 12994 12996 12998 13000 13002 13004 13006 13008 13010 13012 13014 13016 13018 13020 13022 13024 13026 13028 13030 13032 13034 13036 13038 13040 13042 13044 13046 13048 13050 13052 13054 13056 13058 13060 13062 13064 13066 13068 13070 13072 13074 13076 13078 13080 13082 13084 13086 13088 13090 13092 13094 13096 13098 13100 13102 13104 13106 13108 13110 13112 13114 13116 13118 13120 13122 13124 13126 13128 13130 13132 13134 13136 13138 13140 13142 13144 13146 13148 13150 13152 13154 13156 13158 13160 13162 13164 13166 13168 13170 13172 13174 13176 13178 13180 13182 13184 13186 13188 13190 13192 13194 13196 13198 13200 13202 13204 13206 13208 13210 13212 13214 13216 13218 13220 13222 13224 13226 13228 13230 13232 13234 13236 13238 13240 13242 13244 13246 13248 13250 13252 13254 13256 13258 13260 13262 13264 13266 13268 13270 13272 13274 13276 13278 13280 13282 13284 13286 13288 13290 13292 13294 13296 13298 13300 13302 13304 13306 13308 13310 13312 13314 13316 13318 13320 13322 13324 13326 13328 13330 13332 13334 13336 13338 13340 13342 13344 13346 13348 13350 13352 13354 13356 13358 13360 13362 13364 13366 13368 13370 13372 13374 13376 13378 13380 13382 13384 13386 13388 13390 13392 13394 13396 13398 13400 13402 13404 13406 13408 13410 13412 13414 13416 13418 13420 13422 13424 13426 13428 13430 13432 13434 13436 13438 13440 13442 13444 13446 13448 13450 13452 13454 13456 13458 13460 13462 13464 13466 13468 13470 13472 13474 13476 13478 13480 13482 13484 13486 13488 13490 13492 13494 13496 13498 13500 13502 13504 13506 13508 13510 13512 13514 13516 13518 13520 13522 13524 13526 13528 13530 13532 13534 13536 13538 13540 13542 13544 13546 13548 13550 13552 13554 13556 13558 13560 13562 13564 13566 13568 13570 13572 13574 13576 13578 13580 13582 13584 13586 13588 13590 13592 13594 13596 13598 13600 13602 13604 13606 13608 13610 13612 13614 13616 13618 13620 13622 13624 13626 13628 13630 13632 13634 13636 13638 13640 13642 13644 13646 13648 13650 13652 13654 13656 13658 13660 13662 13664 13666 13668 13670 13672 13674 13676 13678 13680 13682 13684 13686 13688 13690 13692 13694 13696 13698 13700 13702 13704 13706 13708 13710 13712 13714 13716 13718 13720 13722 13724 13726 13728 13730 13732 13734 13736 13738 13740 13742 13744 13746 13748 13750 13752 13754 13756 13758 13760 13762 13764 13766 13768 13770 13772 13774 13776 13778 13780 13782 13784 13786 13788 13790 13792 13794 13796 13798 13800 13802 13804 13806 13808 13810 13812 13814 13816 13818 13820 13822 13824 13826 13828 13830 13832 13834 13836 13838 13840 13842 13844 13846 13848 13850 13852 13854 13856 13858 13860 13862 13864 13866 13868 13870 13872 13874 13876 13878 13880 13882 13884 13886 13888 13890 13892 13894 13896 13898 13900 13902 13904 13906 13908 13910 13912 13914 13916 13918 13920 13922 13924 13926 13928 13930 13932 13934 13936 13938 13940 13942 13944 13946 13948 13950 13952 13954 13956 13958 13960 13962 13964 13966 13968 13970 13972 13974 13976 13978 13980 13982 13984 13986 13988 13990 13992 13994 13996 13998 14000 14002 14004 14006 14008 14010 14012 14014 14016 14018 14020 14022 14024 14026 14028 14030 14032 14034 14036 14038 14040 14042 14044 14046 14048 14050 14052 14054 14056 14058 14060 14062 14064 14066 14068 14070 14072 14074 14076 14078 14080 14082 14084 14086 14088 14090 14092 14094 14096 14098 14100 14102 14104 14106 14108 14110 14112 14114 14116 14118 14120 14122 14124 14126 14128 14130 14132 14134 14136 14138 14140 14142 14144 14146 14148 14150 14152 14154 14156 14158 14160 14162 14164 14166 14168 14170 14172 14174 14176 14178 14180 14182 14184 14186 14188 14190 14192 14194 14196 14198 14200 14202 14204 14206 14208 14210 14212 14214 14216 14218 14220 14222 14224 14226 14228 14230 14232 14234 14236 14238 14240 14242 14244 14246 14248 14250 14252 14254 14256 14258 14260 14262 14264 14266 14268 14270 14272 14274 14276 14278 14280 14282 14284 14286 14288 14290 14292 14294 14296 14298 14300 14302 14304 14306 14308 14310 14312 14314 14316 14318 14320 14322 14324 14326 14328 14330 14332 14334 14336 14338 14340 14342 14344 14346 14348 14350 14352 14354 14356 14358 14360 14362 14364 14366 14368 14370 14372 14374 14376 14378 14380 14382 14384 14386 14388 14390 14392 14394 14396 14398 14400 14402 14404 14406 14408 14410 14412 14414 14416 14418 14420 14422 14424 14426 14428 14430 14432 14434 14436 14438 14440 14442 14444 14446 14448 14450 14452 14454 14456 14458 14460 14462 14464 14466 14468 14470 14472 14474 14476 14478 14480 14482 14484 14486 14488 14490 14492 14494 14496 14498 14500 14502 14504 14506 14508 14510 14512 14514 14516 14518 14520 14522 14524 14526 14528 14530 14532 14534 14536 14538 14540 14542 14544 14546 14548 14550 14552 14554 14556 14558 14560 14562 14564 14566 14568 14570 14572 14574 14576 14578 14580 14582 14584 14586 14588 14590 14592 14594 14596 14598 14600 14602 14604 14606 14608 14610 14612 14614 14616 14618 14620 14622 14624 14626 14628 14630 14632 14634 14636 14638 14640 14642 14644 14646 14648 14650 14652 14654 14656 14658 14660 14662 14664 14666 14668 14670 14672 14674 14676 14678 14680 14682 14684 14686 14688 14690 14692 14694 14696 14698 14700 14702 14704 14706 14708 14710 14712 14714 14716 14718 14720 14722 14724 14726 14728 14730 14732 14734 14736 14738 14740 14742 14744 14746 14748 14750 14752 14754 14756 14758 14760 14762 14764 14766 14768 14770 14772 14774 14776 14778 14780 14782 14784 14786 14788 14790 14792 14794 14796 14798 14800 14802 14804 14806 14808 14810 14812 14814 14816 14818 14820 14822 14824 14826 14828 14830 14832 14834 14836 14838 14840 14842 14844 14846 14848 14850 14852 14854 14856 14858 14860 14862 14864 14866 14868 14870 14872 14874 14876 14878 14880 14882 14884 14886 14888 14890 14892 14894 14896 14898 14900 14902 14904 14906 14908 14910 14912 14914 14916 14918 14920 14922 14924 14926 14928 14930 14932 14934 14936 14938 14940 14942 14944 14946 14948 14950 14952 14954 14956 14958 14960 14962 14964 14966 14968 14970 14972 14974 14976 14978 14980 14982 14984 14986 14988 14990 14992 14994 14996 14998 15000 15002 15004 15006 15008 15010 15012 15014 15016 15018 15020 15022 15024 15026 15028 15030 15032 15034 15036 15038 15040 15042 15044 15046 15048 15050 15052 15054 15056 15058 15060 15062 15064 15066 15068 15070 15072 15074 15076 15078 15080 15082 15084 15086 15088 15090 15092 15094 15096 15098 15100 15102 15104 15106 15108 15110 15112 15114 15116 15118 15120 15122 15124 15126 15128 15130 15132 15134 15136 15138 15140 15142 15144 15146 15148 15150 15152 15154 15156 15158 15160 15162 15164 15166 15168 15170 15172 15174 15176 15178 15180 15182 15184 15186 15188 15190 15192 15194 15196 15198 15200 15202 15204 15206 15208 15210 15212 15214 15216 15218 15220 15222 15224 15226 15228 15230 15232 15234 15236 15238 15240 15242 15244 15246 15248 15250 15252 15254 15256 15258 15260 15262 15264 15266 15268 15270 15272 15274 15276 15278 15280 15282 15284 15286 15288 15290 15292 15294 15296 15298 15300 15302 15304 15306 15308 15310 15312 15314 15316 15318 15320 15322 15324 15326 15328 15330 15332 15334 15336 15338 15340 15342 15344 15346 15348 15350 15352 15354 15356 15358 15360 15362 15364 15366 15368 15370 15372 15374 15376 15378 15380 15382 15384 15386 15388 15390 15392 15394 15396 15398 15400 15402 15404 15406 15408 15410 15412 15414 15416 15418 15420 15422 15424 15426 15428 15430 15432 15434 15436 15438 15440 15442 15444 15446 15448 15450 15452 15454 15456 15458 15460 15462 15464 15466 15468 15470 15472 15474 15476 15478 15480 15482 15484 15486 15488 15490 15492 15494 15496 15498 15500 15502 15504 15506 15508 15510 15512 15514 15516 15518 15520 15522 15524 15526 15528 15530 15532 15534 15536 15538 15540 15542 15544 15546 15548 15550 15552 15554 15556 15558 15560 15562 15564 15566 15568 15570 15572 15574 15576 15578 15580 15582 15584 15586 15588 15590 15592 15594 15596 15598 15600 15602 15604 15606 15608 15610 15612 15614 15616 15618 15620 15622 15624 15626 15628 15630 15632 15634 15636 15638 15640 15642 15644 15646 15648 15650 15652 15654 15656 15658 15660 15662 15664 15666 15668 15670 15672 15674 15676 15678 15680 15682 15684 15686 15688 15690 15692 15694 15696 15698 15700 15702 15704 15706 15708 15710 15712 15714 15716 15718 15720 15722 15724 15726 15728 15730 15732 15734 15736 15738 15740 15742 15744 15746 15748 15750 15752 15754 15756 15758 15760 15762 15764 15766 15768 15770 15772 15774 15776 15778 15780 15782 15784 15786 15788 15790 15792 15794 15796 15798 15800 15802 15804 15806 15808 15810 15812 15814 15816 15818 15820 15822 15824 15826 15828 15830 15832 15834 15836 15838 15840 15842 15844 15846 15848 15850 15852 15854 15856 15858 15860 15862 15864 15866 15868 15870 15872 15874 15876 15878 15880 15882 15884 15886 15888 15890 15892 15894 15896 15898 15900 15902 15904 15906 15908 15910 15912 15914 15916 15918 15920 15922 15924 15926 15928 15930 15932 15934 15936 15938 15940 15942 15944 15946 15948 15950 15952 15954 15956 15958 15960 15962 15964 15966 15968 15970 15972 15974 15976 15978 15980 15982 15984 15986 15988 15990 15992 15994 15996 15998 16000 16002 16004 16006 16008 16010 16012 16014 16016 16018 16020 16022 16024 16026 16028 16030 16032 16034 16036 16038 16040 16042 16044 16046 16048 16050 16052 16054 16056 16058 16060 16062 16064 16066 16068 16070 16072 16074 16076 16078 16080 16082 16084 16086 16088 16090 16092 16094 16096 16098 16100 16102 16104 16106 16108 16110 16112 16114 16116 16118 16120 16122 16124 16126 16128 16130 16132 16134 16136 16138 16140 16142 16144 16146 16148 16150 16152 16154 16156 16158 16160 16162 16164 16166 16168 16170 16172 16174 16176 16178 16180 16182 16184 16186 16188 16190 16192 16194 16196 16198 16200 16202 16204 16206 16208 16210 16212 16214 16216 16218 16220 16222 16224 16226 16228 16230 16232 16234 16236 16238 16240 16242 16244 16246 16248 16250 16252 16254 16256 16258 16260 16262 16264 16266 16268 16270 16272 16274 16276 16278 16280 16282 16284 16286 16288 16290 16292 16294 16296 16298 16300 16302 16304 16306 16308 16310 16312 16314 16316 16318 16320 16322 16324 16326 16328 16330 16332 16334 16336 16338 16340 16342 16344 16346 16348 16350 16352 16354 16356 16358 16360 16362 16364 16366 16368 16370 16372 16374 16376 16378 16380 16382 16384 16386 16388 16390 16392 16394 16396 16398 16400 16402 16404 16406 16408 16410 16412 16414 16416 16418 16420 16422 16424 16426 16428 16430 16432 16434 16436 16438 16440 16442 16444 16446 16448 16450 16452 16454 16456 16458 16460 16462 16464 16466 16468 16470 16472 16474 16476 16478 16480 16482 16484 16486 16488 16490 16492 16494 16496 16498 16500 16502 16504 16506 16508 16510 16512 16514 16516 16518 16520 16522 16524 16526 16528 16530 16532 16534 16536 16538 16540 16542 16544 16546 16548 16550 16552 16554 16556 16558 16560 16562 16564 16566 16568 16570 16572 16574 16576 16578 16580 16582 16584 16586 16588 16590 16592 16594 16596 16598 16600 16602 16604 16606 16608 16610 16612 16614 16616 16618 16620 16622 16624 16626 16628 16630 16632 16634 16636 16638 16640 16642 16644 16646 16648 16650 16652 16654 16656 16658 16660 16662 16664 16666 16668 16670 16672 16674 16676 16678 16680 16682 16684 16686 16688 16690 16692 16694 16696 16698 16700 16702 16704 16706 16708 16710 16712 16714 16716 16718 16720 16722 16724 16726 16728 16730 16732 16734 16736 16738 16740 16742 16744 16746 16748 16750 16752 16754 16756 16758 16760 16762 16764 16766 16768 16770 16772 16774 16776 16778 16780 16782 16784 16786 16788 16790 16792 16794 16796 16798 16800 16802 16804 16806 16808 16810 16812 16814 16816 16818 16820 16822 16824 16826 16828 16830 16832 16834 16836 16838 16840 16842 16844 16846 16848 16850 16852 16854 16856 16858 16860 16862 16864 16866 16868 16870 16872 16874 16876 16878 16880 16882 16884 16886 16888 16890 16892 16894 16896 16898 16900 16902 16904 16906 16908 16910 16912 16914 16916 16918 16920 16922 16924 16926 16928 16930 16932 16934 16936 16938 16940 16942 16944 16946 16948 16950 16952 16954 16956 16958 16960 16962 16964 16966 16968 16970 16972 16974 16976 16978 16980 16982 16984 16986 16988 16990 16992 16994 16996 16998 17000 17002 17004 17006 17008 17010 17012 17014 17016 17018 17020 17022 17024 17026 17028 17030 17032 17034 17036 17038 17040 17042 17044 17046 17048 17050 17052 17054 17056 17058 17060 17062 17064 17066 17068 17070 17072 17074 17076 17078 17080 17082 17084 17086 17088 17090 17092 17094 17096 17098 17100 17102 17104 17106 17108 17110 17112 17114 17116 17118 17120 17122 17124 17126 17128 17130 17132 17134 17136 17138 17140 17142 17144 17146 17148 17150 17152 17154 17156 17158 17160 17162 17164 17166 17168 17170 17172 17174 17176 17178 17180 17182 17184 17186 17188 17190 17192 17194 17196 17198 17200 17202 17204 17206 17208 17210 17212 17214 17216 17218 17220 17222 17224 17226 17228 17230 17232 17234 17236 17238 17240 17242 17244 17246 17248 17250 17252 17254 17256 17258 17260 17262 17264 17266 17268 17270 17272 17274 17276 17278 17280 17282 17284 17286 17288 17290 17292 17294 17296 17298 17300 17302 17304 17306 17308 17310 17312 17314 17316 17318 17320 17322 17324 17326 17328 17330 17332 17334 17336 17338 17340 17342 17344 17346 17348 17350 17352 17354 17356 17358 17360 17362 17364 17366 17368 17370 17372 17374 17376 17378 17380 17382 17384 17386 17388 17390 17392 17394 17396 17398 17400 17402 17404 17406 17408 17410 17412 17414 17416 17418 17420 17422 17424 17426 17428 17430 17432 17434 17436 17438 17440 17442 17444 17446 17448 17450 17452 17454 17456 17458 17460 17462 17464 17466 17468 17470 17472 17474 17476 17478 17480 17482 17484 17486 17488 17490 17492 17494 17496 17498 17500 17502 17504 17506 17508 17510 17512 17514 17516 17518 17520 17522 17524 17526 17528 17530 17532 17534 17536 17538 17540 17542 17544 17546 17548 17550 17552 17554 17556 17558 17560 17562 17564 17566 17568 17570 17572 17574 17576 17578 17580 17582 17584 17586 17588 17590 17592 17594 17596 17598 17600 17602 17604 17606 17608 17610 17612 17614 17616 17618 17620 17622 17624 17626 17628 17630 17632 17634 17636 17638 17640 17642 17644 17646 17648 17650 17652 17654 17656 17658 17660 17662 17664 17666 17668 17670 17672 17674 17676 17678 17680 17682 17684 17686 17688 17690 17692 17694 17696 17698 17700 17702 17704 17706 17708 17710 17712 17714 17716 17718 17720 17722 17724 17726 17728 17730 17732 17734 17736 17738 17740 17742 17744 17746 17748 17750 17752 17754 17756 17758 17760 17762 17764 17766 17768 17770 17772 17774 17776 17778 17780 17782 17784 17786 17788 17790 17792 17794 17796 17798 17800 17802 17804 17806 17808 17810 17812 17814 17816 17818 17820 17822 17824 17826 17828 17830 17832 17834 17836 17838 17840 17842 17844 17846 17848 17850 17852 17854 17856 17858 17860 17862 17864 17866 17868 17870 17872 17874 17876 17878 17880 17882 17884 17886 17888 17890 17892 17894 17896 17898 17900 17902 17904 17906 17908 17910 17912 17914 17916 17918 17920 17922 17924 17926 17928 17930 17932 17934 17936 17938 17940 17942 17944 17946 17948 17950 17952 17954 17956 17958 17960 17962 17964 17966 17968 17970 17972 17974 17976 17978 17980 17982 17984 17986 17988 17990 17992 17994 17996 17998 18000 18002 18004 18006 18008 18010 18012 18014 18016 18018 18020 18022 18024 18026 18028 18030 18032 18034 18036 18038 18040 18042 18044 18046 18048 18050 18052 18054 18056 18058 18060 18062 18064 18066 18068 18070 18072 18074 18076 18078 18080 18082 18084 18086 18088 18090 18092 18094 18096 18098 18100 18102 18104 18106 18108 18110 18112 18114 18116 18118 18120 18122 18124 18126 18128 18130 18132 18134 18136 18138 18140 18142 18144 18146 18148 18150 18152 18154 18156 18158 18160 18162 18164 18166 18168 18170 18172 18174 18176 18178 18180 18182 18184 18186 18188 18190 18192 18194 18196 18198 18200 18202 18204 18206 18208 18210 18212 18214 18216 18218 18220 18222 18224 18226 18228 18230 18232 18234 18236 18238 18240 18242 18244 18246 18248 18250 18252 18254 18256 18258 18260 18262 18264 18266 18268 18270 18272 18274 18276 18278 18280 18282 18284 18286 18288 18290 18292 18294 18296 18298 18300 18302 18304 18306 18308 18310 18312 18314 18316 18318 18320 18322 18324 18326 18328 18330 18332 18334 18336 18338 18340 18342 18344 18346 18348 18350 18352 18354 18356 18358 18360 18362 18364 18366 18368 18370 18372 18374 18376 18378 18380 18382 18384 18386 18388 18390 18392 18394 18396 18398 18400 18402 18404 18406 18408 18410 18412 18414 18416 18418 18420 18422 18424 18426 18428 18430 18432 18434 18436 18438 18440 18442 18444 18446 18448 18450 18452 18454 18456 18458 18460 18462 18464 18466 18468 18470 18472 18474 18476 18478 18480 18482 18484 18486 18488 18490 18492 18494 18496 18498 18500 18502 18504 18506 18508 18510 18512 18514 18516 18518 18520 18522 18524 18526 18528 18530 18532 18534 18536 18538 18540 18542 18544 18546 18548 18550 18552 18554 18556 18558 18560 18562 18564 18566 18568 18570 18572 18574 18576 18578 18580 18582 18584 18586 18588 18590 18592 18594 18596 18598 18600 18602 18604 18606 18608 18610 18612 18614 18616 18618 18620 18622 18624 18626 18628 18630 18632 18634 18636 18638 18640 18642 18644 18646 18648 18650 18652 18654 18656 18658 18660 18662 18664 18666 18668 18670 18672 18674 18676 18678 18680 18682 18684 18686 18688 18690 18692 18694 18696 18698 18700 18702 18704 18706 18708 18710 18712 18714 18716 18718 18720 18722 18724 18726 18728 18730 18732 18734 18736 18738 18740 18742 18744 18746 18748 18750 18752 18754 18756 18758 18760 18762 18764 18766 18768 18770 18772 18774 18776 18778 18780 18782 18784 18786 18788 18790 18792 18794 18796 18798 18800 18802 18804 18806 18808 18810 18812 18814 18816 18818 18820 18822 18824 18826 18828 18830 18832 18834 18836 18838 18840 18842 18844 18846 18848 18850 18852 18854 18856 18858 18860 18862 18864 18866 18868 18870 18872 18874 18876 18878 18880 18882 18884 18886 18888 18890 18892 18894 18896 18898 18900 18902 18904 18906 18908 18910 18912 18914 18916 18918 18920 18922 18924 18926 18928 18930 18932 18934 18936 18938 18940 18942 18944 18946 18948 18950 18952 18954 18956 18958 18960 18962 18964 18966 18968 18970 18972 18974 18976 18978 18980 18982 18984 18986 18988 18990 18992 18994 18996 18998 19000 19002 19004 19006 19008 19010 19012 19014 19016 19018 19020 19022 19024 19026 19028 19030 19032 19034 19036 19038 19040 19042 19044 19046 19048 19050 19052 19054 19056 19058 19060 19062 19064 19066 19068 19070 19072 19074 19076 19078 19080 19082 19084 19086 19088 19090 19092 19094 19096 19098 19100 19102 19104 19106 19108 19110 19112 19114 19116 19118 19120 19122 19124 19126 19128 19130 19132 19134 19136 19138 19140 19142 19144 19146 19148 19150 19152 19154 19156 19158 19160 19162 19164 19166 19168 19170 19172 19174 19176 19178 19180 19182 19184 19186 19188 19190 19192 19194 19196 19198 19200 19202 19204 19206 19208 19210 19212 19214 19216 19218 19220 19222 19224 19226 19228 19230 19232 19234 19236 19238 19240 19242 19244 19246 19248 19250 19252 19254 19256 19258 19260 19262 19264 19266 19268 19270 19272 19274 19276 19278 19280 19282 19284 19286 19288 19290 19292 19294 19296 19298 19300 19302 19304 19306 19308 19310 19312 19314 19316 19318 19320 19322 19324 19326 19328 19330 19332 19334 19336 19338 19340 19342 19344 19346 19348 19350 19352 19354 19356 19358 19360 19362 19364 19366 19368 19370 19372 19374 19376 19378 19380 19382 19384 19386 19388 19390 19392 19394 19396 19398 19400 19402 19404 19406 19408 19410 19412 19414 19416 19418 19420 19422 19424 19426 19428 19430 19432 19434 19436 19438 19440 19442 19444 19446 19448 19450 19452 19454 19456 19458 19460 19462 19464 19466 19468 19470 19472 19474 19476 19478 19480 19482 19484 19486 19488 19490 19492 19494 19496 19498 19500 19502 19504 19506 19508 19510 19512 19514 19516 19518 19520 19522 19524 19526 19528 19530 19532 19534 19536 19538 19540 19542 19544 19546 19548 19550 19552 19554 19556 19558 19560 19562 19564 19566 19568 19570 19572 19574 19576 19578 19580 19582 19584 19586 19588 19590 19592 19594 19596 19598 19600 19602 19604 19606 19608 19610 19612 19614 19616 19618 19620 19622 19624 19626 19628 19630 19632 19634 19636 19638 19640 19642 19644 19646 19648 19650 19652 19654 19656 19658 19660 19662 19664 19666 19668 19670 19672 19674 19676 19678 19680 19682 19684 19686 19688 19690 19692 19694 19696 19698 19700 19702 19704 19706 19708 19710 19712 19714 19716 19718 19720 19722 19724 19726 19728 19730 19732 19734 19736 19738 19740 19742 19744 19746 19748 19750 19752 19754 19756 19758 19760 19762 19764 19766 19768 19770 19772 19774 19776 19778 19780 19782 19784 19786 19788 19790 19792 19794 19796 19798 19800 19802 19804 19806 19808 19810 19812 19814 19816 19818 19820 19822 19824 19826 19828 19830 19832 19834 19836 19838 19840 19842 19844 19846 19848 19850 19852 19854 19856 19858 19860 19862 19864 19866 19868 19870 19872 19874 19876 19878 19880 19882 19884 19886 19888 19890 19892 19894 19896 19898 19900 19902 19904 19906 19908 19910 19912 19914 19916 19918 19920 19922 19924 19926 19928 19930 19932 19934 19936 19938 19940 19942 19944 19946 19948 19950 19952 19954 19956 19958 19960 19962 19964 19966 19968 19970 19972 19974 19976 19978 19980 19982 19984 19986 19988 19990 19992 19994 19996 19998 20000 20002 20004 20006 20008 20010 20012 20014 20016 20018 20020 20022 20024 20026 20028 20030 20032 20034 20036 20038 20040 20042 20044 20046 20048 20050 20052 20054 20056 20058 20060 20062 20064 20066 20068 20070 20072 20074 20076 20078 20080 20082 20084 20086 20088 20090 20092 20094 20096 20098 20100 20102 20104 20106 20108 20110 20112 20114 20116 20118 20120 20122 20124 20126 20128 20130 20132 20134 20136 20138 20140 20142 20144 20146 20148 20150 20152 20154 20156 20158 20160 20162 20164 20166 20168 20170 20172 20174 20176 20178 20180 20182 20184 20186 20188 20190 20192 20194 20196 20198 20200 20202 20204 20206 20208 20210 20212 20214 20216 20218 20220 20222 20224 20226 20228 20230 20232 20234 20236 20238 20240 20242 20244 20246 20248 20250 20252 20254 20256 20258 20260 20262 20264 20266 20268 20270 20272 20274 20276 20278 20280 20282 20284 20286 20288 20290 20292 20294 20296 20298 20300 20302 20304 20306 20308 20310 20312 20314 20316 20318 20320 20322 20324 20326 20328 20330 20332 20334 20336 20338 20340 20342 20344 20346 20348 20350 20352 20354 20356 20358 20360 20362 20364 20366 20368 20370 20372 20374 20376 20378 20380 20382 20384 20386 20388 20390 20392 20394 20396 20398 20400 20402 20404 20406 20408 20410 20412 20414 20416 20418 20420 20422 20424 20426 20428 20430 20432 20434 20436 20438 20440 20442 20444 20446 20448 20450 20452 20454 20456 20458 20460 20462 20464 20466 20468 20470 20472 20474 20476 20478 20480 20482 20484 20486 20488 20490 20492 20494 20496 20498 20500 20502 20504 20506 20508 20510 20512 20514 20516 20518 20520 20522 20524 20526 20528 20530 20532 20534 20536 20538 20540 20542 20544 20546 20548 20550 20552 20554 20556 20558 20560 20562 20564 20566 20568 20570 20572 20574 20576 20578 20580 20582 20584 20586 20588 20590 20592 20594 20596 20598 20600 20602 20604 20606 20608 20610 20612 20614 20616 20618 20620 20622 20624 20626 20628 20630 20632 20634 20636 20638 20640 20642 20644 20646 20648 20650 20652 20654 20656 20658 20660 20662 20664 20666 20668 20670 20672 20674 20676 20678 20680 20682 20684 20686 20688 20690 20692 20694 20696 20698 20700 20702 20704 20706 20708 20710 20712 20714 20716 20718 20720 20722 20724 20726 20728 20730 20732 20734 20736 20738 20740 20742 20744 20746 20748 20750 20752 20754 20756 20758 20760 20762 20764 20766 20768 20770 20772 20774 20776 20778 20780 20782 20784 20786 20788 20790 20792 20794 20796 20798 20800 20802 20804 20806 20808 20810 20812 20814 20816 20818 20820 20822 20824 20826 20828 20830 20832 20834 20836 20838 20840 20842 20844 20846 20848 20850 20852 20854 20856 20858 20860 20862 20864 20866 20868 20870 20872 20874 20876 20878 20880 20882 20884 20886 20888 20890 20892 20894 20896 20898 20900 20902 20904 20906 20908 20910 20912 20914 20916 20918 20920 20922 20924 20926 20928 20930 20932 20934 20936 20938 20940 20942 20944 20946 20948 20950 20952 20954 20956 20958 20960 20962 20964 20966 20968 20970 20972 20974 20976 20978 20980 20982 20984 20986 20988 20990 20992 20994 20996 20998 21000 21002 21004 21006 21008 21010 21012 21014 21016 21018 21020 21022 21024 21026 21028 21030 21032 21034 21036 21038 21040 21042 21044 21046 21048 21050 21052 21054 21056 21058 21060 21062 21064 21066 21068 21070 21072 21074 21076 21078 21080 21082 21084 21086 21088 21090 21092 21094 21096 21098 21100 21102 21104 21106 21108 21110 21112 21114 21116 21118 21120 21122 21124 21126 21128 21130 21132 21134 21136 21138 21140 21142 21144 21146 21148 21150 21152 21154 21156 21158 21160 21162 21164 21166 21168 21170 21172 21174 21176 21178 21180 21182 21184 21186 21188 21190 21192 21194 21196 21198 21200 21202 21204 21206 21208 21210 21212 21214 21216 21218 21220 21222 21224 21226 21228 21230 21232 21234 21236 21238 21240 21242 21244 21246 21248 21250 21252 21254 21256 21258 21260 21262 21264 21266 21268 21270 21272 21274 21276 21278 21280 21282 21284 21286 21288 21290 21292 21294 21296 21298 21300 21302 21304 21306 21308 21310 21312 21314 21316 21318 21320 21322 21324 21326 21328 21330 21332 21334 21336 21338 21340 21342 21344 21346 21348 21350 21352 21354 21356 21358 21360 21362 21364 21366 21368 21370 21372 21374 21376 21378 21380 21382 21384 21386 21388 21390 21392 21394 21396 21398 21400 21402 21404 21406 21408 21410 21412 21414 21416 21418 21420 21422 21424 21426 21428 21430 21432 21434 21436 21438 21440 21442 21444 21446 21448 21450 21452 21454 21456 21458 21460 21462 21464 21466 21468 21470 21472 21474 21476 21478 21480 21482 21484 21486 21488 21490 21492 21494 21496 21498 21500 21502 21504 21506 21508 21510 21512 21514 21516 21518 21520 21522 21524 21526 21528 21530 21532 21534 21536 21538 21540 21542 21544 21546 21548 21550 21552 21554 21556 21558 21560 21562 21564 21566 21568 21570 21572 21574 21576 21578 21580 21582 21584 21586 21588 21590 21592 21594 21596 21598 21600 21602 21604 21606 21608 21610 21612 21614 21616 21618 21620 21622 21624 21626 21628 21630 21632 21634 21636 21638 21640 21642 21644 21646 21648 21650 21652 21654 21656 21658 21660 21662 21664 21666 21668 21670 21672 21674 21676 21678 21680 21682 21684 21686 21688 21690 21692 21694 21696 21698 21700 21702 21704 21706 21708 21710 21712 21714 21716 21718 21720 21722 21724 21726 21728 21730 21732 21734 21736 21738 21740 21742 21744 21746 21748 21750 21752 21754 21756 21758 21760 21762 21764 21766 21768 21770 21772 21774 21776 21778 21780 21782 21784 21786 21788 21790 21792 21794 21796 21798 21800 21802 21804 21806 21808 21810 21812 21814 21816 21818 21820 21822 21824 21826 21828 21830 21832 21834 21836 21838 21840 21842 21844 21846 21848 21850 21852 21854 21856 21858 21860 21862 21864 21866 21868 21870 21872 21874 21876 21878 21880 21882 21884 21886 21888 21890 21892 21894 21896 21898 21900 21902 21904 21906 21908 21910 21912 21914 21916 21918 21920 21922 21924 21926 21928 21930 21932 21934 21936 21938 21940 21942 21944 21946 21948 21950 21952 21954 21956 21958 21960 21962 21964 21966 21968 21970 21972 21974 21976 21978 21980 21982 21984 21986 21988 21990 21992 21994 21996 21998 22000 22002 22004 22006 22008 22010 22012 22014 22016 22018 22020 22022 22024 22026 22028 22030 22032 22034 22036 22038 22040 22042 22044 22046 22048 22050 22052 22054 22056 22058 22060 22062 22064 22066 22068 22070 22072 22074 22076 22078 22080 22082 22084 22086 22088 22090 22092 22094 22096 22098 22100 22102 22104 22106 22108 22110 22112 22114 22116 22118 22120 22122 22124 22126 22128 22130 22132 22134 22136 22138 22140 22142 22144 22146 22148 22150 22152 22154 22156 22158 22160 22162 22164 22166 22168 22170 22172 22174 22176 22178 22180 22182 22184 22186 22188 22190 22192 22194 22196 22198 22200 22202 22204 22206 22208 22210 22212 22214 22216 22218 22220 22222 22224 22226 22228 22230 22232 22234 22236 22238 22240 22242 22244 22246 22248 22250 22252 22254 22256 22258 22260 22262 22264 22266 22268 22270 22272 22274 22276 22278 22280 22282 22284 22286 22288 22290 22292 22294 22296 22298 22300 22302 22304 22306 22308 22310 22312 22314 22316 22318 22320 22322 22324 22326 22328 22330 22332 22334 22336 22338 22340 22342 22344 22346 22348 22350 22352 22354 22356 22358 22360 22362 22364 22366 22368 22370 22372 22374 22376 22378 22380 22382 22384 22386 22388 22390 22392 22394 22396 22398 22400 22402 22404 22406 22408 22410 22412 22414 22416 22418 22420 22422 22424 22426 22428 22430 22432 22434 22436 22438 22440 22442 22444 22446 22448 22450 22452 22454 22456 22458 22460 22462 22464 22466 22468 22470 22472 22474 22476 22478 22480 22482 22484 22486 22488 22490 22492 22494 22496 22498 22500 22502 22504 22506 22508 22510 22512 22514 22516 22518 22520 22522 22524 22526 22528 22530 22532 22534 22536 22538 22540 22542 22544 22546 22548 22550 22552 22554 22556 22558 22560 22562 22564 22566 22568 22570 22572 22574 22576 22578 22580 22582 22584 22586 22588 22590 22592 22594 22596 22598 22600 22602 22604 22606 22608 22610 22612 22614 22616 22618 22620 22622 22624 22626 22628 22630 22632 22634 22636 22638 22640 22642 22644 22646 22648 22650 22652 22654 22656 22658 22660 22662 22664 22666 22668 22670 22672 22674 22676 22678 22680 22682 22684 22686 22688 22690 22692 22694 22696 22698 22700 22702 22704 22706 22708 22710 22712 22714 22716 22718 22720 22722 22724 22726 22728 22730 22732 22734 22736 22738 22740 22742 22744 22746 22748 22750 22752 22754 22756 22758 22760 22762 22764 22766 22768 22770 22772 22774 22776 22778 22780 22782 22784 22786 22788 22790 22792 22794 22796 22798 22800 22802 22804 22806 22808 22810 22812 22814 22816 22818 22820 22822 22824 22826 22828 22830 22832 22834 22836 22838 22840 22842 22844 22846 22848 22850 22852 22854 22856 22858 22860 22862 22864 22866 22868 22870 22872 22874 22876 22878 22880 22882 22884 22886 22888 22890 22892 22894 22896 22898 22900 22902 22904 22906 22908 22910 22912 22914 22916 22918 22920 22922 22924 22926 22928 22930 22932 22934 22936 22938 22940 22942 22944 22946 22948 22950 22952 22954 22956 22958 22960 22962 22964 22966 22968 22970 22972 22974 22976 22978 22980 22982 22984 22986 22988 22990 22992 22994 22996 22998 23000 23002 23004 23006 23008 23010 23012 23014 23016 23018 23020 23022 23024 23026 23028 23030 23032 23034 23036 23038 23040 23042 23044 23046 23048 23050 23052 23054 23056 23058 23060 23062 23064 23066 23068 23070 23072 23074 23076 23078 23080 23082 23084 23086 23088 23090 23092 23094 23096 23098 23100 23102 23104 23106 23108 23110 23112 23114 23116 23118 23120 23122 23124 23126 23128 23130 23132 23134 23136 23138 23140 23142 23144 23146 23148 23150 23152 23154 23156 23158 23160 23162 23164 23166 23168 23170 23172 23174 23176 23178 23180 23182 23184 23186 23188 23190 23192 23194 23196 23198 23200 23202 23204 23206 23208 23210 23212 23214 23216 23218 23220 23222 23224 23226 23228 23230 23232 23234 23236 23238 23240 23242 23244 23246 23248 23250 23252 23254 23256 23258 23260 23262 23264 23266 23268 23270 23272 23274 23276 23278 23280 23282 23284 23286 23288 23290 23292 23294 23296 23298 23300 23302 23304 23306 23308 23310 23312 23314 23316 23318 23320 23322 23324 23326 23328 23330 23332 23334 23336 23338 23340 23342 23344 23346 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 101 103 105 107 109 111 113 115 117 119 121 123 125 127 129 131 133 135 137 139 141 143 145 147 149 151 153 155 157 159 161 163 165 167 169 171 173 175 177 179 181 183 185 187 189 191 193 195 197 199 201 203 205 207 209 211 213 215 217 219 221 223 225 227 229 231 233 235 237 239 241 243 245 247 249 251 253 255 257 259 261 263 265 267 269 271 273 275 277 279 281 283 285 287 289 291 293 295 297 299 301 303 305 307 309 311 313 315 317 319 321 323 325 327 329 331 333 335 337 339 341 343 345 347 349 351 353 355 357 359 361 363 365 367 369 371 373 375 377 379 381 383 385 387 389 391 393 395 397 399 401 403 405 407 409 411 413 415 417 419 421 423 425 427 429 431 433 435 437 439 441 443 445 447 449 451 453 455 457 459 461 463 465 467 469 471 473 475 477 479 481 483 485 487 489 491 493 495 497 499 501 503 505 507 509 511 513 515 517 519 521 523 525 527 529 531 533 535 537 539 541 543 545 547 549 551 553 555 557 559 561 563 565 567 569 571 573 575 577 579 581 583 585 587 589 591 593 595 597 599 601 603 605 607 609 611 613 615 617 619 621 623 625 627 629 631 633 635 637 639 641 643 645 647 649 651 653 655 657 659 661 663 665 667 669 671 673 675 677 679 681 683 685 687 689 691 693 695 697 699 701 703 705 707 709 711 713 715 717 719 721 723 725 727 729 731 733 735 737 739 741 743 745 747 749 751 753 755 757 759 761 763 765 767 769 771 773 775 777 779 781 783 785 787 789 791 793 795 797 799 801 803 805 807 809 811 813 815 817 819 821 823 825 827 829 831 833 835 837 839 841 843 845 847 849 851 853 855 857 859 861 863 865 867 869 871 873 875 877 879 881 883 885 887 889 891 893 895 897 899 901 903 905 907 909 911 913 915 917 919 921 923 925 927 929 931 933 935 937 939 941 943 945 947 949 951 953 955 957 959 961 963 965 967 969 971 973 975 977 979 981 983 985 987 989 991 993 995 997 999 1001 1003 1005 1007 1009 1011 1013 1015 1017 1019 1021 1023 1025 1027 1029 1031 1033 1035 1037 1039 1041 1043 1045 1047 1049 1051 1053 1055 1057 1059 1061 1063 1065 1067 1069 1071 1073 1075 1077 1079 1081 1083 1085 1087 1089 1091 1093 1095 1097 1099 1101 1103 1105 1107 1109 1111 1113 1115 1117 1119 1121 1123 1125 1127 1129 1131 1133 1135 1137 1139 1141 1143 1145 1147 1149 1151 1153 1155 1157 1159 1161 1163 1165 1167 1169 1171 1173 1175 1177 1179 1181 1183 1185 1187 1189 1191 1193 1195 1197 1199 1201 1203 1205 1207 1209 1211 1213 1215 1217 1219 1221 1223 1225 1227 1229 1231 1233 1235 1237 1239 1241 1243 1245 1247 1249 1251 1253 1255 1257 1259 1261 1263 1265 1267 1269 1271 1273 1275 1277 1279 1281 1283 1285 1287 1289 1291 1293 1295 1297 1299 1301 1303 1305 1307 1309 1311 1313 1315 1317 1319 1321 1323 1325 1327 1329 1331 1333 1335 1337 1339 1341 1343 1345 1347 1349 1351 1353 1355 1357 1359 1361 1363 1365 1367 1369 1371 1373 1375 1377 1379 1381 1383 1385 1387 1389 1391 1393 1395 1397 1399 1401 1403 1405 1407 1409 1411 1413 1415 1417 1419 1421 1423 1425 1427 1429 1431 1433 1435 1437 1439 1441 1443 1445 1447 1449 1451 1453 1455 1457 1459 1461 1463 1465 1467 1469 1471 1473 1475 1477 1479 1481 1483 1485 1487 1489 1491 1493 1495 1497 1499 1501 1503 1505 1507 1509 1511 1513 1515 1517 1519 1521 1523 1525 1527 1529 1531 1533 1535 1537 1539 1541 1543 1545 1547 1549 1551 1553 1555 1557 1559 1561 1563 1565 1567 1569 1571 1573 1575 1577 1579 1581 1583 1585 1587 1589 1591 1593 1595 1597 1599 1601 1603 1605 1607 1609 1611 1613 1615 1617 1619 1621 1623 1625 1627 1629 1631 1633 1635 1637 1639 1641 1643 1645 1647 1649 1651 1653 1655 1657 1659 1661 1663 1665 1667 1669 1671 1673 1675 1677 1679 1681 1683 1685 1687 1689 1691 1693 1695 1697 1699 1701 1703 1705 1707 1709 1711 1713 1715 1717 1719 1721 1723 1725 1727 1729 1731 1733 1735 1737 1739 1741 1743 1745 1747 1749 1751 1753 1755 1757 1759 1761 1763 1765 1767 1769 1771 1773 1775 1777 1779 1781 1783 1785 1787 1789 1791 1793 1795 1797 1799 1801 1803 1805 1807 1809 1811 1813 1815 1817 1819 1821 1823 1825 1827 1829 1831 1833 1835 1837 1839 1841 1843 1845 1847 1849 1851 1853 1855 1857 1859 1861 1863 1865 1867 1869 1871 1873 1875 1877 1879 1881 1883 1885 1887 1889 1891 1893 1895 1897 1899 1901 1903 1905 1907 1909 1911 1913 1915 1917 1919 1921 1923 1925 1927 1929 1931 1933 1935 1937 1939 1941 1943 1945 1947 1949 1951 1953 1955 1957 1959 1961 1963 1965 1967 1969 1971 1973 1975 1977 1979 1981 1983 1985 1987 1989 1991 1993 1995 1997 1999 2001 2003 2005 2007 2009 2011 2013 2015 2017 2019 2021 2023 2025 2027 2029 2031 2033 2035 2037 2039 2041 2043 2045 2047 2049 2051 2053 2055 2057 2059 2061 2063 2065 2067 2069 2071 2073 2075 2077 2079 2081 2083 2085 2087 2089 2091 2093 2095 2097 2099 2101 2103 2105 2107 2109 2111 2113 2115 2117 2119 2121 2123 2125 2127 2129 2131 2133 2135 2137 2139 2141 2143 2145 2147 2149 2151 2153 2155 2157 2159 2161 2163 2165 2167 2169 2171 2173 2175 2177 2179 2181 2183 2185 2187 2189 2191 2193 2195 2197 2199 2201 2203 2205 2207 2209 2211 2213 2215 2217 2219 2221 2223 2225 2227 2229 2231 2233 2235 2237 2239 2241 2243 2245 2247 2249 2251 2253 2255 2257 2259 2261 2263 2265 2267 2269 2271 2273 2275 2277 2279 2281 2283 2285 2287 2289 2291 2293 2295 2297 2299 2301 2303 2305 2307 2309 2311 2313 2315 2317 2319 2321 2323 2325 2327 2329 2331 2333 2335 2337 2339 2341 2343 2345 2347 2349 2351 2353 2355 2357 2359 2361 2363 2365 2367 2369 2371 2373 2375 2377 2379 2381 2383 2385 2387 2389 2391 2393 2395 2397 2399 2401 2403 2405 2407 2409 2411 2413 2415 2417 2419 2421 2423 2425 2427 2429 2431 2433 2435 2437 2439 2441 2443 2445 2447 2449 2451 2453 2455 2457 2459 2461 2463 2465 2467 2469 2471 2473 2475 2477 2479 2481 2483 2485 2487 2489 2491 2493 2495 2497 2499 2501 2503 2505 2507 2509 2511 2513 2515 2517 2519 2521 2523 2525 2527 2529 2531 2533 2535 2537 2539 2541 2543 2545 2547 2549 2551 2553 2555 2557 2559 2561 2563 2565 2567 2569 2571 2573 2575 2577 2579 2581 2583 2585 2587 2589 2591 2593 2595 2597 2599 2601 2603 2605 2607 2609 2611 2613 2615 2617 2619 2621 2623 2625 2627 2629 2631 2633 2635 2637 2639 2641 2643 2645 2647 2649 2651 2653 2655 2657 2659 2661 2663 2665 2667 2669 2671 2673 2675 2677 2679 2681 2683 2685 2687 2689 2691 2693 2695 2697 2699 2701 2703 2705 2707 2709 2711 2713 2715 2717 2719 2721 2723 2725 2727 2729 2731 2733 2735 2737 2739 2741 2743 2745 2747 2749 2751 2753 2755 2757 2759 2761 2763 2765 2767 2769 2771 2773 2775 2777 2779 2781 2783 2785 2787 2789 2791 2793 2795 2797 2799 2801 2803 2805 2807 2809 2811 2813 2815 2817 2819 2821 2823 2825 2827 2829 2831 2833 2835 2837 2839 2841 2843 2845 2847 2849 2851 2853 2855 2857 2859 2861 2863 2865 2867 2869 2871 2873 2875 2877 2879 2881 2883 2885 2887 2889 2891 2893 2895 2897 2899 2901 2903 2905 2907 2909 2911 2913 2915 2917 2919 2921 2923 2925 2927 2929 2931 2933 2935 2937 2939 2941 2943 2945 2947 2949 2951 2953 2955 2957 2959 2961 2963 2965 2967 2969 2971 2973 2975 2977 2979 2981 2983 2985 2987 2989 2991 2993 2995 2997 2999 3001 3003 3005 3007 3009 3011 3013 3015 3017 3019 3021 3023 3025 3027 3029 3031 3033 3035 3037 3039 3041 3043 3045 3047 3049 3051 3053 3055 3057 3059 3061 3063 3065 3067 3069 3071 3073 3075 3077 3079 3081 3083 3085 3087 3089 3091 3093 3095 3097 3099 3101 3103 3105 3107 3109 3111 3113 3115 3117 3119 3121 3123 3125 3127 3129 3131 3133 3135 3137 3139 3141 3143 3145 3147 3149 3151 3153 3155 3157 3159 3161 3163 3165 3167 3169 3171 3173 3175 3177 3179 3181 3183 3185 3187 3189 3191 3193 3195 3197 3199 3201 3203 3205 3207 3209 3211 3213 3215 3217 3219 3221 3223 3225 3227 3229 3231 3233 3235 3237 3239 3241 3243 3245 3247 3249 3251 3253 3255 3257 3259 3261 3263 3265 3267 3269 3271 3273 3275 3277 3279 3281 3283 3285 3287 3289 3291 3293 3295 3297 3299 3301 3303 3305 3307 3309 3311 3313 3315 3317 3319 3321 3323 3325 3327 3329 3331 3333 3335 3337 3339 3341 3343 3345 3347 3349 3351 3353 3355 3357 3359 3361 3363 3365 3367 3369 3371 3373 3375 3377 3379 3381 3383 3385 3387 3389 3391 3393 3395 3397 3399 3401 3403 3405 3407 3409 3411 3413 3415 3417 3419 3421 3423 3425 3427 3429 3431 3433 3435 3437 3439 3441 3443 3445 3447 3449 3451 3453 3455 3457 3459 3461 3463 3465 3467 3469 3471 3473 3475 3477 3479 3481 3483 3485 3487 3489 3491 3493 3495 3497 3499 3501 3503 3505 3507 3509 3511 3513 3515 3517 3519 3521 3523 3525 3527 3529 3531 3533 3535 3537 3539 3541 3543 3545 3547 3549 3551 3553 3555 3557 3559 3561 3563 3565 3567 3569 3571 3573 3575 3577 3579 3581 3583 3585 3587 3589 3591 3593 3595 3597 3599 3601 3603 3605 3607 3609 3611 3613 3615 3617 3619 3621 3623 3625 3627 3629 3631 3633 3635 3637 3639 3641 3643 3645 3647 3649 3651 3653 3655 3657 3659 3661 3663 3665 3667 3669 3671 3673 3675 3677 3679 3681 3683 3685 3687 3689 3691 3693 3695 3697 3699 3701 3703 3705 3707 3709 3711 3713 3715 3717 3719 3721 3723 3725 3727 3729 3731 3733 3735 3737 3739 3741 3743 3745 3747 3749 3751 3753 3755 3757 3759 3761 3763 3765 3767 3769 3771 3773 3775 3777 3779 3781 3783 3785 3787 3789 3791 3793 3795 3797 3799 3801 3803 3805 3807 3809 3811 3813 3815 3817 3819 3821 3823 3825 3827 3829 3831 3833 3835 3837 3839 3841 3843 3845 3847 3849 3851 3853 3855 3857 3859 3861 3863 3865 3867 3869 3871 3873 3875 3877 3879 3881 3883 3885 3887 3889 3891 3893 3895 3897 3899 3901 3903 3905 3907 3909 3911 3913 3915 3917 3919 3921 3923 3925 3927 3929 3931 3933 3935 3937 3939 3941 3943 3945 3947 3949 3951 3953 3955 3957 3959 3961 3963 3965 3967 3969 3971 3973 3975 3977 3979 3981 3983 3985 3987 3989 3991 3993 3995 3997 3999 4001 4003 4005 4007 4009 4011 4013 4015 4017 4019 4021 4023 4025 4027 4029 4031 4033 4035 4037 4039 4041 4043 4045 4047 4049 4051 4053 4055 4057 4059 4061 4063 4065 4067 4069 4071 4073 4075 4077 4079 4081 4083 4085 4087 4089 4091 4093 4095 4097 4099 4101 4103 4105 4107 4109 4111 4113 4115 4117 4119 4121 4123 4125 4127 4129 4131 4133 4135 4137 4139 4141 4143 4145 4147 4149 4151 4153 4155 4157 4159 4161 4163 4165 4167 4169 4171 4173 4175 4177 4179 4181 4183 4185 4187 4189 4191 4193 4195 4197 4199 4201 4203 4205 4207 4209 4211 4213 4215 4217 4219 4221 4223 4225 4227 4229 4231 4233 4235 4237 4239 4241 4243 4245 4247 4249 4251 4253 4255 4257 4259 4261 4263 4265 4267 4269 4271 4273 4275 4277 4279 4281 4283 4285 4287 4289 4291 4293 4295 4297 4299 4301 4303 4305 4307 4309 4311 4313 4315 4317 4319 4321 4323 4325 4327 4329 4331 4333 4335 4337 4339 4341 4343 4345 4347 4349 4351 4353 4355 4357 4359 4361 4363 4365 4367 4369 4371 4373 4375 4377 4379 4381 4383 4385 4387 4389 4391 4393 4395 4397 4399 4401 4403 4405 4407 4409 4411 4413 4415 4417 4419 4421 4423 4425 4427 4429 4431 4433 4435 4437 4439 4441 4443 4445 4447 4449 4451 4453 4455 4457 4459 4461 4463 4465 4467 4469 4471 4473 4475 4477 4479 4481 4483 4485 4487 4489 4491 4493 4495 4497 4499 4501 4503 4505 4507 4509 4511 4513 4515 4517 4519 4521 4523 4525 4527 4529 4531 4533 4535 4537 4539 4541 4543 4545 4547 4549 4551 4553 4555 4557 4559 4561 4563 4565 4567 4569 4571 4573 4575 4577 4579 4581 4583 4585 4587 4589 4591 4593 4595 4597 4599 4601 4603 4605 4607 4609 4611 4613 4615 4617 4619 4621 4623 4625 4627 4629 4631 4633 4635 4637 4639 4641 4643 4645 4647 4649 4651 4653 4655 4657 4659 4661 4663 4665 4667 4669 4671 4673 4675 4677 4679 4681 4683 4685 4687 4689 4691 4693 4695 4697 4699 4701 4703 4705 4707 4709 4711 4713 4715 4717 4719 4721 4723 4725 4727 4729 4731 4733 4735 4737 4739 4741 4743 4745 4747 4749 4751 4753 4755 4757 4759 4761 4763 4765 4767 4769 4771 4773 4775 4777 4779 4781 4783 4785 4787 4789 4791 4793 4795 4797 4799 4801 4803 4805 4807 4809 4811 4813 4815 4817 4819 4821 4823 4825 4827 4829 4831 4833 4835 4837 4839 4841 4843 4845 4847 4849 4851 4853 4855 4857 4859 4861 4863 4865 4867 4869 4871 4873 4875 4877 4879 4881 4883 4885 4887 4889 4891 4893 4895 4897 4899 4901 4903 4905 4907 4909 4911 4913 4915 4917 4919 4921 4923 4925 4927 4929 4931 4933 4935 4937 4939 4941 4943 4945 4947 4949 4951 4953 4955 4957 4959 4961 4963 4965 4967 4969 4971 4973 4975 4977 4979 4981 4983 4985 4987 4989 4991 4993 4995 4997 4999 5001 5003 5005 5007 5009 5011 5013 5015 5017 5019 5021 5023 5025 5027 5029 5031 5033 5035 5037 5039 5041 5043 5045 5047 5049 5051 5053 5055 5057 5059 5061 5063 5065 5067 5069 5071 5073 5075 5077 5079 5081 5083 5085 5087 5089 5091 5093 5095 5097 5099 5101 5103 5105 5107 5109 5111 5113 5115 5117 5119 5121 5123 5125 5127 5129 5131 5133 5135 5137 5139 5141 5143 5145 5147 5149 5151 5153 5155 5157 5159 5161 5163 5165 5167 5169 5171 5173 5175 5177 5179 5181 5183 5185 5187 5189 5191 5193 5195 5197 5199 5201 5203 5205 5207 5209 5211 5213 5215 5217 5219 5221 5223 5225 5227 5229 5231 5233 5235 5237 5239 5241 5243 5245 5247 5249 5251 5253 5255 5257 5259 5261 5263 5265 5267 5269 5271 5273 5275 5277 5279 5281 5283 5285 5287 5289 5291 5293 5295 5297 5299 5301 5303 5305 5307 5309 5311 5313 5315 5317 5319 5321 5323 5325 5327 5329 5331 5333 5335 5337 5339 5341 5343 5345 5347 5349 5351 5353 5355 5357 5359 5361 5363 5365 5367 5369 5371 5373 5375 5377 5379 5381 5383 5385 5387 5389 5391 5393 5395 5397 5399 5401 5403 5405 5407 5409 5411 5413 5415 5417 5419 5421 5423 5425 5427 5429 5431 5433 5435 5437 5439 5441 5443 5445 5447 5449 5451 5453 5455 5457 5459 5461 5463 5465 5467 5469 5471 5473 5475 5477 5479 5481 5483 5485 5487 5489 5491 5493 5495 5497 5499 5501 5503 5505 5507 5509 5511 5513 5515 5517 5519 5521 5523 5525 5527 5529 5531 5533 5535 5537 5539 5541 5543 5545 5547 5549 5551 5553 5555 5557 5559 5561 5563 5565 5567 5569 5571 5573 5575 5577 5579 5581 5583 5585 5587 5589 5591 5593 5595 5597 5599 5601 5603 5605 5607 5609 5611 5613 5615 5617 5619 5621 5623 5625 5627 5629 5631 5633 5635 5637 5639 5641 5643 5645 5647 5649 5651 5653 5655 5657 5659 5661 5663 5665 5667 5669 5671 5673 5675 5677 5679 5681 5683 5685 5687 5689 5691 5693 5695 5697 5699 5701 5703 5705 5707 5709 5711 5713 5715 5717 5719 5721 5723 5725 5727 5729 5731 5733 5735 5737 5739 5741 5743 5745 5747 5749 5751 5753 5755 5757 5759 5761 5763 5765 5767 5769 5771 5773 5775 5777 5779 5781 5783 5785 5787 5789 5791 5793 5795 5797 5799 5801 5803 5805 5807 5809 5811 5813 5815 5817 5819 5821 5823 5825 5827 5829 5831 5833 5835 5837 5839 5841 5843 5845 5847 5849 5851 5853 5855 5857 5859 5861 5863 5865 5867 5869 5871 5873 5875 5877 5879 5881 5883 5885 5887 5889 5891 5893 5895 5897 5899 5901 5903 5905 5907 5909 5911 5913 5915 5917 5919 5921 5923 5925 5927 5929 5931 5933 5935 5937 5939 5941 5943 5945 5947 5949 5951 5953 5955 5957 5959 5961 5963 5965 5967 5969 5971 5973 5975 5977 5979 5981 5983 5985 5987 5989 5991 5993 5995 5997 5999 6001 6003 6005 6007 6009 6011 6013 6015 6017 6019 6021 6023 6025 6027 6029 6031 6033 6035 6037 6039 6041 6043 6045 6047 6049 6051 6053 6055 6057 6059 6061 6063 6065 6067 6069 6071 6073 6075 6077 6079 6081 6083 6085 6087 6089 6091 6093 6095 6097 6099 6101 6103 6105 6107 6109 6111 6113 6115 6117 6119 6121 6123 6125 6127 6129 6131 6133 6135 6137 6139 6141 6143 6145 6147 6149 6151 6153 6155 6157 6159 6161 6163 6165 6167 6169 6171 6173 6175 6177 6179 6181 6183 6185 6187 6189 6191 6193 6195 6197 6199 6201 6203 6205 6207 6209 6211 6213 6215 6217 6219 6221 6223 6225 6227 6229 6231 6233 6235 6237 6239 6241 6243 6245 6247 6249 6251 6253 6255 6257 6259 6261 6263 6265 6267 6269 6271 6273 6275 6277 6279 6281 6283 6285 6287 6289 6291 6293 6295 6297 6299 6301 6303 6305 6307 6309 6311 6313 6315 6317 6319 6321 6323 6325 6327 6329 6331 6333 6335 6337 6339 6341 6343 6345 6347 6349 6351 6353 6355 6357 6359 6361 6363 6365 6367 6369 6371 6373 6375 6377 6379 6381 6383 6385 6387 6389 6391 6393 6395 6397 6399 6401 6403 6405 6407 6409 6411 6413 6415 6417 6419 6421 6423 6425 6427 6429 6431 6433 6435 6437 6439 6441 6443 6445 6447 6449 6451 6453 6455 6457 6459 6461 6463 6465 6467 6469 6471 6473 6475 6477 6479 6481 6483 6485 6487 6489 6491 6493 6495 6497 6499 6501 6503 6505 6507 6509 6511 6513 6515 6517 6519 6521 6523 6525 6527 6529 6531 6533 6535 6537 6539 6541 6543 6545 6547 6549 6551 6553 6555 6557 6559 6561 6563 6565 6567 6569 6571 6573 6575 6577 6579 6581 6583 6585 6587 6589 6591 6593 6595 6597 6599 6601 6603 6605 6607 6609 6611 6613 6615 6617 6619 6621 6623 6625 6627 6629 6631 6633 6635 6637 6639 6641 6643 6645 6647 6649 6651 6653 6655 6657 6659 6661 6663 6665 6667 6669 6671 6673 6675 6677 6679 6681 6683 6685 6687 6689 6691 6693 6695 6697 6699 6701 6703 6705 6707 6709 6711 6713 6715 6717 6719 6721 6723 6725 6727 6729 6731 6733 6735 6737 6739 6741 6743 6745 6747 6749 6751 6753 6755 6757 6759 6761 6763 6765 6767 6769 6771 6773 6775 6777 6779 6781 6783 6785 6787 6789 6791 6793 6795 6797 6799 6801 6803 6805 6807 6809 6811 6813 6815 6817 6819 6821 6823 6825 6827 6829 6831 6833 6835 6837 6839 6841 6843 6845 6847 6849 6851 6853 6855 6857 6859 6861 6863 6865 6867 6869 6871 6873 6875 6877 6879 6881 6883 6885 6887 6889 6891 6893 6895 6897 6899 6901 6903 6905 6907 6909 6911 6913 6915 6917 6919 6921 6923 6925 6927 6929 6931 6933 6935 6937 6939 6941 6943 6945 6947 6949 6951 6953 6955 6957 6959 6961 6963 6965 6967 6969 6971 6973 6975 6977 6979 6981 6983 6985 6987 6989 6991 6993 6995 6997 6999 7001 7003 7005 7007 7009 7011 7013 7015 7017 7019 7021 7023 7025 7027 7029 7031 7033 7035 7037 7039 7041 7043 7045 7047 7049 7051 7053 7055 7057 7059 7061 7063 7065 7067 7069 7071 7073 7075 7077 7079 7081 7083 7085 7087 7089 7091 7093 7095 7097 7099 7101 7103 7105 7107 7109 7111 7113 7115 7117 7119 7121 7123 7125 7127 7129 7131 7133 7135 7137 7139 7141 7143 7145 7147 7149 7151 7153 7155 7157 7159 7161 7163 7165 7167 7169 7171 7173 7175 7177 7179 7181 7183 7185 7187 7189 7191 7193 7195 7197 7199 7201 7203 7205 7207 7209 7211 7213 7215 7217 7219 7221 7223 7225 7227 7229 7231 7233 7235 7237 7239 7241 7243 7245 7247 7249 7251 7253 7255 7257 7259 7261 7263 7265 7267 7269 7271 7273 7275 7277 7279 7281 7283 7285 7287 7289 7291 7293 7295 7297 7299 7301 7303 7305 7307 7309 7311 7313 7315 7317 7319 7321 7323 7325 7327 7329 7331 7333 7335 7337 7339 7341 7343 7345 7347 7349 7351 7353 7355 7357 7359 7361 7363 7365 7367 7369 7371 7373 7375 7377 7379 7381 7383 7385 7387 7389 7391 7393 7395 7397 7399 7401 7403 7405 7407 7409 7411 7413 7415 7417 7419 7421 7423 7425 7427 7429 7431 7433 7435 7437 7439 7441 7443 7445 7447 7449 7451 7453 7455 7457 7459 7461 7463 7465 7467 7469 7471 7473 7475 7477 7479 7481 7483 7485 7487 7489 7491 7493 7495 7497 7499 7501 7503 7505 7507 7509 7511 7513 7515 7517 7519 7521 7523 7525 7527 7529 7531 7533 7535 7537 7539 7541 7543 7545 7547 7549 7551 7553 7555 7557 7559 7561 7563 7565 7567 7569 7571 7573 7575 7577 7579 7581 7583 7585 7587 7589 7591 7593 7595 7597 7599 7601 7603 7605 7607 7609 7611 7613 7615 7617 7619 7621 7623 7625 7627 7629 7631 7633 7635 7637 7639 7641 7643 7645 7647 7649 7651 7653 7655 7657 7659 7661 7663 7665 7667 7669 7671 7673 7675 7677 7679 7681 7683 7685 7687 7689 7691 7693 7695 7697 7699 7701 7703 7705 7707 7709 7711 7713 7715 7717 7719 7721 7723 7725 7727 7729 7731 7733 7735 7737 7739 7741 7743 7745 7747 7749 7751 7753 7755 7757 7759 7761 7763 7765 7767 7769 7771 7773 7775 7777 7779 7781 7783 7785 7787 7789 7791 7793 7795 7797 7799 7801 7803 7805 7807 7809 7811 7813 7815 7817 7819 7821 7823 7825 7827 7829 7831 7833 7835 7837 7839 7841 7843 7845 7847 7849 7851 7853 7855 7857 7859 7861 7863 7865 7867 7869 7871 7873 7875 7877 7879 7881 7883 7885 7887 7889 7891 7893 7895 7897 7899 7901 7903 7905 7907 7909 7911 7913 7915 7917 7919 7921 7923 7925 7927 7929 7931 7933 7935 7937 7939 7941 7943 7945 7947 7949 7951 7953 7955 7957 7959 7961 7963 7965 7967 7969 7971 7973 7975 7977 7979 7981 7983 7985 7987 7989 7991 7993 7995 7997 7999 8001 8003 8005 8007 8009 8011 8013 8015 8017 8019 8021 8023 8025 8027 8029 8031 8033 8035 8037 8039 8041 8043 8045 8047 8049 8051 8053 8055 8057 8059 8061 8063 8065 8067 8069 8071 8073 8075 8077 8079 8081 8083 8085 8087 8089 8091 8093 8095 8097 8099 8101 8103 8105 8107 8109 8111 8113 8115 8117 8119 8121 8123 8125 8127 8129 8131 8133 8135 8137 8139 8141 8143 8145 8147 8149 8151 8153 8155 8157 8159 8161 8163 8165 8167 8169 8171 8173 8175 8177 8179 8181 8183 8185 8187 8189 8191 8193 8195 8197 8199 8201 8203 8205 8207 8209 8211 8213 8215 8217 8219 8221 8223 8225 8227 8229 8231 8233 8235 8237 8239 8241 8243 8245 8247 8249 8251 8253 8255 8257 8259 8261 8263 8265 8267 8269 8271 8273 8275 8277 8279 8281 8283 8285 8287 8289 8291 8293 8295 8297 8299 8301 8303 8305 8307 8309 8311 8313 8315 8317 8319 8321 8323 8325 8327 8329 8331 8333 8335 8337 8339 8341 8343 8345 8347 8349 8351 8353 8355 8357 8359 8361 8363 8365 8367 8369 8371 8373 8375 8377 8379 8381 8383 8385 8387 8389 8391 8393 8395 8397 8399 8401 8403 8405 8407 8409 8411 8413 8415 8417 8419 8421 8423 8425 8427 8429 8431 8433 8435 8437 8439 8441 8443 8445 8447 8449 8451 8453 8455 8457 8459 8461 8463 8465 8467 8469 8471 8473 8475 8477 8479 8481 8483 8485 8487 8489 8491 8493 8495 8497 8499 8501 8503 8505 8507 8509 8511 8513 8515 8517 8519 8521 8523 8525 8527 8529 8531 8533 8535 8537 8539 8541 8543 8545 8547 8549 8551 8553 8555 8557 8559 8561 8563 8565 8567 8569 8571 8573 8575 8577 8579 8581 8583 8585 8587 8589 8591 8593 8595 8597 8599 8601 8603 8605 8607 8609 8611 8613 8615 8617 8619 8621 8623 8625 8627 8629 8631 8633 8635 8637 8639 8641 8643 8645 8647 8649 8651 8653 8655 8657 8659 8661 8663 8665 8667 8669 8671 8673 8675 8677 8679 8681 8683 8685 8687 8689 8691 8693 8695 8697 8699 8701 8703 8705 8707 8709 8711 8713 8715 8717 8719 8721 8723 8725 8727 8729 8731 8733 8735 8737 8739 8741 8743 8745 8747 8749 8751 8753 8755 8757 8759 8761 8763 8765 8767 8769 8771 8773 8775 8777 8779 8781 8783 8785 8787 8789 8791 8793 8795 8797 8799 8801 8803 8805 8807 8809 8811 8813 8815 8817 8819 8821 8823 8825 8827 8829 8831 8833 8835 8837 8839 8841 8843 8845 8847 8849 8851 8853 8855 8857 8859 8861 8863 8865 8867 8869 8871 8873 8875 8877 8879 8881 8883 8885 8887 8889 8891 8893 8895 8897 8899 8901 8903 8905 8907 8909 8911 8913 8915 8917 8919 8921 8923 8925 8927 8929 8931 8933 8935 8937 8939 8941 8943 8945 8947 8949 8951 8953 8955 8957 8959 8961 8963 8965 8967 8969 8971 8973 8975 8977 8979 8981 8983 8985 8987 8989 8991 8993 8995 8997 8999 9001 9003 9005 9007 9009 9011 9013 9015 9017 9019 9021 9023 9025 9027 9029 9031 9033 9035 9037 9039 9041 9043 9045 9047 9049 9051 9053 9055 9057 9059 9061 9063 9065 9067 9069 9071 9073 9075 9077 9079 9081 9083 9085 9087 9089 9091 9093 9095 9097 9099 9101 9103 9105 9107 9109 9111 9113 9115 9117 9119 9121 9123 9125 9127 9129 9131 9133 9135 9137 9139 9141 9143 9145 9147 9149 9151 9153 9155 9157 9159 9161 9163 9165 9167 9169 9171 9173 9175 9177 9179 9181 9183 9185 9187 9189 9191 9193 9195 9197 9199 9201 9203 9205 9207 9209 9211 9213 9215 9217 9219 9221 9223 9225 9227 9229 9231 9233 9235 9237 9239 9241 9243 9245 9247 9249 9251 9253 9255 9257 9259 9261 9263 9265 9267 9269 9271 9273 9275 9277 9279 9281 9283 9285 9287 9289 9291 9293 9295 9297 9299 9301 9303 9305 9307 9309 9311 9313 9315 9317 9319 9321 9323 9325 9327 9329 9331 9333 9335 9337 9339 9341 9343 9345 9347 9349 9351 9353 9355 9357 9359 9361 9363 9365 9367 9369 9371 9373 9375 9377 9379 9381 9383 9385 9387 9389 9391 9393 9395 9397 9399 9401 9403 9405 9407 9409 9411 9413 9415 9417 9419 9421 9423 9425 9427 9429 9431 9433 9435 9437 9439 9441 9443 9445 9447 9449 9451 9453 9455 9457 9459 9461 9463 9465 9467 9469 9471 9473 9475 9477 9479 9481 9483 9485 9487 9489 9491 9493 9495 9497 9499 9501 9503 9505 9507 9509 9511 9513 9515 9517 9519 9521 9523 9525 9527 9529 9531 9533 9535 9537 9539 9541 9543 9545 9547 9549 9551 9553 9555 9557 9559 9561 9563 9565 9567 9569 9571 9573 9575 9577 9579 9581 9583 9585 9587 9589 9591 9593 9595 9597 9599 9601 9603 9605 9607 9609 9611 9613 9615 9617 9619 9621 9623 9625 9627 9629 9631 9633 9635 9637 9639 9641 9643 9645 9647 9649 9651 9653 9655 9657 9659 9661 9663 9665 9667 9669 9671 9673 9675 9677 9679 9681 9683 9685 9687 9689 9691 9693 9695 9697 9699 9701 9703 9705 9707 9709 9711 9713 9715 9717 9719 9721 9723 9725 9727 9729 9731 9733 9735 9737 9739 9741 9743 9745 9747 9749 9751 9753 9755 9757 9759 9761 9763 9765 9767 9769 9771 9773 9775 9777 9779 9781 9783 9785 9787 9789 9791 9793 9795 9797 9799 9801 9803 9805 9807 9809 9811 9813 9815 9817 9819 9821 9823 9825 9827 9829 9831 9833 9835 9837 9839 9841 9843 9845 9847 9849 9851 9853 9855 9857 9859 9861 9863 9865 9867 9869 9871 9873 9875 9877 9879 9881 9883 9885 9887 9889 9891 9893 9895 9897 9899 9901 9903 9905 9907 9909 9911 9913 9915 9917 9919 9921 9923 9925 9927 9929 9931 9933 9935 9937 9939 9941 9943 9945 9947 9949 9951 9953 9955 9957 9959 9961 9963 9965 9967 9969 9971 9973 9975 9977 9979 9981 9983 9985 9987 9989 9991 9993 9995 9997 9999 10001 10003 10005 10007 10009 10011 10013 10015 10017 10019 10021 10023 10025 10027 10029 10031 10033 10035 10037 10039 10041 10043 10045 10047 10049 10051 10053 10055 10057 10059 10061 10063 10065 10067 10069 10071 10073 10075 10077 10079 10081 10083 10085 10087 10089 10091 10093 10095 10097 10099 10101 10103 10105 10107 10109 10111 10113 10115 10117 10119 10121 10123 10125 10127 10129 10131 10133 10135 10137 10139 10141 10143 10145 10147 10149 10151 10153 10155 10157 10159 10161 10163 10165 10167 10169 10171 10173 10175 10177 10179 10181 10183 10185 10187 10189 10191 10193 10195 10197 10199 10201 10203 10205 10207 10209 10211 10213 10215 10217 10219 10221 10223 10225 10227 10229 10231 10233 10235 10237 10239 10241 10243 10245 10247 10249 10251 10253 10255 10257 10259 10261 10263 10265 10267 10269 10271 10273 10275 10277 10279 10281 10283 10285 10287 10289 10291 10293 10295 10297 10299 10301 10303 10305 10307 10309 10311 10313 10315 10317 10319 10321 10323 10325 10327 10329 10331 10333 10335 10337 10339 10341 10343 10345 10347 10349 10351 10353 10355 10357 10359 10361 10363 10365 10367 10369 10371 10373 10375 10377 10379 10381 10383 10385 10387 10389 10391 10393 10395 10397 10399 10401 10403 10405 10407 10409 10411 10413 10415 10417 10419 10421 10423 10425 10427 10429 10431 10433 10435 10437 10439 10441 10443 10445 10447 10449 10451 10453 10455 10457 10459 10461 10463 10465 10467 10469 10471 10473 10475 10477 10479 10481 10483 10485 10487 10489 10491 10493 10495 10497 10499 10501 10503 10505 10507 10509 10511 10513 10515 10517 10519 10521 10523 10525 10527 10529 10531 10533 10535 10537 10539 10541 10543 10545 10547 10549 10551 10553 10555 10557 10559 10561 10563 10565 10567 10569 10571 10573 10575 10577 10579 10581 10583 10585 10587 10589 10591 10593 10595 10597 10599 10601 10603 10605 10607 10609 10611 10613 10615 10617 10619 10621 10623 10625 10627 10629 10631 10633 10635 10637 10639 10641 10643 10645 10647 10649 10651 10653 10655 10657 10659 10661 10663 10665 10667 10669 10671 10673 10675 10677 10679 10681 10683 10685 10687 10689 10691 10693 10695 10697 10699 10701 10703 10705 10707 10709 10711 10713 10715 10717 10719 10721 10723 10725 10727 10729 10731 10733 10735 10737 10739 10741 10743 10745 10747 10749 10751 10753 10755 10757 10759 10761 10763 10765 10767 10769 10771 10773 10775 10777 10779 10781 10783 10785 10787 10789 10791 10793 10795 10797 10799 10801 10803 10805 10807 10809 10811 10813 10815 10817 10819 10821 10823 10825 10827 10829 10831 10833 10835 10837 10839 10841 10843 10845 10847 10849 10851 10853 10855 10857 10859 10861 10863 10865 10867 10869 10871 10873 10875 10877 10879 10881 10883 10885 10887 10889 10891 10893 10895 10897 10899 10901 10903 10905 10907 10909 10911 10913 10915 10917 10919 10921 10923 10925 10927 10929 10931 10933 10935 10937 10939 10941 10943 10945 10947 10949 10951 10953 10955 10957 10959 10961 10963 10965 10967 10969 10971 10973 10975 10977 10979 10981 10983 10985 10987 10989 10991 10993 10995 10997 10999 11001 11003 11005 11007 11009 11011 11013 11015 11017 11019 11021 11023 11025 11027 11029 11031 11033 11035 11037 11039 11041 11043 11045 11047 11049 11051 11053 11055 11057 11059 11061 11063 11065 11067 11069 11071 11073 11075 11077 11079 11081 11083 11085 11087 11089 11091 11093 11095 11097 11099 11101 11103 11105 11107 11109 11111 11113 11115 11117 11119 11121 11123 11125 11127 11129 11131 11133 11135 11137 11139 11141 11143 11145 11147 11149 11151 11153 11155 11157 11159 11161 11163 11165 11167 11169 11171 11173 11175 11177 11179 11181 11183 11185 11187 11189 11191 11193 11195 11197 11199 11201 11203 11205 11207 11209 11211 11213 11215 11217 11219 11221 11223 11225 11227 11229 11231 11233 11235 11237 11239 11241 11243 11245 11247 11249 11251 11253 11255 11257 11259 11261 11263 11265 11267 11269 11271 11273 11275 11277 11279 11281 11283 11285 11287 11289 11291 11293 11295 11297 11299 11301 11303 11305 11307 11309 11311 11313 11315 11317 11319 11321 11323 11325 11327 11329 11331 11333 11335 11337 11339 11341 11343 11345 11347 11349 11351 11353 11355 11357 11359 11361 11363 11365 11367 11369 11371 11373 11375 11377 11379 11381 11383 11385 11387 11389 11391 11393 11395 11397 11399 11401 11403 11405 11407 11409 11411 11413 11415 11417 11419 11421 11423 11425 11427 11429 11431 11433 11435 11437 11439 11441 11443 11445 11447 11449 11451 11453 11455 11457 11459 11461 11463 11465 11467 11469 11471 11473 11475 11477 11479 11481 11483 11485 11487 11489 11491 11493 11495 11497 11499 11501 11503 11505 11507 11509 11511 11513 11515 11517 11519 11521 11523 11525 11527 11529 11531 11533 11535 11537 11539 11541 11543 11545 11547 11549 11551 11553 11555 11557 11559 11561 11563 11565 11567 11569 11571 11573 11575 11577 11579 11581 11583 11585 11587 11589 11591 11593 11595 11597 11599 11601 11603 11605 11607 11609 11611 11613 11615 11617 11619 11621 11623 11625 11627 11629 11631 11633 11635 11637 11639 11641 11643 11645 11647 11649 11651 11653 11655 11657 11659 11661 11663 11665 11667 11669 11671 11673 11675 11677 11679 11681 11683 11685 11687 11689 11691 11693 11695 11697 11699 11701 11703 11705 11707 11709 11711 11713 11715 11717 11719 11721 11723 11725 11727 11729 11731 11733 11735 11737 11739 11741 11743 11745 11747 11749 11751 11753 11755 11757 11759 11761 11763 11765 11767 11769 11771 11773 11775 11777 11779 11781 11783 11785 11787 11789 11791 11793 11795 11797 11799 11801 11803 11805 11807 11809 11811 11813 11815 11817 11819 11821 11823 11825 11827 11829 11831 11833 11835 11837 11839 11841 11843 11845 11847 11849 11851 11853 11855 11857 11859 11861 11863 11865 11867 11869 11871 11873 11875 11877 11879 11881 11883 11885 11887 11889 11891 11893 11895 11897 11899 11901 11903 11905 11907 11909 11911 11913 11915 11917 11919 11921 11923 11925 11927 11929 11931 11933 11935 11937 11939 11941 11943 11945 11947 11949 11951 11953 11955 11957 11959 11961 11963 11965 11967 11969 11971 11973 11975 11977 11979 11981 11983 11985 11987 11989 11991 11993 11995 11997 11999 12001 12003 12005 12007 12009 12011 12013 12015 12017 12019 12021 12023 12025 12027 12029 12031 12033 12035 12037 12039 12041 12043 12045 12047 12049 12051 12053 12055 12057 12059 12061 12063 12065 12067 12069 12071 12073 12075 12077 12079 12081 12083 12085 12087 12089 12091 12093 12095 12097 12099 12101 12103 12105 12107 12109 12111 12113 12115 12117 12119 12121 12123 12125 12127 12129 12131 12133 12135 12137 12139 12141 12143 12145 12147 12149 12151 12153 12155 12157 12159 12161 12163 12165 12167 12169 12171 12173 12175 12177 12179 12181 12183 12185 12187 12189 12191 12193 12195 12197 12199 12201 12203 12205 12207 12209 12211 12213 12215 12217 12219 12221 12223 12225 12227 12229 12231 12233 12235 12237 12239 12241 12243 12245 12247 12249 12251 12253 12255 12257 12259 12261 12263 12265 12267 12269 12271 12273 12275 12277 12279 12281 12283 12285 12287 12289 12291 12293 12295 12297 12299 12301 12303 12305 12307 12309 12311 12313 12315 12317 12319 12321 12323 12325 12327 12329 12331 12333 12335 12337 12339 12341 12343 12345 12347 12349 12351 12353 12355 12357 12359 12361 12363 12365 12367 12369 12371 12373 12375 12377 12379 12381 12383 12385 12387 12389 12391 12393 12395 12397 12399 12401 12403 12405 12407 12409 12411 12413 12415 12417 12419 12421 12423 12425 12427 12429 12431 12433 12435 12437 12439 12441 12443 12445 12447 12449 12451 12453 12455 12457 12459 12461 12463 12465 12467 12469 12471 12473 12475 12477 12479 12481 12483 12485 12487 12489 12491 12493 12495 12497 12499 12501 12503 12505 12507 12509 12511 12513 12515 12517 12519 12521 12523 12525 12527 12529 12531 12533 12535 12537 12539 12541 12543 12545 12547 12549 12551 12553 12555 12557 12559 12561 12563 12565 12567 12569 12571 12573 12575 12577 12579 12581 12583 12585 12587 12589 12591 12593 12595 12597 12599 12601 12603 12605 12607 12609 12611 12613 12615 12617 12619 12621 12623 12625 12627 12629 12631 12633 12635 12637 12639 12641 12643 12645 12647 12649 12651 12653 12655 12657 12659 12661 12663 12665 12667 12669 12671 12673 12675 12677 12679 12681 12683 12685 12687 12689 12691 12693 12695 12697 12699 12701 12703 12705 12707 12709 12711 12713 12715 12717 12719 12721 12723 12725 12727 12729 12731 12733 12735 12737 12739 12741 12743 12745 12747 12749 12751 12753 12755 12757 12759 12761 12763 12765 12767 12769 12771 12773 12775 12777 12779 12781 12783 12785 12787 12789 12791 12793 12795 12797 12799 12801 12803 12805 12807 12809 12811 12813 12815 12817 12819 12821 12823 12825 12827 12829 12831 12833 12835 12837 12839 12841 12843 12845 12847 12849 12851 12853 12855 12857 12859 12861 12863 12865 12867 12869 12871 12873 12875 12877 12879 12881 12883 12885 12887 12889 12891 12893 12895 12897 12899 12901 12903 12905 12907 12909 12911 12913 12915 12917 12919 12921 12923 12925 12927 12929 12931 12933 12935 12937 12939 12941 12943 12945 12947 12949 12951 12953 12955 12957 12959 12961 12963 12965 12967 12969 12971 12973 12975 12977 12979 12981 12983 12985 12987 12989 12991 12993 12995 12997 12999 13001 13003 13005 13007 13009 13011 13013 13015 13017 13019 13021 13023 13025 13027 13029 13031 13033 13035 13037 13039 13041 13043 13045 13047 13049 13051 13053 13055 13057 13059 13061 13063 13065 13067 13069 13071 13073 13075 13077 13079 13081 13083 13085 13087 13089 13091 13093 13095 13097 13099 13101 13103 13105 13107 13109 13111 13113 13115 13117 13119 13121 13123 13125 13127 13129 13131 13133 13135 13137 13139 13141 13143 13145 13147 13149 13151 13153 13155 13157 13159 13161 13163 13165 13167 13169 13171 13173 13175 13177 13179 13181 13183 13185 13187 13189 13191 13193 13195 13197 13199 13201 13203 13205 13207 13209 13211 13213 13215 13217 13219 13221 13223 13225 13227 13229 13231 13233 13235 13237 13239 13241 13243 13245 13247 13249 13251 13253 13255 13257 13259 13261 13263 13265 13267 13269 13271 13273 13275 13277 13279 13281 13283 13285 13287 13289 13291 13293 13295 13297 13299 13301 13303 13305 13307 13309 13311 13313 13315 13317 13319 13321 13323 13325 13327 13329 13331 13333 13335 13337 13339 13341 13343 13345 13347 13349 13351 13353 13355 13357 13359 13361 13363 13365 13367 13369 13371 13373 13375 13377 13379 13381 13383 13385 13387 13389 13391 13393 13395 13397 13399 13401 13403 13405 13407 13409 13411 13413 13415 13417 13419 13421 13423 13425 13427 13429 13431 13433 13435 13437 13439 13441 13443 13445 13447 13449 13451 13453 13455 13457 13459 13461 13463 13465 13467 13469 13471 13473 13475 13477 13479 13481 13483 13485 13487 13489 13491 13493 13495 13497 13499 13501 13503 13505 13507 13509 13511 13513 13515 13517 13519 13521 13523 13525 13527 13529 13531 13533 13535 13537 13539 13541 13543 13545 13547 13549 13551 13553 13555 13557 13559 13561 13563 13565 13567 13569 13571 13573 13575 13577 13579 13581 13583 13585 13587 13589 13591 13593 13595 13597 13599 13601 13603 13605 13607 13609 13611 13613 13615 13617 13619 13621 13623 13625 13627 13629 13631 13633 13635 13637 13639 13641 13643 13645 13647 13649 13651 13653 13655 13657 13659 13661 13663 13665 13667 13669 13671 13673 13675 13677 13679 13681 13683 13685 13687 13689 13691 13693 13695 13697 13699 13701 13703 13705 13707 13709 13711 13713 13715 13717 13719 13721 13723 13725 13727 13729 13731 13733 13735 13737 13739 13741 13743 13745 13747 13749 13751 13753 13755 13757 13759 13761 13763 13765 13767 13769 13771 13773 13775 13777 13779 13781 13783 13785 13787 13789 13791 13793 13795 13797 13799 13801 13803 13805 13807 13809 13811 13813 13815 13817 13819 13821 13823 13825 13827 13829 13831 13833 13835 13837 13839 13841 13843 13845 13847 13849 13851 13853 13855 13857 13859 13861 13863 13865 13867 13869 13871 13873 13875 13877 13879 13881 13883 13885 13887 13889 13891 13893 13895 13897 13899 13901 13903 13905 13907 13909 13911 13913 13915 13917 13919 13921 13923 13925 13927 13929 13931 13933 13935 13937 13939 13941 13943 13945 13947 13949 13951 13953 13955 13957 13959 13961 13963 13965 13967 13969 13971 13973 13975 13977 13979 13981 13983 13985 13987 13989 13991 13993 13995 13997 13999 14001 14003 14005 14007 14009 14011 14013 14015 14017 14019 14021 14023 14025 14027 14029 14031 14033 14035 14037 14039 14041 14043 14045 14047 14049 14051 14053 14055 14057 14059 14061 14063 14065 14067 14069 14071 14073 14075 14077 14079 14081 14083 14085 14087 14089 14091 14093 14095 14097 14099 14101 14103 14105 14107 14109 14111 14113 14115 14117 14119 14121 14123 14125 14127 14129 14131 14133 14135 14137 14139 14141 14143 14145 14147 14149 14151 14153 14155 14157 14159 14161 14163 14165 14167 14169 14171 14173 14175 14177 14179 14181 14183 14185 14187 14189 14191 14193 14195 14197 14199 14201 14203 14205 14207 14209 14211 14213 14215 14217 14219 14221 14223 14225 14227 14229 14231 14233 14235 14237 14239 14241 14243 14245 14247 14249 14251 14253 14255 14257 14259 14261 14263 14265 14267 14269 14271 14273 14275 14277 14279 14281 14283 14285 14287 14289 14291 14293 14295 14297 14299 14301 14303 14305 14307 14309 14311 14313 14315 14317 14319 14321 14323 14325 14327 14329 14331 14333 14335 14337 14339 14341 14343 14345 14347 14349 14351 14353 14355 14357 14359 14361 14363 14365 14367 14369 14371 14373 14375 14377 14379 14381 14383 14385 14387 14389 14391 14393 14395 14397 14399 14401 14403 14405 14407 14409 14411 14413 14415 14417 14419 14421 14423 14425 14427 14429 14431 14433 14435 14437 14439 14441 14443 14445 14447 14449 14451 14453 14455 14457 14459 14461 14463 14465 14467 14469 14471 14473 14475 14477 14479 14481 14483 14485 14487 14489 14491 14493 14495 14497 14499 14501 14503 14505 14507 14509 14511 14513 14515 14517 14519 14521 14523 14525 14527 14529 14531 14533 14535 14537 14539 14541 14543 14545 14547 14549 14551 14553 14555 14557 14559 14561 14563 14565 14567 14569 14571 14573 14575 14577 14579 14581 14583 14585 14587 14589 14591 14593 14595 14597 14599 14601 14603 14605 14607 14609 14611 14613 14615 14617 14619 14621 14623 14625 14627 14629 14631 14633 14635 14637 14639 14641 14643 14645 14647 14649 14651 14653 14655 14657 14659 14661 14663 14665 14667 14669 14671 14673 14675 14677 14679 14681 14683 14685 14687 14689 14691 14693 14695 14697 14699 14701 14703 14705 14707 14709 14711 14713 14715 14717 14719 14721 14723 14725 14727 14729 14731 14733 14735 14737 14739 14741 14743 14745 14747 14749 14751 14753 14755 14757 14759 14761 14763 14765 14767 14769 14771 14773 14775 14777 14779 14781 14783 14785 14787 14789 14791 14793 14795 14797 14799 14801 14803 14805 14807 14809 14811 14813 14815 14817 14819 14821 14823 14825 14827 14829 14831 14833 14835 14837 14839 14841 14843 14845 14847 14849 14851 14853 14855 14857 14859 14861 14863 14865 14867 14869 14871 14873 14875 14877 14879 14881 14883 14885 14887 14889 14891 14893 14895 14897 14899 14901 14903 14905 14907 14909 14911 14913 14915 14917 14919 14921 14923 14925 14927 14929 14931 14933 14935 14937 14939 14941 14943 14945 14947 14949 14951 14953 14955 14957 14959 14961 14963 14965 14967 14969 14971 14973 14975 14977 14979 14981 14983 14985 14987 14989 14991 14993 14995 14997 14999 15001 15003 15005 15007 15009 15011 15013 15015 15017 15019 15021 15023 15025 15027 15029 15031 15033 15035 15037 15039 15041 15043 15045 15047 15049 15051 15053 15055 15057 15059 15061 15063 15065 15067 15069 15071 15073 15075 15077 15079 15081 15083 15085 15087 15089 15091 15093 15095 15097 15099 15101 15103 15105 15107 15109 15111 15113 15115 15117 15119 15121 15123 15125 15127 15129 15131 15133 15135 15137 15139 15141 15143 15145 15147 15149 15151 15153 15155 15157 15159 15161 15163 15165 15167 15169 15171 15173 15175 15177 15179 15181 15183 15185 15187 15189 15191 15193 15195 15197 15199 15201 15203 15205 15207 15209 15211 15213 15215 15217 15219 15221 15223 15225 15227 15229 15231 15233 15235 15237 15239 15241 15243 15245 15247 15249 15251 15253 15255 15257 15259 15261 15263 15265 15267 15269 15271 15273 15275 15277 15279 15281 15283 15285 15287 15289 15291 15293 15295 15297 15299 15301 15303 15305 15307 15309 15311 15313 15315 15317 15319 15321 15323 15325 15327 15329 15331 15333 15335 15337 15339 15341 15343 15345 15347 15349 15351 15353 15355 15357 15359 15361 15363 15365 15367 15369 15371 15373 15375 15377 15379 15381 15383 15385 15387 15389 15391 15393 15395 15397 15399 15401 15403 15405 15407 15409 15411 15413 15415 15417 15419 15421 15423 15425 15427 15429 15431 15433 15435 15437 15439 15441 15443 15445 15447 15449 15451 15453 15455 15457 15459 15461 15463 15465 15467 15469 15471 15473 15475 15477 15479 15481 15483 15485 15487 15489 15491 15493 15495 15497 15499 15501 15503 15505 15507 15509 15511 15513 15515 15517 15519 15521 15523 15525 15527 15529 15531 15533 15535 15537 15539 15541 15543 15545 15547 15549 15551 15553 15555 15557 15559 15561 15563 15565 15567 15569 15571 15573 15575 15577 15579 15581 15583 15585 15587 15589 15591 15593 15595 15597 15599 15601 15603 15605 15607 15609 15611 15613 15615 15617 15619 15621 15623 15625 15627 15629 15631 15633 15635 15637 15639 15641 15643 15645 15647 15649 15651 15653 15655 15657 15659 15661 15663 15665 15667 15669 15671 15673 15675 15677 15679 15681 15683 15685 15687 15689 15691 15693 15695 15697 15699 15701 15703 15705 15707 15709 15711 15713 15715 15717 15719 15721 15723 15725 15727 15729 15731 15733 15735 15737 15739 15741 15743 15745 15747 15749 15751 15753 15755 15757 15759 15761 15763 15765 15767 15769 15771 15773 15775 15777 15779 15781 15783 15785 15787 15789 15791 15793 15795 15797 15799 15801 15803 15805 15807 15809 15811 15813 15815 15817 15819 15821 15823 15825 15827 15829 15831 15833 15835 15837 15839 15841 15843 15845 15847 15849 15851 15853 15855 15857 15859 15861 15863 15865 15867 15869 15871 15873 15875 15877 15879 15881 15883 15885 15887 15889 15891 15893 15895 15897 15899 15901 15903 15905 15907 15909 15911 15913 15915 15917 15919 15921 15923 15925 15927 15929 15931 15933 15935 15937 15939 15941 15943 15945 15947 15949 15951 15953 15955 15957 15959 15961 15963 15965 15967 15969 15971 15973 15975 15977 15979 15981 15983 15985 15987 15989 15991 15993 15995 15997 15999 16001 16003 16005 16007 16009 16011 16013 16015 16017 16019 16021 16023 16025 16027 16029 16031 16033 16035 16037 16039 16041 16043 16045 16047 16049 16051 16053 16055 16057 16059 16061 16063 16065 16067 16069 16071 16073 16075 16077 16079 16081 16083 16085 16087 16089 16091 16093 16095 16097 16099 16101 16103 16105 16107 16109 16111 16113 16115 16117 16119 16121 16123 16125 16127 16129 16131 16133 16135 16137 16139 16141 16143 16145 16147 16149 16151 16153 16155 16157 16159 16161 16163 16165 16167 16169 16171 16173 16175 16177 16179 16181 16183 16185 16187 16189 16191 16193 16195 16197 16199 16201 16203 16205 16207 16209 16211 16213 16215 16217 16219 16221 16223 16225 16227 16229 16231 16233 16235 16237 16239 16241 16243 16245 16247 16249 16251 16253 16255 16257 16259 16261 16263 16265 16267 16269 16271 16273 16275 16277 16279 16281 16283 16285 16287 16289 16291 16293 16295 16297 16299 16301 16303 16305 16307 16309 16311 16313 16315 16317 16319 16321 16323 16325 16327 16329 16331 16333 16335 16337 16339 16341 16343 16345 16347 16349 16351 16353 16355 16357 16359 16361 16363 16365 16367 16369 16371 16373 16375 16377 16379 16381 16383 16385 16387 16389 16391 16393 16395 16397 16399 16401 16403 16405 16407 16409 16411 16413 16415 16417 16419 16421 16423 16425 16427 16429 16431 16433 16435 16437 16439 16441 16443 16445 16447 16449 16451 16453 16455 16457 16459 16461 16463 16465 16467 16469 16471 16473 16475 16477 16479 16481 16483 16485 16487 16489 16491 16493 16495 16497 16499 16501 16503 16505 16507 16509 16511 16513 16515 16517 16519 16521 16523 16525 16527 16529 16531 16533 16535 16537 16539 16541 16543 16545 16547 16549 16551 16553 16555 16557 16559 16561 16563 16565 16567 16569 16571 16573 16575 16577 16579 16581 16583 16585 16587 16589 16591 16593 16595 16597 16599 16601 16603 16605 16607 16609 16611 16613 16615 16617 16619 16621 16623 16625 16627 16629 16631 16633 16635 16637 16639 16641 16643 16645 16647 16649 16651 16653 16655 16657 16659 16661 16663 16665 16667 16669 16671 16673 16675 16677 16679 16681 16683 16685 16687 16689 16691 16693 16695 16697 16699 16701 16703 16705 16707 16709 16711 16713 16715 16717 16719 16721 16723 16725 16727 16729 16731 16733 16735 16737 16739 16741 16743 16745 16747 16749 16751 16753 16755 16757 16759 16761 16763 16765 16767 16769 16771 16773 16775 16777 16779 16781 16783 16785 16787 16789 16791 16793 16795 16797 16799 16801 16803 16805 16807 16809 16811 16813 16815 16817 16819 16821 16823 16825 16827 16829 16831 16833 16835 16837 16839 16841 16843 16845 16847 16849 16851 16853 16855 16857 16859 16861 16863 16865 16867 16869 16871 16873 16875 16877 16879 16881 16883 16885 16887 16889 16891 16893 16895 16897 16899 16901 16903 16905 16907 16909 16911 16913 16915 16917 16919 16921 16923 16925 16927 16929 16931 16933 16935 16937 16939 16941 16943 16945 16947 16949 16951 16953 16955 16957 16959 16961 16963 16965 16967 16969 16971 16973 16975 16977 16979 16981 16983 16985 16987 16989 16991 16993 16995 16997 16999 17001 17003 17005 17007 17009 17011 17013 17015 17017 17019 17021 17023 17025 17027 17029 17031 17033 17035 17037 17039 17041 17043 17045 17047 17049 17051 17053 17055 17057 17059 17061 17063 17065 17067 17069 17071 17073 17075 17077 17079 17081 17083 17085 17087 17089 17091 17093 17095 17097 17099 17101 17103 17105 17107 17109 17111 17113 17115 17117 17119 17121 17123 17125 17127 17129 17131 17133 17135 17137 17139 17141 17143 17145 17147 17149 17151 17153 17155 17157 17159 17161 17163 17165 17167 17169 17171 17173 17175 17177 17179 17181 17183 17185 17187 17189 17191 17193 17195 17197 17199 17201 17203 17205 17207 17209 17211 17213 17215 17217 17219 17221 17223 17225 17227 17229 17231 17233 17235 17237 17239 17241 17243 17245 17247 17249 17251 17253 17255 17257 17259 17261 17263 17265 17267 17269 17271 17273 17275 17277 17279 17281 17283 17285 17287 17289 17291 17293 17295 17297 17299 17301 17303 17305 17307 17309 17311 17313 17315 17317 17319 17321 17323 17325 17327 17329 17331 17333 17335 17337 17339 17341 17343 17345 17347 17349 17351 17353 17355 17357 17359 17361 17363 17365 17367 17369 17371 17373 17375 17377 17379 17381 17383 17385 17387 17389 17391 17393 17395 17397 17399 17401 17403 17405 17407 17409 17411 17413 17415 17417 17419 17421 17423 17425 17427 17429 17431 17433 17435 17437 17439 17441 17443 17445 17447 17449 17451 17453 17455 17457 17459 17461 17463 17465 17467 17469 17471 17473 17475 17477 17479 17481 17483 17485 17487 17489 17491 17493 17495 17497 17499 17501 17503 17505 17507 17509 17511 17513 17515 17517 17519 17521 17523 17525 17527 17529 17531 17533 17535 17537 17539 17541 17543 17545 17547 17549 17551 17553 17555 17557 17559 17561 17563 17565 17567 17569 17571 17573 17575 17577 17579 17581 17583 17585 17587 17589 17591 17593 17595 17597 17599 17601 17603 17605 17607 17609 17611 17613 17615 17617 17619 17621 17623 17625 17627 17629 17631 17633 17635 17637 17639 17641 17643 17645 17647 17649 17651 17653 17655 17657 17659 17661 17663 17665 17667 17669 17671 17673 17675 17677 17679 17681 17683 17685 17687 17689 17691 17693 17695 17697 17699 17701 17703 17705 17707 17709 17711 17713 17715 17717 17719 17721 17723 17725 17727 17729 17731 17733 17735 17737 17739 17741 17743 17745 17747 17749 17751 17753 17755 17757 17759 17761 17763 17765 17767 17769 17771 17773 17775 17777 17779 17781 17783 17785 17787 17789 17791 17793 17795 17797 17799 17801 17803 17805 17807 17809 17811 17813 17815 17817 17819 17821 17823 17825 17827 17829 17831 17833 17835 17837 17839 17841 17843 17845 17847 17849 17851 17853 17855 17857 17859 17861 17863 17865 17867 17869 17871 17873 17875 17877 17879 17881 17883 17885 17887 17889 17891 17893 17895 17897 17899 17901 17903 17905 17907 17909 17911 17913 17915 17917 17919 17921 17923 17925 17927 17929 17931 17933 17935 17937 17939 17941 17943 17945 17947 17949 17951 17953 17955 17957 17959 17961 17963 17965 17967 17969 17971 17973 17975 17977 17979 17981 17983 17985 17987 17989 17991 17993 17995 17997 17999 18001 18003 18005 18007 18009 18011 18013 18015 18017 18019 18021 18023 18025 18027 18029 18031 18033 18035 18037 18039 18041 18043 18045 18047 18049 18051 18053 18055 18057 18059 18061 18063 18065 18067 18069 18071 18073 18075 18077 18079 18081 18083 18085 18087 18089 18091 18093 18095 18097 18099 18101 18103 18105 18107 18109 18111 18113 18115 18117 18119 18121 18123 18125 18127 18129 18131 18133 18135 18137 18139 18141 18143 18145 18147 18149 18151 18153 18155 18157 18159 18161 18163 18165 18167 18169 18171 18173 18175 18177 18179 18181 18183 18185 18187 18189 18191 18193 18195 18197 18199 18201 18203 18205 18207 18209 18211 18213 18215 18217 18219 18221 18223 18225 18227 18229 18231 18233 18235 18237 18239 18241 18243 18245 18247 18249 18251 18253 18255 18257 18259 18261 18263 18265 18267 18269 18271 18273 18275 18277 18279 18281 18283 18285 18287 18289 18291 18293 18295 18297 18299 18301 18303 18305 18307 18309 18311 18313 18315 18317 18319 18321 18323 18325 18327 18329 18331 18333 18335 18337 18339 18341 18343 18345 18347 18349 18351 18353 18355 18357 18359 18361 18363 18365 18367 18369 18371 18373 18375 18377 18379 18381 18383 18385 18387 18389 18391 18393 18395 18397 18399 18401 18403 18405 18407 18409 18411 18413 18415 18417 18419 18421 18423 18425 18427 18429 18431 18433 18435 18437 18439 18441 18443 18445 18447 18449 18451 18453 18455 18457 18459 18461 18463 18465 18467 18469 18471 18473 18475 18477 18479 18481 18483 18485 18487 18489 18491 18493 18495 18497 18499 18501 18503 18505 18507 18509 18511 18513 18515 18517 18519 18521 18523 18525 18527 18529 18531 18533 18535 18537 18539 18541 18543 18545 18547 18549 18551 18553 18555 18557 18559 18561 18563 18565 18567 18569 18571 18573 18575 18577 18579 18581 18583 18585 18587 18589 18591 18593 18595 18597 18599 18601 18603 18605 18607 18609 18611 18613 18615 18617 18619 18621 18623 18625 18627 18629 18631 18633 18635 18637 18639 18641 18643 18645 18647 18649 18651 18653 18655 18657 18659 18661 18663 18665 18667 18669 18671 18673 18675 18677 18679 18681 18683 18685 18687 18689 18691 18693 18695 18697 18699 18701 18703 18705 18707 18709 18711 18713 18715 18717 18719 18721 18723 18725 18727 18729 18731 18733 18735 18737 18739 18741 18743 18745 18747 18749 18751 18753 18755 18757 18759 18761 18763 18765 18767 18769 18771 18773 18775 18777 18779 18781 18783 18785 18787 18789 18791 18793 18795 18797 18799 18801 18803 18805 18807 18809 18811 18813 18815 18817 18819 18821 18823 18825 18827 18829 18831 18833 18835 18837 18839 18841 18843 18845 18847 18849 18851 18853 18855 18857 18859 18861 18863 18865 18867 18869 18871 18873 18875 18877 18879 18881 18883 18885 18887 18889 18891 18893 18895 18897 18899 18901 18903 18905 18907 18909 18911 18913 18915 18917 18919 18921 18923 18925 18927 18929 18931 18933 18935 18937 18939 18941 18943 18945 18947 18949 18951 18953 18955 18957 18959 18961 18963 18965 18967 18969 18971 18973 18975 18977 18979 18981 18983 18985 18987 18989 18991 18993 18995 18997 18999 19001 19003 19005 19007 19009 19011 19013 19015 19017 19019 19021 19023 19025 19027 19029 19031 19033 19035 19037 19039 19041 19043 19045 19047 19049 19051 19053 19055 19057 19059 19061 19063 19065 19067 19069 19071 19073 19075 19077 19079 19081 19083 19085 19087 19089 19091 19093 19095 19097 19099 19101 19103 19105 19107 19109 19111 19113 19115 19117 19119 19121 19123 19125 19127 19129 19131 19133 19135 19137 19139 19141 19143 19145 19147 19149 19151 19153 19155 19157 19159 19161 19163 19165 19167 19169 19171 19173 19175 19177 19179 19181 19183 19185 19187 19189 19191 19193 19195 19197 19199 19201 19203 19205 19207 19209 19211 19213 19215 19217 19219 19221 19223 19225 19227 19229 19231 19233 19235 19237 19239 19241 19243 19245 19247 19249 19251 19253 19255 19257 19259 19261 19263 19265 19267 19269 19271 19273 19275 19277 19279 19281 19283 19285 19287 19289 19291 19293 19295 19297 19299 19301 19303 19305 19307 19309 19311 19313 19315 19317 19319 19321 19323 19325 19327 19329 19331 19333 19335 19337 19339 19341 19343 19345 19347 19349 19351 19353 19355 19357 19359 19361 19363 19365 19367 19369 19371 19373 19375 19377 19379 19381 19383 19385 19387 19389 19391 19393 19395 19397 19399 19401 19403 19405 19407 19409 19411 19413 19415 19417 19419 19421 19423 19425 19427 19429 19431 19433 19435 19437 19439 19441 19443 19445 19447 19449 19451 19453 19455 19457 19459 19461 19463 19465 19467 19469 19471 19473 19475 19477 19479 19481 19483 19485 19487 19489 19491 19493 19495 19497 19499 19501 19503 19505 19507 19509 19511 19513 19515 19517 19519 19521 19523 19525 19527 19529 19531 19533 19535 19537 19539 19541 19543 19545 19547 19549 19551 19553 19555 19557 19559 19561 19563 19565 19567 19569 19571 19573 19575 19577 19579 19581 19583 19585 19587 19589 19591 19593 19595 19597 19599 19601 19603 19605 19607 19609 19611 19613 19615 19617 19619 19621 19623 19625 19627 19629 19631 19633 19635 19637 19639 19641 19643 19645 19647 19649 19651 19653 19655 19657 19659 19661 19663 19665 19667 19669 19671 19673 19675 19677 19679 19681 19683 19685 19687 19689 19691 19693 19695 19697 19699 19701 19703 19705 19707 19709 19711 19713 19715 19717 19719 19721 19723 19725 19727 19729 19731 19733 19735 19737 19739 19741 19743 19745 19747 19749 19751 19753 19755 19757 19759 19761 19763 19765 19767 19769 19771 19773 19775 19777 19779 19781 19783 19785 19787 19789 19791 19793 19795 19797 19799 19801 19803 19805 19807 19809 19811 19813 19815 19817 19819 19821 19823 19825 19827 19829 19831 19833 19835 19837 19839 19841 19843 19845 19847 19849 19851 19853 19855 19857 19859 19861 19863 19865 19867 19869 19871 19873 19875 19877 19879 19881 19883 19885 19887 19889 19891 19893 19895 19897 19899 19901 19903 19905 19907 19909 19911 19913 19915 19917 19919 19921 19923 19925 19927 19929 19931 19933 19935 19937 19939 19941 19943 19945 19947 19949 19951 19953 19955 19957 19959 19961 19963 19965 19967 19969 19971 19973 19975 19977 19979 19981 19983 19985 19987 19989 19991 19993 19995 19997 19999 20001 20003 20005 20007 20009 20011 20013 20015 20017 20019 20021 20023 20025 20027 20029 20031 20033 20035 20037 20039 20041 20043 20045 20047 20049 20051 20053 20055 20057 20059 20061 20063 20065 20067 20069 20071 20073 20075 20077 20079 20081 20083 20085 20087 20089 20091 20093 20095 20097 20099 20101 20103 20105 20107 20109 20111 20113 20115 20117 20119 20121 20123 20125 20127 20129 20131 20133 20135 20137 20139 20141 20143 20145 20147 20149 20151 20153 20155 20157 20159 20161 20163 20165 20167 20169 20171 20173 20175 20177 20179 20181 20183 20185 20187 20189 20191 20193 20195 20197 20199 20201 20203 20205 20207 20209 20211 20213 20215 20217 20219 20221 20223 20225 20227 20229 20231 20233 20235 20237 20239 20241 20243 20245 20247 20249 20251 20253 20255 20257 20259 20261 20263 20265 20267 20269 20271 20273 20275 20277 20279 20281 20283 20285 20287 20289 20291 20293 20295 20297 20299 20301 20303 20305 20307 20309 20311 20313 20315 20317 20319 20321 20323 20325 20327 20329 20331 20333 20335 20337 20339 20341 20343 20345 20347 20349 20351 20353 20355 20357 20359 20361 20363 20365 20367 20369 20371 20373 20375 20377 20379 20381 20383 20385 20387 20389 20391 20393 20395 20397 20399 20401 20403 20405 20407 20409 20411 20413 20415 20417 20419 20421 20423 20425 20427 20429 20431 20433 20435 20437 20439 20441 20443 20445 20447 20449 20451 20453 20455 20457 20459 20461 20463 20465 20467 20469 20471 20473 20475 20477 20479 20481 20483 20485 20487 20489 20491 20493 20495 20497 20499 20501 20503 20505 20507 20509 20511 20513 20515 20517 20519 20521 20523 20525 20527 20529 20531 20533 20535 20537 20539 20541 20543 20545 20547 20549 20551 20553 20555 20557 20559 20561 20563 20565 20567 20569 20571 20573 20575 20577 20579 20581 20583 20585 20587 20589 20591 20593 20595 20597 20599 20601 20603 20605 20607 20609 20611 20613 20615 20617 20619 20621 20623 20625 20627 20629 20631 20633 20635 20637 20639 20641 20643 20645 20647 20649 20651 20653 20655 20657 20659 20661 20663 20665 20667 20669 20671 20673 20675 20677 20679 20681 20683 20685 20687 20689 20691 20693 20695 20697 20699 20701 20703 20705 20707 20709 20711 20713 20715 20717 20719 20721 20723 20725 20727 20729 20731 20733 20735 20737 20739 20741 20743 20745 20747 20749 20751 20753 20755 20757 20759 20761 20763 20765 20767 20769 20771 20773 20775 20777 20779 20781 20783 20785 20787 20789 20791 20793 20795 20797 20799 20801 20803 20805 20807 20809 20811 20813 20815 20817 20819 20821 20823 20825 20827 20829 20831 20833 20835 20837 20839 20841 20843 20845 20847 20849 20851 20853 20855 20857 20859 20861 20863 20865 20867 20869 20871 20873 20875 20877 20879 20881 20883 20885 20887 20889 20891 20893 20895 20897 20899 20901 20903 20905 20907 20909 20911 20913 20915 20917 20919 20921 20923 20925 20927 20929 20931 20933 20935 20937 20939 20941 20943 20945 20947 20949 20951 20953 20955 20957 20959 20961 20963 20965 20967 20969 20971 20973 20975 20977 20979 20981 20983 20985 20987 20989 20991 20993 20995 20997 20999 21001 21003 21005 21007 21009 21011 21013 21015 21017 21019 21021 21023 21025 21027 21029 21031 21033 21035 21037 21039 21041 21043 21045 21047 21049 21051 21053 21055 21057 21059 21061 21063 21065 21067 21069 21071 21073 21075 21077 21079 21081 21083 21085 21087 21089 21091 21093 21095 21097 21099 21101 21103 21105 21107 21109 21111 21113 21115 21117 21119 21121 21123 21125 21127 21129 21131 21133 21135 21137 21139 21141 21143 21145 21147 21149 21151 21153 21155 21157 21159 21161 21163 21165 21167 21169 21171 21173 21175 21177 21179 21181 21183 21185 21187 21189 21191 21193 21195 21197 21199 21201 21203 21205 21207 21209 21211 21213 21215 21217 21219 21221 21223 21225 21227 21229 21231 21233 21235 21237 21239 21241 21243 21245 21247 21249 21251 21253 21255 21257 21259 21261 21263 21265 21267 21269 21271 21273 21275 21277 21279 21281 21283 21285 21287 21289 21291 21293 21295 21297 21299 21301 21303 21305 21307 21309 21311 21313 21315 21317 21319 21321 21323 21325 21327 21329 21331 21333 21335 21337 21339 21341 21343 21345 21347 21349 21351 21353 21355 21357 21359 21361 21363 21365 21367 21369 21371 21373 21375 21377 21379 21381 21383 21385 21387 21389 21391 21393 21395 21397 21399 21401 21403 21405 21407 21409 21411 21413 21415 21417 21419 21421 21423 21425 21427 21429 21431 21433 21435 21437 21439 21441 21443 21445 21447 21449 21451 21453 21455 21457 21459 21461 21463 21465 21467 21469 21471 21473 21475 21477 21479 21481 21483 21485 21487 21489 21491 21493 21495 21497 21499 21501 21503 21505 21507 21509 21511 21513 21515 21517 21519 21521 21523 21525 21527 21529 21531 21533 21535 21537 21539 21541 21543 21545 21547 21549 21551 21553 21555 21557 21559 21561 21563 21565 21567 21569 21571 21573 21575 21577 21579 21581 21583 21585 21587 21589 21591 21593 21595 21597 21599 21601 21603 21605 21607 21609 21611 21613 21615 21617 21619 21621 21623 21625 21627 21629 21631 21633 21635 21637 21639 21641 21643 21645 21647 21649 21651 21653 21655 21657 21659 21661 21663 21665 21667 21669 21671 21673 21675 21677 21679 21681 21683 21685 21687 21689 21691 21693 21695 21697 21699 21701 21703 21705 21707 21709 21711 21713 21715 21717 21719 21721 21723 21725 21727 21729 21731 21733 21735 21737 21739 21741 21743 21745 21747 21749 21751 21753 21755 21757 21759 21761 21763 21765 21767 21769 21771 21773 21775 21777 21779 21781 21783 21785 21787 21789 21791 21793 21795 21797 21799 21801 21803 21805 21807 21809 21811 21813 21815 21817 21819 21821 21823 21825 21827 21829 21831 21833 21835 21837 21839 21841 21843 21845 21847 21849 21851 21853 21855 21857 21859 21861 21863 21865 21867 21869 21871 21873 21875 21877 21879 21881 21883 21885 21887 21889 21891 21893 21895 21897 21899 21901 21903 21905 21907 21909 21911 21913 21915 21917 21919 21921 21923 21925 21927 21929 21931 21933 21935 21937 21939 21941 21943 21945 21947 21949 21951 21953 21955 21957 21959 21961 21963 21965 21967 21969 21971 21973 21975 21977 21979 21981 21983 21985 21987 21989 21991 21993 21995 21997 21999 22001 22003 22005 22007 22009 22011 22013 22015 22017 22019 22021 22023 22025 22027 22029 22031 22033 22035 22037 22039 22041 22043 22045 22047 22049 22051 22053 22055 22057 22059 22061 22063 22065 22067 22069 22071 22073 22075 22077 22079 22081 22083 22085 22087 22089 22091 22093 22095 22097 22099 22101 22103 22105 22107 22109 22111 22113 22115 22117 22119 22121 22123 22125 22127 22129 22131 22133 22135 22137 22139 22141 22143 22145 22147 22149 22151 22153 22155 22157 22159 22161 22163 22165 22167 22169 22171 22173 22175 22177 22179 22181 22183 22185 22187 22189 22191 22193 22195 22197 22199 22201 22203 22205 22207 22209 22211 22213 22215 22217 22219 22221 22223 22225 22227 22229 22231 22233 22235 22237 22239 22241 22243 22245 22247 22249 22251 22253 22255 22257 22259 22261 22263 22265 22267 22269 22271 22273 22275 22277 22279 22281 22283 22285 22287 22289 22291 22293 22295 22297 22299 22301 22303 22305 22307 22309 22311 22313 22315 22317 22319 22321 22323 22325 22327 22329 22331 22333 22335 22337 22339 22341 22343 22345 22347 22349 22351 22353 22355 22357 22359 22361 22363 22365 22367 22369 22371 22373 22375 22377 22379 22381 22383 22385 22387 22389 22391 22393 22395 22397 22399 22401 22403 22405 22407 22409 22411 22413 22415 22417 22419 22421 22423 22425 22427 22429 22431 22433 22435 22437 22439 22441 22443 22445 22447 22449 22451 22453 22455 22457 22459 22461 22463 22465 22467 22469 22471 22473 22475 22477 22479 22481 22483 22485 22487 22489 22491 22493 22495 22497 22499 22501 22503 22505 22507 22509 22511 22513 22515 22517 22519 22521 22523 22525 22527 22529 22531 22533 22535 22537 22539 22541 22543 22545 22547 22549 22551 22553 22555 22557 22559 22561 22563 22565 22567 22569 22571 22573 22575 22577 22579 22581 22583 22585 22587 22589 22591 22593 22595 22597 22599 22601 22603 22605 22607 22609 22611 22613 22615 22617 22619 22621 22623 22625 22627 22629 22631 22633 22635 22637 22639 22641 22643 22645 22647 22649 22651 22653 22655 22657 22659 22661 22663 22665 22667 22669 22671 22673 22675 22677 22679 22681 22683 22685 22687 22689 22691 22693 22695 22697 22699 22701 22703 22705 22707 22709 22711 22713 22715 22717 22719 22721 22723 22725 22727 22729 22731 22733 22735 22737 22739 22741 22743 22745 22747 22749 22751 22753 22755 22757 22759 22761 22763 22765 22767 22769 22771 22773 22775 22777 22779 22781 22783 22785 22787 22789 22791 22793 22795 22797 22799 22801 22803 22805 22807 22809 22811 22813 22815 22817 22819 22821 22823 22825 22827 22829 22831 22833 22835 22837 22839 22841 22843 22845 22847 22849 22851 22853 22855 22857 22859 22861 22863 22865 22867 22869 22871 22873 22875 22877 22879 22881 22883 22885 22887 22889 22891 22893 22895 22897 22899 22901 22903 22905 22907 22909 22911 22913 22915 22917 22919 22921 22923 22925 22927 22929 22931 22933 22935 22937 22939 22941 22943 22945 22947 22949 22951 22953 22955 22957 22959 22961 22963 22965 22967 22969 22971 22973 22975 22977 22979 22981 22983 22985 22987 22989 22991 22993 22995 22997 22999 23001 23003 23005 23007 23009 23011 23013 23015 23017 23019 23021 23023 23025 23027 23029 23031 23033 23035 23037 23039 23041 23043 23045 23047 23049 23051 23053 23055 23057 23059 23061 23063 23065 23067 23069 23071 23073 23075 23077 23079 23081 23083 23085 23087 23089 23091 23093 23095 23097 23099 23101 23103 23105 23107 23109 23111 23113 23115 23117 23119 23121 23123 23125 23127 23129 23131 23133 23135 23137 23139 23141 23143 23145 23147 23149 23151 23153 23155 23157 23159 23161 23163 23165 23167 23169 23171 23173 23175 23177 23179 23181 23183 23185 23187 23189 23191 23193 23195 23197 23199 23201 23203 23205 23207 23209 23211 23213 23215 23217 23219 23221 23223 23225 23227 23229 23231 23233 23235 23237 23239 23241 23243 23245 23247 23249 23251 23253 23255 23257 23259 23261 23263 23265 23267 23269 23271 23273 23275 23277 23279 23281 23283 23285 23287 23289 23291 23293 23295 23297 23299 23301 23303 23305 23307 23309 23311 23313 23315 23317 23319 23321 23323 23325 23327 23329 23331 23333 23335 23337 23339 23341 23343 23345 23347 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 378 380 382 384 386 388 390 392 394 396 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432 434 436 438 440 442 444 446 448 450 452 454 456 458 460 462 464 466 468 470 472 474 476 478 480 482 484 486 488 490 492 494 496 498 500 502 504 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 564 566 568 570 572 574 576 578 580 582 584 586 588 590 592 594 596 598 600 602 604 606 608 610 612 614 616 618 620 622 624 626 628 630 632 634 636 638 640 642 644 646 648 650 652 654 656 658 660 662 664 666 668 670 672 674 676 678 680 682 684 686 688 690 692 694 696 698 700 702 704 706 708 710 712 714 716 718 720 722 724 726 728 730 732 734 736 738 740 742 744 746 748 750 752 754 756 758 760 762 764 766 768 770 772 774 776 778 780 782 784 786 788 790 792 794 796 798 800 802 804 806 808 810 812 814 816 818 820 822 824 826 828 830 832 834 836 838 840 842 844 846 848 850 852 854 856 858 860 862 864 866 868 870 872 874 876 878 880 882 884 886 888 890 892 894 896 898 900 902 904 906 908 910 912 914 916 918 920 922 924 926 928 930 932 934 936 938 940 942 944 946 948 950 952 954 956 958 960 962 964 966 968 970 972 974 976 978 980 982 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1008 1010 1012 1014 1016 1018 1020 1022 1024 1026 1028 1030 1032 1034 1036 1038 1040 1042 1044 1046 1048 1050 1052 1054 1056 1058 1060 1062 1064 1066 1068 1070 1072 1074 1076 1078 1080 1082 1084 1086 1088 1090 1092 1094 1096 1098 1100 1102 1104 1106 1108 1110 1112 1114 1116 1118 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1154 1156 1158 1160 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1216 1218 1220 1222 1224 1226 1228 1230 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 1316 1318 1320 1322 1324 1326 1328 1330 1332 1334 1336 1338 1340 1342 1344 1346 1348 1350 1352 1354 1356 1358 1360 1362 1364 1366 1368 1370 1372 1374 1376 1378 1380 1382 1384 1386 1388 1390 1392 1394 1396 1398 1400 1402 1404 1406 1408 1410 1412 1414 1416 1418 1420 1422 1424 1426 1428 1430 1432 1434 1436 1438 1440 1442 1444 1446 1448 1450 1452 1454 1456 1458 1460 1462 1464 1466 1468 1470 1472 1474 1476 1478 1480 1482 1484 1486 1488 1490 1492 1494 1496 1498 1500 1502 1504 1506 1508 1510 1512 1514 1516 1518 1520 1522 1524 1526 1528 1530 1532 1534 1536 1538 1540 1542 1544 1546 1548 1550 1552 1554 1556 1558 1560 1562 1564 1566 1568 1570 1572 1574 1576 1578 1580 1582 1584 1586 1588 1590 1592 1594 1596 1598 1600 1602 1604 1606 1608 1610 1612 1614 1616 1618 1620 1622 1624 1626 1628 1630 1632 1634 1636 1638 1640 1642 1644 1646 1648 1650 1652 1654 1656 1658 1660 1662 1664 1666 1668 1670 1672 1674 1676 1678 1680 1682 1684 1686 1688 1690 1692 1694 1696 1698 1700 1702 1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800 1802 1804 1806 1808 1810 1812 1814 1816 1818 1820 1822 1824 1826 1828 1830 1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858 1860 1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 1884 1886 1888 1890 1892 1894 1896 1898 1900 1902 1904 1906 1908 1910 1912 1914 1916 1918 1920 1922 1924 1926 1928 1930 1932 1934 1936 1938 1940 1942 1944 1946 1948 1950 1952 1954 1956 1958 1960 1962 1964 1966 1968 1970 1972 1974 1976 1978 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 2016 2018 2020 2022 2024 2026 2028 2030 2032 2034 2036 2038 2040 2042 2044 2046 2048 2050 2052 2054 2056 2058 2060 2062 2064 2066 2068 2070 2072 2074 2076 2078 2080 2082 2084 2086 2088 2090 2092 2094 2096 2098 2100 2102 2104 2106 2108 2110 2112 2114 2116 2118 2120 2122 2124 2126 2128 2130 2132 2134 2136 2138 2140 2142 2144 2146 2148 2150 2152 2154 2156 2158 2160 2162 2164 2166 2168 2170 2172 2174 2176 2178 2180 2182 2184 2186 2188 2190 2192 2194 2196 2198 2200 2202 2204 2206 2208 2210 2212 2214 2216 2218 2220 2222 2224 2226 2228 2230 2232 2234 2236 2238 2240 2242 2244 2246 2248 2250 2252 2254 2256 2258 2260 2262 2264 2266 2268 2270 2272 2274 2276 2278 2280 2282 2284 2286 2288 2290 2292 2294 2296 2298 2300 2302 2304 2306 2308 2310 2312 2314 2316 2318 2320 2322 2324 2326 2328 2330 2332 2334 2336 2338 2340 2342 2344 2346 2348 2350 2352 2354 2356 2358 2360 2362 2364 2366 2368 2370 2372 2374 2376 2378 2380 2382 2384 2386 2388 2390 2392 2394 2396 2398 2400 2402 2404 2406 2408 2410 2412 2414 2416 2418 2420 2422 2424 2426 2428 2430 2432 2434 2436 2438 2440 2442 2444 2446 2448 2450 2452 2454 2456 2458 2460 2462 2464 2466 2468 2470 2472 2474 2476 2478 2480 2482 2484 2486 2488 2490 2492 2494 2496 2498 2500 2502 2504 2506 2508 2510 2512 2514 2516 2518 2520 2522 2524 2526 2528 2530 2532 2534 2536 2538 2540 2542 2544 2546 2548 2550 2552 2554 2556 2558 2560 2562 2564 2566 2568 2570 2572 2574 2576 2578 2580 2582 2584 2586 2588 2590 2592 2594 2596 2598 2600 2602 2604 2606 2608 2610 2612 2614 2616 2618 2620 2622 2624 2626 2628 2630 2632 2634 2636 2638 2640 2642 2644 2646 2648 2650 2652 2654 2656 2658 2660 2662 2664 2666 2668 2670 2672 2674 2676 2678 2680 2682 2684 2686 2688 2690 2692 2694 2696 2698 2700 2702 2704 2706 2708 2710 2712 2714 2716 2718 2720 2722 2724 2726 2728 2730 2732 2734 2736 2738 2740 2742 2744 2746 2748 2750 2752 2754 2756 2758 2760 2762 2764 2766 2768 2770 2772 2774 2776 2778 2780 2782 2784 2786 2788 2790 2792 2794 2796 2798 2800 2802 2804 2806 2808 2810 2812 2814 2816 2818 2820 2822 2824 2826 2828 2830 2832 2834 2836 2838 2840 2842 2844 2846 2848 2850 2852 2854 2856 2858 2860 2862 2864 2866 2868 2870 2872 2874 2876 2878 2880 2882 2884 2886 2888 2890 2892 2894 2896 2898 2900 2902 2904 2906 2908 2910 2912 2914 2916 2918 2920 2922 2924 2926 2928 2930 2932 2934 2936 2938 2940 2942 2944 2946 2948 2950 2952 2954 2956 2958 2960 2962 2964 2966 2968 2970 2972 2974 2976 2978 2980 2982 2984 2986 2988 2990 2992 2994 2996 2998 3000 3002 3004 3006 3008 3010 3012 3014 3016 3018 3020 3022 3024 3026 3028 3030 3032 3034 3036 3038 3040 3042 3044 3046 3048 3050 3052 3054 3056 3058 3060 3062 3064 3066 3068 3070 3072 3074 3076 3078 3080 3082 3084 3086 3088 3090 3092 3094 3096 3098 3100 3102 3104 3106 3108 3110 3112 3114 3116 3118 3120 3122 3124 3126 3128 3130 3132 3134 3136 3138 3140 3142 3144 3146 3148 3150 3152 3154 3156 3158 3160 3162 3164 3166 3168 3170 3172 3174 3176 3178 3180 3182 3184 3186 3188 3190 3192 3194 3196 3198 3200 3202 3204 3206 3208 3210 3212 3214 3216 3218 3220 3222 3224 3226 3228 3230 3232 3234 3236 3238 3240 3242 3244 3246 3248 3250 3252 3254 3256 3258 3260 3262 3264 3266 3268 3270 3272 3274 3276 3278 3280 3282 3284 3286 3288 3290 3292 3294 3296 3298 3300 3302 3304 3306 3308 3310 3312 3314 3316 3318 3320 3322 3324 3326 3328 3330 3332 3334 3336 3338 3340 3342 3344 3346 3348 3350 3352 3354 3356 3358 3360 3362 3364 3366 3368 3370 3372 3374 3376 3378 3380 3382 3384 3386 3388 3390 3392 3394 3396 3398 3400 3402 3404 3406 3408 3410 3412 3414 3416 3418 3420 3422 3424 3426 3428 3430 3432 3434 3436 3438 3440 3442 3444 3446 3448 3450 3452 3454 3456 3458 3460 3462 3464 3466 3468 3470 3472 3474 3476 3478 3480 3482 3484 3486 3488 3490 3492 3494 3496 3498 3500 3502 3504 3506 3508 3510 3512 3514 3516 3518 3520 3522 3524 3526 3528 3530 3532 3534 3536 3538 3540 3542 3544 3546 3548 3550 3552 3554 3556 3558 3560 3562 3564 3566 3568 3570 3572 3574 3576 3578 3580 3582 3584 3586 3588 3590 3592 3594 3596 3598 3600 3602 3604 3606 3608 3610 3612 3614 3616 3618 3620 3622 3624 3626 3628 3630 3632 3634 3636 3638 3640 3642 3644 3646 3648 3650 3652 3654 3656 3658 3660 3662 3664 3666 3668 3670 3672 3674 3676 3678 3680 3682 3684 3686 3688 3690 3692 3694 3696 3698 3700 3702 3704 3706 3708 3710 3712 3714 3716 3718 3720 3722 3724 3726 3728 3730 3732 3734 3736 3738 3740 3742 3744 3746 3748 3750 3752 3754 3756 3758 3760 3762 3764 3766 3768 3770 3772 3774 3776 3778 3780 3782 3784 3786 3788 3790 3792 3794 3796 3798 3800 3802 3804 3806 3808 3810 3812 3814 3816 3818 3820 3822 3824 3826 3828 3830 3832 3834 3836 3838 3840 3842 3844 3846 3848 3850 3852 3854 3856 3858 3860 3862 3864 3866 3868 3870 3872 3874 3876 3878 3880 3882 3884 3886 3888 3890 3892 3894 3896 3898 3900 3902 3904 3906 3908 3910 3912 3914 3916 3918 3920 3922 3924 3926 3928 3930 3932 3934 3936 3938 3940 3942 3944 3946 3948 3950 3952 3954 3956 3958 3960 3962 3964 3966 3968 3970 3972 3974 3976 3978 3980 3982 3984 3986 3988 3990 3992 3994 3996 3998 4000 4002 4004 4006 4008 4010 4012 4014 4016 4018 4020 4022 4024 4026 4028 4030 4032 4034 4036 4038 4040 4042 4044 4046 4048 4050 4052 4054 4056 4058 4060 4062 4064 4066 4068 4070 4072 4074 4076 4078 4080 4082 4084 4086 4088 4090 4092 4094 4096 4098 4100 4102 4104 4106 4108 4110 4112 4114 4116 4118 4120 4122 4124 4126 4128 4130 4132 4134 4136 4138 4140 4142 4144 4146 4148 4150 4152 4154 4156 4158 4160 4162 4164 4166 4168 4170 4172 4174 4176 4178 4180 4182 4184 4186 4188 4190 4192 4194 4196 4198 4200 4202 4204 4206 4208 4210 4212 4214 4216 4218 4220 4222 4224 4226 4228 4230 4232 4234 4236 4238 4240 4242 4244 4246 4248 4250 4252 4254 4256 4258 4260 4262 4264 4266 4268 4270 4272 4274 4276 4278 4280 4282 4284 4286 4288 4290 4292 4294 4296 4298 4300 4302 4304 4306 4308 4310 4312 4314 4316 4318 4320 4322 4324 4326 4328 4330 4332 4334 4336 4338 4340 4342 4344 4346 4348 4350 4352 4354 4356 4358 4360 4362 4364 4366 4368 4370 4372 4374 4376 4378 4380 4382 4384 4386 4388 4390 4392 4394 4396 4398 4400 4402 4404 4406 4408 4410 4412 4414 4416 4418 4420 4422 4424 4426 4428 4430 4432 4434 4436 4438 4440 4442 4444 4446 4448 4450 4452 4454 4456 4458 4460 4462 4464 4466 4468 4470 4472 4474 4476 4478 4480 4482 4484 4486 4488 4490 4492 4494 4496 4498 4500 4502 4504 4506 4508 4510 4512 4514 4516 4518 4520 4522 4524 4526 4528 4530 4532 4534 4536 4538 4540 4542 4544 4546 4548 4550 4552 4554 4556 4558 4560 4562 4564 4566 4568 4570 4572 4574 4576 4578 4580 4582 4584 4586 4588 4590 4592 4594 4596 4598 4600 4602 4604 4606 4608 4610 4612 4614 4616 4618 4620 4622 4624 4626 4628 4630 4632 4634 4636 4638 4640 4642 4644 4646 4648 4650 4652 4654 4656 4658 4660 4662 4664 4666 4668 4670 4672 4674 4676 4678 4680 4682 4684 4686 4688 4690 4692 4694 4696 4698 4700 4702 4704 4706 4708 4710 4712 4714 4716 4718 4720 4722 4724 4726 4728 4730 4732 4734 4736 4738 4740 4742 4744 4746 4748 4750 4752 4754 4756 4758 4760 4762 4764 4766 4768 4770 4772 4774 4776 4778 4780 4782 4784 4786 4788 4790 4792 4794 4796 4798 4800 4802 4804 4806 4808 4810 4812 4814 4816 4818 4820 4822 4824 4826 4828 4830 4832 4834 4836 4838 4840 4842 4844 4846 4848 4850 4852 4854 4856 4858 4860 4862 4864 4866 4868 4870 4872 4874 4876 4878 4880 4882 4884 4886 4888 4890 4892 4894 4896 4898 4900 4902 4904 4906 4908 4910 4912 4914 4916 4918 4920 4922 4924 4926 4928 4930 4932 4934 4936 4938 4940 4942 4944 4946 4948 4950 4952 4954 4956 4958 4960 4962 4964 4966 4968 4970 4972 4974 4976 4978 4980 4982 4984 4986 4988 4990 4992 4994 4996 4998 5000 5002 5004 5006 5008 5010 5012 5014 5016 5018 5020 5022 5024 5026 5028 5030 5032 5034 5036 5038 5040 5042 5044 5046 5048 5050 5052 5054 5056 5058 5060 5062 5064 5066 5068 5070 5072 5074 5076 5078 5080 5082 5084 5086 5088 5090 5092 5094 5096 5098 5100 5102 5104 5106 5108 5110 5112 5114 5116 5118 5120 5122 5124 5126 5128 5130 5132 5134 5136 5138 5140 5142 5144 5146 5148 5150 5152 5154 5156 5158 5160 5162 5164 5166 5168 5170 5172 5174 5176 5178 5180 5182 5184 5186 5188 5190 5192 5194 5196 5198 5200 5202 5204 5206 5208 5210 5212 5214 5216 5218 5220 5222 5224 5226 5228 5230 5232 5234 5236 5238 5240 5242 5244 5246 5248 5250 5252 5254 5256 5258 5260 5262 5264 5266 5268 5270 5272 5274 5276 5278 5280 5282 5284 5286 5288 5290 5292 5294 5296 5298 5300 5302 5304 5306 5308 5310 5312 5314 5316 5318 5320 5322 5324 5326 5328 5330 5332 5334 5336 5338 5340 5342 5344 5346 5348 5350 5352 5354 5356 5358 5360 5362 5364 5366 5368 5370 5372 5374 5376 5378 5380 5382 5384 5386 5388 5390 5392 5394 5396 5398 5400 5402 5404 5406 5408 5410 5412 5414 5416 5418 5420 5422 5424 5426 5428 5430 5432 5434 5436 5438 5440 5442 5444 5446 5448 5450 5452 5454 5456 5458 5460 5462 5464 5466 5468 5470 5472 5474 5476 5478 5480 5482 5484 5486 5488 5490 5492 5494 5496 5498 5500 5502 5504 5506 5508 5510 5512 5514 5516 5518 5520 5522 5524 5526 5528 5530 5532 5534 5536 5538 5540 5542 5544 5546 5548 5550 5552 5554 5556 5558 5560 5562 5564 5566 5568 5570 5572 5574 5576 5578 5580 5582 5584 5586 5588 5590 5592 5594 5596 5598 5600 5602 5604 5606 5608 5610 5612 5614 5616 5618 5620 5622 5624 5626 5628 5630 5632 5634 5636 5638 5640 5642 5644 5646 5648 5650 5652 5654 5656 5658 5660 5662 5664 5666 5668 5670 5672 5674 5676 5678 5680 5682 5684 5686 5688 5690 5692 5694 5696 5698 5700 5702 5704 5706 5708 5710 5712 5714 5716 5718 5720 5722 5724 5726 5728 5730 5732 5734 5736 5738 5740 5742 5744 5746 5748 5750 5752 5754 5756 5758 5760 5762 5764 5766 5768 5770 5772 5774 5776 5778 5780 5782 5784 5786 5788 5790 5792 5794 5796 5798 5800 5802 5804 5806 5808 5810 5812 5814 5816 5818 5820 5822 5824 5826 5828 5830 5832 5834 5836 5838 5840 5842 5844 5846 5848 5850 5852 5854 5856 5858 5860 5862 5864 5866 5868 5870 5872 5874 5876 5878 5880 5882 5884 5886 5888 5890 5892 5894 5896 5898 5900 5902 5904 5906 5908 5910 5912 5914 5916 5918 5920 5922 5924 5926 5928 5930 5932 5934 5936 5938 5940 5942 5944 5946 5948 5950 5952 5954 5956 5958 5960 5962 5964 5966 5968 5970 5972 5974 5976 5978 5980 5982 5984 5986 5988 5990 5992 5994 5996 5998 6000 6002 6004 6006 6008 6010 6012 6014 6016 6018 6020 6022 6024 6026 6028 6030 6032 6034 6036 6038 6040 6042 6044 6046 6048 6050 6052 6054 6056 6058 6060 6062 6064 6066 6068 6070 6072 6074 6076 6078 6080 6082 6084 6086 6088 6090 6092 6094 6096 6098 6100 6102 6104 6106 6108 6110 6112 6114 6116 6118 6120 6122 6124 6126 6128 6130 6132 6134 6136 6138 6140 6142 6144 6146 6148 6150 6152 6154 6156 6158 6160 6162 6164 6166 6168 6170 6172 6174 6176 6178 6180 6182 6184 6186 6188 6190 6192 6194 6196 6198 6200 6202 6204 6206 6208 6210 6212 6214 6216 6218 6220 6222 6224 6226 6228 6230 6232 6234 6236 6238 6240 6242 6244 6246 6248 6250 6252 6254 6256 6258 6260 6262 6264 6266 6268 6270 6272 6274 6276 6278 6280 6282 6284 6286 6288 6290 6292 6294 6296 6298 6300 6302 6304 6306 6308 6310 6312 6314 6316 6318 6320 6322 6324 6326 6328 6330 6332 6334 6336 6338 6340 6342 6344 6346 6348 6350 6352 6354 6356 6358 6360 6362 6364 6366 6368 6370 6372 6374 6376 6378 6380 6382 6384 6386 6388 6390 6392 6394 6396 6398 6400 6402 6404 6406 6408 6410 6412 6414 6416 6418 6420 6422 6424 6426 6428 6430 6432 6434 6436 6438 6440 6442 6444 6446 6448 6450 6452 6454 6456 6458 6460 6462 6464 6466 6468 6470 6472 6474 6476 6478 6480 6482 6484 6486 6488 6490 6492 6494 6496 6498 6500 6502 6504 6506 6508 6510 6512 6514 6516 6518 6520 6522 6524 6526 6528 6530 6532 6534 6536 6538 6540 6542 6544 6546 6548 6550 6552 6554 6556 6558 6560 6562 6564 6566 6568 6570 6572 6574 6576 6578 6580 6582 6584 6586 6588 6590 6592 6594 6596 6598 6600 6602 6604 6606 6608 6610 6612 6614 6616 6618 6620 6622 6624 6626 6628 6630 6632 6634 6636 6638 6640 6642 6644 6646 6648 6650 6652 6654 6656 6658 6660 6662 6664 6666 6668 6670 6672 6674 6676 6678 6680 6682 6684 6686 6688 6690 6692 6694 6696 6698 6700 6702 6704 6706 6708 6710 6712 6714 6716 6718 6720 6722 6724 6726 6728 6730 6732 6734 6736 6738 6740 6742 6744 6746 6748 6750 6752 6754 6756 6758 6760 6762 6764 6766 6768 6770 6772 6774 6776 6778 6780 6782 6784 6786 6788 6790 6792 6794 6796 6798 6800 6802 6804 6806 6808 6810 6812 6814 6816 6818 6820 6822 6824 6826 6828 6830 6832 6834 6836 6838 6840 6842 6844 6846 6848 6850 6852 6854 6856 6858 6860 6862 6864 6866 6868 6870 6872 6874 6876 6878 6880 6882 6884 6886 6888 6890 6892 6894 6896 6898 6900 6902 6904 6906 6908 6910 6912 6914 6916 6918 6920 6922 6924 6926 6928 6930 6932 6934 6936 6938 6940 6942 6944 6946 6948 6950 6952 6954 6956 6958 6960 6962 6964 6966 6968 6970 6972 6974 6976 6978 6980 6982 6984 6986 6988 6990 6992 6994 6996 6998 7000 7002 7004 7006 7008 7010 7012 7014 7016 7018 7020 7022 7024 7026 7028 7030 7032 7034 7036 7038 7040 7042 7044 7046 7048 7050 7052 7054 7056 7058 7060 7062 7064 7066 7068 7070 7072 7074 7076 7078 7080 7082 7084 7086 7088 7090 7092 7094 7096 7098 7100 7102 7104 7106 7108 7110 7112 7114 7116 7118 7120 7122 7124 7126 7128 7130 7132 7134 7136 7138 7140 7142 7144 7146 7148 7150 7152 7154 7156 7158 7160 7162 7164 7166 7168 7170 7172 7174 7176 7178 7180 7182 7184 7186 7188 7190 7192 7194 7196 7198 7200 7202 7204 7206 7208 7210 7212 7214 7216 7218 7220 7222 7224 7226 7228 7230 7232 7234 7236 7238 7240 7242 7244 7246 7248 7250 7252 7254 7256 7258 7260 7262 7264 7266 7268 7270 7272 7274 7276 7278 7280 7282 7284 7286 7288 7290 7292 7294 7296 7298 7300 7302 7304 7306 7308 7310 7312 7314 7316 7318 7320 7322 7324 7326 7328 7330 7332 7334 7336 7338 7340 7342 7344 7346 7348 7350 7352 7354 7356 7358 7360 7362 7364 7366 7368 7370 7372 7374 7376 7378 7380 7382 7384 7386 7388 7390 7392 7394 7396 7398 7400 7402 7404 7406 7408 7410 7412 7414 7416 7418 7420 7422 7424 7426 7428 7430 7432 7434 7436 7438 7440 7442 7444 7446 7448 7450 7452 7454 7456 7458 7460 7462 7464 7466 7468 7470 7472 7474 7476 7478 7480 7482 7484 7486 7488 7490 7492 7494 7496 7498 7500 7502 7504 7506 7508 7510 7512 7514 7516 7518 7520 7522 7524 7526 7528 7530 7532 7534 7536 7538 7540 7542 7544 7546 7548 7550 7552 7554 7556 7558 7560 7562 7564 7566 7568 7570 7572 7574 7576 7578 7580 7582 7584 7586 7588 7590 7592 7594 7596 7598 7600 7602 7604 7606 7608 7610 7612 7614 7616 7618 7620 7622 7624 7626 7628 7630 7632 7634 7636 7638 7640 7642 7644 7646 7648 7650 7652 7654 7656 7658 7660 7662 7664 7666 7668 7670 7672 7674 7676 7678 7680 7682 7684 7686 7688 7690 7692 7694 7696 7698 7700 7702 7704 7706 7708 7710 7712 7714 7716 7718 7720 7722 7724 7726 7728 7730 7732 7734 7736 7738 7740 7742 7744 7746 7748 7750 7752 7754 7756 7758 7760 7762 7764 7766 7768 7770 7772 7774 7776 7778 7780 7782 7784 7786 7788 7790 7792 7794 7796 7798 7800 7802 7804 7806 7808 7810 7812 7814 7816 7818 7820 7822 7824 7826 7828 7830 7832 7834 7836 7838 7840 7842 7844 7846 7848 7850 7852 7854 7856 7858 7860 7862 7864 7866 7868 7870 7872 7874 7876 7878 7880 7882 7884 7886 7888 7890 7892 7894 7896 7898 7900 7902 7904 7906 7908 7910 7912 7914 7916 7918 7920 7922 7924 7926 7928 7930 7932 7934 7936 7938 7940 7942 7944 7946 7948 7950 7952 7954 7956 7958 7960 7962 7964 7966 7968 7970 7972 7974 7976 7978 7980 7982 7984 7986 7988 7990 7992 7994 7996 7998 8000 8002 8004 8006 8008 8010 8012 8014 8016 8018 8020 8022 8024 8026 8028 8030 8032 8034 8036 8038 8040 8042 8044 8046 8048 8050 8052 8054 8056 8058 8060 8062 8064 8066 8068 8070 8072 8074 8076 8078 8080 8082 8084 8086 8088 8090 8092 8094 8096 8098 8100 8102 8104 8106 8108 8110 8112 8114 8116 8118 8120 8122 8124 8126 8128 8130 8132 8134 8136 8138 8140 8142 8144 8146 8148 8150 8152 8154 8156 8158 8160 8162 8164 8166 8168 8170 8172 8174 8176 8178 8180 8182 8184 8186 8188 8190 8192 8194 8196 8198 8200 8202 8204 8206 8208 8210 8212 8214 8216 8218 8220 8222 8224 8226 8228 8230 8232 8234 8236 8238 8240 8242 8244 8246 8248 8250 8252 8254 8256 8258 8260 8262 8264 8266 8268 8270 8272 8274 8276 8278 8280 8282 8284 8286 8288 8290 8292 8294 8296 8298 8300 8302 8304 8306 8308 8310 8312 8314 8316 8318 8320 8322 8324 8326 8328 8330 8332 8334 8336 8338 8340 8342 8344 8346 8348 8350 8352 8354 8356 8358 8360 8362 8364 8366 8368 8370 8372 8374 8376 8378 8380 8382 8384 8386 8388 8390 8392 8394 8396 8398 8400 8402 8404 8406 8408 8410 8412 8414 8416 8418 8420 8422 8424 8426 8428 8430 8432 8434 8436 8438 8440 8442 8444 8446 8448 8450 8452 8454 8456 8458 8460 8462 8464 8466 8468 8470 8472 8474 8476 8478 8480 8482 8484 8486 8488 8490 8492 8494 8496 8498 8500 8502 8504 8506 8508 8510 8512 8514 8516 8518 8520 8522 8524 8526 8528 8530 8532 8534 8536 8538 8540 8542 8544 8546 8548 8550 8552 8554 8556 8558 8560 8562 8564 8566 8568 8570 8572 8574 8576 8578 8580 8582 8584 8586 8588 8590 8592 8594 8596 8598 8600 8602 8604 8606 8608 8610 8612 8614 8616 8618 8620 8622 8624 8626 8628 8630 8632 8634 8636 8638 8640 8642 8644 8646 8648 8650 8652 8654 8656 8658 8660 8662 8664 8666 8668 8670 8672 8674 8676 8678 8680 8682 8684 8686 8688 8690 8692 8694 8696 8698 8700 8702 8704 8706 8708 8710 8712 8714 8716 8718 8720 8722 8724 8726 8728 8730 8732 8734 8736 8738 8740 8742 8744 8746 8748 8750 8752 8754 8756 8758 8760 8762 8764 8766 8768 8770 8772 8774 8776 8778 8780 8782 8784 8786 8788 8790 8792 8794 8796 8798 8800 8802 8804 8806 8808 8810 8812 8814 8816 8818 8820 8822 8824 8826 8828 8830 8832 8834 8836 8838 8840 8842 8844 8846 8848 8850 8852 8854 8856 8858 8860 8862 8864 8866 8868 8870 8872 8874 8876 8878 8880 8882 8884 8886 8888 8890 8892 8894 8896 8898 8900 8902 8904 8906 8908 8910 8912 8914 8916 8918 8920 8922 8924 8926 8928 8930 8932 8934 8936 8938 8940 8942 8944 8946 8948 8950 8952 8954 8956 8958 8960 8962 8964 8966 8968 8970 8972 8974 8976 8978 8980 8982 8984 8986 8988 8990 8992 8994 8996 8998 9000 9002 9004 9006 9008 9010 9012 9014 9016 9018 9020 9022 9024 9026 9028 9030 9032 9034 9036 9038 9040 9042 9044 9046 9048 9050 9052 9054 9056 9058 9060 9062 9064 9066 9068 9070 9072 9074 9076 9078 9080 9082 9084 9086 9088 9090 9092 9094 9096 9098 9100 9102 9104 9106 9108 9110 9112 9114 9116 9118 9120 9122 9124 9126 9128 9130 9132 9134 9136 9138 9140 9142 9144 9146 9148 9150 9152 9154 9156 9158 9160 9162 9164 9166 9168 9170 9172 9174 9176 9178 9180 9182 9184 9186 9188 9190 9192 9194 9196 9198 9200 9202 9204 9206 9208 9210 9212 9214 9216 9218 9220 9222 9224 9226 9228 9230 9232 9234 9236 9238 9240 9242 9244 9246 9248 9250 9252 9254 9256 9258 9260 9262 9264 9266 9268 9270 9272 9274 9276 9278 9280 9282 9284 9286 9288 9290 9292 9294 9296 9298 9300 9302 9304 9306 9308 9310 9312 9314 9316 9318 9320 9322 9324 9326 9328 9330 9332 9334 9336 9338 9340 9342 9344 9346 9348 9350 9352 9354 9356 9358 9360 9362 9364 9366 9368 9370 9372 9374 9376 9378 9380 9382 9384 9386 9388 9390 9392 9394 9396 9398 9400 9402 9404 9406 9408 9410 9412 9414 9416 9418 9420 9422 9424 9426 9428 9430 9432 9434 9436 9438 9440 9442 9444 9446 9448 9450 9452 9454 9456 9458 9460 9462 9464 9466 9468 9470 9472 9474 9476 9478 9480 9482 9484 9486 9488 9490 9492 9494 9496 9498 9500 9502 9504 9506 9508 9510 9512 9514 9516 9518 9520 9522 9524 9526 9528 9530 9532 9534 9536 9538 9540 9542 9544 9546 9548 9550 9552 9554 9556 9558 9560 9562 9564 9566 9568 9570 9572 9574 9576 9578 9580 9582 9584 9586 9588 9590 9592 9594 9596 9598 9600 9602 9604 9606 9608 9610 9612 9614 9616 9618 9620 9622 9624 9626 9628 9630 9632 9634 9636 9638 9640 9642 9644 9646 9648 9650 9652 9654 9656 9658 9660 9662 9664 9666 9668 9670 9672 9674 9676 9678 9680 9682 9684 9686 9688 9690 9692 9694 9696 9698 9700 9702 9704 9706 9708 9710 9712 9714 9716 9718 9720 9722 9724 9726 9728 9730 9732 9734 9736 9738 9740 9742 9744 9746 9748 9750 9752 9754 9756 9758 9760 9762 9764 9766 9768 9770 9772 9774 9776 9778 9780 9782 9784 9786 9788 9790 9792 9794 9796 9798 9800 9802 9804 9806 9808 9810 9812 9814 9816 9818 9820 9822 9824 9826 9828 9830 9832 9834 9836 9838 9840 9842 9844 9846 9848 9850 9852 9854 9856 9858 9860 9862 9864 9866 9868 9870 9872 9874 9876 9878 9880 9882 9884 9886 9888 9890 9892 9894 9896 9898 9900 9902 9904 9906 9908 9910 9912 9914 9916 9918 9920 9922 9924 9926 9928 9930 9932 9934 9936 9938 9940 9942 9944 9946 9948 9950 9952 9954 9956 9958 9960 9962 9964 9966 9968 9970 9972 9974 9976 9978 9980 9982 9984 9986 9988 9990 9992 9994 9996 9998 10000 10002 10004 10006 10008 10010 10012 10014 10016 10018 10020 10022 10024 10026 10028 10030 10032 10034 10036 10038 10040 10042 10044 10046 10048 10050 10052 10054 10056 10058 10060 10062 10064 10066 10068 10070 10072 10074 10076 10078 10080 10082 10084 10086 10088 10090 10092 10094 10096 10098 10100 10102 10104 10106 10108 10110 10112 10114 10116 10118 10120 10122 10124 10126 10128 10130 10132 10134 10136 10138 10140 10142 10144 10146 10148 10150 10152 10154 10156 10158 10160 10162 10164 10166 10168 10170 10172 10174 10176 10178 10180 10182 10184 10186 10188 10190 10192 10194 10196 10198 10200 10202 10204 10206 10208 10210 10212 10214 10216 10218 10220 10222 10224 10226 10228 10230 10232 10234 10236 10238 10240 10242 10244 10246 10248 10250 10252 10254 10256 10258 10260 10262 10264 10266 10268 10270 10272 10274 10276 10278 10280 10282 10284 10286 10288 10290 10292 10294 10296 10298 10300 10302 10304 10306 10308 10310 10312 10314 10316 10318 10320 10322 10324 10326 10328 10330 10332 10334 10336 10338 10340 10342 10344 10346 10348 10350 10352 10354 10356 10358 10360 10362 10364 10366 10368 10370 10372 10374 10376 10378 10380 10382 10384 10386 10388 10390 10392 10394 10396 10398 10400 10402 10404 10406 10408 10410 10412 10414 10416 10418 10420 10422 10424 10426 10428 10430 10432 10434 10436 10438 10440 10442 10444 10446 10448 10450 10452 10454 10456 10458 10460 10462 10464 10466 10468 10470 10472 10474 10476 10478 10480 10482 10484 10486 10488 10490 10492 10494 10496 10498 10500 10502 10504 10506 10508 10510 10512 10514 10516 10518 10520 10522 10524 10526 10528 10530 10532 10534 10536 10538 10540 10542 10544 10546 10548 10550 10552 10554 10556 10558 10560 10562 10564 10566 10568 10570 10572 10574 10576 10578 10580 10582 10584 10586 10588 10590 10592 10594 10596 10598 10600 10602 10604 10606 10608 10610 10612 10614 10616 10618 10620 10622 10624 10626 10628 10630 10632 10634 10636 10638 10640 10642 10644 10646 10648 10650 10652 10654 10656 10658 10660 10662 10664 10666 10668 10670 10672 10674 10676 10678 10680 10682 10684 10686 10688 10690 10692 10694 10696 10698 10700 10702 10704 10706 10708 10710 10712 10714 10716 10718 10720 10722 10724 10726 10728 10730 10732 10734 10736 10738 10740 10742 10744 10746 10748 10750 10752 10754 10756 10758 10760 10762 10764 10766 10768 10770 10772 10774 10776 10778 10780 10782 10784 10786 10788 10790 10792 10794 10796 10798 10800 10802 10804 10806 10808 10810 10812 10814 10816 10818 10820 10822 10824 10826 10828 10830 10832 10834 10836 10838 10840 10842 10844 10846 10848 10850 10852 10854 10856 10858 10860 10862 10864 10866 10868 10870 10872 10874 10876 10878 10880 10882 10884 10886 10888 10890 10892 10894 10896 10898 10900 10902 10904 10906 10908 10910 10912 10914 10916 10918 10920 10922 10924 10926 10928 10930 10932 10934 10936 10938 10940 10942 10944 10946 10948 10950 10952 10954 10956 10958 10960 10962 10964 10966 10968 10970 10972 10974 10976 10978 10980 10982 10984 10986 10988 10990 10992 10994 10996 10998 11000 11002 11004 11006 11008 11010 11012 11014 11016 11018 11020 11022 11024 11026 11028 11030 11032 11034 11036 11038 11040 11042 11044 11046 11048 11050 11052 11054 11056 11058 11060 11062 11064 11066 11068 11070 11072 11074 11076 11078 11080 11082 11084 11086 11088 11090 11092 11094 11096 11098 11100 11102 11104 11106 11108 11110 11112 11114 11116 11118 11120 11122 11124 11126 11128 11130 11132 11134 11136 11138 11140 11142 11144 11146 11148 11150 11152 11154 11156 11158 11160 11162 11164 11166 11168 11170 11172 11174 11176 11178 11180 11182 11184 11186 11188 11190 11192 11194 11196 11198 11200 11202 11204 11206 11208 11210 11212 11214 11216 11218 11220 11222 11224 11226 11228 11230 11232 11234 11236 11238 11240 11242 11244 11246 11248 11250 11252 11254 11256 11258 11260 11262 11264 11266 11268 11270 11272 11274 11276 11278 11280 11282 11284 11286 11288 11290 11292 11294 11296 11298 11300 11302 11304 11306 11308 11310 11312 11314 11316 11318 11320 11322 11324 11326 11328 11330 11332 11334 11336 11338 11340 11342 11344 11346 11348 11350 11352 11354 11356 11358 11360 11362 11364 11366 11368 11370 11372 11374 11376 11378 11380 11382 11384 11386 11388 11390 11392 11394 11396 11398 11400 11402 11404 11406 11408 11410 11412 11414 11416 11418 11420 11422 11424 11426 11428 11430 11432 11434 11436 11438 11440 11442 11444 11446 11448 11450 11452 11454 11456 11458 11460 11462 11464 11466 11468 11470 11472 11474 11476 11478 11480 11482 11484 11486 11488 11490 11492 11494 11496 11498 11500 11502 11504 11506 11508 11510 11512 11514 11516 11518 11520 11522 11524 11526 11528 11530 11532 11534 11536 11538 11540 11542 11544 11546 11548 11550 11552 11554 11556 11558 11560 11562 11564 11566 11568 11570 11572 11574 11576 11578 11580 11582 11584 11586 11588 11590 11592 11594 11596 11598 11600 11602 11604 11606 11608 11610 11612 11614 11616 11618 11620 11622 11624 11626 11628 11630 11632 11634 11636 11638 11640 11642 11644 11646 11648 11650 11652 11654 11656 11658 11660 11662 11664 11666 11668 11670 11672 11674 11676 11678 11680 11682 11684 11686 11688 11690 11692 11694 11696 11698 11700 11702 11704 11706 11708 11710 11712 11714 11716 11718 11720 11722 11724 11726 11728 11730 11732 11734 11736 11738 11740 11742 11744 11746 11748 11750 11752 11754 11756 11758 11760 11762 11764 11766 11768 11770 11772 11774 11776 11778 11780 11782 11784 11786 11788 11790 11792 11794 11796 11798 11800 11802 11804 11806 11808 11810 11812 11814 11816 11818 11820 11822 11824 11826 11828 11830 11832 11834 11836 11838 11840 11842 11844 11846 11848 11850 11852 11854 11856 11858 11860 11862 11864 11866 11868 11870 11872 11874 11876 11878 11880 11882 11884 11886 11888 11890 11892 11894 11896 11898 11900 11902 11904 11906 11908 11910 11912 11914 11916 11918 11920 11922 11924 11926 11928 11930 11932 11934 11936 11938 11940 11942 11944 11946 11948 11950 11952 11954 11956 11958 11960 11962 11964 11966 11968 11970 11972 11974 11976 11978 11980 11982 11984 11986 11988 11990 11992 11994 11996 11998 12000 12002 12004 12006 12008 12010 12012 12014 12016 12018 12020 12022 12024 12026 12028 12030 12032 12034 12036 12038 12040 12042 12044 12046 12048 12050 12052 12054 12056 12058 12060 12062 12064 12066 12068 12070 12072 12074 12076 12078 12080 12082 12084 12086 12088 12090 12092 12094 12096 12098 12100 12102 12104 12106 12108 12110 12112 12114 12116 12118 12120 12122 12124 12126 12128 12130 12132 12134 12136 12138 12140 12142 12144 12146 12148 12150 12152 12154 12156 12158 12160 12162 12164 12166 12168 12170 12172 12174 12176 12178 12180 12182 12184 12186 12188 12190 12192 12194 12196 12198 12200 12202 12204 12206 12208 12210 12212 12214 12216 12218 12220 12222 12224 12226 12228 12230 12232 12234 12236 12238 12240 12242 12244 12246 12248 12250 12252 12254 12256 12258 12260 12262 12264 12266 12268 12270 12272 12274 12276 12278 12280 12282 12284 12286 12288 12290 12292 12294 12296 12298 12300 12302 12304 12306 12308 12310 12312 12314 12316 12318 12320 12322 12324 12326 12328 12330 12332 12334 12336 12338 12340 12342 12344 12346 12348 12350 12352 12354 12356 12358 12360 12362 12364 12366 12368 12370 12372 12374 12376 12378 12380 12382 12384 12386 12388 12390 12392 12394 12396 12398 12400 12402 12404 12406 12408 12410 12412 12414 12416 12418 12420 12422 12424 12426 12428 12430 12432 12434 12436 12438 12440 12442 12444 12446 12448 12450 12452 12454 12456 12458 12460 12462 12464 12466 12468 12470 12472 12474 12476 12478 12480 12482 12484 12486 12488 12490 12492 12494 12496 12498 12500 12502 12504 12506 12508 12510 12512 12514 12516 12518 12520 12522 12524 12526 12528 12530 12532 12534 12536 12538 12540 12542 12544 12546 12548 12550 12552 12554 12556 12558 12560 12562 12564 12566 12568 12570 12572 12574 12576 12578 12580 12582 12584 12586 12588 12590 12592 12594 12596 12598 12600 12602 12604 12606 12608 12610 12612 12614 12616 12618 12620 12622 12624 12626 12628 12630 12632 12634 12636 12638 12640 12642 12644 12646 12648 12650 12652 12654 12656 12658 12660 12662 12664 12666 12668 12670 12672 12674 12676 12678 12680 12682 12684 12686 12688 12690 12692 12694 12696 12698 12700 12702 12704 12706 12708 12710 12712 12714 12716 12718 12720 12722 12724 12726 12728 12730 12732 12734 12736 12738 12740 12742 12744 12746 12748 12750 12752 12754 12756 12758 12760 12762 12764 12766 12768 12770 12772 12774 12776 12778 12780 12782 12784 12786 12788 12790 12792 12794 12796 12798 12800 12802 12804 12806 12808 12810 12812 12814 12816 12818 12820 12822 12824 12826 12828 12830 12832 12834 12836 12838 12840 12842 12844 12846 12848 12850 12852 12854 12856 12858 12860 12862 12864 12866 12868 12870 12872 12874 12876 12878 12880 12882 12884 12886 12888 12890 12892 12894 12896 12898 12900 12902 12904 12906 12908 12910 12912 12914 12916 12918 12920 12922 12924 12926 12928 12930 12932 12934 12936 12938 12940 12942 12944 12946 12948 12950 12952 12954 12956 12958 12960 12962 12964 12966 12968 12970 12972 12974 12976 12978 12980 12982 12984 12986 12988 12990 12992 12994 12996 12998 13000 13002 13004 13006 13008 13010 13012 13014 13016 13018 13020 13022 13024 13026 13028 13030 13032 13034 13036 13038 13040 13042 13044 13046 13048 13050 13052 13054 13056 13058 13060 13062 13064 13066 13068 13070 13072 13074 13076 13078 13080 13082 13084 13086 13088 13090 13092 13094 13096 13098 13100 13102 13104 13106 13108 13110 13112 13114 13116 13118 13120 13122 13124 13126 13128 13130 13132 13134 13136 13138 13140 13142 13144 13146 13148 13150 13152 13154 13156 13158 13160 13162 13164 13166 13168 13170 13172 13174 13176 13178 13180 13182 13184 13186 13188 13190 13192 13194 13196 13198 13200 13202 13204 13206 13208 13210 13212 13214 13216 13218 13220 13222 13224 13226 13228 13230 13232 13234 13236 13238 13240 13242 13244 13246 13248 13250 13252 13254 13256 13258 13260 13262 13264 13266 13268 13270 13272 13274 13276 13278 13280 13282 13284 13286 13288 13290 13292 13294 13296 13298 13300 13302 13304 13306 13308 13310 13312 13314 13316 13318 13320 13322 13324 13326 13328 13330 13332 13334 13336 13338 13340 13342 13344 13346 13348 13350 13352 13354 13356 13358 13360 13362 13364 13366 13368 13370 13372 13374 13376 13378 13380 13382 13384 13386 13388 13390 13392 13394 13396 13398 13400 13402 13404 13406 13408 13410 13412 13414 13416 13418 13420 13422 13424 13426 13428 13430 13432 13434 13436 13438 13440 13442 13444 13446 13448 13450 13452 13454 13456 13458 13460 13462 13464 13466 13468 13470 13472 13474 13476 13478 13480 13482 13484 13486 13488 13490 13492 13494 13496 13498 13500 13502 13504 13506 13508 13510 13512 13514 13516 13518 13520 13522 13524 13526 13528 13530 13532 13534 13536 13538 13540 13542 13544 13546 13548 13550 13552 13554 13556 13558 13560 13562 13564 13566 13568 13570 13572 13574 13576 13578 13580 13582 13584 13586 13588 13590 13592 13594 13596 13598 13600 13602 13604 13606 13608 13610 13612 13614 13616 13618 13620 13622 13624 13626 13628 13630 13632 13634 13636 13638 13640 13642 13644 13646 13648 13650 13652 13654 13656 13658 13660 13662 13664 13666 13668 13670 13672 13674 13676 13678 13680 13682 13684 13686 13688 13690 13692 13694 13696 13698 13700 13702 13704 13706 13708 13710 13712 13714 13716 13718 13720 13722 13724 13726 13728 13730 13732 13734 13736 13738 13740 13742 13744 13746 13748 13750 13752 13754 13756 13758 13760 13762 13764 13766 13768 13770 13772 13774 13776 13778 13780 13782 13784 13786 13788 13790 13792 13794 13796 13798 13800 13802 13804 13806 13808 13810 13812 13814 13816 13818 13820 13822 13824 13826 13828 13830 13832 13834 13836 13838 13840 13842 13844 13846 13848 13850 13852 13854 13856 13858 13860 13862 13864 13866 13868 13870 13872 13874 13876 13878 13880 13882 13884 13886 13888 13890 13892 13894 13896 13898 13900 13902 13904 13906 13908 13910 13912 13914 13916 13918 13920 13922 13924 13926 13928 13930 13932 13934 13936 13938 13940 13942 13944 13946 13948 13950 13952 13954 13956 13958 13960 13962 13964 13966 13968 13970 13972 13974 13976 13978 13980 13982 13984 13986 13988 13990 13992 13994 13996 13998 14000 14002 14004 14006 14008 14010 14012 14014 14016 14018 14020 14022 14024 14026 14028 14030 14032 14034 14036 14038 14040 14042 14044 14046 14048 14050 14052 14054 14056 14058 14060 14062 14064 14066 14068 14070 14072 14074 14076 14078 14080 14082 14084 14086 14088 14090 14092 14094 14096 14098 14100 14102 14104 14106 14108 14110 14112 14114 14116 14118 14120 14122 14124 14126 14128 14130 14132 14134 14136 14138 14140 14142 14144 14146 14148 14150 14152 14154 14156 14158 14160 14162 14164 14166 14168 14170 14172 14174 14176 14178 14180 14182 14184 14186 14188 14190 14192 14194 14196 14198 14200 14202 14204 14206 14208 14210 14212 14214 14216 14218 14220 14222 14224 14226 14228 14230 14232 14234 14236 14238 14240 14242 14244 14246 14248 14250 14252 14254 14256 14258 14260 14262 14264 14266 14268 14270 14272 14274 14276 14278 14280 14282 14284 14286 14288 14290 14292 14294 14296 14298 14300 14302 14304 14306 14308 14310 14312 14314 14316 14318 14320 14322 14324 14326 14328 14330 14332 14334 14336 14338 14340 14342 14344 14346 14348 14350 14352 14354 14356 14358 14360 14362 14364 14366 14368 14370 14372 14374 14376 14378 14380 14382 14384 14386 14388 14390 14392 14394 14396 14398 14400 14402 14404 14406 14408 14410 14412 14414 14416 14418 14420 14422 14424 14426 14428 14430 14432 14434 14436 14438 14440 14442 14444 14446 14448 14450 14452 14454 14456 14458 14460 14462 14464 14466 14468 14470 14472 14474 14476 14478 14480 14482 14484 14486 14488 14490 14492 14494 14496 14498 14500 14502 14504 14506 14508 14510 14512 14514 14516 14518 14520 14522 14524 14526 14528 14530 14532 14534 14536 14538 14540 14542 14544 14546 14548 14550 14552 14554 14556 14558 14560 14562 14564 14566 14568 14570 14572 14574 14576 14578 14580 14582 14584 14586 14588 14590 14592 14594 14596 14598 14600 14602 14604 14606 14608 14610 14612 14614 14616 14618 14620 14622 14624 14626 14628 14630 14632 14634 14636 14638 14640 14642 14644 14646 14648 14650 14652 14654 14656 14658 14660 14662 14664 14666 14668 14670 14672 14674 14676 14678 14680 14682 14684 14686 14688 14690 14692 14694 14696 14698 14700 14702 14704 14706 14708 14710 14712 14714 14716 14718 14720 14722 14724 14726 14728 14730 14732 14734 14736 14738 14740 14742 14744 14746 14748 14750 14752 14754 14756 14758 14760 14762 14764 14766 14768 14770 14772 14774 14776 14778 14780 14782 14784 14786 14788 14790 14792 14794 14796 14798 14800 14802 14804 14806 14808 14810 14812 14814 14816 14818 14820 14822 14824 14826 14828 14830 14832 14834 14836 14838 14840 14842 14844 14846 14848 14850 14852 14854 14856 14858 14860 14862 14864 14866 14868 14870 14872 14874 14876 14878 14880 14882 14884 14886 14888 14890 14892 14894 14896 14898 14900 14902 14904 14906 14908 14910 14912 14914 14916 14918 14920 14922 14924 14926 14928 14930 14932 14934 14936 14938 14940 14942 14944 14946 14948 14950 14952 14954 14956 14958 14960 14962 14964 14966 14968 14970 14972 14974 14976 14978 14980 14982 14984 14986 14988 14990 14992 14994 14996 14998 15000 15002 15004 15006 15008 15010 15012 15014 15016 15018 15020 15022 15024 15026 15028 15030 15032 15034 15036 15038 15040 15042 15044 15046 15048 15050 15052 15054 15056 15058 15060 15062 15064 15066 15068 15070 15072 15074 15076 15078 15080 15082 15084 15086 15088 15090 15092 15094 15096 15098 15100 15102 15104 15106 15108 15110 15112 15114 15116 15118 15120 15122 15124 15126 15128 15130 15132 15134 15136 15138 15140 15142 15144 15146 15148 15150 15152 15154 15156 15158 15160 15162 15164 15166 15168 15170 15172 15174 15176 15178 15180 15182 15184 15186 15188 15190 15192 15194 15196 15198 15200 15202 15204 15206 15208 15210 15212 15214 15216 15218 15220 15222 15224 15226 15228 15230 15232 15234 15236 15238 15240 15242 15244 15246 15248 15250 15252 15254 15256 15258 15260 15262 15264 15266 15268 15270 15272 15274 15276 15278 15280 15282 15284 15286 15288 15290 15292 15294 15296 15298 15300 15302 15304 15306 15308 15310 15312 15314 15316 15318 15320 15322 15324 15326 15328 15330 15332 15334 15336 15338 15340 15342 15344 15346 15348 15350 15352 15354 15356 15358 15360 15362 15364 15366 15368 15370 15372 15374 15376 15378 15380 15382 15384 15386 15388 15390 15392 15394 15396 15398 15400 15402 15404 15406 15408 15410 15412 15414 15416 15418 15420 15422 15424 15426 15428 15430 15432 15434 15436 15438 15440 15442 15444 15446 15448 15450 15452 15454 15456 15458 15460 15462 15464 15466 15468 15470 15472 15474 15476 15478 15480 15482 15484 15486 15488 15490 15492 15494 15496 15498 15500 15502 15504 15506 15508 15510 15512 15514 15516 15518 15520 15522 15524 15526 15528 15530 15532 15534 15536 15538 15540 15542 15544 15546 15548 15550 15552 15554 15556 15558 15560 15562 15564 15566 15568 15570 15572 15574 15576 15578 15580 15582 15584 15586 15588 15590 15592 15594 15596 15598 15600 15602 15604 15606 15608 15610 15612 15614 15616 15618 15620 15622 15624 15626 15628 15630 15632 15634 15636 15638 15640 15642 15644 15646 15648 15650 15652 15654 15656 15658 15660 15662 15664 15666 15668 15670 15672 15674 15676 15678 15680 15682 15684 15686 15688 15690 15692 15694 15696 15698 15700 15702 15704 15706 15708 15710 15712 15714 15716 15718 15720 15722 15724 15726 15728 15730 15732 15734 15736 15738 15740 15742 15744 15746 15748 15750 15752 15754 15756 15758 15760 15762 15764 15766 15768 15770 15772 15774 15776 15778 15780 15782 15784 15786 15788 15790 15792 15794 15796 15798 15800 15802 15804 15806 15808 15810 15812 15814 15816 15818 15820 15822 15824 15826 15828 15830 15832 15834 15836 15838 15840 15842 15844 15846 15848 15850 15852 15854 15856 15858 15860 15862 15864 15866 15868 15870 15872 15874 15876 15878 15880 15882 15884 15886 15888 15890 15892 15894 15896 15898 15900 15902 15904 15906 15908 15910 15912 15914 15916 15918 15920 15922 15924 15926 15928 15930 15932 15934 15936 15938 15940 15942 15944 15946 15948 15950 15952 15954 15956 15958 15960 15962 15964 15966 15968 15970 15972 15974 15976 15978 15980 15982 15984 15986 15988 15990 15992 15994 15996 15998 16000 16002 16004 16006 16008 16010 16012 16014 16016 16018 16020 16022 16024 16026 16028 16030 16032 16034 16036 16038 16040 16042 16044 16046 16048 16050 16052 16054 16056 16058 16060 16062 16064 16066 16068 16070 16072 16074 16076 16078 16080 16082 16084 16086 16088 16090 16092 16094 16096 16098 16100 16102 16104 16106 16108 16110 16112 16114 16116 16118 16120 16122 16124 16126 16128 16130 16132 16134 16136 16138 16140 16142 16144 16146 16148 16150 16152 16154 16156 16158 16160 16162 16164 16166 16168 16170 16172 16174 16176 16178 16180 16182 16184 16186 16188 16190 16192 16194 16196 16198 16200 16202 16204 16206 16208 16210 16212 16214 16216 16218 16220 16222 16224 16226 16228 16230 16232 16234 16236 16238 16240 16242 16244 16246 16248 16250 16252 16254 16256 16258 16260 16262 16264 16266 16268 16270 16272 16274 16276 16278 16280 16282 16284 16286 16288 16290 16292 16294 16296 16298 16300 16302 16304 16306 16308 16310 16312 16314 16316 16318 16320 16322 16324 16326 16328 16330 16332 16334 16336 16338 16340 16342 16344 16346 16348 16350 16352 16354 16356 16358 16360 16362 16364 16366 16368 16370 16372 16374 16376 16378 16380 16382 16384 16386 16388 16390 16392 16394 16396 16398 16400 16402 16404 16406 16408 16410 16412 16414 16416 16418 16420 16422 16424 16426 16428 16430 16432 16434 16436 16438 16440 16442 16444 16446 16448 16450 16452 16454 16456 16458 16460 16462 16464 16466 16468 16470 16472 16474 16476 16478 16480 16482 16484 16486 16488 16490 16492 16494 16496 16498 16500 16502 16504 16506 16508 16510 16512 16514 16516 16518 16520 16522 16524 16526 16528 16530 16532 16534 16536 16538 16540 16542 16544 16546 16548 16550 16552 16554 16556 16558 16560 16562 16564 16566 16568 16570 16572 16574 16576 16578 16580 16582 16584 16586 16588 16590 16592 16594 16596 16598 16600 16602 16604 16606 16608 16610 16612 16614 16616 16618 16620 16622 16624 16626 16628 16630 16632 16634 16636 16638 16640 16642 16644 16646 16648 16650 16652 16654 16656 16658 16660 16662 16664 16666 16668 16670 16672 16674 16676 16678 16680 16682 16684 16686 16688 16690 16692 16694 16696 16698 16700 16702 16704 16706 16708 16710 16712 16714 16716 16718 16720 16722 16724 16726 16728 16730 16732 16734 16736 16738 16740 16742 16744 16746 16748 16750 16752 16754 16756 16758 16760 16762 16764 16766 16768 16770 16772 16774 16776 16778 16780 16782 16784 16786 16788 16790 16792 16794 16796 16798 16800 16802 16804 16806 16808 16810 16812 16814 16816 16818 16820 16822 16824 16826 16828 16830 16832 16834 16836 16838 16840 16842 16844 16846 16848 16850 16852 16854 16856 16858 16860 16862 16864 16866 16868 16870 16872 16874 16876 16878 16880 16882 16884 16886 16888 16890 16892 16894 16896 16898 16900 16902 16904 16906 16908 16910 16912 16914 16916 16918 16920 16922 16924 16926 16928 16930 16932 16934 16936 16938 16940 16942 16944 16946 16948 16950 16952 16954 16956 16958 16960 16962 16964 16966 16968 16970 16972 16974 16976 16978 16980 16982 16984 16986 16988 16990 16992 16994 16996 16998 17000 17002 17004 17006 17008 17010 17012 17014 17016 17018 17020 17022 17024 17026 17028 17030 17032 17034 17036 17038 17040 17042 17044 17046 17048 17050 17052 17054 17056 17058 17060 17062 17064 17066 17068 17070 17072 17074 17076 17078 17080 17082 17084 17086 17088 17090 17092 17094 17096 17098 17100 17102 17104 17106 17108 17110 17112 17114 17116 17118 17120 17122 17124 17126 17128 17130 17132 17134 17136 17138 17140 17142 17144 17146 17148 17150 17152 17154 17156 17158 17160 17162 17164 17166 17168 17170 17172 17174 17176 17178 17180 17182 17184 17186 17188 17190 17192 17194 17196 17198 17200 17202 17204 17206 17208 17210 17212 17214 17216 17218 17220 17222 17224 17226 17228 17230 17232 17234 17236 17238 17240 17242 17244 17246 17248 17250 17252 17254 17256 17258 17260 17262 17264 17266 17268 17270 17272 17274 17276 17278 17280 17282 17284 17286 17288 17290 17292 17294 17296 17298 17300 17302 17304 17306 17308 17310 17312 17314 17316 17318 17320 17322 17324 17326 17328 17330 17332 17334 17336 17338 17340 17342 17344 17346 17348 17350 17352 17354 17356 17358 17360 17362 17364 17366 17368 17370 17372 17374 17376 17378 17380 17382 17384 17386 17388 17390 17392 17394 17396 17398 17400 17402 17404 17406 17408 17410 17412 17414 17416 17418 17420 17422 17424 17426 17428 17430 17432 17434 17436 17438 17440 17442 17444 17446 17448 17450 17452 17454 17456 17458 17460 17462 17464 17466 17468 17470 17472 17474 17476 17478 17480 17482 17484 17486 17488 17490 17492 17494 17496 17498 17500 17502 17504 17506 17508 17510 17512 17514 17516 17518 17520 17522 17524 17526 17528 17530 17532 17534 17536 17538 17540 17542 17544 17546 17548 17550 17552 17554 17556 17558 17560 17562 17564 17566 17568 17570 17572 17574 17576 17578 17580 17582 17584 17586 17588 17590 17592 17594 17596 17598 17600 17602 17604 17606 17608 17610 17612 17614 17616 17618 17620 17622 17624 17626 17628 17630 17632 17634 17636 17638 17640 17642 17644 17646 17648 17650 17652 17654 17656 17658 17660 17662 17664 17666 17668 17670 17672 17674 17676 17678 17680 17682 17684 17686 17688 17690 17692 17694 17696 17698 17700 17702 17704 17706 17708 17710 17712 17714 17716 17718 17720 17722 17724 17726 17728 17730 17732 17734 17736 17738 17740 17742 17744 17746 17748 17750 17752 17754 17756 17758 17760 17762 17764 17766 17768 17770 17772 17774 17776 17778 17780 17782 17784 17786 17788 17790 17792 17794 17796 17798 17800 17802 17804 17806 17808 17810 17812 17814 17816 17818 17820 17822 17824 17826 17828 17830 17832 17834 17836 17838 17840 17842 17844 17846 17848 17850 17852 17854 17856 17858 17860 17862 17864 17866 17868 17870 17872 17874 17876 17878 17880 17882 17884 17886 17888 17890 17892 17894 17896 17898 17900 17902 17904 17906 17908 17910 17912 17914 17916 17918 17920 17922 17924 17926 17928 17930 17932 17934 17936 17938 17940 17942 17944 17946 17948 17950 17952 17954 17956 17958 17960 17962 17964 17966 17968 17970 17972 17974 17976 17978 17980 17982 17984 17986 17988 17990 17992 17994 17996 17998 18000 18002 18004 18006 18008 18010 18012 18014 18016 18018 18020 18022 18024 18026 18028 18030 18032 18034 18036 18038 18040 18042 18044 18046 18048 18050 18052 18054 18056 18058 18060 18062 18064 18066 18068 18070 18072 18074 18076 18078 18080 18082 18084 18086 18088 18090 18092 18094 18096 18098 18100 18102 18104 18106 18108 18110 18112 18114 18116 18118 18120 18122 18124 18126 18128 18130 18132 18134 18136 18138 18140 18142 18144 18146 18148 18150 18152 18154 18156 18158 18160 18162 18164 18166 18168 18170 18172 18174 18176 18178 18180 18182 18184 18186 18188 18190 18192 18194 18196 18198 18200 18202 18204 18206 18208 18210 18212 18214 18216 18218 18220 18222 18224 18226 18228 18230 18232 18234 18236 18238 18240 18242 18244 18246 18248 18250 18252 18254 18256 18258 18260 18262 18264 18266 18268 18270 18272 18274 18276 18278 18280 18282 18284 18286 18288 18290 18292 18294 18296 18298 18300 18302 18304 18306 18308 18310 18312 18314 18316 18318 18320 18322 18324 18326 18328 18330 18332 18334 18336 18338 18340 18342 18344 18346 18348 18350 18352 18354 18356 18358 18360 18362 18364 18366 18368 18370 18372 18374 18376 18378 18380 18382 18384 18386 18388 18390 18392 18394 18396 18398 18400 18402 18404 18406 18408 18410 18412 18414 18416 18418 18420 18422 18424 18426 18428 18430 18432 18434 18436 18438 18440 18442 18444 18446 18448 18450 18452 18454 18456 18458 18460 18462 18464 18466 18468 18470 18472 18474 18476 18478 18480 18482 18484 18486 18488 18490 18492 18494 18496 18498 18500 18502 18504 18506 18508 18510 18512 18514 18516 18518 18520 18522 18524 18526 18528 18530 18532 18534 18536 18538 18540 18542 18544 18546 18548 18550 18552 18554 18556 18558 18560 18562 18564 18566 18568 18570 18572 18574 18576 18578 18580 18582 18584 18586 18588 18590 18592 18594 18596 18598 18600 18602 18604 18606 18608 18610 18612 18614 18616 18618 18620 18622 18624 18626 18628 18630 18632 18634 18636 18638 18640 18642 18644 18646 18648 18650 18652 18654 18656 18658 18660 18662 18664 18666 18668 18670 18672 18674 18676 18678 18680 18682 18684 18686 18688 18690 18692 18694 18696 18698 18700 18702 18704 18706 18708 18710 18712 18714 18716 18718 18720 18722 18724 18726 18728 18730 18732 18734 18736 18738 18740 18742 18744 18746 18748 18750 18752 18754 18756 18758 18760 18762 18764 18766 18768 18770 18772 18774 18776 18778 18780 18782 18784 18786 18788 18790 18792 18794 18796 18798 18800 18802 18804 18806 18808 18810 18812 18814 18816 18818 18820 18822 18824 18826 18828 18830 18832 18834 18836 18838 18840 18842 18844 18846 18848 18850 18852 18854 18856 18858 18860 18862 18864 18866 18868 18870 18872 18874 18876 18878 18880 18882 18884 18886 18888 18890 18892 18894 18896 18898 18900 18902 18904 18906 18908 18910 18912 18914 18916 18918 18920 18922 18924 18926 18928 18930 18932 18934 18936 18938 18940 18942 18944 18946 18948 18950 18952 18954 18956 18958 18960 18962 18964 18966 18968 18970 18972 18974 18976 18978 18980 18982 18984 18986 18988 18990 18992 18994 18996 18998 19000 19002 19004 19006 19008 19010 19012 19014 19016 19018 19020 19022 19024 19026 19028 19030 19032 19034 19036 19038 19040 19042 19044 19046 19048 19050 19052 19054 19056 19058 19060 19062 19064 19066 19068 19070 19072 19074 19076 19078 19080 19082 19084 19086 19088 19090 19092 19094 19096 19098 19100 19102 19104 19106 19108 19110 19112 19114 19116 19118 19120 19122 19124 19126 19128 19130 19132 19134 19136 19138 19140 19142 19144 19146 19148 19150 19152 19154 19156 19158 19160 19162 19164 19166 19168 19170 19172 19174 19176 19178 19180 19182 19184 19186 19188 19190 19192 19194 19196 19198 19200 19202 19204 19206 19208 19210 19212 19214 19216 19218 19220 19222 19224 19226 19228 19230 19232 19234 19236 19238 19240 19242 19244 19246 19248 19250 19252 19254 19256 19258 19260 19262 19264 19266 19268 19270 19272 19274 19276 19278 19280 19282 19284 19286 19288 19290 19292 19294 19296 19298 19300 19302 19304 19306 19308 19310 19312 19314 19316 19318 19320 19322 19324 19326 19328 19330 19332 19334 19336 19338 19340 19342 19344 19346 19348 19350 19352 19354 19356 19358 19360 19362 19364 19366 19368 19370 19372 19374 19376 19378 19380 19382 19384 19386 19388 19390 19392 19394 19396 19398 19400 19402 19404 19406 19408 19410 19412 19414 19416 19418 19420 19422 19424 19426 19428 19430 19432 19434 19436 19438 19440 19442 19444 19446 19448 19450 19452 19454 19456 19458 19460 19462 19464 19466 19468 19470 19472 19474 19476 19478 19480 19482 19484 19486 19488 19490 19492 19494 19496 19498 19500 19502 19504 19506 19508 19510 19512 19514 19516 19518 19520 19522 19524 19526 19528 19530 19532 19534 19536 19538 19540 19542 19544 19546 19548 19550 19552 19554 19556 19558 19560 19562 19564 19566 19568 19570 19572 19574 19576 19578 19580 19582 19584 19586 19588 19590 19592 19594 19596 19598 19600 19602 19604 19606 19608 19610 19612 19614 19616 19618 19620 19622 19624 19626 19628 19630 19632 19634 19636 19638 19640 19642 19644 19646 19648 19650 19652 19654 19656 19658 19660 19662 19664 19666 19668 19670 19672 19674 19676 19678 19680 19682 19684 19686 19688 19690 19692 19694 19696 19698 19700 19702 19704 19706 19708 19710 19712 19714 19716 19718 19720 19722 19724 19726 19728 19730 19732 19734 19736 19738 19740 19742 19744 19746 19748 19750 19752 19754 19756 19758 19760 19762 19764 19766 19768 19770 19772 19774 19776 19778 19780 19782 19784 19786 19788 19790 19792 19794 19796 19798 19800 19802 19804 19806 19808 19810 19812 19814 19816 19818 19820 19822 19824 19826 19828 19830 19832 19834 19836 19838 19840 19842 19844 19846 19848 19850 19852 19854 19856 19858 19860 19862 19864 19866 19868 19870 19872 19874 19876 19878 19880 19882 19884 19886 19888 19890 19892 19894 19896 19898 19900 19902 19904 19906 19908 19910 19912 19914 19916 19918 19920 19922 19924 19926 19928 19930 19932 19934 19936 19938 19940 19942 19944 19946 19948 19950 19952 19954 19956 19958 19960 19962 19964 19966 19968 19970 19972 19974 19976 19978 19980 19982 19984 19986 19988 19990 19992 19994 19996 19998 20000 20002 20004 20006 20008 20010 20012 20014 20016 20018 20020 20022 20024 20026 20028 20030 20032 20034 20036 20038 20040 20042 20044 20046 20048 20050 20052 20054 20056 20058 20060 20062 20064 20066 20068 20070 20072 20074 20076 20078 20080 20082 20084 20086 20088 20090 20092 20094 20096 20098 20100 20102 20104 20106 20108 20110 20112 20114 20116 20118 20120 20122 20124 20126 20128 20130 20132 20134 20136 20138 20140 20142 20144 20146 20148 20150 20152 20154 20156 20158 20160 20162 20164 20166 20168 20170 20172 20174 20176 20178 20180 20182 20184 20186 20188 20190 20192 20194 20196 20198 20200 20202 20204 20206 20208 20210 20212 20214 20216 20218 20220 20222 20224 20226 20228 20230 20232 20234 20236 20238 20240 20242 20244 20246 20248 20250 20252 20254 20256 20258 20260 20262 20264 20266 20268 20270 20272 20274 20276 20278 20280 20282 20284 20286 20288 20290 20292 20294 20296 20298 20300 20302 20304 20306 20308 20310 20312 20314 20316 20318 20320 20322 20324 20326 20328 20330 20332 20334 20336 20338 20340 20342 20344 20346 20348 20350 20352 20354 20356 20358 20360 20362 20364 20366 20368 20370 20372 20374 20376 20378 20380 20382 20384 20386 20388 20390 20392 20394 20396 20398 20400 20402 20404 20406 20408 20410 20412 20414 20416 20418 20420 20422 20424 20426 20428 20430 20432 20434 20436 20438 20440 20442 20444 20446 20448 20450 20452 20454 20456 20458 20460 20462 20464 20466 20468 20470 20472 20474 20476 20478 20480 20482 20484 20486 20488 20490 20492 20494 20496 20498 20500 20502 20504 20506 20508 20510 20512 20514 20516 20518 20520 20522 20524 20526 20528 20530 20532 20534 20536 20538 20540 20542 20544 20546 20548 20550 20552 20554 20556 20558 20560 20562 20564 20566 20568 20570 20572 20574 20576 20578 20580 20582 20584 20586 20588 20590 20592 20594 20596 20598 20600 20602 20604 20606 20608 20610 20612 20614 20616 20618 20620 20622 20624 20626 20628 20630 20632 20634 20636 20638 20640 20642 20644 20646 20648 20650 20652 20654 20656 20658 20660 20662 20664 20666 20668 20670 20672 20674 20676 20678 20680 20682 20684 20686 20688 20690 20692 20694 20696 20698 20700 20702 20704 20706 20708 20710 20712 20714 20716 20718 20720 20722 20724 20726 20728 20730 20732 20734 20736 20738 20740 20742 20744 20746 20748 20750 20752 20754 20756 20758 20760 20762 20764 20766 20768 20770 20772 20774 20776 20778 20780 20782 20784 20786 20788 20790 20792 20794 20796 20798 20800 20802 20804 20806 20808 20810 20812 20814 20816 20818 20820 20822 20824 20826 20828 20830 20832 20834 20836 20838 20840 20842 20844 20846 20848 20850 20852 20854 20856 20858 20860 20862 20864 20866 20868 20870 20872 20874 20876 20878 20880 20882 20884 20886 20888 20890 20892 20894 20896 20898 20900 20902 20904 20906 20908 20910 20912 20914 20916 20918 20920 20922 20924 20926 20928 20930 20932 20934 20936 20938 20940 20942 20944 20946 20948 20950 20952 20954 20956 20958 20960 20962 20964 20966 20968 20970 20972 20974 20976 20978 20980 20982 20984 20986 20988 20990 20992 20994 20996 20998 21000 21002 21004 21006 21008 21010 21012 21014 21016 21018 21020 21022 21024 21026 21028 21030 21032 21034 21036 21038 21040 21042 21044 21046 21048 21050 21052 21054 21056 21058 21060 21062 21064 21066 21068 21070 21072 21074 21076 21078 21080 21082 21084 21086 21088 21090 21092 21094 21096 21098 21100 21102 21104 21106 21108 21110 21112 21114 21116 21118 21120 21122 21124 21126 21128 21130 21132 21134 21136 21138 21140 21142 21144 21146 21148 21150 21152 21154 21156 21158 21160 21162 21164 21166 21168 21170 21172 21174 21176 21178 21180 21182 21184 21186 21188 21190 21192 21194 21196 21198 21200 21202 21204 21206 21208 21210 21212 21214 21216 21218 21220 21222 21224 21226 21228 21230 21232 21234 21236 21238 21240 21242 21244 21246 21248 21250 21252 21254 21256 21258 21260 21262 21264 21266 21268 21270 21272 21274 21276 21278 21280 21282 21284 21286 21288 21290 21292 21294 21296 21298 21300 21302 21304 21306 21308 21310 21312 21314 21316 21318 21320 21322 21324 21326 21328 21330 21332 21334 21336 21338 21340 21342 21344 21346 21348 21350 21352 21354 21356 21358 21360 21362 21364 21366 21368 21370 21372 21374 21376 21378 21380 21382 21384 21386 21388 21390 21392 21394 21396 21398 21400 21402 21404 21406 21408 21410 21412 21414 21416 21418 21420 21422 21424 21426 21428 21430 21432 21434 21436 21438 21440 21442 21444 21446 21448 21450 21452 21454 21456 21458 21460 21462 21464 21466 21468 21470 21472 21474 21476 21478 21480 21482 21484 21486 21488 21490 21492 21494 21496 21498 21500 21502 21504 21506 21508 21510 21512 21514 21516 21518 21520 21522 21524 21526 21528 21530 21532 21534 21536 21538 21540 21542 21544 21546 21548 21550 21552 21554 21556 21558 21560 21562 21564 21566 21568 21570 21572 21574 21576 21578 21580 21582 21584 21586 21588 21590 21592 21594 21596 21598 21600 21602 21604 21606 21608 21610 21612 21614 21616 21618 21620 21622 21624 21626 21628 21630 21632 21634 21636 21638 21640 21642 21644 21646 21648 21650 21652 21654 21656 21658 21660 21662 21664 21666 21668 21670 21672 21674 21676 21678 21680 21682 21684 21686 21688 21690 21692 21694 21696 21698 21700 21702 21704 21706 21708 21710 21712 21714 21716 21718 21720 21722 21724 21726 21728 21730 21732 21734 21736 21738 21740 21742 21744 21746 21748 21750 21752 21754 21756 21758 21760 21762 21764 21766 21768 21770 21772 21774 21776 21778 21780 21782 21784 21786 21788 21790 21792 21794 21796 21798 21800 21802 21804 21806 21808 21810 21812 21814 21816 21818 21820 21822 21824 21826 21828 21830 21832 21834 21836 21838 21840 21842 21844 21846 21848 21850 21852 21854 21856 21858 21860 21862 21864 21866 21868 21870 21872 21874 21876 21878 21880 21882 21884 21886 21888 21890 21892 21894 21896 21898 21900 21902 21904 21906 21908 21910 21912 21914 21916 21918 21920 21922 21924 21926 21928 21930 21932 21934 21936 21938 21940 21942 21944 21946 21948 21950 21952 21954 21956 21958 21960 21962 21964 21966 21968 21970 21972 21974 21976 21978 21980 21982 21984 21986 21988 21990 21992 21994 21996 21998 22000 22002 22004 22006 22008 22010 22012 22014 22016 22018 22020 22022 22024 22026 22028 22030 22032 22034 22036 22038 22040 22042 22044 22046 22048 22050 22052 22054 22056 22058 22060 22062 22064 22066 22068 22070 22072 22074 22076 22078 22080 22082 22084 22086 22088 22090 22092 22094 22096 22098 22100 22102 22104 22106 22108 22110 22112 22114 22116 22118 22120 22122 22124 22126 22128 22130 22132 22134 22136 22138 22140 22142 22144 22146 22148 22150 22152 22154 22156 22158 22160 22162 22164 22166 22168 22170 22172 22174 22176 22178 22180 22182 22184 22186 22188 22190 22192 22194 22196 22198 22200 22202 22204 22206 22208 22210 22212 22214 22216 22218 22220 22222 22224 22226 22228 22230 22232 22234 22236 22238 22240 22242 22244 22246 22248 22250 22252 22254 22256 22258 22260 22262 22264 22266 22268 22270 22272 22274 22276 22278 22280 22282 22284 22286 22288 22290 22292 22294 22296 22298 22300 22302 22304 22306 22308 22310 22312 22314 22316 22318 22320 22322 22324 22326 22328 22330 22332 22334 22336 22338 22340 22342 22344 22346 22348 22350 22352 22354 22356 22358 22360 22362 22364 22366 22368 22370 22372 22374 22376 22378 22380 22382 22384 22386 22388 22390 22392 22394 22396 22398 22400 22402 22404 22406 22408 22410 22412 22414 22416 22418 22420 22422 22424 22426 22428 22430 22432 22434 22436 22438 22440 22442 22444 22446 22448 22450 22452 22454 22456 22458 22460 22462 22464 22466 22468 22470 22472 22474 22476 22478 22480 22482 22484 22486 22488 22490 22492 22494 22496 22498 22500 22502 22504 22506 22508 22510 22512 22514 22516 22518 22520 22522 22524 22526 22528 22530 22532 22534 22536 22538 22540 22542 22544 22546 22548 22550 22552 22554 22556 22558 22560 22562 22564 22566 22568 22570 22572 22574 22576 22578 22580 22582 22584 22586 22588 22590 22592 22594 22596 22598 22600 22602 22604 22606 22608 22610 22612 22614 22616 22618 22620 22622 22624 22626 22628 22630 22632 22634 22636 22638 22640 22642 22644 22646 22648 22650 22652 22654 22656 22658 22660 22662 22664 22666 22668 22670 22672 22674 22676 22678 22680 22682 22684 22686 22688 22690 22692 22694 22696 22698 22700 22702 22704 22706 22708 22710 22712 22714 22716 22718 22720 22722 22724 22726 22728 22730 22732 22734 22736 22738 22740 22742 22744 22746 22748 22750 22752 22754 22756 22758 22760 22762 22764 22766 22768 22770 22772 22774 22776 22778 22780 22782 22784 22786 22788 22790 22792 22794 22796 22798 22800 22802 22804 22806 22808 22810 22812 22814 22816 22818 22820 22822 22824 22826 22828 22830 22832 22834 22836 22838 22840 22842 22844 22846 22848 22850 22852 22854 22856 22858 22860 22862 22864 22866 22868 22870 22872 22874 22876 22878 22880 22882 22884 22886 22888 22890 22892 22894 22896 22898 22900 22902 22904 22906 22908 22910 22912 22914 22916 22918 22920 22922 22924 22926 22928 22930 22932 22934 22936 22938 22940 22942 22944 22946 22948 22950 22952 22954 22956 22958 22960 22962 22964 22966 22968 22970 22972 22974 22976 22978 22980 22982 22984 22986 22988 22990 22992 22994 22996 22998 23000 23002 23004 23006 23008 23010 23012 23014 23016 23018 23020 23022 23024 23026 23028 23030 23032 23034 23036 23038 23040 23042 23044 23046 23048 23050 23052 23054 23056 23058 23060 23062 23064 23066 23068 23070 23072 23074 23076 23078 23080 23082 23084 23086 23088 23090 23092 23094 23096 23098 23100 23102 23104 23106 23108 23110 23112 23114 23116 23118 23120 23122 23124 23126 23128 23130 23132 23134 23136 23138 23140 23142 23144 23146 23148 23150 23152 23154 23156 23158 23160 23162 23164 23166 23168 23170 23172 23174 23176 23178 23180 23182 23184 23186 23188 23190 23192 23194 23196 23198 23200 23202 23204 23206 23208 23210 23212 23214 23216 23218 23220 23222 23224 23226 23228 23230 23232 23234 23236 23238 23240 23242 23244 23246 23248 23250 23252 23254 23256 23258 23260 23262 23264 23266 23268 23270 23272 23274 23276 23278 23280 23282 23284 23286 23288 23290 23292 23294 23296 23298 23300 23302 23304 23306 23308 23310 23312 23314 23316 23318 23320 23322 23324 23326 23328 23330 23332 23334 23336 23338 23340 23342 23344 23346 ", "35310\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 378 380 382 384 386 388 390 392 394 396 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432 434 436 438 440 442 444 446 448 450 452 454 456 458 460 462 464 466 468 470 472 474 476 478 480 482 484 486 488 490 492 494 496 498 500 502 504 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 564 566 568 570 572 574 576 578 580 582 584 586 588 590 592 594 596 598 600 602 604 606 608 610 612 614 616 618 620 622 624 626 628 630 632 634 636 638 640 642 644 646 648 650 652 654 656 658 660 662 664 666 668 670 672 674 676 678 680 682 684 686 688 690 692 694 696 698 700 702 704 706 708 710 712 714 716 718 720 722 724 726 728 730 732 734 736 738 740 742 744 746 748 750 752 754 756 758 760 762 764 766 768 770 772 774 776 778 780 782 784 786 788 790 792 794 796 798 800 802 804 806 808 810 812 814 816 818 820 822 824 826 828 830 832 834 836 838 840 842 844 846 848 850 852 854 856 858 860 862 864 866 868 870 872 874 876 878 880 882 884 886 888 890 892 894 896 898 900 902 904 906 908 910 912 914 916 918 920 922 924 926 928 930 932 934 936 938 940 942 944 946 948 950 952 954 956 958 960 962 964 966 968 970 972 974 976 978 980 982 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1008 1010 1012 1014 1016 1018 1020 1022 1024 1026 1028 1030 1032 1034 1036 1038 1040 1042 1044 1046 1048 1050 1052 1054 1056 1058 1060 1062 1064 1066 1068 1070 1072 1074 1076 1078 1080 1082 1084 1086 1088 1090 1092 1094 1096 1098 1100 1102 1104 1106 1108 1110 1112 1114 1116 1118 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1154 1156 1158 1160 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1216 1218 1220 1222 1224 1226 1228 1230 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 1316 1318 1320 1322 1324 1326 1328 1330 1332 1334 1336 1338 1340 1342 1344 1346 1348 1350 1352 1354 1356 1358 1360 1362 1364 1366 1368 1370 1372 1374 1376 1378 1380 1382 1384 1386 1388 1390 1392 1394 1396 1398 1400 1402 1404 1406 1408 1410 1412 1414 1416 1418 1420 1422 1424 1426 1428 1430 1432 1434 1436 1438 1440 1442 1444 1446 1448 1450 1452 1454 1456 1458 1460 1462 1464 1466 1468 1470 1472 1474 1476 1478 1480 1482 1484 1486 1488 1490 1492 1494 1496 1498 1500 1502 1504 1506 1508 1510 1512 1514 1516 1518 1520 1522 1524 1526 1528 1530 1532 1534 1536 1538 1540 1542 1544 1546 1548 1550 1552 1554 1556 1558 1560 1562 1564 1566 1568 1570 1572 1574 1576 1578 1580 1582 1584 1586 1588 1590 1592 1594 1596 1598 1600 1602 1604 1606 1608 1610 1612 1614 1616 1618 1620 1622 1624 1626 1628 1630 1632 1634 1636 1638 1640 1642 1644 1646 1648 1650 1652 1654 1656 1658 1660 1662 1664 1666 1668 1670 1672 1674 1676 1678 1680 1682 1684 1686 1688 1690 1692 1694 1696 1698 1700 1702 1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800 1802 1804 1806 1808 1810 1812 1814 1816 1818 1820 1822 1824 1826 1828 1830 1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858 1860 1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 1884 1886 1888 1890 1892 1894 1896 1898 1900 1902 1904 1906 1908 1910 1912 1914 1916 1918 1920 1922 1924 1926 1928 1930 1932 1934 1936 1938 1940 1942 1944 1946 1948 1950 1952 1954 1956 1958 1960 1962 1964 1966 1968 1970 1972 1974 1976 1978 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 2016 2018 2020 2022 2024 2026 2028 2030 2032 2034 2036 2038 2040 2042 2044 2046 2048 2050 2052 2054 2056 2058 2060 2062 2064 2066 2068 2070 2072 2074 2076 2078 2080 2082 2084 2086 2088 2090 2092 2094 2096 2098 2100 2102 2104 2106 2108 2110 2112 2114 2116 2118 2120 2122 2124 2126 2128 2130 2132 2134 2136 2138 2140 2142 2144 2146 2148 2150 2152 2154 2156 2158 2160 2162 2164 2166 2168 2170 2172 2174 2176 2178 2180 2182 2184 2186 2188 2190 2192 2194 2196 2198 2200 2202 2204 2206 2208 2210 2212 2214 2216 2218 2220 2222 2224 2226 2228 2230 2232 2234 2236 2238 2240 2242 2244 2246 2248 2250 2252 2254 2256 2258 2260 2262 2264 2266 2268 2270 2272 2274 2276 2278 2280 2282 2284 2286 2288 2290 2292 2294 2296 2298 2300 2302 2304 2306 2308 2310 2312 2314 2316 2318 2320 2322 2324 2326 2328 2330 2332 2334 2336 2338 2340 2342 2344 2346 2348 2350 2352 2354 2356 2358 2360 2362 2364 2366 2368 2370 2372 2374 2376 2378 2380 2382 2384 2386 2388 2390 2392 2394 2396 2398 2400 2402 2404 2406 2408 2410 2412 2414 2416 2418 2420 2422 2424 2426 2428 2430 2432 2434 2436 2438 2440 2442 2444 2446 2448 2450 2452 2454 2456 2458 2460 2462 2464 2466 2468 2470 2472 2474 2476 2478 2480 2482 2484 2486 2488 2490 2492 2494 2496 2498 2500 2502 2504 2506 2508 2510 2512 2514 2516 2518 2520 2522 2524 2526 2528 2530 2532 2534 2536 2538 2540 2542 2544 2546 2548 2550 2552 2554 2556 2558 2560 2562 2564 2566 2568 2570 2572 2574 2576 2578 2580 2582 2584 2586 2588 2590 2592 2594 2596 2598 2600 2602 2604 2606 2608 2610 2612 2614 2616 2618 2620 2622 2624 2626 2628 2630 2632 2634 2636 2638 2640 2642 2644 2646 2648 2650 2652 2654 2656 2658 2660 2662 2664 2666 2668 2670 2672 2674 2676 2678 2680 2682 2684 2686 2688 2690 2692 2694 2696 2698 2700 2702 2704 2706 2708 2710 2712 2714 2716 2718 2720 2722 2724 2726 2728 2730 2732 2734 2736 2738 2740 2742 2744 2746 2748 2750 2752 2754 2756 2758 2760 2762 2764 2766 2768 2770 2772 2774 2776 2778 2780 2782 2784 2786 2788 2790 2792 2794 2796 2798 2800 2802 2804 2806 2808 2810 2812 2814 2816 2818 2820 2822 2824 2826 2828 2830 2832 2834 2836 2838 2840 2842 2844 2846 2848 2850 2852 2854 2856 2858 2860 2862 2864 2866 2868 2870 2872 2874 2876 2878 2880 2882 2884 2886 2888 2890 2892 2894 2896 2898 2900 2902 2904 2906 2908 2910 2912 2914 2916 2918 2920 2922 2924 2926 2928 2930 2932 2934 2936 2938 2940 2942 2944 2946 2948 2950 2952 2954 2956 2958 2960 2962 2964 2966 2968 2970 2972 2974 2976 2978 2980 2982 2984 2986 2988 2990 2992 2994 2996 2998 3000 3002 3004 3006 3008 3010 3012 3014 3016 3018 3020 3022 3024 3026 3028 3030 3032 3034 3036 3038 3040 3042 3044 3046 3048 3050 3052 3054 3056 3058 3060 3062 3064 3066 3068 3070 3072 3074 3076 3078 3080 3082 3084 3086 3088 3090 3092 3094 3096 3098 3100 3102 3104 3106 3108 3110 3112 3114 3116 3118 3120 3122 3124 3126 3128 3130 3132 3134 3136 3138 3140 3142 3144 3146 3148 3150 3152 3154 3156 3158 3160 3162 3164 3166 3168 3170 3172 3174 3176 3178 3180 3182 3184 3186 3188 3190 3192 3194 3196 3198 3200 3202 3204 3206 3208 3210 3212 3214 3216 3218 3220 3222 3224 3226 3228 3230 3232 3234 3236 3238 3240 3242 3244 3246 3248 3250 3252 3254 3256 3258 3260 3262 3264 3266 3268 3270 3272 3274 3276 3278 3280 3282 3284 3286 3288 3290 3292 3294 3296 3298 3300 3302 3304 3306 3308 3310 3312 3314 3316 3318 3320 3322 3324 3326 3328 3330 3332 3334 3336 3338 3340 3342 3344 3346 3348 3350 3352 3354 3356 3358 3360 3362 3364 3366 3368 3370 3372 3374 3376 3378 3380 3382 3384 3386 3388 3390 3392 3394 3396 3398 3400 3402 3404 3406 3408 3410 3412 3414 3416 3418 3420 3422 3424 3426 3428 3430 3432 3434 3436 3438 3440 3442 3444 3446 3448 3450 3452 3454 3456 3458 3460 3462 3464 3466 3468 3470 3472 3474 3476 3478 3480 3482 3484 3486 3488 3490 3492 3494 3496 3498 3500 3502 3504 3506 3508 3510 3512 3514 3516 3518 3520 3522 3524 3526 3528 3530 3532 3534 3536 3538 3540 3542 3544 3546 3548 3550 3552 3554 3556 3558 3560 3562 3564 3566 3568 3570 3572 3574 3576 3578 3580 3582 3584 3586 3588 3590 3592 3594 3596 3598 3600 3602 3604 3606 3608 3610 3612 3614 3616 3618 3620 3622 3624 3626 3628 3630 3632 3634 3636 3638 3640 3642 3644 3646 3648 3650 3652 3654 3656 3658 3660 3662 3664 3666 3668 3670 3672 3674 3676 3678 3680 3682 3684 3686 3688 3690 3692 3694 3696 3698 3700 3702 3704 3706 3708 3710 3712 3714 3716 3718 3720 3722 3724 3726 3728 3730 3732 3734 3736 3738 3740 3742 3744 3746 3748 3750 3752 3754 3756 3758 3760 3762 3764 3766 3768 3770 3772 3774 3776 3778 3780 3782 3784 3786 3788 3790 3792 3794 3796 3798 3800 3802 3804 3806 3808 3810 3812 3814 3816 3818 3820 3822 3824 3826 3828 3830 3832 3834 3836 3838 3840 3842 3844 3846 3848 3850 3852 3854 3856 3858 3860 3862 3864 3866 3868 3870 3872 3874 3876 3878 3880 3882 3884 3886 3888 3890 3892 3894 3896 3898 3900 3902 3904 3906 3908 3910 3912 3914 3916 3918 3920 3922 3924 3926 3928 3930 3932 3934 3936 3938 3940 3942 3944 3946 3948 3950 3952 3954 3956 3958 3960 3962 3964 3966 3968 3970 3972 3974 3976 3978 3980 3982 3984 3986 3988 3990 3992 3994 3996 3998 4000 4002 4004 4006 4008 4010 4012 4014 4016 4018 4020 4022 4024 4026 4028 4030 4032 4034 4036 4038 4040 4042 4044 4046 4048 4050 4052 4054 4056 4058 4060 4062 4064 4066 4068 4070 4072 4074 4076 4078 4080 4082 4084 4086 4088 4090 4092 4094 4096 4098 4100 4102 4104 4106 4108 4110 4112 4114 4116 4118 4120 4122 4124 4126 4128 4130 4132 4134 4136 4138 4140 4142 4144 4146 4148 4150 4152 4154 4156 4158 4160 4162 4164 4166 4168 4170 4172 4174 4176 4178 4180 4182 4184 4186 4188 4190 4192 4194 4196 4198 4200 4202 4204 4206 4208 4210 4212 4214 4216 4218 4220 4222 4224 4226 4228 4230 4232 4234 4236 4238 4240 4242 4244 4246 4248 4250 4252 4254 4256 4258 4260 4262 4264 4266 4268 4270 4272 4274 4276 4278 4280 4282 4284 4286 4288 4290 4292 4294 4296 4298 4300 4302 4304 4306 4308 4310 4312 4314 4316 4318 4320 4322 4324 4326 4328 4330 4332 4334 4336 4338 4340 4342 4344 4346 4348 4350 4352 4354 4356 4358 4360 4362 4364 4366 4368 4370 4372 4374 4376 4378 4380 4382 4384 4386 4388 4390 4392 4394 4396 4398 4400 4402 4404 4406 4408 4410 4412 4414 4416 4418 4420 4422 4424 4426 4428 4430 4432 4434 4436 4438 4440 4442 4444 4446 4448 4450 4452 4454 4456 4458 4460 4462 4464 4466 4468 4470 4472 4474 4476 4478 4480 4482 4484 4486 4488 4490 4492 4494 4496 4498 4500 4502 4504 4506 4508 4510 4512 4514 4516 4518 4520 4522 4524 4526 4528 4530 4532 4534 4536 4538 4540 4542 4544 4546 4548 4550 4552 4554 4556 4558 4560 4562 4564 4566 4568 4570 4572 4574 4576 4578 4580 4582 4584 4586 4588 4590 4592 4594 4596 4598 4600 4602 4604 4606 4608 4610 4612 4614 4616 4618 4620 4622 4624 4626 4628 4630 4632 4634 4636 4638 4640 4642 4644 4646 4648 4650 4652 4654 4656 4658 4660 4662 4664 4666 4668 4670 4672 4674 4676 4678 4680 4682 4684 4686 4688 4690 4692 4694 4696 4698 4700 4702 4704 4706 4708 4710 4712 4714 4716 4718 4720 4722 4724 4726 4728 4730 4732 4734 4736 4738 4740 4742 4744 4746 4748 4750 4752 4754 4756 4758 4760 4762 4764 4766 4768 4770 4772 4774 4776 4778 4780 4782 4784 4786 4788 4790 4792 4794 4796 4798 4800 4802 4804 4806 4808 4810 4812 4814 4816 4818 4820 4822 4824 4826 4828 4830 4832 4834 4836 4838 4840 4842 4844 4846 4848 4850 4852 4854 4856 4858 4860 4862 4864 4866 4868 4870 4872 4874 4876 4878 4880 4882 4884 4886 4888 4890 4892 4894 4896 4898 4900 4902 4904 4906 4908 4910 4912 4914 4916 4918 4920 4922 4924 4926 4928 4930 4932 4934 4936 4938 4940 4942 4944 4946 4948 4950 4952 4954 4956 4958 4960 4962 4964 4966 4968 4970 4972 4974 4976 4978 4980 4982 4984 4986 4988 4990 4992 4994 4996 4998 5000 5002 5004 5006 5008 5010 5012 5014 5016 5018 5020 5022 5024 5026 5028 5030 5032 5034 5036 5038 5040 5042 5044 5046 5048 5050 5052 5054 5056 5058 5060 5062 5064 5066 5068 5070 5072 5074 5076 5078 5080 5082 5084 5086 5088 5090 5092 5094 5096 5098 5100 5102 5104 5106 5108 5110 5112 5114 5116 5118 5120 5122 5124 5126 5128 5130 5132 5134 5136 5138 5140 5142 5144 5146 5148 5150 5152 5154 5156 5158 5160 5162 5164 5166 5168 5170 5172 5174 5176 5178 5180 5182 5184 5186 5188 5190 5192 5194 5196 5198 5200 5202 5204 5206 5208 5210 5212 5214 5216 5218 5220 5222 5224 5226 5228 5230 5232 5234 5236 5238 5240 5242 5244 5246 5248 5250 5252 5254 5256 5258 5260 5262 5264 5266 5268 5270 5272 5274 5276 5278 5280 5282 5284 5286 5288 5290 5292 5294 5296 5298 5300 5302 5304 5306 5308 5310 5312 5314 5316 5318 5320 5322 5324 5326 5328 5330 5332 5334 5336 5338 5340 5342 5344 5346 5348 5350 5352 5354 5356 5358 5360 5362 5364 5366 5368 5370 5372 5374 5376 5378 5380 5382 5384 5386 5388 5390 5392 5394 5396 5398 5400 5402 5404 5406 5408 5410 5412 5414 5416 5418 5420 5422 5424 5426 5428 5430 5432 5434 5436 5438 5440 5442 5444 5446 5448 5450 5452 5454 5456 5458 5460 5462 5464 5466 5468 5470 5472 5474 5476 5478 5480 5482 5484 5486 5488 5490 5492 5494 5496 5498 5500 5502 5504 5506 5508 5510 5512 5514 5516 5518 5520 5522 5524 5526 5528 5530 5532 5534 5536 5538 5540 5542 5544 5546 5548 5550 5552 5554 5556 5558 5560 5562 5564 5566 5568 5570 5572 5574 5576 5578 5580 5582 5584 5586 5588 5590 5592 5594 5596 5598 5600 5602 5604 5606 5608 5610 5612 5614 5616 5618 5620 5622 5624 5626 5628 5630 5632 5634 5636 5638 5640 5642 5644 5646 5648 5650 5652 5654 5656 5658 5660 5662 5664 5666 5668 5670 5672 5674 5676 5678 5680 5682 5684 5686 5688 5690 5692 5694 5696 5698 5700 5702 5704 5706 5708 5710 5712 5714 5716 5718 5720 5722 5724 5726 5728 5730 5732 5734 5736 5738 5740 5742 5744 5746 5748 5750 5752 5754 5756 5758 5760 5762 5764 5766 5768 5770 5772 5774 5776 5778 5780 5782 5784 5786 5788 5790 5792 5794 5796 5798 5800 5802 5804 5806 5808 5810 5812 5814 5816 5818 5820 5822 5824 5826 5828 5830 5832 5834 5836 5838 5840 5842 5844 5846 5848 5850 5852 5854 5856 5858 5860 5862 5864 5866 5868 5870 5872 5874 5876 5878 5880 5882 5884 5886 5888 5890 5892 5894 5896 5898 5900 5902 5904 5906 5908 5910 5912 5914 5916 5918 5920 5922 5924 5926 5928 5930 5932 5934 5936 5938 5940 5942 5944 5946 5948 5950 5952 5954 5956 5958 5960 5962 5964 5966 5968 5970 5972 5974 5976 5978 5980 5982 5984 5986 5988 5990 5992 5994 5996 5998 6000 6002 6004 6006 6008 6010 6012 6014 6016 6018 6020 6022 6024 6026 6028 6030 6032 6034 6036 6038 6040 6042 6044 6046 6048 6050 6052 6054 6056 6058 6060 6062 6064 6066 6068 6070 6072 6074 6076 6078 6080 6082 6084 6086 6088 6090 6092 6094 6096 6098 6100 6102 6104 6106 6108 6110 6112 6114 6116 6118 6120 6122 6124 6126 6128 6130 6132 6134 6136 6138 6140 6142 6144 6146 6148 6150 6152 6154 6156 6158 6160 6162 6164 6166 6168 6170 6172 6174 6176 6178 6180 6182 6184 6186 6188 6190 6192 6194 6196 6198 6200 6202 6204 6206 6208 6210 6212 6214 6216 6218 6220 6222 6224 6226 6228 6230 6232 6234 6236 6238 6240 6242 6244 6246 6248 6250 6252 6254 6256 6258 6260 6262 6264 6266 6268 6270 6272 6274 6276 6278 6280 6282 6284 6286 6288 6290 6292 6294 6296 6298 6300 6302 6304 6306 6308 6310 6312 6314 6316 6318 6320 6322 6324 6326 6328 6330 6332 6334 6336 6338 6340 6342 6344 6346 6348 6350 6352 6354 6356 6358 6360 6362 6364 6366 6368 6370 6372 6374 6376 6378 6380 6382 6384 6386 6388 6390 6392 6394 6396 6398 6400 6402 6404 6406 6408 6410 6412 6414 6416 6418 6420 6422 6424 6426 6428 6430 6432 6434 6436 6438 6440 6442 6444 6446 6448 6450 6452 6454 6456 6458 6460 6462 6464 6466 6468 6470 6472 6474 6476 6478 6480 6482 6484 6486 6488 6490 6492 6494 6496 6498 6500 6502 6504 6506 6508 6510 6512 6514 6516 6518 6520 6522 6524 6526 6528 6530 6532 6534 6536 6538 6540 6542 6544 6546 6548 6550 6552 6554 6556 6558 6560 6562 6564 6566 6568 6570 6572 6574 6576 6578 6580 6582 6584 6586 6588 6590 6592 6594 6596 6598 6600 6602 6604 6606 6608 6610 6612 6614 6616 6618 6620 6622 6624 6626 6628 6630 6632 6634 6636 6638 6640 6642 6644 6646 6648 6650 6652 6654 6656 6658 6660 6662 6664 6666 6668 6670 6672 6674 6676 6678 6680 6682 6684 6686 6688 6690 6692 6694 6696 6698 6700 6702 6704 6706 6708 6710 6712 6714 6716 6718 6720 6722 6724 6726 6728 6730 6732 6734 6736 6738 6740 6742 6744 6746 6748 6750 6752 6754 6756 6758 6760 6762 6764 6766 6768 6770 6772 6774 6776 6778 6780 6782 6784 6786 6788 6790 6792 6794 6796 6798 6800 6802 6804 6806 6808 6810 6812 6814 6816 6818 6820 6822 6824 6826 6828 6830 6832 6834 6836 6838 6840 6842 6844 6846 6848 6850 6852 6854 6856 6858 6860 6862 6864 6866 6868 6870 6872 6874 6876 6878 6880 6882 6884 6886 6888 6890 6892 6894 6896 6898 6900 6902 6904 6906 6908 6910 6912 6914 6916 6918 6920 6922 6924 6926 6928 6930 6932 6934 6936 6938 6940 6942 6944 6946 6948 6950 6952 6954 6956 6958 6960 6962 6964 6966 6968 6970 6972 6974 6976 6978 6980 6982 6984 6986 6988 6990 6992 6994 6996 6998 7000 7002 7004 7006 7008 7010 7012 7014 7016 7018 7020 7022 7024 7026 7028 7030 7032 7034 7036 7038 7040 7042 7044 7046 7048 7050 7052 7054 7056 7058 7060 7062 7064 7066 7068 7070 7072 7074 7076 7078 7080 7082 7084 7086 7088 7090 7092 7094 7096 7098 7100 7102 7104 7106 7108 7110 7112 7114 7116 7118 7120 7122 7124 7126 7128 7130 7132 7134 7136 7138 7140 7142 7144 7146 7148 7150 7152 7154 7156 7158 7160 7162 7164 7166 7168 7170 7172 7174 7176 7178 7180 7182 7184 7186 7188 7190 7192 7194 7196 7198 7200 7202 7204 7206 7208 7210 7212 7214 7216 7218 7220 7222 7224 7226 7228 7230 7232 7234 7236 7238 7240 7242 7244 7246 7248 7250 7252 7254 7256 7258 7260 7262 7264 7266 7268 7270 7272 7274 7276 7278 7280 7282 7284 7286 7288 7290 7292 7294 7296 7298 7300 7302 7304 7306 7308 7310 7312 7314 7316 7318 7320 7322 7324 7326 7328 7330 7332 7334 7336 7338 7340 7342 7344 7346 7348 7350 7352 7354 7356 7358 7360 7362 7364 7366 7368 7370 7372 7374 7376 7378 7380 7382 7384 7386 7388 7390 7392 7394 7396 7398 7400 7402 7404 7406 7408 7410 7412 7414 7416 7418 7420 7422 7424 7426 7428 7430 7432 7434 7436 7438 7440 7442 7444 7446 7448 7450 7452 7454 7456 7458 7460 7462 7464 7466 7468 7470 7472 7474 7476 7478 7480 7482 7484 7486 7488 7490 7492 7494 7496 7498 7500 7502 7504 7506 7508 7510 7512 7514 7516 7518 7520 7522 7524 7526 7528 7530 7532 7534 7536 7538 7540 7542 7544 7546 7548 7550 7552 7554 7556 7558 7560 7562 7564 7566 7568 7570 7572 7574 7576 7578 7580 7582 7584 7586 7588 7590 7592 7594 7596 7598 7600 7602 7604 7606 7608 7610 7612 7614 7616 7618 7620 7622 7624 7626 7628 7630 7632 7634 7636 7638 7640 7642 7644 7646 7648 7650 7652 7654 7656 7658 7660 7662 7664 7666 7668 7670 7672 7674 7676 7678 7680 7682 7684 7686 7688 7690 7692 7694 7696 7698 7700 7702 7704 7706 7708 7710 7712 7714 7716 7718 7720 7722 7724 7726 7728 7730 7732 7734 7736 7738 7740 7742 7744 7746 7748 7750 7752 7754 7756 7758 7760 7762 7764 7766 7768 7770 7772 7774 7776 7778 7780 7782 7784 7786 7788 7790 7792 7794 7796 7798 7800 7802 7804 7806 7808 7810 7812 7814 7816 7818 7820 7822 7824 7826 7828 7830 7832 7834 7836 7838 7840 7842 7844 7846 7848 7850 7852 7854 7856 7858 7860 7862 7864 7866 7868 7870 7872 7874 7876 7878 7880 7882 7884 7886 7888 7890 7892 7894 7896 7898 7900 7902 7904 7906 7908 7910 7912 7914 7916 7918 7920 7922 7924 7926 7928 7930 7932 7934 7936 7938 7940 7942 7944 7946 7948 7950 7952 7954 7956 7958 7960 7962 7964 7966 7968 7970 7972 7974 7976 7978 7980 7982 7984 7986 7988 7990 7992 7994 7996 7998 8000 8002 8004 8006 8008 8010 8012 8014 8016 8018 8020 8022 8024 8026 8028 8030 8032 8034 8036 8038 8040 8042 8044 8046 8048 8050 8052 8054 8056 8058 8060 8062 8064 8066 8068 8070 8072 8074 8076 8078 8080 8082 8084 8086 8088 8090 8092 8094 8096 8098 8100 8102 8104 8106 8108 8110 8112 8114 8116 8118 8120 8122 8124 8126 8128 8130 8132 8134 8136 8138 8140 8142 8144 8146 8148 8150 8152 8154 8156 8158 8160 8162 8164 8166 8168 8170 8172 8174 8176 8178 8180 8182 8184 8186 8188 8190 8192 8194 8196 8198 8200 8202 8204 8206 8208 8210 8212 8214 8216 8218 8220 8222 8224 8226 8228 8230 8232 8234 8236 8238 8240 8242 8244 8246 8248 8250 8252 8254 8256 8258 8260 8262 8264 8266 8268 8270 8272 8274 8276 8278 8280 8282 8284 8286 8288 8290 8292 8294 8296 8298 8300 8302 8304 8306 8308 8310 8312 8314 8316 8318 8320 8322 8324 8326 8328 8330 8332 8334 8336 8338 8340 8342 8344 8346 8348 8350 8352 8354 8356 8358 8360 8362 8364 8366 8368 8370 8372 8374 8376 8378 8380 8382 8384 8386 8388 8390 8392 8394 8396 8398 8400 8402 8404 8406 8408 8410 8412 8414 8416 8418 8420 8422 8424 8426 8428 8430 8432 8434 8436 8438 8440 8442 8444 8446 8448 8450 8452 8454 8456 8458 8460 8462 8464 8466 8468 8470 8472 8474 8476 8478 8480 8482 8484 8486 8488 8490 8492 8494 8496 8498 8500 8502 8504 8506 8508 8510 8512 8514 8516 8518 8520 8522 8524 8526 8528 8530 8532 8534 8536 8538 8540 8542 8544 8546 8548 8550 8552 8554 8556 8558 8560 8562 8564 8566 8568 8570 8572 8574 8576 8578 8580 8582 8584 8586 8588 8590 8592 8594 8596 8598 8600 8602 8604 8606 8608 8610 8612 8614 8616 8618 8620 8622 8624 8626 8628 8630 8632 8634 8636 8638 8640 8642 8644 8646 8648 8650 8652 8654 8656 8658 8660 8662 8664 8666 8668 8670 8672 8674 8676 8678 8680 8682 8684 8686 8688 8690 8692 8694 8696 8698 8700 8702 8704 8706 8708 8710 8712 8714 8716 8718 8720 8722 8724 8726 8728 8730 8732 8734 8736 8738 8740 8742 8744 8746 8748 8750 8752 8754 8756 8758 8760 8762 8764 8766 8768 8770 8772 8774 8776 8778 8780 8782 8784 8786 8788 8790 8792 8794 8796 8798 8800 8802 8804 8806 8808 8810 8812 8814 8816 8818 8820 8822 8824 8826 8828 8830 8832 8834 8836 8838 8840 8842 8844 8846 8848 8850 8852 8854 8856 8858 8860 8862 8864 8866 8868 8870 8872 8874 8876 8878 8880 8882 8884 8886 8888 8890 8892 8894 8896 8898 8900 8902 8904 8906 8908 8910 8912 8914 8916 8918 8920 8922 8924 8926 8928 8930 8932 8934 8936 8938 8940 8942 8944 8946 8948 8950 8952 8954 8956 8958 8960 8962 8964 8966 8968 8970 8972 8974 8976 8978 8980 8982 8984 8986 8988 8990 8992 8994 8996 8998 9000 9002 9004 9006 9008 9010 9012 9014 9016 9018 9020 9022 9024 9026 9028 9030 9032 9034 9036 9038 9040 9042 9044 9046 9048 9050 9052 9054 9056 9058 9060 9062 9064 9066 9068 9070 9072 9074 9076 9078 9080 9082 9084 9086 9088 9090 9092 9094 9096 9098 9100 9102 9104 9106 9108 9110 9112 9114 9116 9118 9120 9122 9124 9126 9128 9130 9132 9134 9136 9138 9140 9142 9144 9146 9148 9150 9152 9154 9156 9158 9160 9162 9164 9166 9168 9170 9172 9174 9176 9178 9180 9182 9184 9186 9188 9190 9192 9194 9196 9198 9200 9202 9204 9206 9208 9210 9212 9214 9216 9218 9220 9222 9224 9226 9228 9230 9232 9234 9236 9238 9240 9242 9244 9246 9248 9250 9252 9254 9256 9258 9260 9262 9264 9266 9268 9270 9272 9274 9276 9278 9280 9282 9284 9286 9288 9290 9292 9294 9296 9298 9300 9302 9304 9306 9308 9310 9312 9314 9316 9318 9320 9322 9324 9326 9328 9330 9332 9334 9336 9338 9340 9342 9344 9346 9348 9350 9352 9354 9356 9358 9360 9362 9364 9366 9368 9370 9372 9374 9376 9378 9380 9382 9384 9386 9388 9390 9392 9394 9396 9398 9400 9402 9404 9406 9408 9410 9412 9414 9416 9418 9420 9422 9424 9426 9428 9430 9432 9434 9436 9438 9440 9442 9444 9446 9448 9450 9452 9454 9456 9458 9460 9462 9464 9466 9468 9470 9472 9474 9476 9478 9480 9482 9484 9486 9488 9490 9492 9494 9496 9498 9500 9502 9504 9506 9508 9510 9512 9514 9516 9518 9520 9522 9524 9526 9528 9530 9532 9534 9536 9538 9540 9542 9544 9546 9548 9550 9552 9554 9556 9558 9560 9562 9564 9566 9568 9570 9572 9574 9576 9578 9580 9582 9584 9586 9588 9590 9592 9594 9596 9598 9600 9602 9604 9606 9608 9610 9612 9614 9616 9618 9620 9622 9624 9626 9628 9630 9632 9634 9636 9638 9640 9642 9644 9646 9648 9650 9652 9654 9656 9658 9660 9662 9664 9666 9668 9670 9672 9674 9676 9678 9680 9682 9684 9686 9688 9690 9692 9694 9696 9698 9700 9702 9704 9706 9708 9710 9712 9714 9716 9718 9720 9722 9724 9726 9728 9730 9732 9734 9736 9738 9740 9742 9744 9746 9748 9750 9752 9754 9756 9758 9760 9762 9764 9766 9768 9770 9772 9774 9776 9778 9780 9782 9784 9786 9788 9790 9792 9794 9796 9798 9800 9802 9804 9806 9808 9810 9812 9814 9816 9818 9820 9822 9824 9826 9828 9830 9832 9834 9836 9838 9840 9842 9844 9846 9848 9850 9852 9854 9856 9858 9860 9862 9864 9866 9868 9870 9872 9874 9876 9878 9880 9882 9884 9886 9888 9890 9892 9894 9896 9898 9900 9902 9904 9906 9908 9910 9912 9914 9916 9918 9920 9922 9924 9926 9928 9930 9932 9934 9936 9938 9940 9942 9944 9946 9948 9950 9952 9954 9956 9958 9960 9962 9964 9966 9968 9970 9972 9974 9976 9978 9980 9982 9984 9986 9988 9990 9992 9994 9996 9998 10000 10002 10004 10006 10008 10010 10012 10014 10016 10018 10020 10022 10024 10026 10028 10030 10032 10034 10036 10038 10040 10042 10044 10046 10048 10050 10052 10054 10056 10058 10060 10062 10064 10066 10068 10070 10072 10074 10076 10078 10080 10082 10084 10086 10088 10090 10092 10094 10096 10098 10100 10102 10104 10106 10108 10110 10112 10114 10116 10118 10120 10122 10124 10126 10128 10130 10132 10134 10136 10138 10140 10142 10144 10146 10148 10150 10152 10154 10156 10158 10160 10162 10164 10166 10168 10170 10172 10174 10176 10178 10180 10182 10184 10186 10188 10190 10192 10194 10196 10198 10200 10202 10204 10206 10208 10210 10212 10214 10216 10218 10220 10222 10224 10226 10228 10230 10232 10234 10236 10238 10240 10242 10244 10246 10248 10250 10252 10254 10256 10258 10260 10262 10264 10266 10268 10270 10272 10274 10276 10278 10280 10282 10284 10286 10288 10290 10292 10294 10296 10298 10300 10302 10304 10306 10308 10310 10312 10314 10316 10318 10320 10322 10324 10326 10328 10330 10332 10334 10336 10338 10340 10342 10344 10346 10348 10350 10352 10354 10356 10358 10360 10362 10364 10366 10368 10370 10372 10374 10376 10378 10380 10382 10384 10386 10388 10390 10392 10394 10396 10398 10400 10402 10404 10406 10408 10410 10412 10414 10416 10418 10420 10422 10424 10426 10428 10430 10432 10434 10436 10438 10440 10442 10444 10446 10448 10450 10452 10454 10456 10458 10460 10462 10464 10466 10468 10470 10472 10474 10476 10478 10480 10482 10484 10486 10488 10490 10492 10494 10496 10498 10500 10502 10504 10506 10508 10510 10512 10514 10516 10518 10520 10522 10524 10526 10528 10530 10532 10534 10536 10538 10540 10542 10544 10546 10548 10550 10552 10554 10556 10558 10560 10562 10564 10566 10568 10570 10572 10574 10576 10578 10580 10582 10584 10586 10588 10590 10592 10594 10596 10598 10600 10602 10604 10606 10608 10610 10612 10614 10616 10618 10620 10622 10624 10626 10628 10630 10632 10634 10636 10638 10640 10642 10644 10646 10648 10650 10652 10654 10656 10658 10660 10662 10664 10666 10668 10670 10672 10674 10676 10678 10680 10682 10684 10686 10688 10690 10692 10694 10696 10698 10700 10702 10704 10706 10708 10710 10712 10714 10716 10718 10720 10722 10724 10726 10728 10730 10732 10734 10736 10738 10740 10742 10744 10746 10748 10750 10752 10754 10756 10758 10760 10762 10764 10766 10768 10770 10772 10774 10776 10778 10780 10782 10784 10786 10788 10790 10792 10794 10796 10798 10800 10802 10804 10806 10808 10810 10812 10814 10816 10818 10820 10822 10824 10826 10828 10830 10832 10834 10836 10838 10840 10842 10844 10846 10848 10850 10852 10854 10856 10858 10860 10862 10864 10866 10868 10870 10872 10874 10876 10878 10880 10882 10884 10886 10888 10890 10892 10894 10896 10898 10900 10902 10904 10906 10908 10910 10912 10914 10916 10918 10920 10922 10924 10926 10928 10930 10932 10934 10936 10938 10940 10942 10944 10946 10948 10950 10952 10954 10956 10958 10960 10962 10964 10966 10968 10970 10972 10974 10976 10978 10980 10982 10984 10986 10988 10990 10992 10994 10996 10998 11000 11002 11004 11006 11008 11010 11012 11014 11016 11018 11020 11022 11024 11026 11028 11030 11032 11034 11036 11038 11040 11042 11044 11046 11048 11050 11052 11054 11056 11058 11060 11062 11064 11066 11068 11070 11072 11074 11076 11078 11080 11082 11084 11086 11088 11090 11092 11094 11096 11098 11100 11102 11104 11106 11108 11110 11112 11114 11116 11118 11120 11122 11124 11126 11128 11130 11132 11134 11136 11138 11140 11142 11144 11146 11148 11150 11152 11154 11156 11158 11160 11162 11164 11166 11168 11170 11172 11174 11176 11178 11180 11182 11184 11186 11188 11190 11192 11194 11196 11198 11200 11202 11204 11206 11208 11210 11212 11214 11216 11218 11220 11222 11224 11226 11228 11230 11232 11234 11236 11238 11240 11242 11244 11246 11248 11250 11252 11254 11256 11258 11260 11262 11264 11266 11268 11270 11272 11274 11276 11278 11280 11282 11284 11286 11288 11290 11292 11294 11296 11298 11300 11302 11304 11306 11308 11310 11312 11314 11316 11318 11320 11322 11324 11326 11328 11330 11332 11334 11336 11338 11340 11342 11344 11346 11348 11350 11352 11354 11356 11358 11360 11362 11364 11366 11368 11370 11372 11374 11376 11378 11380 11382 11384 11386 11388 11390 11392 11394 11396 11398 11400 11402 11404 11406 11408 11410 11412 11414 11416 11418 11420 11422 11424 11426 11428 11430 11432 11434 11436 11438 11440 11442 11444 11446 11448 11450 11452 11454 11456 11458 11460 11462 11464 11466 11468 11470 11472 11474 11476 11478 11480 11482 11484 11486 11488 11490 11492 11494 11496 11498 11500 11502 11504 11506 11508 11510 11512 11514 11516 11518 11520 11522 11524 11526 11528 11530 11532 11534 11536 11538 11540 11542 11544 11546 11548 11550 11552 11554 11556 11558 11560 11562 11564 11566 11568 11570 11572 11574 11576 11578 11580 11582 11584 11586 11588 11590 11592 11594 11596 11598 11600 11602 11604 11606 11608 11610 11612 11614 11616 11618 11620 11622 11624 11626 11628 11630 11632 11634 11636 11638 11640 11642 11644 11646 11648 11650 11652 11654 11656 11658 11660 11662 11664 11666 11668 11670 11672 11674 11676 11678 11680 11682 11684 11686 11688 11690 11692 11694 11696 11698 11700 11702 11704 11706 11708 11710 11712 11714 11716 11718 11720 11722 11724 11726 11728 11730 11732 11734 11736 11738 11740 11742 11744 11746 11748 11750 11752 11754 11756 11758 11760 11762 11764 11766 11768 11770 11772 11774 11776 11778 11780 11782 11784 11786 11788 11790 11792 11794 11796 11798 11800 11802 11804 11806 11808 11810 11812 11814 11816 11818 11820 11822 11824 11826 11828 11830 11832 11834 11836 11838 11840 11842 11844 11846 11848 11850 11852 11854 11856 11858 11860 11862 11864 11866 11868 11870 11872 11874 11876 11878 11880 11882 11884 11886 11888 11890 11892 11894 11896 11898 11900 11902 11904 11906 11908 11910 11912 11914 11916 11918 11920 11922 11924 11926 11928 11930 11932 11934 11936 11938 11940 11942 11944 11946 11948 11950 11952 11954 11956 11958 11960 11962 11964 11966 11968 11970 11972 11974 11976 11978 11980 11982 11984 11986 11988 11990 11992 11994 11996 11998 12000 12002 12004 12006 12008 12010 12012 12014 12016 12018 12020 12022 12024 12026 12028 12030 12032 12034 12036 12038 12040 12042 12044 12046 12048 12050 12052 12054 12056 12058 12060 12062 12064 12066 12068 12070 12072 12074 12076 12078 12080 12082 12084 12086 12088 12090 12092 12094 12096 12098 12100 12102 12104 12106 12108 12110 12112 12114 12116 12118 12120 12122 12124 12126 12128 12130 12132 12134 12136 12138 12140 12142 12144 12146 12148 12150 12152 12154 12156 12158 12160 12162 12164 12166 12168 12170 12172 12174 12176 12178 12180 12182 12184 12186 12188 12190 12192 12194 12196 12198 12200 12202 12204 12206 12208 12210 12212 12214 12216 12218 12220 12222 12224 12226 12228 12230 12232 12234 12236 12238 12240 12242 12244 12246 12248 12250 12252 12254 12256 12258 12260 12262 12264 12266 12268 12270 12272 12274 12276 12278 12280 12282 12284 12286 12288 12290 12292 12294 12296 12298 12300 12302 12304 12306 12308 12310 12312 12314 12316 12318 12320 12322 12324 12326 12328 12330 12332 12334 12336 12338 12340 12342 12344 12346 12348 12350 12352 12354 12356 12358 12360 12362 12364 12366 12368 12370 12372 12374 12376 12378 12380 12382 12384 12386 12388 12390 12392 12394 12396 12398 12400 12402 12404 12406 12408 12410 12412 12414 12416 12418 12420 12422 12424 12426 12428 12430 12432 12434 12436 12438 12440 12442 12444 12446 12448 12450 12452 12454 12456 12458 12460 12462 12464 12466 12468 12470 12472 12474 12476 12478 12480 12482 12484 12486 12488 12490 12492 12494 12496 12498 12500 12502 12504 12506 12508 12510 12512 12514 12516 12518 12520 12522 12524 12526 12528 12530 12532 12534 12536 12538 12540 12542 12544 12546 12548 12550 12552 12554 12556 12558 12560 12562 12564 12566 12568 12570 12572 12574 12576 12578 12580 12582 12584 12586 12588 12590 12592 12594 12596 12598 12600 12602 12604 12606 12608 12610 12612 12614 12616 12618 12620 12622 12624 12626 12628 12630 12632 12634 12636 12638 12640 12642 12644 12646 12648 12650 12652 12654 12656 12658 12660 12662 12664 12666 12668 12670 12672 12674 12676 12678 12680 12682 12684 12686 12688 12690 12692 12694 12696 12698 12700 12702 12704 12706 12708 12710 12712 12714 12716 12718 12720 12722 12724 12726 12728 12730 12732 12734 12736 12738 12740 12742 12744 12746 12748 12750 12752 12754 12756 12758 12760 12762 12764 12766 12768 12770 12772 12774 12776 12778 12780 12782 12784 12786 12788 12790 12792 12794 12796 12798 12800 12802 12804 12806 12808 12810 12812 12814 12816 12818 12820 12822 12824 12826 12828 12830 12832 12834 12836 12838 12840 12842 12844 12846 12848 12850 12852 12854 12856 12858 12860 12862 12864 12866 12868 12870 12872 12874 12876 12878 12880 12882 12884 12886 12888 12890 12892 12894 12896 12898 12900 12902 12904 12906 12908 12910 12912 12914 12916 12918 12920 12922 12924 12926 12928 12930 12932 12934 12936 12938 12940 12942 12944 12946 12948 12950 12952 12954 12956 12958 12960 12962 12964 12966 12968 12970 12972 12974 12976 12978 12980 12982 12984 12986 12988 12990 12992 12994 12996 12998 13000 13002 13004 13006 13008 13010 13012 13014 13016 13018 13020 13022 13024 13026 13028 13030 13032 13034 13036 13038 13040 13042 13044 13046 13048 13050 13052 13054 13056 13058 13060 13062 13064 13066 13068 13070 13072 13074 13076 13078 13080 13082 13084 13086 13088 13090 13092 13094 13096 13098 13100 13102 13104 13106 13108 13110 13112 13114 13116 13118 13120 13122 13124 13126 13128 13130 13132 13134 13136 13138 13140 13142 13144 13146 13148 13150 13152 13154 13156 13158 13160 13162 13164 13166 13168 13170 13172 13174 13176 13178 13180 13182 13184 13186 13188 13190 13192 13194 13196 13198 13200 13202 13204 13206 13208 13210 13212 13214 13216 13218 13220 13222 13224 13226 13228 13230 13232 13234 13236 13238 13240 13242 13244 13246 13248 13250 13252 13254 13256 13258 13260 13262 13264 13266 13268 13270 13272 13274 13276 13278 13280 13282 13284 13286 13288 13290 13292 13294 13296 13298 13300 13302 13304 13306 13308 13310 13312 13314 13316 13318 13320 13322 13324 13326 13328 13330 13332 13334 13336 13338 13340 13342 13344 13346 13348 13350 13352 13354 13356 13358 13360 13362 13364 13366 13368 13370 13372 13374 13376 13378 13380 13382 13384 13386 13388 13390 13392 13394 13396 13398 13400 13402 13404 13406 13408 13410 13412 13414 13416 13418 13420 13422 13424 13426 13428 13430 13432 13434 13436 13438 13440 13442 13444 13446 13448 13450 13452 13454 13456 13458 13460 13462 13464 13466 13468 13470 13472 13474 13476 13478 13480 13482 13484 13486 13488 13490 13492 13494 13496 13498 13500 13502 13504 13506 13508 13510 13512 13514 13516 13518 13520 13522 13524 13526 13528 13530 13532 13534 13536 13538 13540 13542 13544 13546 13548 13550 13552 13554 13556 13558 13560 13562 13564 13566 13568 13570 13572 13574 13576 13578 13580 13582 13584 13586 13588 13590 13592 13594 13596 13598 13600 13602 13604 13606 13608 13610 13612 13614 13616 13618 13620 13622 13624 13626 13628 13630 13632 13634 13636 13638 13640 13642 13644 13646 13648 13650 13652 13654 13656 13658 13660 13662 13664 13666 13668 13670 13672 13674 13676 13678 13680 13682 13684 13686 13688 13690 13692 13694 13696 13698 13700 13702 13704 13706 13708 13710 13712 13714 13716 13718 13720 13722 13724 13726 13728 13730 13732 13734 13736 13738 13740 13742 13744 13746 13748 13750 13752 13754 13756 13758 13760 13762 13764 13766 13768 13770 13772 13774 13776 13778 13780 13782 13784 13786 13788 13790 13792 13794 13796 13798 13800 13802 13804 13806 13808 13810 13812 13814 13816 13818 13820 13822 13824 13826 13828 13830 13832 13834 13836 13838 13840 13842 13844 13846 13848 13850 13852 13854 13856 13858 13860 13862 13864 13866 13868 13870 13872 13874 13876 13878 13880 13882 13884 13886 13888 13890 13892 13894 13896 13898 13900 13902 13904 13906 13908 13910 13912 13914 13916 13918 13920 13922 13924 13926 13928 13930 13932 13934 13936 13938 13940 13942 13944 13946 13948 13950 13952 13954 13956 13958 13960 13962 13964 13966 13968 13970 13972 13974 13976 13978 13980 13982 13984 13986 13988 13990 13992 13994 13996 13998 14000 14002 14004 14006 14008 14010 14012 14014 14016 14018 14020 14022 14024 14026 14028 14030 14032 14034 14036 14038 14040 14042 14044 14046 14048 14050 14052 14054 14056 14058 14060 14062 14064 14066 14068 14070 14072 14074 14076 14078 14080 14082 14084 14086 14088 14090 14092 14094 14096 14098 14100 14102 14104 14106 14108 14110 14112 14114 14116 14118 14120 14122 14124 14126 14128 14130 14132 14134 14136 14138 14140 14142 14144 14146 14148 14150 14152 14154 14156 14158 14160 14162 14164 14166 14168 14170 14172 14174 14176 14178 14180 14182 14184 14186 14188 14190 14192 14194 14196 14198 14200 14202 14204 14206 14208 14210 14212 14214 14216 14218 14220 14222 14224 14226 14228 14230 14232 14234 14236 14238 14240 14242 14244 14246 14248 14250 14252 14254 14256 14258 14260 14262 14264 14266 14268 14270 14272 14274 14276 14278 14280 14282 14284 14286 14288 14290 14292 14294 14296 14298 14300 14302 14304 14306 14308 14310 14312 14314 14316 14318 14320 14322 14324 14326 14328 14330 14332 14334 14336 14338 14340 14342 14344 14346 14348 14350 14352 14354 14356 14358 14360 14362 14364 14366 14368 14370 14372 14374 14376 14378 14380 14382 14384 14386 14388 14390 14392 14394 14396 14398 14400 14402 14404 14406 14408 14410 14412 14414 14416 14418 14420 14422 14424 14426 14428 14430 14432 14434 14436 14438 14440 14442 14444 14446 14448 14450 14452 14454 14456 14458 14460 14462 14464 14466 14468 14470 14472 14474 14476 14478 14480 14482 14484 14486 14488 14490 14492 14494 14496 14498 14500 14502 14504 14506 14508 14510 14512 14514 14516 14518 14520 14522 14524 14526 14528 14530 14532 14534 14536 14538 14540 14542 14544 14546 14548 14550 14552 14554 14556 14558 14560 14562 14564 14566 14568 14570 14572 14574 14576 14578 14580 14582 14584 14586 14588 14590 14592 14594 14596 14598 14600 14602 14604 14606 14608 14610 14612 14614 14616 14618 14620 14622 14624 14626 14628 14630 14632 14634 14636 14638 14640 14642 14644 14646 14648 14650 14652 14654 14656 14658 14660 14662 14664 14666 14668 14670 14672 14674 14676 14678 14680 14682 14684 14686 14688 14690 14692 14694 14696 14698 14700 14702 14704 14706 14708 14710 14712 14714 14716 14718 14720 14722 14724 14726 14728 14730 14732 14734 14736 14738 14740 14742 14744 14746 14748 14750 14752 14754 14756 14758 14760 14762 14764 14766 14768 14770 14772 14774 14776 14778 14780 14782 14784 14786 14788 14790 14792 14794 14796 14798 14800 14802 14804 14806 14808 14810 14812 14814 14816 14818 14820 14822 14824 14826 14828 14830 14832 14834 14836 14838 14840 14842 14844 14846 14848 14850 14852 14854 14856 14858 14860 14862 14864 14866 14868 14870 14872 14874 14876 14878 14880 14882 14884 14886 14888 14890 14892 14894 14896 14898 14900 14902 14904 14906 14908 14910 14912 14914 14916 14918 14920 14922 14924 14926 14928 14930 14932 14934 14936 14938 14940 14942 14944 14946 14948 14950 14952 14954 14956 14958 14960 14962 14964 14966 14968 14970 14972 14974 14976 14978 14980 14982 14984 14986 14988 14990 14992 14994 14996 14998 15000 15002 15004 15006 15008 15010 15012 15014 15016 15018 15020 15022 15024 15026 15028 15030 15032 15034 15036 15038 15040 15042 15044 15046 15048 15050 15052 15054 15056 15058 15060 15062 15064 15066 15068 15070 15072 15074 15076 15078 15080 15082 15084 15086 15088 15090 15092 15094 15096 15098 15100 15102 15104 15106 15108 15110 15112 15114 15116 15118 15120 15122 15124 15126 15128 15130 15132 15134 15136 15138 15140 15142 15144 15146 15148 15150 15152 15154 15156 15158 15160 15162 15164 15166 15168 15170 15172 15174 15176 15178 15180 15182 15184 15186 15188 15190 15192 15194 15196 15198 15200 15202 15204 15206 15208 15210 15212 15214 15216 15218 15220 15222 15224 15226 15228 15230 15232 15234 15236 15238 15240 15242 15244 15246 15248 15250 15252 15254 15256 15258 15260 15262 15264 15266 15268 15270 15272 15274 15276 15278 15280 15282 15284 15286 15288 15290 15292 15294 15296 15298 15300 15302 15304 15306 15308 15310 15312 15314 15316 15318 15320 15322 15324 15326 15328 15330 15332 15334 15336 15338 15340 15342 15344 15346 15348 15350 15352 15354 15356 15358 15360 15362 15364 15366 15368 15370 15372 15374 15376 15378 15380 15382 15384 15386 15388 15390 15392 15394 15396 15398 15400 15402 15404 15406 15408 15410 15412 15414 15416 15418 15420 15422 15424 15426 15428 15430 15432 15434 15436 15438 15440 15442 15444 15446 15448 15450 15452 15454 15456 15458 15460 15462 15464 15466 15468 15470 15472 15474 15476 15478 15480 15482 15484 15486 15488 15490 15492 15494 15496 15498 15500 15502 15504 15506 15508 15510 15512 15514 15516 15518 15520 15522 15524 15526 15528 15530 15532 15534 15536 15538 15540 15542 15544 15546 15548 15550 15552 15554 15556 15558 15560 15562 15564 15566 15568 15570 15572 15574 15576 15578 15580 15582 15584 15586 15588 15590 15592 15594 15596 15598 15600 15602 15604 15606 15608 15610 15612 15614 15616 15618 15620 15622 15624 15626 15628 15630 15632 15634 15636 15638 15640 15642 15644 15646 15648 15650 15652 15654 15656 15658 15660 15662 15664 15666 15668 15670 15672 15674 15676 15678 15680 15682 15684 15686 15688 15690 15692 15694 15696 15698 15700 15702 15704 15706 15708 15710 15712 15714 15716 15718 15720 15722 15724 15726 15728 15730 15732 15734 15736 15738 15740 15742 15744 15746 15748 15750 15752 15754 15756 15758 15760 15762 15764 15766 15768 15770 15772 15774 15776 15778 15780 15782 15784 15786 15788 15790 15792 15794 15796 15798 15800 15802 15804 15806 15808 15810 15812 15814 15816 15818 15820 15822 15824 15826 15828 15830 15832 15834 15836 15838 15840 15842 15844 15846 15848 15850 15852 15854 15856 15858 15860 15862 15864 15866 15868 15870 15872 15874 15876 15878 15880 15882 15884 15886 15888 15890 15892 15894 15896 15898 15900 15902 15904 15906 15908 15910 15912 15914 15916 15918 15920 15922 15924 15926 15928 15930 15932 15934 15936 15938 15940 15942 15944 15946 15948 15950 15952 15954 15956 15958 15960 15962 15964 15966 15968 15970 15972 15974 15976 15978 15980 15982 15984 15986 15988 15990 15992 15994 15996 15998 16000 16002 16004 16006 16008 16010 16012 16014 16016 16018 16020 16022 16024 16026 16028 16030 16032 16034 16036 16038 16040 16042 16044 16046 16048 16050 16052 16054 16056 16058 16060 16062 16064 16066 16068 16070 16072 16074 16076 16078 16080 16082 16084 16086 16088 16090 16092 16094 16096 16098 16100 16102 16104 16106 16108 16110 16112 16114 16116 16118 16120 16122 16124 16126 16128 16130 16132 16134 16136 16138 16140 16142 16144 16146 16148 16150 16152 16154 16156 16158 16160 16162 16164 16166 16168 16170 16172 16174 16176 16178 16180 16182 16184 16186 16188 16190 16192 16194 16196 16198 16200 16202 16204 16206 16208 16210 16212 16214 16216 16218 16220 16222 16224 16226 16228 16230 16232 16234 16236 16238 16240 16242 16244 16246 16248 16250 16252 16254 16256 16258 16260 16262 16264 16266 16268 16270 16272 16274 16276 16278 16280 16282 16284 16286 16288 16290 16292 16294 16296 16298 16300 16302 16304 16306 16308 16310 16312 16314 16316 16318 16320 16322 16324 16326 16328 16330 16332 16334 16336 16338 16340 16342 16344 16346 16348 16350 16352 16354 16356 16358 16360 16362 16364 16366 16368 16370 16372 16374 16376 16378 16380 16382 16384 16386 16388 16390 16392 16394 16396 16398 16400 16402 16404 16406 16408 16410 16412 16414 16416 16418 16420 16422 16424 16426 16428 16430 16432 16434 16436 16438 16440 16442 16444 16446 16448 16450 16452 16454 16456 16458 16460 16462 16464 16466 16468 16470 16472 16474 16476 16478 16480 16482 16484 16486 16488 16490 16492 16494 16496 16498 16500 16502 16504 16506 16508 16510 16512 16514 16516 16518 16520 16522 16524 16526 16528 16530 16532 16534 16536 16538 16540 16542 16544 16546 16548 16550 16552 16554 16556 16558 16560 16562 16564 16566 16568 16570 16572 16574 16576 16578 16580 16582 16584 16586 16588 16590 16592 16594 16596 16598 16600 16602 16604 16606 16608 16610 16612 16614 16616 16618 16620 16622 16624 16626 16628 16630 16632 16634 16636 16638 16640 16642 16644 16646 16648 16650 16652 16654 16656 16658 16660 16662 16664 16666 16668 16670 16672 16674 16676 16678 16680 16682 16684 16686 16688 16690 16692 16694 16696 16698 16700 16702 16704 16706 16708 16710 16712 16714 16716 16718 16720 16722 16724 16726 16728 16730 16732 16734 16736 16738 16740 16742 16744 16746 16748 16750 16752 16754 16756 16758 16760 16762 16764 16766 16768 16770 16772 16774 16776 16778 16780 16782 16784 16786 16788 16790 16792 16794 16796 16798 16800 16802 16804 16806 16808 16810 16812 16814 16816 16818 16820 16822 16824 16826 16828 16830 16832 16834 16836 16838 16840 16842 16844 16846 16848 16850 16852 16854 16856 16858 16860 16862 16864 16866 16868 16870 16872 16874 16876 16878 16880 16882 16884 16886 16888 16890 16892 16894 16896 16898 16900 16902 16904 16906 16908 16910 16912 16914 16916 16918 16920 16922 16924 16926 16928 16930 16932 16934 16936 16938 16940 16942 16944 16946 16948 16950 16952 16954 16956 16958 16960 16962 16964 16966 16968 16970 16972 16974 16976 16978 16980 16982 16984 16986 16988 16990 16992 16994 16996 16998 17000 17002 17004 17006 17008 17010 17012 17014 17016 17018 17020 17022 17024 17026 17028 17030 17032 17034 17036 17038 17040 17042 17044 17046 17048 17050 17052 17054 17056 17058 17060 17062 17064 17066 17068 17070 17072 17074 17076 17078 17080 17082 17084 17086 17088 17090 17092 17094 17096 17098 17100 17102 17104 17106 17108 17110 17112 17114 17116 17118 17120 17122 17124 17126 17128 17130 17132 17134 17136 17138 17140 17142 17144 17146 17148 17150 17152 17154 17156 17158 17160 17162 17164 17166 17168 17170 17172 17174 17176 17178 17180 17182 17184 17186 17188 17190 17192 17194 17196 17198 17200 17202 17204 17206 17208 17210 17212 17214 17216 17218 17220 17222 17224 17226 17228 17230 17232 17234 17236 17238 17240 17242 17244 17246 17248 17250 17252 17254 17256 17258 17260 17262 17264 17266 17268 17270 17272 17274 17276 17278 17280 17282 17284 17286 17288 17290 17292 17294 17296 17298 17300 17302 17304 17306 17308 17310 17312 17314 17316 17318 17320 17322 17324 17326 17328 17330 17332 17334 17336 17338 17340 17342 17344 17346 17348 17350 17352 17354 17356 17358 17360 17362 17364 17366 17368 17370 17372 17374 17376 17378 17380 17382 17384 17386 17388 17390 17392 17394 17396 17398 17400 17402 17404 17406 17408 17410 17412 17414 17416 17418 17420 17422 17424 17426 17428 17430 17432 17434 17436 17438 17440 17442 17444 17446 17448 17450 17452 17454 17456 17458 17460 17462 17464 17466 17468 17470 17472 17474 17476 17478 17480 17482 17484 17486 17488 17490 17492 17494 17496 17498 17500 17502 17504 17506 17508 17510 17512 17514 17516 17518 17520 17522 17524 17526 17528 17530 17532 17534 17536 17538 17540 17542 17544 17546 17548 17550 17552 17554 17556 17558 17560 17562 17564 17566 17568 17570 17572 17574 17576 17578 17580 17582 17584 17586 17588 17590 17592 17594 17596 17598 17600 17602 17604 17606 17608 17610 17612 17614 17616 17618 17620 17622 17624 17626 17628 17630 17632 17634 17636 17638 17640 17642 17644 17646 17648 17650 17652 17654 17656 17658 17660 17662 17664 17666 17668 17670 17672 17674 17676 17678 17680 17682 17684 17686 17688 17690 17692 17694 17696 17698 17700 17702 17704 17706 17708 17710 17712 17714 17716 17718 17720 17722 17724 17726 17728 17730 17732 17734 17736 17738 17740 17742 17744 17746 17748 17750 17752 17754 17756 17758 17760 17762 17764 17766 17768 17770 17772 17774 17776 17778 17780 17782 17784 17786 17788 17790 17792 17794 17796 17798 17800 17802 17804 17806 17808 17810 17812 17814 17816 17818 17820 17822 17824 17826 17828 17830 17832 17834 17836 17838 17840 17842 17844 17846 17848 17850 17852 17854 17856 17858 17860 17862 17864 17866 17868 17870 17872 17874 17876 17878 17880 17882 17884 17886 17888 17890 17892 17894 17896 17898 17900 17902 17904 17906 17908 17910 17912 17914 17916 17918 17920 17922 17924 17926 17928 17930 17932 17934 17936 17938 17940 17942 17944 17946 17948 17950 17952 17954 17956 17958 17960 17962 17964 17966 17968 17970 17972 17974 17976 17978 17980 17982 17984 17986 17988 17990 17992 17994 17996 17998 18000 18002 18004 18006 18008 18010 18012 18014 18016 18018 18020 18022 18024 18026 18028 18030 18032 18034 18036 18038 18040 18042 18044 18046 18048 18050 18052 18054 18056 18058 18060 18062 18064 18066 18068 18070 18072 18074 18076 18078 18080 18082 18084 18086 18088 18090 18092 18094 18096 18098 18100 18102 18104 18106 18108 18110 18112 18114 18116 18118 18120 18122 18124 18126 18128 18130 18132 18134 18136 18138 18140 18142 18144 18146 18148 18150 18152 18154 18156 18158 18160 18162 18164 18166 18168 18170 18172 18174 18176 18178 18180 18182 18184 18186 18188 18190 18192 18194 18196 18198 18200 18202 18204 18206 18208 18210 18212 18214 18216 18218 18220 18222 18224 18226 18228 18230 18232 18234 18236 18238 18240 18242 18244 18246 18248 18250 18252 18254 18256 18258 18260 18262 18264 18266 18268 18270 18272 18274 18276 18278 18280 18282 18284 18286 18288 18290 18292 18294 18296 18298 18300 18302 18304 18306 18308 18310 18312 18314 18316 18318 18320 18322 18324 18326 18328 18330 18332 18334 18336 18338 18340 18342 18344 18346 18348 18350 18352 18354 18356 18358 18360 18362 18364 18366 18368 18370 18372 18374 18376 18378 18380 18382 18384 18386 18388 18390 18392 18394 18396 18398 18400 18402 18404 18406 18408 18410 18412 18414 18416 18418 18420 18422 18424 18426 18428 18430 18432 18434 18436 18438 18440 18442 18444 18446 18448 18450 18452 18454 18456 18458 18460 18462 18464 18466 18468 18470 18472 18474 18476 18478 18480 18482 18484 18486 18488 18490 18492 18494 18496 18498 18500 18502 18504 18506 18508 18510 18512 18514 18516 18518 18520 18522 18524 18526 18528 18530 18532 18534 18536 18538 18540 18542 18544 18546 18548 18550 18552 18554 18556 18558 18560 18562 18564 18566 18568 18570 18572 18574 18576 18578 18580 18582 18584 18586 18588 18590 18592 18594 18596 18598 18600 18602 18604 18606 18608 18610 18612 18614 18616 18618 18620 18622 18624 18626 18628 18630 18632 18634 18636 18638 18640 18642 18644 18646 18648 18650 18652 18654 18656 18658 18660 18662 18664 18666 18668 18670 18672 18674 18676 18678 18680 18682 18684 18686 18688 18690 18692 18694 18696 18698 18700 18702 18704 18706 18708 18710 18712 18714 18716 18718 18720 18722 18724 18726 18728 18730 18732 18734 18736 18738 18740 18742 18744 18746 18748 18750 18752 18754 18756 18758 18760 18762 18764 18766 18768 18770 18772 18774 18776 18778 18780 18782 18784 18786 18788 18790 18792 18794 18796 18798 18800 18802 18804 18806 18808 18810 18812 18814 18816 18818 18820 18822 18824 18826 18828 18830 18832 18834 18836 18838 18840 18842 18844 18846 18848 18850 18852 18854 18856 18858 18860 18862 18864 18866 18868 18870 18872 18874 18876 18878 18880 18882 18884 18886 18888 18890 18892 18894 18896 18898 18900 18902 18904 18906 18908 18910 18912 18914 18916 18918 18920 18922 18924 18926 18928 18930 18932 18934 18936 18938 18940 18942 18944 18946 18948 18950 18952 18954 18956 18958 18960 18962 18964 18966 18968 18970 18972 18974 18976 18978 18980 18982 18984 18986 18988 18990 18992 18994 18996 18998 19000 19002 19004 19006 19008 19010 19012 19014 19016 19018 19020 19022 19024 19026 19028 19030 19032 19034 19036 19038 19040 19042 19044 19046 19048 19050 19052 19054 19056 19058 19060 19062 19064 19066 19068 19070 19072 19074 19076 19078 19080 19082 19084 19086 19088 19090 19092 19094 19096 19098 19100 19102 19104 19106 19108 19110 19112 19114 19116 19118 19120 19122 19124 19126 19128 19130 19132 19134 19136 19138 19140 19142 19144 19146 19148 19150 19152 19154 19156 19158 19160 19162 19164 19166 19168 19170 19172 19174 19176 19178 19180 19182 19184 19186 19188 19190 19192 19194 19196 19198 19200 19202 19204 19206 19208 19210 19212 19214 19216 19218 19220 19222 19224 19226 19228 19230 19232 19234 19236 19238 19240 19242 19244 19246 19248 19250 19252 19254 19256 19258 19260 19262 19264 19266 19268 19270 19272 19274 19276 19278 19280 19282 19284 19286 19288 19290 19292 19294 19296 19298 19300 19302 19304 19306 19308 19310 19312 19314 19316 19318 19320 19322 19324 19326 19328 19330 19332 19334 19336 19338 19340 19342 19344 19346 19348 19350 19352 19354 19356 19358 19360 19362 19364 19366 19368 19370 19372 19374 19376 19378 19380 19382 19384 19386 19388 19390 19392 19394 19396 19398 19400 19402 19404 19406 19408 19410 19412 19414 19416 19418 19420 19422 19424 19426 19428 19430 19432 19434 19436 19438 19440 19442 19444 19446 19448 19450 19452 19454 19456 19458 19460 19462 19464 19466 19468 19470 19472 19474 19476 19478 19480 19482 19484 19486 19488 19490 19492 19494 19496 19498 19500 19502 19504 19506 19508 19510 19512 19514 19516 19518 19520 19522 19524 19526 19528 19530 19532 19534 19536 19538 19540 19542 19544 19546 19548 19550 19552 19554 19556 19558 19560 19562 19564 19566 19568 19570 19572 19574 19576 19578 19580 19582 19584 19586 19588 19590 19592 19594 19596 19598 19600 19602 19604 19606 19608 19610 19612 19614 19616 19618 19620 19622 19624 19626 19628 19630 19632 19634 19636 19638 19640 19642 19644 19646 19648 19650 19652 19654 19656 19658 19660 19662 19664 19666 19668 19670 19672 19674 19676 19678 19680 19682 19684 19686 19688 19690 19692 19694 19696 19698 19700 19702 19704 19706 19708 19710 19712 19714 19716 19718 19720 19722 19724 19726 19728 19730 19732 19734 19736 19738 19740 19742 19744 19746 19748 19750 19752 19754 19756 19758 19760 19762 19764 19766 19768 19770 19772 19774 19776 19778 19780 19782 19784 19786 19788 19790 19792 19794 19796 19798 19800 19802 19804 19806 19808 19810 19812 19814 19816 19818 19820 19822 19824 19826 19828 19830 19832 19834 19836 19838 19840 19842 19844 19846 19848 19850 19852 19854 19856 19858 19860 19862 19864 19866 19868 19870 19872 19874 19876 19878 19880 19882 19884 19886 19888 19890 19892 19894 19896 19898 19900 19902 19904 19906 19908 19910 19912 19914 19916 19918 19920 19922 19924 19926 19928 19930 19932 19934 19936 19938 19940 19942 19944 19946 19948 19950 19952 19954 19956 19958 19960 19962 19964 19966 19968 19970 19972 19974 19976 19978 19980 19982 19984 19986 19988 19990 19992 19994 19996 19998 20000 20002 20004 20006 20008 20010 20012 20014 20016 20018 20020 20022 20024 20026 20028 20030 20032 20034 20036 20038 20040 20042 20044 20046 20048 20050 20052 20054 20056 20058 20060 20062 20064 20066 20068 20070 20072 20074 20076 20078 20080 20082 20084 20086 20088 20090 20092 20094 20096 20098 20100 20102 20104 20106 20108 20110 20112 20114 20116 20118 20120 20122 20124 20126 20128 20130 20132 20134 20136 20138 20140 20142 20144 20146 20148 20150 20152 20154 20156 20158 20160 20162 20164 20166 20168 20170 20172 20174 20176 20178 20180 20182 20184 20186 20188 20190 20192 20194 20196 20198 20200 20202 20204 20206 20208 20210 20212 20214 20216 20218 20220 20222 20224 20226 20228 20230 20232 20234 20236 20238 20240 20242 20244 20246 20248 20250 20252 20254 20256 20258 20260 20262 20264 20266 20268 20270 20272 20274 20276 20278 20280 20282 20284 20286 20288 20290 20292 20294 20296 20298 20300 20302 20304 20306 20308 20310 20312 20314 20316 20318 20320 20322 20324 20326 20328 20330 20332 20334 20336 20338 20340 20342 20344 20346 20348 20350 20352 20354 20356 20358 20360 20362 20364 20366 20368 20370 20372 20374 20376 20378 20380 20382 20384 20386 20388 20390 20392 20394 20396 20398 20400 20402 20404 20406 20408 20410 20412 20414 20416 20418 20420 20422 20424 20426 20428 20430 20432 20434 20436 20438 20440 20442 20444 20446 20448 20450 20452 20454 20456 20458 20460 20462 20464 20466 20468 20470 20472 20474 20476 20478 20480 20482 20484 20486 20488 20490 20492 20494 20496 20498 20500 20502 20504 20506 20508 20510 20512 20514 20516 20518 20520 20522 20524 20526 20528 20530 20532 20534 20536 20538 20540 20542 20544 20546 20548 20550 20552 20554 20556 20558 20560 20562 20564 20566 20568 20570 20572 20574 20576 20578 20580 20582 20584 20586 20588 20590 20592 20594 20596 20598 20600 20602 20604 20606 20608 20610 20612 20614 20616 20618 20620 20622 20624 20626 20628 20630 20632 20634 20636 20638 20640 20642 20644 20646 20648 20650 20652 20654 20656 20658 20660 20662 20664 20666 20668 20670 20672 20674 20676 20678 20680 20682 20684 20686 20688 20690 20692 20694 20696 20698 20700 20702 20704 20706 20708 20710 20712 20714 20716 20718 20720 20722 20724 20726 20728 20730 20732 20734 20736 20738 20740 20742 20744 20746 20748 20750 20752 20754 20756 20758 20760 20762 20764 20766 20768 20770 20772 20774 20776 20778 20780 20782 20784 20786 20788 20790 20792 20794 20796 20798 20800 20802 20804 20806 20808 20810 20812 20814 20816 20818 20820 20822 20824 20826 20828 20830 20832 20834 20836 20838 20840 20842 20844 20846 20848 20850 20852 20854 20856 20858 20860 20862 20864 20866 20868 20870 20872 20874 20876 20878 20880 20882 20884 20886 20888 20890 20892 20894 20896 20898 20900 20902 20904 20906 20908 20910 20912 20914 20916 20918 20920 20922 20924 20926 20928 20930 20932 20934 20936 20938 20940 20942 20944 20946 20948 20950 20952 20954 20956 20958 20960 20962 20964 20966 20968 20970 20972 20974 20976 20978 20980 20982 20984 20986 20988 20990 20992 20994 20996 20998 21000 21002 21004 21006 21008 21010 21012 21014 21016 21018 21020 21022 21024 21026 21028 21030 21032 21034 21036 21038 21040 21042 21044 21046 21048 21050 21052 21054 21056 21058 21060 21062 21064 21066 21068 21070 21072 21074 21076 21078 21080 21082 21084 21086 21088 21090 21092 21094 21096 21098 21100 21102 21104 21106 21108 21110 21112 21114 21116 21118 21120 21122 21124 21126 21128 21130 21132 21134 21136 21138 21140 21142 21144 21146 21148 21150 21152 21154 21156 21158 21160 21162 21164 21166 21168 21170 21172 21174 21176 21178 21180 21182 21184 21186 21188 21190 21192 21194 21196 21198 21200 21202 21204 21206 21208 21210 21212 21214 21216 21218 21220 21222 21224 21226 21228 21230 21232 21234 21236 21238 21240 21242 21244 21246 21248 21250 21252 21254 21256 21258 21260 21262 21264 21266 21268 21270 21272 21274 21276 21278 21280 21282 21284 21286 21288 21290 21292 21294 21296 21298 21300 21302 21304 21306 21308 21310 21312 21314 21316 21318 21320 21322 21324 21326 21328 21330 21332 21334 21336 21338 21340 21342 21344 21346 21348 21350 21352 21354 21356 21358 21360 21362 21364 21366 21368 21370 21372 21374 21376 21378 21380 21382 21384 21386 21388 21390 21392 21394 21396 21398 21400 21402 21404 21406 21408 21410 21412 21414 21416 21418 21420 21422 21424 21426 21428 21430 21432 21434 21436 21438 21440 21442 21444 21446 21448 21450 21452 21454 21456 21458 21460 21462 21464 21466 21468 21470 21472 21474 21476 21478 21480 21482 21484 21486 21488 21490 21492 21494 21496 21498 21500 21502 21504 21506 21508 21510 21512 21514 21516 21518 21520 21522 21524 21526 21528 21530 21532 21534 21536 21538 21540 21542 21544 21546 21548 21550 21552 21554 21556 21558 21560 21562 21564 21566 21568 21570 21572 21574 21576 21578 21580 21582 21584 21586 21588 21590 21592 21594 21596 21598 21600 21602 21604 21606 21608 21610 21612 21614 21616 21618 21620 21622 21624 21626 21628 21630 21632 21634 21636 21638 21640 21642 21644 21646 21648 21650 21652 21654 21656 21658 21660 21662 21664 21666 21668 21670 21672 21674 21676 21678 21680 21682 21684 21686 21688 21690 21692 21694 21696 21698 21700 21702 21704 21706 21708 21710 21712 21714 21716 21718 21720 21722 21724 21726 21728 21730 21732 21734 21736 21738 21740 21742 21744 21746 21748 21750 21752 21754 21756 21758 21760 21762 21764 21766 21768 21770 21772 21774 21776 21778 21780 21782 21784 21786 21788 21790 21792 21794 21796 21798 21800 21802 21804 21806 21808 21810 21812 21814 21816 21818 21820 21822 21824 21826 21828 21830 21832 21834 21836 21838 21840 21842 21844 21846 21848 21850 21852 21854 21856 21858 21860 21862 21864 21866 21868 21870 21872 21874 21876 21878 21880 21882 21884 21886 21888 21890 21892 21894 21896 21898 21900 21902 21904 21906 21908 21910 21912 21914 21916 21918 21920 21922 21924 21926 21928 21930 21932 21934 21936 21938 21940 21942 21944 21946 21948 21950 21952 21954 21956 21958 21960 21962 21964 21966 21968 21970 21972 21974 21976 21978 21980 21982 21984 21986 21988 21990 21992 21994 21996 21998 22000 22002 22004 22006 22008 22010 22012 22014 22016 22018 22020 22022 22024 22026 22028 22030 22032 22034 22036 22038 22040 22042 22044 22046 22048 22050 22052 22054 22056 22058 22060 22062 22064 22066 22068 22070 22072 22074 22076 22078 22080 22082 22084 22086 22088 22090 22092 22094 22096 22098 22100 22102 22104 22106 22108 22110 22112 22114 22116 22118 22120 22122 22124 22126 22128 22130 22132 22134 22136 22138 22140 22142 22144 22146 22148 22150 22152 22154 22156 22158 22160 22162 22164 22166 22168 22170 22172 22174 22176 22178 22180 22182 22184 22186 22188 22190 22192 22194 22196 22198 22200 22202 22204 22206 22208 22210 22212 22214 22216 22218 22220 22222 22224 22226 22228 22230 22232 22234 22236 22238 22240 22242 22244 22246 22248 22250 22252 22254 22256 22258 22260 22262 22264 22266 22268 22270 22272 22274 22276 22278 22280 22282 22284 22286 22288 22290 22292 22294 22296 22298 22300 22302 22304 22306 22308 22310 22312 22314 22316 22318 22320 22322 22324 22326 22328 22330 22332 22334 22336 22338 22340 22342 22344 22346 22348 22350 22352 22354 22356 22358 22360 22362 22364 22366 22368 22370 22372 22374 22376 22378 22380 22382 22384 22386 22388 22390 22392 22394 22396 22398 22400 22402 22404 22406 22408 22410 22412 22414 22416 22418 22420 22422 22424 22426 22428 22430 22432 22434 22436 22438 22440 22442 22444 22446 22448 22450 22452 22454 22456 22458 22460 22462 22464 22466 22468 22470 22472 22474 22476 22478 22480 22482 22484 22486 22488 22490 22492 22494 22496 22498 22500 22502 22504 22506 22508 22510 22512 22514 22516 22518 22520 22522 22524 22526 22528 22530 22532 22534 22536 22538 22540 22542 22544 22546 22548 22550 22552 22554 22556 22558 22560 22562 22564 22566 22568 22570 22572 22574 22576 22578 22580 22582 22584 22586 22588 22590 22592 22594 22596 22598 22600 22602 22604 22606 22608 22610 22612 22614 22616 22618 22620 22622 22624 22626 22628 22630 22632 22634 22636 22638 22640 22642 22644 22646 22648 22650 22652 22654 22656 22658 22660 22662 22664 22666 22668 22670 22672 22674 22676 22678 22680 22682 22684 22686 22688 22690 22692 22694 22696 22698 22700 22702 22704 22706 22708 22710 22712 22714 22716 22718 22720 22722 22724 22726 22728 22730 22732 22734 22736 22738 22740 22742 22744 22746 22748 22750 22752 22754 22756 22758 22760 22762 22764 22766 22768 22770 22772 22774 22776 22778 22780 22782 22784 22786 22788 22790 22792 22794 22796 22798 22800 22802 22804 22806 22808 22810 22812 22814 22816 22818 22820 22822 22824 22826 22828 22830 22832 22834 22836 22838 22840 22842 22844 22846 22848 22850 22852 22854 22856 22858 22860 22862 22864 22866 22868 22870 22872 22874 22876 22878 22880 22882 22884 22886 22888 22890 22892 22894 22896 22898 22900 22902 22904 22906 22908 22910 22912 22914 22916 22918 22920 22922 22924 22926 22928 22930 22932 22934 22936 22938 22940 22942 22944 22946 22948 22950 22952 22954 22956 22958 22960 22962 22964 22966 22968 22970 22972 22974 22976 22978 22980 22982 22984 22986 22988 22990 22992 22994 22996 22998 23000 23002 23004 23006 23008 23010 23012 23014 23016 23018 23020 23022 23024 23026 23028 23030 23032 23034 23036 23038 23040 23042 23044 23046 23048 23050 23052 23054 23056 23058 23060 23062 23064 23066 23068 23070 23072 23074 23076 23078 23080 23082 23084 23086 23088 23090 23092 23094 23096 23098 23100 23102 23104 23106 23108 23110 23112 23114 23116 23118 23120 23122 23124 23126 23128 23130 23132 23134 23136 23138 23140 23142 23144 23146 23148 23150 23152 23154 23156 23158 23160 23162 23164 23166 23168 23170 23172 23174 23176 23178 23180 23182 23184 23186 23188 23190 23192 23194 23196 23198 23200 23202 23204 23206 23208 23210 23212 23214 23216 23218 23220 23222 23224 23226 23228 23230 23232 23234 23236 23238 23240 23242 23244 23246 23248 23250 23252 23254 23256 23258 23260 23262 23264 23266 23268 23270 23272 23274 23276 23278 23280 23282 23284 23286 23288 23290 23292 23294 23296 23298 23300 23302 23304 23306 23308 23310 23312 23314 23316 23318 23320 23322 23324 23326 23328 23330 23332 23334 23336 23338 23340 23342 23344 23346 23348 23350 23352 23354 23356 23358 23360 23362 23364 23366 23368 23370 23372 23374 23376 23378 23380 23382 23384 23386 23388 23390 23392 23394 23396 23398 23400 23402 23404 23406 23408 23410 23412 23414 23416 23418 23420 23422 23424 23426 23428 23430 23432 23434 23436 23438 23440 23442 23444 23446 23448 23450 23452 23454 23456 23458 23460 23462 23464 23466 23468 23470 23472 23474 23476 23478 23480 23482 23484 23486 23488 23490 23492 23494 23496 23498 23500 23502 23504 23506 23508 23510 23512 23514 23516 23518 23520 23522 23524 23526 23528 23530 23532 23534 23536 23538 23540 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 101 103 105 107 109 111 113 115 117 119 121 123 125 127 129 131 133 135 137 139 141 143 145 147 149 151 153 155 157 159 161 163 165 167 169 171 173 175 177 179 181 183 185 187 189 191 193 195 197 199 201 203 205 207 209 211 213 215 217 219 221 223 225 227 229 231 233 235 237 239 241 243 245 247 249 251 253 255 257 259 261 263 265 267 269 271 273 275 277 279 281 283 285 287 289 291 293 295 297 299 301 303 305 307 309 311 313 315 317 319 321 323 325 327 329 331 333 335 337 339 341 343 345 347 349 351 353 355 357 359 361 363 365 367 369 371 373 375 377 379 381 383 385 387 389 391 393 395 397 399 401 403 405 407 409 411 413 415 417 419 421 423 425 427 429 431 433 435 437 439 441 443 445 447 449 451 453 455 457 459 461 463 465 467 469 471 473 475 477 479 481 483 485 487 489 491 493 495 497 499 501 503 505 507 509 511 513 515 517 519 521 523 525 527 529 531 533 535 537 539 541 543 545 547 549 551 553 555 557 559 561 563 565 567 569 571 573 575 577 579 581 583 585 587 589 591 593 595 597 599 601 603 605 607 609 611 613 615 617 619 621 623 625 627 629 631 633 635 637 639 641 643 645 647 649 651 653 655 657 659 661 663 665 667 669 671 673 675 677 679 681 683 685 687 689 691 693 695 697 699 701 703 705 707 709 711 713 715 717 719 721 723 725 727 729 731 733 735 737 739 741 743 745 747 749 751 753 755 757 759 761 763 765 767 769 771 773 775 777 779 781 783 785 787 789 791 793 795 797 799 801 803 805 807 809 811 813 815 817 819 821 823 825 827 829 831 833 835 837 839 841 843 845 847 849 851 853 855 857 859 861 863 865 867 869 871 873 875 877 879 881 883 885 887 889 891 893 895 897 899 901 903 905 907 909 911 913 915 917 919 921 923 925 927 929 931 933 935 937 939 941 943 945 947 949 951 953 955 957 959 961 963 965 967 969 971 973 975 977 979 981 983 985 987 989 991 993 995 997 999 1001 1003 1005 1007 1009 1011 1013 1015 1017 1019 1021 1023 1025 1027 1029 1031 1033 1035 1037 1039 1041 1043 1045 1047 1049 1051 1053 1055 1057 1059 1061 1063 1065 1067 1069 1071 1073 1075 1077 1079 1081 1083 1085 1087 1089 1091 1093 1095 1097 1099 1101 1103 1105 1107 1109 1111 1113 1115 1117 1119 1121 1123 1125 1127 1129 1131 1133 1135 1137 1139 1141 1143 1145 1147 1149 1151 1153 1155 1157 1159 1161 1163 1165 1167 1169 1171 1173 1175 1177 1179 1181 1183 1185 1187 1189 1191 1193 1195 1197 1199 1201 1203 1205 1207 1209 1211 1213 1215 1217 1219 1221 1223 1225 1227 1229 1231 1233 1235 1237 1239 1241 1243 1245 1247 1249 1251 1253 1255 1257 1259 1261 1263 1265 1267 1269 1271 1273 1275 1277 1279 1281 1283 1285 1287 1289 1291 1293 1295 1297 1299 1301 1303 1305 1307 1309 1311 1313 1315 1317 1319 1321 1323 1325 1327 1329 1331 1333 1335 1337 1339 1341 1343 1345 1347 1349 1351 1353 1355 1357 1359 1361 1363 1365 1367 1369 1371 1373 1375 1377 1379 1381 1383 1385 1387 1389 1391 1393 1395 1397 1399 1401 1403 1405 1407 1409 1411 1413 1415 1417 1419 1421 1423 1425 1427 1429 1431 1433 1435 1437 1439 1441 1443 1445 1447 1449 1451 1453 1455 1457 1459 1461 1463 1465 1467 1469 1471 1473 1475 1477 1479 1481 1483 1485 1487 1489 1491 1493 1495 1497 1499 1501 1503 1505 1507 1509 1511 1513 1515 1517 1519 1521 1523 1525 1527 1529 1531 1533 1535 1537 1539 1541 1543 1545 1547 1549 1551 1553 1555 1557 1559 1561 1563 1565 1567 1569 1571 1573 1575 1577 1579 1581 1583 1585 1587 1589 1591 1593 1595 1597 1599 1601 1603 1605 1607 1609 1611 1613 1615 1617 1619 1621 1623 1625 1627 1629 1631 1633 1635 1637 1639 1641 1643 1645 1647 1649 1651 1653 1655 1657 1659 1661 1663 1665 1667 1669 1671 1673 1675 1677 1679 1681 1683 1685 1687 1689 1691 1693 1695 1697 1699 1701 1703 1705 1707 1709 1711 1713 1715 1717 1719 1721 1723 1725 1727 1729 1731 1733 1735 1737 1739 1741 1743 1745 1747 1749 1751 1753 1755 1757 1759 1761 1763 1765 1767 1769 1771 1773 1775 1777 1779 1781 1783 1785 1787 1789 1791 1793 1795 1797 1799 1801 1803 1805 1807 1809 1811 1813 1815 1817 1819 1821 1823 1825 1827 1829 1831 1833 1835 1837 1839 1841 1843 1845 1847 1849 1851 1853 1855 1857 1859 1861 1863 1865 1867 1869 1871 1873 1875 1877 1879 1881 1883 1885 1887 1889 1891 1893 1895 1897 1899 1901 1903 1905 1907 1909 1911 1913 1915 1917 1919 1921 1923 1925 1927 1929 1931 1933 1935 1937 1939 1941 1943 1945 1947 1949 1951 1953 1955 1957 1959 1961 1963 1965 1967 1969 1971 1973 1975 1977 1979 1981 1983 1985 1987 1989 1991 1993 1995 1997 1999 2001 2003 2005 2007 2009 2011 2013 2015 2017 2019 2021 2023 2025 2027 2029 2031 2033 2035 2037 2039 2041 2043 2045 2047 2049 2051 2053 2055 2057 2059 2061 2063 2065 2067 2069 2071 2073 2075 2077 2079 2081 2083 2085 2087 2089 2091 2093 2095 2097 2099 2101 2103 2105 2107 2109 2111 2113 2115 2117 2119 2121 2123 2125 2127 2129 2131 2133 2135 2137 2139 2141 2143 2145 2147 2149 2151 2153 2155 2157 2159 2161 2163 2165 2167 2169 2171 2173 2175 2177 2179 2181 2183 2185 2187 2189 2191 2193 2195 2197 2199 2201 2203 2205 2207 2209 2211 2213 2215 2217 2219 2221 2223 2225 2227 2229 2231 2233 2235 2237 2239 2241 2243 2245 2247 2249 2251 2253 2255 2257 2259 2261 2263 2265 2267 2269 2271 2273 2275 2277 2279 2281 2283 2285 2287 2289 2291 2293 2295 2297 2299 2301 2303 2305 2307 2309 2311 2313 2315 2317 2319 2321 2323 2325 2327 2329 2331 2333 2335 2337 2339 2341 2343 2345 2347 2349 2351 2353 2355 2357 2359 2361 2363 2365 2367 2369 2371 2373 2375 2377 2379 2381 2383 2385 2387 2389 2391 2393 2395 2397 2399 2401 2403 2405 2407 2409 2411 2413 2415 2417 2419 2421 2423 2425 2427 2429 2431 2433 2435 2437 2439 2441 2443 2445 2447 2449 2451 2453 2455 2457 2459 2461 2463 2465 2467 2469 2471 2473 2475 2477 2479 2481 2483 2485 2487 2489 2491 2493 2495 2497 2499 2501 2503 2505 2507 2509 2511 2513 2515 2517 2519 2521 2523 2525 2527 2529 2531 2533 2535 2537 2539 2541 2543 2545 2547 2549 2551 2553 2555 2557 2559 2561 2563 2565 2567 2569 2571 2573 2575 2577 2579 2581 2583 2585 2587 2589 2591 2593 2595 2597 2599 2601 2603 2605 2607 2609 2611 2613 2615 2617 2619 2621 2623 2625 2627 2629 2631 2633 2635 2637 2639 2641 2643 2645 2647 2649 2651 2653 2655 2657 2659 2661 2663 2665 2667 2669 2671 2673 2675 2677 2679 2681 2683 2685 2687 2689 2691 2693 2695 2697 2699 2701 2703 2705 2707 2709 2711 2713 2715 2717 2719 2721 2723 2725 2727 2729 2731 2733 2735 2737 2739 2741 2743 2745 2747 2749 2751 2753 2755 2757 2759 2761 2763 2765 2767 2769 2771 2773 2775 2777 2779 2781 2783 2785 2787 2789 2791 2793 2795 2797 2799 2801 2803 2805 2807 2809 2811 2813 2815 2817 2819 2821 2823 2825 2827 2829 2831 2833 2835 2837 2839 2841 2843 2845 2847 2849 2851 2853 2855 2857 2859 2861 2863 2865 2867 2869 2871 2873 2875 2877 2879 2881 2883 2885 2887 2889 2891 2893 2895 2897 2899 2901 2903 2905 2907 2909 2911 2913 2915 2917 2919 2921 2923 2925 2927 2929 2931 2933 2935 2937 2939 2941 2943 2945 2947 2949 2951 2953 2955 2957 2959 2961 2963 2965 2967 2969 2971 2973 2975 2977 2979 2981 2983 2985 2987 2989 2991 2993 2995 2997 2999 3001 3003 3005 3007 3009 3011 3013 3015 3017 3019 3021 3023 3025 3027 3029 3031 3033 3035 3037 3039 3041 3043 3045 3047 3049 3051 3053 3055 3057 3059 3061 3063 3065 3067 3069 3071 3073 3075 3077 3079 3081 3083 3085 3087 3089 3091 3093 3095 3097 3099 3101 3103 3105 3107 3109 3111 3113 3115 3117 3119 3121 3123 3125 3127 3129 3131 3133 3135 3137 3139 3141 3143 3145 3147 3149 3151 3153 3155 3157 3159 3161 3163 3165 3167 3169 3171 3173 3175 3177 3179 3181 3183 3185 3187 3189 3191 3193 3195 3197 3199 3201 3203 3205 3207 3209 3211 3213 3215 3217 3219 3221 3223 3225 3227 3229 3231 3233 3235 3237 3239 3241 3243 3245 3247 3249 3251 3253 3255 3257 3259 3261 3263 3265 3267 3269 3271 3273 3275 3277 3279 3281 3283 3285 3287 3289 3291 3293 3295 3297 3299 3301 3303 3305 3307 3309 3311 3313 3315 3317 3319 3321 3323 3325 3327 3329 3331 3333 3335 3337 3339 3341 3343 3345 3347 3349 3351 3353 3355 3357 3359 3361 3363 3365 3367 3369 3371 3373 3375 3377 3379 3381 3383 3385 3387 3389 3391 3393 3395 3397 3399 3401 3403 3405 3407 3409 3411 3413 3415 3417 3419 3421 3423 3425 3427 3429 3431 3433 3435 3437 3439 3441 3443 3445 3447 3449 3451 3453 3455 3457 3459 3461 3463 3465 3467 3469 3471 3473 3475 3477 3479 3481 3483 3485 3487 3489 3491 3493 3495 3497 3499 3501 3503 3505 3507 3509 3511 3513 3515 3517 3519 3521 3523 3525 3527 3529 3531 3533 3535 3537 3539 3541 3543 3545 3547 3549 3551 3553 3555 3557 3559 3561 3563 3565 3567 3569 3571 3573 3575 3577 3579 3581 3583 3585 3587 3589 3591 3593 3595 3597 3599 3601 3603 3605 3607 3609 3611 3613 3615 3617 3619 3621 3623 3625 3627 3629 3631 3633 3635 3637 3639 3641 3643 3645 3647 3649 3651 3653 3655 3657 3659 3661 3663 3665 3667 3669 3671 3673 3675 3677 3679 3681 3683 3685 3687 3689 3691 3693 3695 3697 3699 3701 3703 3705 3707 3709 3711 3713 3715 3717 3719 3721 3723 3725 3727 3729 3731 3733 3735 3737 3739 3741 3743 3745 3747 3749 3751 3753 3755 3757 3759 3761 3763 3765 3767 3769 3771 3773 3775 3777 3779 3781 3783 3785 3787 3789 3791 3793 3795 3797 3799 3801 3803 3805 3807 3809 3811 3813 3815 3817 3819 3821 3823 3825 3827 3829 3831 3833 3835 3837 3839 3841 3843 3845 3847 3849 3851 3853 3855 3857 3859 3861 3863 3865 3867 3869 3871 3873 3875 3877 3879 3881 3883 3885 3887 3889 3891 3893 3895 3897 3899 3901 3903 3905 3907 3909 3911 3913 3915 3917 3919 3921 3923 3925 3927 3929 3931 3933 3935 3937 3939 3941 3943 3945 3947 3949 3951 3953 3955 3957 3959 3961 3963 3965 3967 3969 3971 3973 3975 3977 3979 3981 3983 3985 3987 3989 3991 3993 3995 3997 3999 4001 4003 4005 4007 4009 4011 4013 4015 4017 4019 4021 4023 4025 4027 4029 4031 4033 4035 4037 4039 4041 4043 4045 4047 4049 4051 4053 4055 4057 4059 4061 4063 4065 4067 4069 4071 4073 4075 4077 4079 4081 4083 4085 4087 4089 4091 4093 4095 4097 4099 4101 4103 4105 4107 4109 4111 4113 4115 4117 4119 4121 4123 4125 4127 4129 4131 4133 4135 4137 4139 4141 4143 4145 4147 4149 4151 4153 4155 4157 4159 4161 4163 4165 4167 4169 4171 4173 4175 4177 4179 4181 4183 4185 4187 4189 4191 4193 4195 4197 4199 4201 4203 4205 4207 4209 4211 4213 4215 4217 4219 4221 4223 4225 4227 4229 4231 4233 4235 4237 4239 4241 4243 4245 4247 4249 4251 4253 4255 4257 4259 4261 4263 4265 4267 4269 4271 4273 4275 4277 4279 4281 4283 4285 4287 4289 4291 4293 4295 4297 4299 4301 4303 4305 4307 4309 4311 4313 4315 4317 4319 4321 4323 4325 4327 4329 4331 4333 4335 4337 4339 4341 4343 4345 4347 4349 4351 4353 4355 4357 4359 4361 4363 4365 4367 4369 4371 4373 4375 4377 4379 4381 4383 4385 4387 4389 4391 4393 4395 4397 4399 4401 4403 4405 4407 4409 4411 4413 4415 4417 4419 4421 4423 4425 4427 4429 4431 4433 4435 4437 4439 4441 4443 4445 4447 4449 4451 4453 4455 4457 4459 4461 4463 4465 4467 4469 4471 4473 4475 4477 4479 4481 4483 4485 4487 4489 4491 4493 4495 4497 4499 4501 4503 4505 4507 4509 4511 4513 4515 4517 4519 4521 4523 4525 4527 4529 4531 4533 4535 4537 4539 4541 4543 4545 4547 4549 4551 4553 4555 4557 4559 4561 4563 4565 4567 4569 4571 4573 4575 4577 4579 4581 4583 4585 4587 4589 4591 4593 4595 4597 4599 4601 4603 4605 4607 4609 4611 4613 4615 4617 4619 4621 4623 4625 4627 4629 4631 4633 4635 4637 4639 4641 4643 4645 4647 4649 4651 4653 4655 4657 4659 4661 4663 4665 4667 4669 4671 4673 4675 4677 4679 4681 4683 4685 4687 4689 4691 4693 4695 4697 4699 4701 4703 4705 4707 4709 4711 4713 4715 4717 4719 4721 4723 4725 4727 4729 4731 4733 4735 4737 4739 4741 4743 4745 4747 4749 4751 4753 4755 4757 4759 4761 4763 4765 4767 4769 4771 4773 4775 4777 4779 4781 4783 4785 4787 4789 4791 4793 4795 4797 4799 4801 4803 4805 4807 4809 4811 4813 4815 4817 4819 4821 4823 4825 4827 4829 4831 4833 4835 4837 4839 4841 4843 4845 4847 4849 4851 4853 4855 4857 4859 4861 4863 4865 4867 4869 4871 4873 4875 4877 4879 4881 4883 4885 4887 4889 4891 4893 4895 4897 4899 4901 4903 4905 4907 4909 4911 4913 4915 4917 4919 4921 4923 4925 4927 4929 4931 4933 4935 4937 4939 4941 4943 4945 4947 4949 4951 4953 4955 4957 4959 4961 4963 4965 4967 4969 4971 4973 4975 4977 4979 4981 4983 4985 4987 4989 4991 4993 4995 4997 4999 5001 5003 5005 5007 5009 5011 5013 5015 5017 5019 5021 5023 5025 5027 5029 5031 5033 5035 5037 5039 5041 5043 5045 5047 5049 5051 5053 5055 5057 5059 5061 5063 5065 5067 5069 5071 5073 5075 5077 5079 5081 5083 5085 5087 5089 5091 5093 5095 5097 5099 5101 5103 5105 5107 5109 5111 5113 5115 5117 5119 5121 5123 5125 5127 5129 5131 5133 5135 5137 5139 5141 5143 5145 5147 5149 5151 5153 5155 5157 5159 5161 5163 5165 5167 5169 5171 5173 5175 5177 5179 5181 5183 5185 5187 5189 5191 5193 5195 5197 5199 5201 5203 5205 5207 5209 5211 5213 5215 5217 5219 5221 5223 5225 5227 5229 5231 5233 5235 5237 5239 5241 5243 5245 5247 5249 5251 5253 5255 5257 5259 5261 5263 5265 5267 5269 5271 5273 5275 5277 5279 5281 5283 5285 5287 5289 5291 5293 5295 5297 5299 5301 5303 5305 5307 5309 5311 5313 5315 5317 5319 5321 5323 5325 5327 5329 5331 5333 5335 5337 5339 5341 5343 5345 5347 5349 5351 5353 5355 5357 5359 5361 5363 5365 5367 5369 5371 5373 5375 5377 5379 5381 5383 5385 5387 5389 5391 5393 5395 5397 5399 5401 5403 5405 5407 5409 5411 5413 5415 5417 5419 5421 5423 5425 5427 5429 5431 5433 5435 5437 5439 5441 5443 5445 5447 5449 5451 5453 5455 5457 5459 5461 5463 5465 5467 5469 5471 5473 5475 5477 5479 5481 5483 5485 5487 5489 5491 5493 5495 5497 5499 5501 5503 5505 5507 5509 5511 5513 5515 5517 5519 5521 5523 5525 5527 5529 5531 5533 5535 5537 5539 5541 5543 5545 5547 5549 5551 5553 5555 5557 5559 5561 5563 5565 5567 5569 5571 5573 5575 5577 5579 5581 5583 5585 5587 5589 5591 5593 5595 5597 5599 5601 5603 5605 5607 5609 5611 5613 5615 5617 5619 5621 5623 5625 5627 5629 5631 5633 5635 5637 5639 5641 5643 5645 5647 5649 5651 5653 5655 5657 5659 5661 5663 5665 5667 5669 5671 5673 5675 5677 5679 5681 5683 5685 5687 5689 5691 5693 5695 5697 5699 5701 5703 5705 5707 5709 5711 5713 5715 5717 5719 5721 5723 5725 5727 5729 5731 5733 5735 5737 5739 5741 5743 5745 5747 5749 5751 5753 5755 5757 5759 5761 5763 5765 5767 5769 5771 5773 5775 5777 5779 5781 5783 5785 5787 5789 5791 5793 5795 5797 5799 5801 5803 5805 5807 5809 5811 5813 5815 5817 5819 5821 5823 5825 5827 5829 5831 5833 5835 5837 5839 5841 5843 5845 5847 5849 5851 5853 5855 5857 5859 5861 5863 5865 5867 5869 5871 5873 5875 5877 5879 5881 5883 5885 5887 5889 5891 5893 5895 5897 5899 5901 5903 5905 5907 5909 5911 5913 5915 5917 5919 5921 5923 5925 5927 5929 5931 5933 5935 5937 5939 5941 5943 5945 5947 5949 5951 5953 5955 5957 5959 5961 5963 5965 5967 5969 5971 5973 5975 5977 5979 5981 5983 5985 5987 5989 5991 5993 5995 5997 5999 6001 6003 6005 6007 6009 6011 6013 6015 6017 6019 6021 6023 6025 6027 6029 6031 6033 6035 6037 6039 6041 6043 6045 6047 6049 6051 6053 6055 6057 6059 6061 6063 6065 6067 6069 6071 6073 6075 6077 6079 6081 6083 6085 6087 6089 6091 6093 6095 6097 6099 6101 6103 6105 6107 6109 6111 6113 6115 6117 6119 6121 6123 6125 6127 6129 6131 6133 6135 6137 6139 6141 6143 6145 6147 6149 6151 6153 6155 6157 6159 6161 6163 6165 6167 6169 6171 6173 6175 6177 6179 6181 6183 6185 6187 6189 6191 6193 6195 6197 6199 6201 6203 6205 6207 6209 6211 6213 6215 6217 6219 6221 6223 6225 6227 6229 6231 6233 6235 6237 6239 6241 6243 6245 6247 6249 6251 6253 6255 6257 6259 6261 6263 6265 6267 6269 6271 6273 6275 6277 6279 6281 6283 6285 6287 6289 6291 6293 6295 6297 6299 6301 6303 6305 6307 6309 6311 6313 6315 6317 6319 6321 6323 6325 6327 6329 6331 6333 6335 6337 6339 6341 6343 6345 6347 6349 6351 6353 6355 6357 6359 6361 6363 6365 6367 6369 6371 6373 6375 6377 6379 6381 6383 6385 6387 6389 6391 6393 6395 6397 6399 6401 6403 6405 6407 6409 6411 6413 6415 6417 6419 6421 6423 6425 6427 6429 6431 6433 6435 6437 6439 6441 6443 6445 6447 6449 6451 6453 6455 6457 6459 6461 6463 6465 6467 6469 6471 6473 6475 6477 6479 6481 6483 6485 6487 6489 6491 6493 6495 6497 6499 6501 6503 6505 6507 6509 6511 6513 6515 6517 6519 6521 6523 6525 6527 6529 6531 6533 6535 6537 6539 6541 6543 6545 6547 6549 6551 6553 6555 6557 6559 6561 6563 6565 6567 6569 6571 6573 6575 6577 6579 6581 6583 6585 6587 6589 6591 6593 6595 6597 6599 6601 6603 6605 6607 6609 6611 6613 6615 6617 6619 6621 6623 6625 6627 6629 6631 6633 6635 6637 6639 6641 6643 6645 6647 6649 6651 6653 6655 6657 6659 6661 6663 6665 6667 6669 6671 6673 6675 6677 6679 6681 6683 6685 6687 6689 6691 6693 6695 6697 6699 6701 6703 6705 6707 6709 6711 6713 6715 6717 6719 6721 6723 6725 6727 6729 6731 6733 6735 6737 6739 6741 6743 6745 6747 6749 6751 6753 6755 6757 6759 6761 6763 6765 6767 6769 6771 6773 6775 6777 6779 6781 6783 6785 6787 6789 6791 6793 6795 6797 6799 6801 6803 6805 6807 6809 6811 6813 6815 6817 6819 6821 6823 6825 6827 6829 6831 6833 6835 6837 6839 6841 6843 6845 6847 6849 6851 6853 6855 6857 6859 6861 6863 6865 6867 6869 6871 6873 6875 6877 6879 6881 6883 6885 6887 6889 6891 6893 6895 6897 6899 6901 6903 6905 6907 6909 6911 6913 6915 6917 6919 6921 6923 6925 6927 6929 6931 6933 6935 6937 6939 6941 6943 6945 6947 6949 6951 6953 6955 6957 6959 6961 6963 6965 6967 6969 6971 6973 6975 6977 6979 6981 6983 6985 6987 6989 6991 6993 6995 6997 6999 7001 7003 7005 7007 7009 7011 7013 7015 7017 7019 7021 7023 7025 7027 7029 7031 7033 7035 7037 7039 7041 7043 7045 7047 7049 7051 7053 7055 7057 7059 7061 7063 7065 7067 7069 7071 7073 7075 7077 7079 7081 7083 7085 7087 7089 7091 7093 7095 7097 7099 7101 7103 7105 7107 7109 7111 7113 7115 7117 7119 7121 7123 7125 7127 7129 7131 7133 7135 7137 7139 7141 7143 7145 7147 7149 7151 7153 7155 7157 7159 7161 7163 7165 7167 7169 7171 7173 7175 7177 7179 7181 7183 7185 7187 7189 7191 7193 7195 7197 7199 7201 7203 7205 7207 7209 7211 7213 7215 7217 7219 7221 7223 7225 7227 7229 7231 7233 7235 7237 7239 7241 7243 7245 7247 7249 7251 7253 7255 7257 7259 7261 7263 7265 7267 7269 7271 7273 7275 7277 7279 7281 7283 7285 7287 7289 7291 7293 7295 7297 7299 7301 7303 7305 7307 7309 7311 7313 7315 7317 7319 7321 7323 7325 7327 7329 7331 7333 7335 7337 7339 7341 7343 7345 7347 7349 7351 7353 7355 7357 7359 7361 7363 7365 7367 7369 7371 7373 7375 7377 7379 7381 7383 7385 7387 7389 7391 7393 7395 7397 7399 7401 7403 7405 7407 7409 7411 7413 7415 7417 7419 7421 7423 7425 7427 7429 7431 7433 7435 7437 7439 7441 7443 7445 7447 7449 7451 7453 7455 7457 7459 7461 7463 7465 7467 7469 7471 7473 7475 7477 7479 7481 7483 7485 7487 7489 7491 7493 7495 7497 7499 7501 7503 7505 7507 7509 7511 7513 7515 7517 7519 7521 7523 7525 7527 7529 7531 7533 7535 7537 7539 7541 7543 7545 7547 7549 7551 7553 7555 7557 7559 7561 7563 7565 7567 7569 7571 7573 7575 7577 7579 7581 7583 7585 7587 7589 7591 7593 7595 7597 7599 7601 7603 7605 7607 7609 7611 7613 7615 7617 7619 7621 7623 7625 7627 7629 7631 7633 7635 7637 7639 7641 7643 7645 7647 7649 7651 7653 7655 7657 7659 7661 7663 7665 7667 7669 7671 7673 7675 7677 7679 7681 7683 7685 7687 7689 7691 7693 7695 7697 7699 7701 7703 7705 7707 7709 7711 7713 7715 7717 7719 7721 7723 7725 7727 7729 7731 7733 7735 7737 7739 7741 7743 7745 7747 7749 7751 7753 7755 7757 7759 7761 7763 7765 7767 7769 7771 7773 7775 7777 7779 7781 7783 7785 7787 7789 7791 7793 7795 7797 7799 7801 7803 7805 7807 7809 7811 7813 7815 7817 7819 7821 7823 7825 7827 7829 7831 7833 7835 7837 7839 7841 7843 7845 7847 7849 7851 7853 7855 7857 7859 7861 7863 7865 7867 7869 7871 7873 7875 7877 7879 7881 7883 7885 7887 7889 7891 7893 7895 7897 7899 7901 7903 7905 7907 7909 7911 7913 7915 7917 7919 7921 7923 7925 7927 7929 7931 7933 7935 7937 7939 7941 7943 7945 7947 7949 7951 7953 7955 7957 7959 7961 7963 7965 7967 7969 7971 7973 7975 7977 7979 7981 7983 7985 7987 7989 7991 7993 7995 7997 7999 8001 8003 8005 8007 8009 8011 8013 8015 8017 8019 8021 8023 8025 8027 8029 8031 8033 8035 8037 8039 8041 8043 8045 8047 8049 8051 8053 8055 8057 8059 8061 8063 8065 8067 8069 8071 8073 8075 8077 8079 8081 8083 8085 8087 8089 8091 8093 8095 8097 8099 8101 8103 8105 8107 8109 8111 8113 8115 8117 8119 8121 8123 8125 8127 8129 8131 8133 8135 8137 8139 8141 8143 8145 8147 8149 8151 8153 8155 8157 8159 8161 8163 8165 8167 8169 8171 8173 8175 8177 8179 8181 8183 8185 8187 8189 8191 8193 8195 8197 8199 8201 8203 8205 8207 8209 8211 8213 8215 8217 8219 8221 8223 8225 8227 8229 8231 8233 8235 8237 8239 8241 8243 8245 8247 8249 8251 8253 8255 8257 8259 8261 8263 8265 8267 8269 8271 8273 8275 8277 8279 8281 8283 8285 8287 8289 8291 8293 8295 8297 8299 8301 8303 8305 8307 8309 8311 8313 8315 8317 8319 8321 8323 8325 8327 8329 8331 8333 8335 8337 8339 8341 8343 8345 8347 8349 8351 8353 8355 8357 8359 8361 8363 8365 8367 8369 8371 8373 8375 8377 8379 8381 8383 8385 8387 8389 8391 8393 8395 8397 8399 8401 8403 8405 8407 8409 8411 8413 8415 8417 8419 8421 8423 8425 8427 8429 8431 8433 8435 8437 8439 8441 8443 8445 8447 8449 8451 8453 8455 8457 8459 8461 8463 8465 8467 8469 8471 8473 8475 8477 8479 8481 8483 8485 8487 8489 8491 8493 8495 8497 8499 8501 8503 8505 8507 8509 8511 8513 8515 8517 8519 8521 8523 8525 8527 8529 8531 8533 8535 8537 8539 8541 8543 8545 8547 8549 8551 8553 8555 8557 8559 8561 8563 8565 8567 8569 8571 8573 8575 8577 8579 8581 8583 8585 8587 8589 8591 8593 8595 8597 8599 8601 8603 8605 8607 8609 8611 8613 8615 8617 8619 8621 8623 8625 8627 8629 8631 8633 8635 8637 8639 8641 8643 8645 8647 8649 8651 8653 8655 8657 8659 8661 8663 8665 8667 8669 8671 8673 8675 8677 8679 8681 8683 8685 8687 8689 8691 8693 8695 8697 8699 8701 8703 8705 8707 8709 8711 8713 8715 8717 8719 8721 8723 8725 8727 8729 8731 8733 8735 8737 8739 8741 8743 8745 8747 8749 8751 8753 8755 8757 8759 8761 8763 8765 8767 8769 8771 8773 8775 8777 8779 8781 8783 8785 8787 8789 8791 8793 8795 8797 8799 8801 8803 8805 8807 8809 8811 8813 8815 8817 8819 8821 8823 8825 8827 8829 8831 8833 8835 8837 8839 8841 8843 8845 8847 8849 8851 8853 8855 8857 8859 8861 8863 8865 8867 8869 8871 8873 8875 8877 8879 8881 8883 8885 8887 8889 8891 8893 8895 8897 8899 8901 8903 8905 8907 8909 8911 8913 8915 8917 8919 8921 8923 8925 8927 8929 8931 8933 8935 8937 8939 8941 8943 8945 8947 8949 8951 8953 8955 8957 8959 8961 8963 8965 8967 8969 8971 8973 8975 8977 8979 8981 8983 8985 8987 8989 8991 8993 8995 8997 8999 9001 9003 9005 9007 9009 9011 9013 9015 9017 9019 9021 9023 9025 9027 9029 9031 9033 9035 9037 9039 9041 9043 9045 9047 9049 9051 9053 9055 9057 9059 9061 9063 9065 9067 9069 9071 9073 9075 9077 9079 9081 9083 9085 9087 9089 9091 9093 9095 9097 9099 9101 9103 9105 9107 9109 9111 9113 9115 9117 9119 9121 9123 9125 9127 9129 9131 9133 9135 9137 9139 9141 9143 9145 9147 9149 9151 9153 9155 9157 9159 9161 9163 9165 9167 9169 9171 9173 9175 9177 9179 9181 9183 9185 9187 9189 9191 9193 9195 9197 9199 9201 9203 9205 9207 9209 9211 9213 9215 9217 9219 9221 9223 9225 9227 9229 9231 9233 9235 9237 9239 9241 9243 9245 9247 9249 9251 9253 9255 9257 9259 9261 9263 9265 9267 9269 9271 9273 9275 9277 9279 9281 9283 9285 9287 9289 9291 9293 9295 9297 9299 9301 9303 9305 9307 9309 9311 9313 9315 9317 9319 9321 9323 9325 9327 9329 9331 9333 9335 9337 9339 9341 9343 9345 9347 9349 9351 9353 9355 9357 9359 9361 9363 9365 9367 9369 9371 9373 9375 9377 9379 9381 9383 9385 9387 9389 9391 9393 9395 9397 9399 9401 9403 9405 9407 9409 9411 9413 9415 9417 9419 9421 9423 9425 9427 9429 9431 9433 9435 9437 9439 9441 9443 9445 9447 9449 9451 9453 9455 9457 9459 9461 9463 9465 9467 9469 9471 9473 9475 9477 9479 9481 9483 9485 9487 9489 9491 9493 9495 9497 9499 9501 9503 9505 9507 9509 9511 9513 9515 9517 9519 9521 9523 9525 9527 9529 9531 9533 9535 9537 9539 9541 9543 9545 9547 9549 9551 9553 9555 9557 9559 9561 9563 9565 9567 9569 9571 9573 9575 9577 9579 9581 9583 9585 9587 9589 9591 9593 9595 9597 9599 9601 9603 9605 9607 9609 9611 9613 9615 9617 9619 9621 9623 9625 9627 9629 9631 9633 9635 9637 9639 9641 9643 9645 9647 9649 9651 9653 9655 9657 9659 9661 9663 9665 9667 9669 9671 9673 9675 9677 9679 9681 9683 9685 9687 9689 9691 9693 9695 9697 9699 9701 9703 9705 9707 9709 9711 9713 9715 9717 9719 9721 9723 9725 9727 9729 9731 9733 9735 9737 9739 9741 9743 9745 9747 9749 9751 9753 9755 9757 9759 9761 9763 9765 9767 9769 9771 9773 9775 9777 9779 9781 9783 9785 9787 9789 9791 9793 9795 9797 9799 9801 9803 9805 9807 9809 9811 9813 9815 9817 9819 9821 9823 9825 9827 9829 9831 9833 9835 9837 9839 9841 9843 9845 9847 9849 9851 9853 9855 9857 9859 9861 9863 9865 9867 9869 9871 9873 9875 9877 9879 9881 9883 9885 9887 9889 9891 9893 9895 9897 9899 9901 9903 9905 9907 9909 9911 9913 9915 9917 9919 9921 9923 9925 9927 9929 9931 9933 9935 9937 9939 9941 9943 9945 9947 9949 9951 9953 9955 9957 9959 9961 9963 9965 9967 9969 9971 9973 9975 9977 9979 9981 9983 9985 9987 9989 9991 9993 9995 9997 9999 10001 10003 10005 10007 10009 10011 10013 10015 10017 10019 10021 10023 10025 10027 10029 10031 10033 10035 10037 10039 10041 10043 10045 10047 10049 10051 10053 10055 10057 10059 10061 10063 10065 10067 10069 10071 10073 10075 10077 10079 10081 10083 10085 10087 10089 10091 10093 10095 10097 10099 10101 10103 10105 10107 10109 10111 10113 10115 10117 10119 10121 10123 10125 10127 10129 10131 10133 10135 10137 10139 10141 10143 10145 10147 10149 10151 10153 10155 10157 10159 10161 10163 10165 10167 10169 10171 10173 10175 10177 10179 10181 10183 10185 10187 10189 10191 10193 10195 10197 10199 10201 10203 10205 10207 10209 10211 10213 10215 10217 10219 10221 10223 10225 10227 10229 10231 10233 10235 10237 10239 10241 10243 10245 10247 10249 10251 10253 10255 10257 10259 10261 10263 10265 10267 10269 10271 10273 10275 10277 10279 10281 10283 10285 10287 10289 10291 10293 10295 10297 10299 10301 10303 10305 10307 10309 10311 10313 10315 10317 10319 10321 10323 10325 10327 10329 10331 10333 10335 10337 10339 10341 10343 10345 10347 10349 10351 10353 10355 10357 10359 10361 10363 10365 10367 10369 10371 10373 10375 10377 10379 10381 10383 10385 10387 10389 10391 10393 10395 10397 10399 10401 10403 10405 10407 10409 10411 10413 10415 10417 10419 10421 10423 10425 10427 10429 10431 10433 10435 10437 10439 10441 10443 10445 10447 10449 10451 10453 10455 10457 10459 10461 10463 10465 10467 10469 10471 10473 10475 10477 10479 10481 10483 10485 10487 10489 10491 10493 10495 10497 10499 10501 10503 10505 10507 10509 10511 10513 10515 10517 10519 10521 10523 10525 10527 10529 10531 10533 10535 10537 10539 10541 10543 10545 10547 10549 10551 10553 10555 10557 10559 10561 10563 10565 10567 10569 10571 10573 10575 10577 10579 10581 10583 10585 10587 10589 10591 10593 10595 10597 10599 10601 10603 10605 10607 10609 10611 10613 10615 10617 10619 10621 10623 10625 10627 10629 10631 10633 10635 10637 10639 10641 10643 10645 10647 10649 10651 10653 10655 10657 10659 10661 10663 10665 10667 10669 10671 10673 10675 10677 10679 10681 10683 10685 10687 10689 10691 10693 10695 10697 10699 10701 10703 10705 10707 10709 10711 10713 10715 10717 10719 10721 10723 10725 10727 10729 10731 10733 10735 10737 10739 10741 10743 10745 10747 10749 10751 10753 10755 10757 10759 10761 10763 10765 10767 10769 10771 10773 10775 10777 10779 10781 10783 10785 10787 10789 10791 10793 10795 10797 10799 10801 10803 10805 10807 10809 10811 10813 10815 10817 10819 10821 10823 10825 10827 10829 10831 10833 10835 10837 10839 10841 10843 10845 10847 10849 10851 10853 10855 10857 10859 10861 10863 10865 10867 10869 10871 10873 10875 10877 10879 10881 10883 10885 10887 10889 10891 10893 10895 10897 10899 10901 10903 10905 10907 10909 10911 10913 10915 10917 10919 10921 10923 10925 10927 10929 10931 10933 10935 10937 10939 10941 10943 10945 10947 10949 10951 10953 10955 10957 10959 10961 10963 10965 10967 10969 10971 10973 10975 10977 10979 10981 10983 10985 10987 10989 10991 10993 10995 10997 10999 11001 11003 11005 11007 11009 11011 11013 11015 11017 11019 11021 11023 11025 11027 11029 11031 11033 11035 11037 11039 11041 11043 11045 11047 11049 11051 11053 11055 11057 11059 11061 11063 11065 11067 11069 11071 11073 11075 11077 11079 11081 11083 11085 11087 11089 11091 11093 11095 11097 11099 11101 11103 11105 11107 11109 11111 11113 11115 11117 11119 11121 11123 11125 11127 11129 11131 11133 11135 11137 11139 11141 11143 11145 11147 11149 11151 11153 11155 11157 11159 11161 11163 11165 11167 11169 11171 11173 11175 11177 11179 11181 11183 11185 11187 11189 11191 11193 11195 11197 11199 11201 11203 11205 11207 11209 11211 11213 11215 11217 11219 11221 11223 11225 11227 11229 11231 11233 11235 11237 11239 11241 11243 11245 11247 11249 11251 11253 11255 11257 11259 11261 11263 11265 11267 11269 11271 11273 11275 11277 11279 11281 11283 11285 11287 11289 11291 11293 11295 11297 11299 11301 11303 11305 11307 11309 11311 11313 11315 11317 11319 11321 11323 11325 11327 11329 11331 11333 11335 11337 11339 11341 11343 11345 11347 11349 11351 11353 11355 11357 11359 11361 11363 11365 11367 11369 11371 11373 11375 11377 11379 11381 11383 11385 11387 11389 11391 11393 11395 11397 11399 11401 11403 11405 11407 11409 11411 11413 11415 11417 11419 11421 11423 11425 11427 11429 11431 11433 11435 11437 11439 11441 11443 11445 11447 11449 11451 11453 11455 11457 11459 11461 11463 11465 11467 11469 11471 11473 11475 11477 11479 11481 11483 11485 11487 11489 11491 11493 11495 11497 11499 11501 11503 11505 11507 11509 11511 11513 11515 11517 11519 11521 11523 11525 11527 11529 11531 11533 11535 11537 11539 11541 11543 11545 11547 11549 11551 11553 11555 11557 11559 11561 11563 11565 11567 11569 11571 11573 11575 11577 11579 11581 11583 11585 11587 11589 11591 11593 11595 11597 11599 11601 11603 11605 11607 11609 11611 11613 11615 11617 11619 11621 11623 11625 11627 11629 11631 11633 11635 11637 11639 11641 11643 11645 11647 11649 11651 11653 11655 11657 11659 11661 11663 11665 11667 11669 11671 11673 11675 11677 11679 11681 11683 11685 11687 11689 11691 11693 11695 11697 11699 11701 11703 11705 11707 11709 11711 11713 11715 11717 11719 11721 11723 11725 11727 11729 11731 11733 11735 11737 11739 11741 11743 11745 11747 11749 11751 11753 11755 11757 11759 11761 11763 11765 11767 11769 11771 11773 11775 11777 11779 11781 11783 11785 11787 11789 11791 11793 11795 11797 11799 11801 11803 11805 11807 11809 11811 11813 11815 11817 11819 11821 11823 11825 11827 11829 11831 11833 11835 11837 11839 11841 11843 11845 11847 11849 11851 11853 11855 11857 11859 11861 11863 11865 11867 11869 11871 11873 11875 11877 11879 11881 11883 11885 11887 11889 11891 11893 11895 11897 11899 11901 11903 11905 11907 11909 11911 11913 11915 11917 11919 11921 11923 11925 11927 11929 11931 11933 11935 11937 11939 11941 11943 11945 11947 11949 11951 11953 11955 11957 11959 11961 11963 11965 11967 11969 11971 11973 11975 11977 11979 11981 11983 11985 11987 11989 11991 11993 11995 11997 11999 12001 12003 12005 12007 12009 12011 12013 12015 12017 12019 12021 12023 12025 12027 12029 12031 12033 12035 12037 12039 12041 12043 12045 12047 12049 12051 12053 12055 12057 12059 12061 12063 12065 12067 12069 12071 12073 12075 12077 12079 12081 12083 12085 12087 12089 12091 12093 12095 12097 12099 12101 12103 12105 12107 12109 12111 12113 12115 12117 12119 12121 12123 12125 12127 12129 12131 12133 12135 12137 12139 12141 12143 12145 12147 12149 12151 12153 12155 12157 12159 12161 12163 12165 12167 12169 12171 12173 12175 12177 12179 12181 12183 12185 12187 12189 12191 12193 12195 12197 12199 12201 12203 12205 12207 12209 12211 12213 12215 12217 12219 12221 12223 12225 12227 12229 12231 12233 12235 12237 12239 12241 12243 12245 12247 12249 12251 12253 12255 12257 12259 12261 12263 12265 12267 12269 12271 12273 12275 12277 12279 12281 12283 12285 12287 12289 12291 12293 12295 12297 12299 12301 12303 12305 12307 12309 12311 12313 12315 12317 12319 12321 12323 12325 12327 12329 12331 12333 12335 12337 12339 12341 12343 12345 12347 12349 12351 12353 12355 12357 12359 12361 12363 12365 12367 12369 12371 12373 12375 12377 12379 12381 12383 12385 12387 12389 12391 12393 12395 12397 12399 12401 12403 12405 12407 12409 12411 12413 12415 12417 12419 12421 12423 12425 12427 12429 12431 12433 12435 12437 12439 12441 12443 12445 12447 12449 12451 12453 12455 12457 12459 12461 12463 12465 12467 12469 12471 12473 12475 12477 12479 12481 12483 12485 12487 12489 12491 12493 12495 12497 12499 12501 12503 12505 12507 12509 12511 12513 12515 12517 12519 12521 12523 12525 12527 12529 12531 12533 12535 12537 12539 12541 12543 12545 12547 12549 12551 12553 12555 12557 12559 12561 12563 12565 12567 12569 12571 12573 12575 12577 12579 12581 12583 12585 12587 12589 12591 12593 12595 12597 12599 12601 12603 12605 12607 12609 12611 12613 12615 12617 12619 12621 12623 12625 12627 12629 12631 12633 12635 12637 12639 12641 12643 12645 12647 12649 12651 12653 12655 12657 12659 12661 12663 12665 12667 12669 12671 12673 12675 12677 12679 12681 12683 12685 12687 12689 12691 12693 12695 12697 12699 12701 12703 12705 12707 12709 12711 12713 12715 12717 12719 12721 12723 12725 12727 12729 12731 12733 12735 12737 12739 12741 12743 12745 12747 12749 12751 12753 12755 12757 12759 12761 12763 12765 12767 12769 12771 12773 12775 12777 12779 12781 12783 12785 12787 12789 12791 12793 12795 12797 12799 12801 12803 12805 12807 12809 12811 12813 12815 12817 12819 12821 12823 12825 12827 12829 12831 12833 12835 12837 12839 12841 12843 12845 12847 12849 12851 12853 12855 12857 12859 12861 12863 12865 12867 12869 12871 12873 12875 12877 12879 12881 12883 12885 12887 12889 12891 12893 12895 12897 12899 12901 12903 12905 12907 12909 12911 12913 12915 12917 12919 12921 12923 12925 12927 12929 12931 12933 12935 12937 12939 12941 12943 12945 12947 12949 12951 12953 12955 12957 12959 12961 12963 12965 12967 12969 12971 12973 12975 12977 12979 12981 12983 12985 12987 12989 12991 12993 12995 12997 12999 13001 13003 13005 13007 13009 13011 13013 13015 13017 13019 13021 13023 13025 13027 13029 13031 13033 13035 13037 13039 13041 13043 13045 13047 13049 13051 13053 13055 13057 13059 13061 13063 13065 13067 13069 13071 13073 13075 13077 13079 13081 13083 13085 13087 13089 13091 13093 13095 13097 13099 13101 13103 13105 13107 13109 13111 13113 13115 13117 13119 13121 13123 13125 13127 13129 13131 13133 13135 13137 13139 13141 13143 13145 13147 13149 13151 13153 13155 13157 13159 13161 13163 13165 13167 13169 13171 13173 13175 13177 13179 13181 13183 13185 13187 13189 13191 13193 13195 13197 13199 13201 13203 13205 13207 13209 13211 13213 13215 13217 13219 13221 13223 13225 13227 13229 13231 13233 13235 13237 13239 13241 13243 13245 13247 13249 13251 13253 13255 13257 13259 13261 13263 13265 13267 13269 13271 13273 13275 13277 13279 13281 13283 13285 13287 13289 13291 13293 13295 13297 13299 13301 13303 13305 13307 13309 13311 13313 13315 13317 13319 13321 13323 13325 13327 13329 13331 13333 13335 13337 13339 13341 13343 13345 13347 13349 13351 13353 13355 13357 13359 13361 13363 13365 13367 13369 13371 13373 13375 13377 13379 13381 13383 13385 13387 13389 13391 13393 13395 13397 13399 13401 13403 13405 13407 13409 13411 13413 13415 13417 13419 13421 13423 13425 13427 13429 13431 13433 13435 13437 13439 13441 13443 13445 13447 13449 13451 13453 13455 13457 13459 13461 13463 13465 13467 13469 13471 13473 13475 13477 13479 13481 13483 13485 13487 13489 13491 13493 13495 13497 13499 13501 13503 13505 13507 13509 13511 13513 13515 13517 13519 13521 13523 13525 13527 13529 13531 13533 13535 13537 13539 13541 13543 13545 13547 13549 13551 13553 13555 13557 13559 13561 13563 13565 13567 13569 13571 13573 13575 13577 13579 13581 13583 13585 13587 13589 13591 13593 13595 13597 13599 13601 13603 13605 13607 13609 13611 13613 13615 13617 13619 13621 13623 13625 13627 13629 13631 13633 13635 13637 13639 13641 13643 13645 13647 13649 13651 13653 13655 13657 13659 13661 13663 13665 13667 13669 13671 13673 13675 13677 13679 13681 13683 13685 13687 13689 13691 13693 13695 13697 13699 13701 13703 13705 13707 13709 13711 13713 13715 13717 13719 13721 13723 13725 13727 13729 13731 13733 13735 13737 13739 13741 13743 13745 13747 13749 13751 13753 13755 13757 13759 13761 13763 13765 13767 13769 13771 13773 13775 13777 13779 13781 13783 13785 13787 13789 13791 13793 13795 13797 13799 13801 13803 13805 13807 13809 13811 13813 13815 13817 13819 13821 13823 13825 13827 13829 13831 13833 13835 13837 13839 13841 13843 13845 13847 13849 13851 13853 13855 13857 13859 13861 13863 13865 13867 13869 13871 13873 13875 13877 13879 13881 13883 13885 13887 13889 13891 13893 13895 13897 13899 13901 13903 13905 13907 13909 13911 13913 13915 13917 13919 13921 13923 13925 13927 13929 13931 13933 13935 13937 13939 13941 13943 13945 13947 13949 13951 13953 13955 13957 13959 13961 13963 13965 13967 13969 13971 13973 13975 13977 13979 13981 13983 13985 13987 13989 13991 13993 13995 13997 13999 14001 14003 14005 14007 14009 14011 14013 14015 14017 14019 14021 14023 14025 14027 14029 14031 14033 14035 14037 14039 14041 14043 14045 14047 14049 14051 14053 14055 14057 14059 14061 14063 14065 14067 14069 14071 14073 14075 14077 14079 14081 14083 14085 14087 14089 14091 14093 14095 14097 14099 14101 14103 14105 14107 14109 14111 14113 14115 14117 14119 14121 14123 14125 14127 14129 14131 14133 14135 14137 14139 14141 14143 14145 14147 14149 14151 14153 14155 14157 14159 14161 14163 14165 14167 14169 14171 14173 14175 14177 14179 14181 14183 14185 14187 14189 14191 14193 14195 14197 14199 14201 14203 14205 14207 14209 14211 14213 14215 14217 14219 14221 14223 14225 14227 14229 14231 14233 14235 14237 14239 14241 14243 14245 14247 14249 14251 14253 14255 14257 14259 14261 14263 14265 14267 14269 14271 14273 14275 14277 14279 14281 14283 14285 14287 14289 14291 14293 14295 14297 14299 14301 14303 14305 14307 14309 14311 14313 14315 14317 14319 14321 14323 14325 14327 14329 14331 14333 14335 14337 14339 14341 14343 14345 14347 14349 14351 14353 14355 14357 14359 14361 14363 14365 14367 14369 14371 14373 14375 14377 14379 14381 14383 14385 14387 14389 14391 14393 14395 14397 14399 14401 14403 14405 14407 14409 14411 14413 14415 14417 14419 14421 14423 14425 14427 14429 14431 14433 14435 14437 14439 14441 14443 14445 14447 14449 14451 14453 14455 14457 14459 14461 14463 14465 14467 14469 14471 14473 14475 14477 14479 14481 14483 14485 14487 14489 14491 14493 14495 14497 14499 14501 14503 14505 14507 14509 14511 14513 14515 14517 14519 14521 14523 14525 14527 14529 14531 14533 14535 14537 14539 14541 14543 14545 14547 14549 14551 14553 14555 14557 14559 14561 14563 14565 14567 14569 14571 14573 14575 14577 14579 14581 14583 14585 14587 14589 14591 14593 14595 14597 14599 14601 14603 14605 14607 14609 14611 14613 14615 14617 14619 14621 14623 14625 14627 14629 14631 14633 14635 14637 14639 14641 14643 14645 14647 14649 14651 14653 14655 14657 14659 14661 14663 14665 14667 14669 14671 14673 14675 14677 14679 14681 14683 14685 14687 14689 14691 14693 14695 14697 14699 14701 14703 14705 14707 14709 14711 14713 14715 14717 14719 14721 14723 14725 14727 14729 14731 14733 14735 14737 14739 14741 14743 14745 14747 14749 14751 14753 14755 14757 14759 14761 14763 14765 14767 14769 14771 14773 14775 14777 14779 14781 14783 14785 14787 14789 14791 14793 14795 14797 14799 14801 14803 14805 14807 14809 14811 14813 14815 14817 14819 14821 14823 14825 14827 14829 14831 14833 14835 14837 14839 14841 14843 14845 14847 14849 14851 14853 14855 14857 14859 14861 14863 14865 14867 14869 14871 14873 14875 14877 14879 14881 14883 14885 14887 14889 14891 14893 14895 14897 14899 14901 14903 14905 14907 14909 14911 14913 14915 14917 14919 14921 14923 14925 14927 14929 14931 14933 14935 14937 14939 14941 14943 14945 14947 14949 14951 14953 14955 14957 14959 14961 14963 14965 14967 14969 14971 14973 14975 14977 14979 14981 14983 14985 14987 14989 14991 14993 14995 14997 14999 15001 15003 15005 15007 15009 15011 15013 15015 15017 15019 15021 15023 15025 15027 15029 15031 15033 15035 15037 15039 15041 15043 15045 15047 15049 15051 15053 15055 15057 15059 15061 15063 15065 15067 15069 15071 15073 15075 15077 15079 15081 15083 15085 15087 15089 15091 15093 15095 15097 15099 15101 15103 15105 15107 15109 15111 15113 15115 15117 15119 15121 15123 15125 15127 15129 15131 15133 15135 15137 15139 15141 15143 15145 15147 15149 15151 15153 15155 15157 15159 15161 15163 15165 15167 15169 15171 15173 15175 15177 15179 15181 15183 15185 15187 15189 15191 15193 15195 15197 15199 15201 15203 15205 15207 15209 15211 15213 15215 15217 15219 15221 15223 15225 15227 15229 15231 15233 15235 15237 15239 15241 15243 15245 15247 15249 15251 15253 15255 15257 15259 15261 15263 15265 15267 15269 15271 15273 15275 15277 15279 15281 15283 15285 15287 15289 15291 15293 15295 15297 15299 15301 15303 15305 15307 15309 15311 15313 15315 15317 15319 15321 15323 15325 15327 15329 15331 15333 15335 15337 15339 15341 15343 15345 15347 15349 15351 15353 15355 15357 15359 15361 15363 15365 15367 15369 15371 15373 15375 15377 15379 15381 15383 15385 15387 15389 15391 15393 15395 15397 15399 15401 15403 15405 15407 15409 15411 15413 15415 15417 15419 15421 15423 15425 15427 15429 15431 15433 15435 15437 15439 15441 15443 15445 15447 15449 15451 15453 15455 15457 15459 15461 15463 15465 15467 15469 15471 15473 15475 15477 15479 15481 15483 15485 15487 15489 15491 15493 15495 15497 15499 15501 15503 15505 15507 15509 15511 15513 15515 15517 15519 15521 15523 15525 15527 15529 15531 15533 15535 15537 15539 15541 15543 15545 15547 15549 15551 15553 15555 15557 15559 15561 15563 15565 15567 15569 15571 15573 15575 15577 15579 15581 15583 15585 15587 15589 15591 15593 15595 15597 15599 15601 15603 15605 15607 15609 15611 15613 15615 15617 15619 15621 15623 15625 15627 15629 15631 15633 15635 15637 15639 15641 15643 15645 15647 15649 15651 15653 15655 15657 15659 15661 15663 15665 15667 15669 15671 15673 15675 15677 15679 15681 15683 15685 15687 15689 15691 15693 15695 15697 15699 15701 15703 15705 15707 15709 15711 15713 15715 15717 15719 15721 15723 15725 15727 15729 15731 15733 15735 15737 15739 15741 15743 15745 15747 15749 15751 15753 15755 15757 15759 15761 15763 15765 15767 15769 15771 15773 15775 15777 15779 15781 15783 15785 15787 15789 15791 15793 15795 15797 15799 15801 15803 15805 15807 15809 15811 15813 15815 15817 15819 15821 15823 15825 15827 15829 15831 15833 15835 15837 15839 15841 15843 15845 15847 15849 15851 15853 15855 15857 15859 15861 15863 15865 15867 15869 15871 15873 15875 15877 15879 15881 15883 15885 15887 15889 15891 15893 15895 15897 15899 15901 15903 15905 15907 15909 15911 15913 15915 15917 15919 15921 15923 15925 15927 15929 15931 15933 15935 15937 15939 15941 15943 15945 15947 15949 15951 15953 15955 15957 15959 15961 15963 15965 15967 15969 15971 15973 15975 15977 15979 15981 15983 15985 15987 15989 15991 15993 15995 15997 15999 16001 16003 16005 16007 16009 16011 16013 16015 16017 16019 16021 16023 16025 16027 16029 16031 16033 16035 16037 16039 16041 16043 16045 16047 16049 16051 16053 16055 16057 16059 16061 16063 16065 16067 16069 16071 16073 16075 16077 16079 16081 16083 16085 16087 16089 16091 16093 16095 16097 16099 16101 16103 16105 16107 16109 16111 16113 16115 16117 16119 16121 16123 16125 16127 16129 16131 16133 16135 16137 16139 16141 16143 16145 16147 16149 16151 16153 16155 16157 16159 16161 16163 16165 16167 16169 16171 16173 16175 16177 16179 16181 16183 16185 16187 16189 16191 16193 16195 16197 16199 16201 16203 16205 16207 16209 16211 16213 16215 16217 16219 16221 16223 16225 16227 16229 16231 16233 16235 16237 16239 16241 16243 16245 16247 16249 16251 16253 16255 16257 16259 16261 16263 16265 16267 16269 16271 16273 16275 16277 16279 16281 16283 16285 16287 16289 16291 16293 16295 16297 16299 16301 16303 16305 16307 16309 16311 16313 16315 16317 16319 16321 16323 16325 16327 16329 16331 16333 16335 16337 16339 16341 16343 16345 16347 16349 16351 16353 16355 16357 16359 16361 16363 16365 16367 16369 16371 16373 16375 16377 16379 16381 16383 16385 16387 16389 16391 16393 16395 16397 16399 16401 16403 16405 16407 16409 16411 16413 16415 16417 16419 16421 16423 16425 16427 16429 16431 16433 16435 16437 16439 16441 16443 16445 16447 16449 16451 16453 16455 16457 16459 16461 16463 16465 16467 16469 16471 16473 16475 16477 16479 16481 16483 16485 16487 16489 16491 16493 16495 16497 16499 16501 16503 16505 16507 16509 16511 16513 16515 16517 16519 16521 16523 16525 16527 16529 16531 16533 16535 16537 16539 16541 16543 16545 16547 16549 16551 16553 16555 16557 16559 16561 16563 16565 16567 16569 16571 16573 16575 16577 16579 16581 16583 16585 16587 16589 16591 16593 16595 16597 16599 16601 16603 16605 16607 16609 16611 16613 16615 16617 16619 16621 16623 16625 16627 16629 16631 16633 16635 16637 16639 16641 16643 16645 16647 16649 16651 16653 16655 16657 16659 16661 16663 16665 16667 16669 16671 16673 16675 16677 16679 16681 16683 16685 16687 16689 16691 16693 16695 16697 16699 16701 16703 16705 16707 16709 16711 16713 16715 16717 16719 16721 16723 16725 16727 16729 16731 16733 16735 16737 16739 16741 16743 16745 16747 16749 16751 16753 16755 16757 16759 16761 16763 16765 16767 16769 16771 16773 16775 16777 16779 16781 16783 16785 16787 16789 16791 16793 16795 16797 16799 16801 16803 16805 16807 16809 16811 16813 16815 16817 16819 16821 16823 16825 16827 16829 16831 16833 16835 16837 16839 16841 16843 16845 16847 16849 16851 16853 16855 16857 16859 16861 16863 16865 16867 16869 16871 16873 16875 16877 16879 16881 16883 16885 16887 16889 16891 16893 16895 16897 16899 16901 16903 16905 16907 16909 16911 16913 16915 16917 16919 16921 16923 16925 16927 16929 16931 16933 16935 16937 16939 16941 16943 16945 16947 16949 16951 16953 16955 16957 16959 16961 16963 16965 16967 16969 16971 16973 16975 16977 16979 16981 16983 16985 16987 16989 16991 16993 16995 16997 16999 17001 17003 17005 17007 17009 17011 17013 17015 17017 17019 17021 17023 17025 17027 17029 17031 17033 17035 17037 17039 17041 17043 17045 17047 17049 17051 17053 17055 17057 17059 17061 17063 17065 17067 17069 17071 17073 17075 17077 17079 17081 17083 17085 17087 17089 17091 17093 17095 17097 17099 17101 17103 17105 17107 17109 17111 17113 17115 17117 17119 17121 17123 17125 17127 17129 17131 17133 17135 17137 17139 17141 17143 17145 17147 17149 17151 17153 17155 17157 17159 17161 17163 17165 17167 17169 17171 17173 17175 17177 17179 17181 17183 17185 17187 17189 17191 17193 17195 17197 17199 17201 17203 17205 17207 17209 17211 17213 17215 17217 17219 17221 17223 17225 17227 17229 17231 17233 17235 17237 17239 17241 17243 17245 17247 17249 17251 17253 17255 17257 17259 17261 17263 17265 17267 17269 17271 17273 17275 17277 17279 17281 17283 17285 17287 17289 17291 17293 17295 17297 17299 17301 17303 17305 17307 17309 17311 17313 17315 17317 17319 17321 17323 17325 17327 17329 17331 17333 17335 17337 17339 17341 17343 17345 17347 17349 17351 17353 17355 17357 17359 17361 17363 17365 17367 17369 17371 17373 17375 17377 17379 17381 17383 17385 17387 17389 17391 17393 17395 17397 17399 17401 17403 17405 17407 17409 17411 17413 17415 17417 17419 17421 17423 17425 17427 17429 17431 17433 17435 17437 17439 17441 17443 17445 17447 17449 17451 17453 17455 17457 17459 17461 17463 17465 17467 17469 17471 17473 17475 17477 17479 17481 17483 17485 17487 17489 17491 17493 17495 17497 17499 17501 17503 17505 17507 17509 17511 17513 17515 17517 17519 17521 17523 17525 17527 17529 17531 17533 17535 17537 17539 17541 17543 17545 17547 17549 17551 17553 17555 17557 17559 17561 17563 17565 17567 17569 17571 17573 17575 17577 17579 17581 17583 17585 17587 17589 17591 17593 17595 17597 17599 17601 17603 17605 17607 17609 17611 17613 17615 17617 17619 17621 17623 17625 17627 17629 17631 17633 17635 17637 17639 17641 17643 17645 17647 17649 17651 17653 17655 17657 17659 17661 17663 17665 17667 17669 17671 17673 17675 17677 17679 17681 17683 17685 17687 17689 17691 17693 17695 17697 17699 17701 17703 17705 17707 17709 17711 17713 17715 17717 17719 17721 17723 17725 17727 17729 17731 17733 17735 17737 17739 17741 17743 17745 17747 17749 17751 17753 17755 17757 17759 17761 17763 17765 17767 17769 17771 17773 17775 17777 17779 17781 17783 17785 17787 17789 17791 17793 17795 17797 17799 17801 17803 17805 17807 17809 17811 17813 17815 17817 17819 17821 17823 17825 17827 17829 17831 17833 17835 17837 17839 17841 17843 17845 17847 17849 17851 17853 17855 17857 17859 17861 17863 17865 17867 17869 17871 17873 17875 17877 17879 17881 17883 17885 17887 17889 17891 17893 17895 17897 17899 17901 17903 17905 17907 17909 17911 17913 17915 17917 17919 17921 17923 17925 17927 17929 17931 17933 17935 17937 17939 17941 17943 17945 17947 17949 17951 17953 17955 17957 17959 17961 17963 17965 17967 17969 17971 17973 17975 17977 17979 17981 17983 17985 17987 17989 17991 17993 17995 17997 17999 18001 18003 18005 18007 18009 18011 18013 18015 18017 18019 18021 18023 18025 18027 18029 18031 18033 18035 18037 18039 18041 18043 18045 18047 18049 18051 18053 18055 18057 18059 18061 18063 18065 18067 18069 18071 18073 18075 18077 18079 18081 18083 18085 18087 18089 18091 18093 18095 18097 18099 18101 18103 18105 18107 18109 18111 18113 18115 18117 18119 18121 18123 18125 18127 18129 18131 18133 18135 18137 18139 18141 18143 18145 18147 18149 18151 18153 18155 18157 18159 18161 18163 18165 18167 18169 18171 18173 18175 18177 18179 18181 18183 18185 18187 18189 18191 18193 18195 18197 18199 18201 18203 18205 18207 18209 18211 18213 18215 18217 18219 18221 18223 18225 18227 18229 18231 18233 18235 18237 18239 18241 18243 18245 18247 18249 18251 18253 18255 18257 18259 18261 18263 18265 18267 18269 18271 18273 18275 18277 18279 18281 18283 18285 18287 18289 18291 18293 18295 18297 18299 18301 18303 18305 18307 18309 18311 18313 18315 18317 18319 18321 18323 18325 18327 18329 18331 18333 18335 18337 18339 18341 18343 18345 18347 18349 18351 18353 18355 18357 18359 18361 18363 18365 18367 18369 18371 18373 18375 18377 18379 18381 18383 18385 18387 18389 18391 18393 18395 18397 18399 18401 18403 18405 18407 18409 18411 18413 18415 18417 18419 18421 18423 18425 18427 18429 18431 18433 18435 18437 18439 18441 18443 18445 18447 18449 18451 18453 18455 18457 18459 18461 18463 18465 18467 18469 18471 18473 18475 18477 18479 18481 18483 18485 18487 18489 18491 18493 18495 18497 18499 18501 18503 18505 18507 18509 18511 18513 18515 18517 18519 18521 18523 18525 18527 18529 18531 18533 18535 18537 18539 18541 18543 18545 18547 18549 18551 18553 18555 18557 18559 18561 18563 18565 18567 18569 18571 18573 18575 18577 18579 18581 18583 18585 18587 18589 18591 18593 18595 18597 18599 18601 18603 18605 18607 18609 18611 18613 18615 18617 18619 18621 18623 18625 18627 18629 18631 18633 18635 18637 18639 18641 18643 18645 18647 18649 18651 18653 18655 18657 18659 18661 18663 18665 18667 18669 18671 18673 18675 18677 18679 18681 18683 18685 18687 18689 18691 18693 18695 18697 18699 18701 18703 18705 18707 18709 18711 18713 18715 18717 18719 18721 18723 18725 18727 18729 18731 18733 18735 18737 18739 18741 18743 18745 18747 18749 18751 18753 18755 18757 18759 18761 18763 18765 18767 18769 18771 18773 18775 18777 18779 18781 18783 18785 18787 18789 18791 18793 18795 18797 18799 18801 18803 18805 18807 18809 18811 18813 18815 18817 18819 18821 18823 18825 18827 18829 18831 18833 18835 18837 18839 18841 18843 18845 18847 18849 18851 18853 18855 18857 18859 18861 18863 18865 18867 18869 18871 18873 18875 18877 18879 18881 18883 18885 18887 18889 18891 18893 18895 18897 18899 18901 18903 18905 18907 18909 18911 18913 18915 18917 18919 18921 18923 18925 18927 18929 18931 18933 18935 18937 18939 18941 18943 18945 18947 18949 18951 18953 18955 18957 18959 18961 18963 18965 18967 18969 18971 18973 18975 18977 18979 18981 18983 18985 18987 18989 18991 18993 18995 18997 18999 19001 19003 19005 19007 19009 19011 19013 19015 19017 19019 19021 19023 19025 19027 19029 19031 19033 19035 19037 19039 19041 19043 19045 19047 19049 19051 19053 19055 19057 19059 19061 19063 19065 19067 19069 19071 19073 19075 19077 19079 19081 19083 19085 19087 19089 19091 19093 19095 19097 19099 19101 19103 19105 19107 19109 19111 19113 19115 19117 19119 19121 19123 19125 19127 19129 19131 19133 19135 19137 19139 19141 19143 19145 19147 19149 19151 19153 19155 19157 19159 19161 19163 19165 19167 19169 19171 19173 19175 19177 19179 19181 19183 19185 19187 19189 19191 19193 19195 19197 19199 19201 19203 19205 19207 19209 19211 19213 19215 19217 19219 19221 19223 19225 19227 19229 19231 19233 19235 19237 19239 19241 19243 19245 19247 19249 19251 19253 19255 19257 19259 19261 19263 19265 19267 19269 19271 19273 19275 19277 19279 19281 19283 19285 19287 19289 19291 19293 19295 19297 19299 19301 19303 19305 19307 19309 19311 19313 19315 19317 19319 19321 19323 19325 19327 19329 19331 19333 19335 19337 19339 19341 19343 19345 19347 19349 19351 19353 19355 19357 19359 19361 19363 19365 19367 19369 19371 19373 19375 19377 19379 19381 19383 19385 19387 19389 19391 19393 19395 19397 19399 19401 19403 19405 19407 19409 19411 19413 19415 19417 19419 19421 19423 19425 19427 19429 19431 19433 19435 19437 19439 19441 19443 19445 19447 19449 19451 19453 19455 19457 19459 19461 19463 19465 19467 19469 19471 19473 19475 19477 19479 19481 19483 19485 19487 19489 19491 19493 19495 19497 19499 19501 19503 19505 19507 19509 19511 19513 19515 19517 19519 19521 19523 19525 19527 19529 19531 19533 19535 19537 19539 19541 19543 19545 19547 19549 19551 19553 19555 19557 19559 19561 19563 19565 19567 19569 19571 19573 19575 19577 19579 19581 19583 19585 19587 19589 19591 19593 19595 19597 19599 19601 19603 19605 19607 19609 19611 19613 19615 19617 19619 19621 19623 19625 19627 19629 19631 19633 19635 19637 19639 19641 19643 19645 19647 19649 19651 19653 19655 19657 19659 19661 19663 19665 19667 19669 19671 19673 19675 19677 19679 19681 19683 19685 19687 19689 19691 19693 19695 19697 19699 19701 19703 19705 19707 19709 19711 19713 19715 19717 19719 19721 19723 19725 19727 19729 19731 19733 19735 19737 19739 19741 19743 19745 19747 19749 19751 19753 19755 19757 19759 19761 19763 19765 19767 19769 19771 19773 19775 19777 19779 19781 19783 19785 19787 19789 19791 19793 19795 19797 19799 19801 19803 19805 19807 19809 19811 19813 19815 19817 19819 19821 19823 19825 19827 19829 19831 19833 19835 19837 19839 19841 19843 19845 19847 19849 19851 19853 19855 19857 19859 19861 19863 19865 19867 19869 19871 19873 19875 19877 19879 19881 19883 19885 19887 19889 19891 19893 19895 19897 19899 19901 19903 19905 19907 19909 19911 19913 19915 19917 19919 19921 19923 19925 19927 19929 19931 19933 19935 19937 19939 19941 19943 19945 19947 19949 19951 19953 19955 19957 19959 19961 19963 19965 19967 19969 19971 19973 19975 19977 19979 19981 19983 19985 19987 19989 19991 19993 19995 19997 19999 20001 20003 20005 20007 20009 20011 20013 20015 20017 20019 20021 20023 20025 20027 20029 20031 20033 20035 20037 20039 20041 20043 20045 20047 20049 20051 20053 20055 20057 20059 20061 20063 20065 20067 20069 20071 20073 20075 20077 20079 20081 20083 20085 20087 20089 20091 20093 20095 20097 20099 20101 20103 20105 20107 20109 20111 20113 20115 20117 20119 20121 20123 20125 20127 20129 20131 20133 20135 20137 20139 20141 20143 20145 20147 20149 20151 20153 20155 20157 20159 20161 20163 20165 20167 20169 20171 20173 20175 20177 20179 20181 20183 20185 20187 20189 20191 20193 20195 20197 20199 20201 20203 20205 20207 20209 20211 20213 20215 20217 20219 20221 20223 20225 20227 20229 20231 20233 20235 20237 20239 20241 20243 20245 20247 20249 20251 20253 20255 20257 20259 20261 20263 20265 20267 20269 20271 20273 20275 20277 20279 20281 20283 20285 20287 20289 20291 20293 20295 20297 20299 20301 20303 20305 20307 20309 20311 20313 20315 20317 20319 20321 20323 20325 20327 20329 20331 20333 20335 20337 20339 20341 20343 20345 20347 20349 20351 20353 20355 20357 20359 20361 20363 20365 20367 20369 20371 20373 20375 20377 20379 20381 20383 20385 20387 20389 20391 20393 20395 20397 20399 20401 20403 20405 20407 20409 20411 20413 20415 20417 20419 20421 20423 20425 20427 20429 20431 20433 20435 20437 20439 20441 20443 20445 20447 20449 20451 20453 20455 20457 20459 20461 20463 20465 20467 20469 20471 20473 20475 20477 20479 20481 20483 20485 20487 20489 20491 20493 20495 20497 20499 20501 20503 20505 20507 20509 20511 20513 20515 20517 20519 20521 20523 20525 20527 20529 20531 20533 20535 20537 20539 20541 20543 20545 20547 20549 20551 20553 20555 20557 20559 20561 20563 20565 20567 20569 20571 20573 20575 20577 20579 20581 20583 20585 20587 20589 20591 20593 20595 20597 20599 20601 20603 20605 20607 20609 20611 20613 20615 20617 20619 20621 20623 20625 20627 20629 20631 20633 20635 20637 20639 20641 20643 20645 20647 20649 20651 20653 20655 20657 20659 20661 20663 20665 20667 20669 20671 20673 20675 20677 20679 20681 20683 20685 20687 20689 20691 20693 20695 20697 20699 20701 20703 20705 20707 20709 20711 20713 20715 20717 20719 20721 20723 20725 20727 20729 20731 20733 20735 20737 20739 20741 20743 20745 20747 20749 20751 20753 20755 20757 20759 20761 20763 20765 20767 20769 20771 20773 20775 20777 20779 20781 20783 20785 20787 20789 20791 20793 20795 20797 20799 20801 20803 20805 20807 20809 20811 20813 20815 20817 20819 20821 20823 20825 20827 20829 20831 20833 20835 20837 20839 20841 20843 20845 20847 20849 20851 20853 20855 20857 20859 20861 20863 20865 20867 20869 20871 20873 20875 20877 20879 20881 20883 20885 20887 20889 20891 20893 20895 20897 20899 20901 20903 20905 20907 20909 20911 20913 20915 20917 20919 20921 20923 20925 20927 20929 20931 20933 20935 20937 20939 20941 20943 20945 20947 20949 20951 20953 20955 20957 20959 20961 20963 20965 20967 20969 20971 20973 20975 20977 20979 20981 20983 20985 20987 20989 20991 20993 20995 20997 20999 21001 21003 21005 21007 21009 21011 21013 21015 21017 21019 21021 21023 21025 21027 21029 21031 21033 21035 21037 21039 21041 21043 21045 21047 21049 21051 21053 21055 21057 21059 21061 21063 21065 21067 21069 21071 21073 21075 21077 21079 21081 21083 21085 21087 21089 21091 21093 21095 21097 21099 21101 21103 21105 21107 21109 21111 21113 21115 21117 21119 21121 21123 21125 21127 21129 21131 21133 21135 21137 21139 21141 21143 21145 21147 21149 21151 21153 21155 21157 21159 21161 21163 21165 21167 21169 21171 21173 21175 21177 21179 21181 21183 21185 21187 21189 21191 21193 21195 21197 21199 21201 21203 21205 21207 21209 21211 21213 21215 21217 21219 21221 21223 21225 21227 21229 21231 21233 21235 21237 21239 21241 21243 21245 21247 21249 21251 21253 21255 21257 21259 21261 21263 21265 21267 21269 21271 21273 21275 21277 21279 21281 21283 21285 21287 21289 21291 21293 21295 21297 21299 21301 21303 21305 21307 21309 21311 21313 21315 21317 21319 21321 21323 21325 21327 21329 21331 21333 21335 21337 21339 21341 21343 21345 21347 21349 21351 21353 21355 21357 21359 21361 21363 21365 21367 21369 21371 21373 21375 21377 21379 21381 21383 21385 21387 21389 21391 21393 21395 21397 21399 21401 21403 21405 21407 21409 21411 21413 21415 21417 21419 21421 21423 21425 21427 21429 21431 21433 21435 21437 21439 21441 21443 21445 21447 21449 21451 21453 21455 21457 21459 21461 21463 21465 21467 21469 21471 21473 21475 21477 21479 21481 21483 21485 21487 21489 21491 21493 21495 21497 21499 21501 21503 21505 21507 21509 21511 21513 21515 21517 21519 21521 21523 21525 21527 21529 21531 21533 21535 21537 21539 21541 21543 21545 21547 21549 21551 21553 21555 21557 21559 21561 21563 21565 21567 21569 21571 21573 21575 21577 21579 21581 21583 21585 21587 21589 21591 21593 21595 21597 21599 21601 21603 21605 21607 21609 21611 21613 21615 21617 21619 21621 21623 21625 21627 21629 21631 21633 21635 21637 21639 21641 21643 21645 21647 21649 21651 21653 21655 21657 21659 21661 21663 21665 21667 21669 21671 21673 21675 21677 21679 21681 21683 21685 21687 21689 21691 21693 21695 21697 21699 21701 21703 21705 21707 21709 21711 21713 21715 21717 21719 21721 21723 21725 21727 21729 21731 21733 21735 21737 21739 21741 21743 21745 21747 21749 21751 21753 21755 21757 21759 21761 21763 21765 21767 21769 21771 21773 21775 21777 21779 21781 21783 21785 21787 21789 21791 21793 21795 21797 21799 21801 21803 21805 21807 21809 21811 21813 21815 21817 21819 21821 21823 21825 21827 21829 21831 21833 21835 21837 21839 21841 21843 21845 21847 21849 21851 21853 21855 21857 21859 21861 21863 21865 21867 21869 21871 21873 21875 21877 21879 21881 21883 21885 21887 21889 21891 21893 21895 21897 21899 21901 21903 21905 21907 21909 21911 21913 21915 21917 21919 21921 21923 21925 21927 21929 21931 21933 21935 21937 21939 21941 21943 21945 21947 21949 21951 21953 21955 21957 21959 21961 21963 21965 21967 21969 21971 21973 21975 21977 21979 21981 21983 21985 21987 21989 21991 21993 21995 21997 21999 22001 22003 22005 22007 22009 22011 22013 22015 22017 22019 22021 22023 22025 22027 22029 22031 22033 22035 22037 22039 22041 22043 22045 22047 22049 22051 22053 22055 22057 22059 22061 22063 22065 22067 22069 22071 22073 22075 22077 22079 22081 22083 22085 22087 22089 22091 22093 22095 22097 22099 22101 22103 22105 22107 22109 22111 22113 22115 22117 22119 22121 22123 22125 22127 22129 22131 22133 22135 22137 22139 22141 22143 22145 22147 22149 22151 22153 22155 22157 22159 22161 22163 22165 22167 22169 22171 22173 22175 22177 22179 22181 22183 22185 22187 22189 22191 22193 22195 22197 22199 22201 22203 22205 22207 22209 22211 22213 22215 22217 22219 22221 22223 22225 22227 22229 22231 22233 22235 22237 22239 22241 22243 22245 22247 22249 22251 22253 22255 22257 22259 22261 22263 22265 22267 22269 22271 22273 22275 22277 22279 22281 22283 22285 22287 22289 22291 22293 22295 22297 22299 22301 22303 22305 22307 22309 22311 22313 22315 22317 22319 22321 22323 22325 22327 22329 22331 22333 22335 22337 22339 22341 22343 22345 22347 22349 22351 22353 22355 22357 22359 22361 22363 22365 22367 22369 22371 22373 22375 22377 22379 22381 22383 22385 22387 22389 22391 22393 22395 22397 22399 22401 22403 22405 22407 22409 22411 22413 22415 22417 22419 22421 22423 22425 22427 22429 22431 22433 22435 22437 22439 22441 22443 22445 22447 22449 22451 22453 22455 22457 22459 22461 22463 22465 22467 22469 22471 22473 22475 22477 22479 22481 22483 22485 22487 22489 22491 22493 22495 22497 22499 22501 22503 22505 22507 22509 22511 22513 22515 22517 22519 22521 22523 22525 22527 22529 22531 22533 22535 22537 22539 22541 22543 22545 22547 22549 22551 22553 22555 22557 22559 22561 22563 22565 22567 22569 22571 22573 22575 22577 22579 22581 22583 22585 22587 22589 22591 22593 22595 22597 22599 22601 22603 22605 22607 22609 22611 22613 22615 22617 22619 22621 22623 22625 22627 22629 22631 22633 22635 22637 22639 22641 22643 22645 22647 22649 22651 22653 22655 22657 22659 22661 22663 22665 22667 22669 22671 22673 22675 22677 22679 22681 22683 22685 22687 22689 22691 22693 22695 22697 22699 22701 22703 22705 22707 22709 22711 22713 22715 22717 22719 22721 22723 22725 22727 22729 22731 22733 22735 22737 22739 22741 22743 22745 22747 22749 22751 22753 22755 22757 22759 22761 22763 22765 22767 22769 22771 22773 22775 22777 22779 22781 22783 22785 22787 22789 22791 22793 22795 22797 22799 22801 22803 22805 22807 22809 22811 22813 22815 22817 22819 22821 22823 22825 22827 22829 22831 22833 22835 22837 22839 22841 22843 22845 22847 22849 22851 22853 22855 22857 22859 22861 22863 22865 22867 22869 22871 22873 22875 22877 22879 22881 22883 22885 22887 22889 22891 22893 22895 22897 22899 22901 22903 22905 22907 22909 22911 22913 22915 22917 22919 22921 22923 22925 22927 22929 22931 22933 22935 22937 22939 22941 22943 22945 22947 22949 22951 22953 22955 22957 22959 22961 22963 22965 22967 22969 22971 22973 22975 22977 22979 22981 22983 22985 22987 22989 22991 22993 22995 22997 22999 23001 23003 23005 23007 23009 23011 23013 23015 23017 23019 23021 23023 23025 23027 23029 23031 23033 23035 23037 23039 23041 23043 23045 23047 23049 23051 23053 23055 23057 23059 23061 23063 23065 23067 23069 23071 23073 23075 23077 23079 23081 23083 23085 23087 23089 23091 23093 23095 23097 23099 23101 23103 23105 23107 23109 23111 23113 23115 23117 23119 23121 23123 23125 23127 23129 23131 23133 23135 23137 23139 23141 23143 23145 23147 23149 23151 23153 23155 23157 23159 23161 23163 23165 23167 23169 23171 23173 23175 23177 23179 23181 23183 23185 23187 23189 23191 23193 23195 23197 23199 23201 23203 23205 23207 23209 23211 23213 23215 23217 23219 23221 23223 23225 23227 23229 23231 23233 23235 23237 23239 23241 23243 23245 23247 23249 23251 23253 23255 23257 23259 23261 23263 23265 23267 23269 23271 23273 23275 23277 23279 23281 23283 23285 23287 23289 23291 23293 23295 23297 23299 23301 23303 23305 23307 23309 23311 23313 23315 23317 23319 23321 23323 23325 23327 23329 23331 23333 23335 23337 23339 23341 23343 23345 23347 23349 23351 23353 23355 23357 23359 23361 23363 23365 23367 23369 23371 23373 23375 23377 23379 23381 23383 23385 23387 23389 23391 23393 23395 23397 23399 23401 23403 23405 23407 23409 23411 23413 23415 23417 23419 23421 23423 23425 23427 23429 23431 23433 23435 23437 23439 23441 23443 23445 23447 23449 23451 23453 23455 23457 23459 23461 23463 23465 23467 23469 23471 23473 23475 23477 23479 23481 23483 23485 23487 23489 23491 23493 23495 23497 23499 23501 23503 23505 23507 23509 23511 23513 23515 23517 23519 23521 23523 23525 23527 23529 23531 23533 23535 23537 23539 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 378 380 382 384 386 388 390 392 394 396 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432 434 436 438 440 442 444 446 448 450 452 454 456 458 460 462 464 466 468 470 472 474 476 478 480 482 484 486 488 490 492 494 496 498 500 502 504 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 564 566 568 570 572 574 576 578 580 582 584 586 588 590 592 594 596 598 600 602 604 606 608 610 612 614 616 618 620 622 624 626 628 630 632 634 636 638 640 642 644 646 648 650 652 654 656 658 660 662 664 666 668 670 672 674 676 678 680 682 684 686 688 690 692 694 696 698 700 702 704 706 708 710 712 714 716 718 720 722 724 726 728 730 732 734 736 738 740 742 744 746 748 750 752 754 756 758 760 762 764 766 768 770 772 774 776 778 780 782 784 786 788 790 792 794 796 798 800 802 804 806 808 810 812 814 816 818 820 822 824 826 828 830 832 834 836 838 840 842 844 846 848 850 852 854 856 858 860 862 864 866 868 870 872 874 876 878 880 882 884 886 888 890 892 894 896 898 900 902 904 906 908 910 912 914 916 918 920 922 924 926 928 930 932 934 936 938 940 942 944 946 948 950 952 954 956 958 960 962 964 966 968 970 972 974 976 978 980 982 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1008 1010 1012 1014 1016 1018 1020 1022 1024 1026 1028 1030 1032 1034 1036 1038 1040 1042 1044 1046 1048 1050 1052 1054 1056 1058 1060 1062 1064 1066 1068 1070 1072 1074 1076 1078 1080 1082 1084 1086 1088 1090 1092 1094 1096 1098 1100 1102 1104 1106 1108 1110 1112 1114 1116 1118 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1154 1156 1158 1160 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 1216 1218 1220 1222 1224 1226 1228 1230 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 1316 1318 1320 1322 1324 1326 1328 1330 1332 1334 1336 1338 1340 1342 1344 1346 1348 1350 1352 1354 1356 1358 1360 1362 1364 1366 1368 1370 1372 1374 1376 1378 1380 1382 1384 1386 1388 1390 1392 1394 1396 1398 1400 1402 1404 1406 1408 1410 1412 1414 1416 1418 1420 1422 1424 1426 1428 1430 1432 1434 1436 1438 1440 1442 1444 1446 1448 1450 1452 1454 1456 1458 1460 1462 1464 1466 1468 1470 1472 1474 1476 1478 1480 1482 1484 1486 1488 1490 1492 1494 1496 1498 1500 1502 1504 1506 1508 1510 1512 1514 1516 1518 1520 1522 1524 1526 1528 1530 1532 1534 1536 1538 1540 1542 1544 1546 1548 1550 1552 1554 1556 1558 1560 1562 1564 1566 1568 1570 1572 1574 1576 1578 1580 1582 1584 1586 1588 1590 1592 1594 1596 1598 1600 1602 1604 1606 1608 1610 1612 1614 1616 1618 1620 1622 1624 1626 1628 1630 1632 1634 1636 1638 1640 1642 1644 1646 1648 1650 1652 1654 1656 1658 1660 1662 1664 1666 1668 1670 1672 1674 1676 1678 1680 1682 1684 1686 1688 1690 1692 1694 1696 1698 1700 1702 1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778 1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800 1802 1804 1806 1808 1810 1812 1814 1816 1818 1820 1822 1824 1826 1828 1830 1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858 1860 1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 1884 1886 1888 1890 1892 1894 1896 1898 1900 1902 1904 1906 1908 1910 1912 1914 1916 1918 1920 1922 1924 1926 1928 1930 1932 1934 1936 1938 1940 1942 1944 1946 1948 1950 1952 1954 1956 1958 1960 1962 1964 1966 1968 1970 1972 1974 1976 1978 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 2016 2018 2020 2022 2024 2026 2028 2030 2032 2034 2036 2038 2040 2042 2044 2046 2048 2050 2052 2054 2056 2058 2060 2062 2064 2066 2068 2070 2072 2074 2076 2078 2080 2082 2084 2086 2088 2090 2092 2094 2096 2098 2100 2102 2104 2106 2108 2110 2112 2114 2116 2118 2120 2122 2124 2126 2128 2130 2132 2134 2136 2138 2140 2142 2144 2146 2148 2150 2152 2154 2156 2158 2160 2162 2164 2166 2168 2170 2172 2174 2176 2178 2180 2182 2184 2186 2188 2190 2192 2194 2196 2198 2200 2202 2204 2206 2208 2210 2212 2214 2216 2218 2220 2222 2224 2226 2228 2230 2232 2234 2236 2238 2240 2242 2244 2246 2248 2250 2252 2254 2256 2258 2260 2262 2264 2266 2268 2270 2272 2274 2276 2278 2280 2282 2284 2286 2288 2290 2292 2294 2296 2298 2300 2302 2304 2306 2308 2310 2312 2314 2316 2318 2320 2322 2324 2326 2328 2330 2332 2334 2336 2338 2340 2342 2344 2346 2348 2350 2352 2354 2356 2358 2360 2362 2364 2366 2368 2370 2372 2374 2376 2378 2380 2382 2384 2386 2388 2390 2392 2394 2396 2398 2400 2402 2404 2406 2408 2410 2412 2414 2416 2418 2420 2422 2424 2426 2428 2430 2432 2434 2436 2438 2440 2442 2444 2446 2448 2450 2452 2454 2456 2458 2460 2462 2464 2466 2468 2470 2472 2474 2476 2478 2480 2482 2484 2486 2488 2490 2492 2494 2496 2498 2500 2502 2504 2506 2508 2510 2512 2514 2516 2518 2520 2522 2524 2526 2528 2530 2532 2534 2536 2538 2540 2542 2544 2546 2548 2550 2552 2554 2556 2558 2560 2562 2564 2566 2568 2570 2572 2574 2576 2578 2580 2582 2584 2586 2588 2590 2592 2594 2596 2598 2600 2602 2604 2606 2608 2610 2612 2614 2616 2618 2620 2622 2624 2626 2628 2630 2632 2634 2636 2638 2640 2642 2644 2646 2648 2650 2652 2654 2656 2658 2660 2662 2664 2666 2668 2670 2672 2674 2676 2678 2680 2682 2684 2686 2688 2690 2692 2694 2696 2698 2700 2702 2704 2706 2708 2710 2712 2714 2716 2718 2720 2722 2724 2726 2728 2730 2732 2734 2736 2738 2740 2742 2744 2746 2748 2750 2752 2754 2756 2758 2760 2762 2764 2766 2768 2770 2772 2774 2776 2778 2780 2782 2784 2786 2788 2790 2792 2794 2796 2798 2800 2802 2804 2806 2808 2810 2812 2814 2816 2818 2820 2822 2824 2826 2828 2830 2832 2834 2836 2838 2840 2842 2844 2846 2848 2850 2852 2854 2856 2858 2860 2862 2864 2866 2868 2870 2872 2874 2876 2878 2880 2882 2884 2886 2888 2890 2892 2894 2896 2898 2900 2902 2904 2906 2908 2910 2912 2914 2916 2918 2920 2922 2924 2926 2928 2930 2932 2934 2936 2938 2940 2942 2944 2946 2948 2950 2952 2954 2956 2958 2960 2962 2964 2966 2968 2970 2972 2974 2976 2978 2980 2982 2984 2986 2988 2990 2992 2994 2996 2998 3000 3002 3004 3006 3008 3010 3012 3014 3016 3018 3020 3022 3024 3026 3028 3030 3032 3034 3036 3038 3040 3042 3044 3046 3048 3050 3052 3054 3056 3058 3060 3062 3064 3066 3068 3070 3072 3074 3076 3078 3080 3082 3084 3086 3088 3090 3092 3094 3096 3098 3100 3102 3104 3106 3108 3110 3112 3114 3116 3118 3120 3122 3124 3126 3128 3130 3132 3134 3136 3138 3140 3142 3144 3146 3148 3150 3152 3154 3156 3158 3160 3162 3164 3166 3168 3170 3172 3174 3176 3178 3180 3182 3184 3186 3188 3190 3192 3194 3196 3198 3200 3202 3204 3206 3208 3210 3212 3214 3216 3218 3220 3222 3224 3226 3228 3230 3232 3234 3236 3238 3240 3242 3244 3246 3248 3250 3252 3254 3256 3258 3260 3262 3264 3266 3268 3270 3272 3274 3276 3278 3280 3282 3284 3286 3288 3290 3292 3294 3296 3298 3300 3302 3304 3306 3308 3310 3312 3314 3316 3318 3320 3322 3324 3326 3328 3330 3332 3334 3336 3338 3340 3342 3344 3346 3348 3350 3352 3354 3356 3358 3360 3362 3364 3366 3368 3370 3372 3374 3376 3378 3380 3382 3384 3386 3388 3390 3392 3394 3396 3398 3400 3402 3404 3406 3408 3410 3412 3414 3416 3418 3420 3422 3424 3426 3428 3430 3432 3434 3436 3438 3440 3442 3444 3446 3448 3450 3452 3454 3456 3458 3460 3462 3464 3466 3468 3470 3472 3474 3476 3478 3480 3482 3484 3486 3488 3490 3492 3494 3496 3498 3500 3502 3504 3506 3508 3510 3512 3514 3516 3518 3520 3522 3524 3526 3528 3530 3532 3534 3536 3538 3540 3542 3544 3546 3548 3550 3552 3554 3556 3558 3560 3562 3564 3566 3568 3570 3572 3574 3576 3578 3580 3582 3584 3586 3588 3590 3592 3594 3596 3598 3600 3602 3604 3606 3608 3610 3612 3614 3616 3618 3620 3622 3624 3626 3628 3630 3632 3634 3636 3638 3640 3642 3644 3646 3648 3650 3652 3654 3656 3658 3660 3662 3664 3666 3668 3670 3672 3674 3676 3678 3680 3682 3684 3686 3688 3690 3692 3694 3696 3698 3700 3702 3704 3706 3708 3710 3712 3714 3716 3718 3720 3722 3724 3726 3728 3730 3732 3734 3736 3738 3740 3742 3744 3746 3748 3750 3752 3754 3756 3758 3760 3762 3764 3766 3768 3770 3772 3774 3776 3778 3780 3782 3784 3786 3788 3790 3792 3794 3796 3798 3800 3802 3804 3806 3808 3810 3812 3814 3816 3818 3820 3822 3824 3826 3828 3830 3832 3834 3836 3838 3840 3842 3844 3846 3848 3850 3852 3854 3856 3858 3860 3862 3864 3866 3868 3870 3872 3874 3876 3878 3880 3882 3884 3886 3888 3890 3892 3894 3896 3898 3900 3902 3904 3906 3908 3910 3912 3914 3916 3918 3920 3922 3924 3926 3928 3930 3932 3934 3936 3938 3940 3942 3944 3946 3948 3950 3952 3954 3956 3958 3960 3962 3964 3966 3968 3970 3972 3974 3976 3978 3980 3982 3984 3986 3988 3990 3992 3994 3996 3998 4000 4002 4004 4006 4008 4010 4012 4014 4016 4018 4020 4022 4024 4026 4028 4030 4032 4034 4036 4038 4040 4042 4044 4046 4048 4050 4052 4054 4056 4058 4060 4062 4064 4066 4068 4070 4072 4074 4076 4078 4080 4082 4084 4086 4088 4090 4092 4094 4096 4098 4100 4102 4104 4106 4108 4110 4112 4114 4116 4118 4120 4122 4124 4126 4128 4130 4132 4134 4136 4138 4140 4142 4144 4146 4148 4150 4152 4154 4156 4158 4160 4162 4164 4166 4168 4170 4172 4174 4176 4178 4180 4182 4184 4186 4188 4190 4192 4194 4196 4198 4200 4202 4204 4206 4208 4210 4212 4214 4216 4218 4220 4222 4224 4226 4228 4230 4232 4234 4236 4238 4240 4242 4244 4246 4248 4250 4252 4254 4256 4258 4260 4262 4264 4266 4268 4270 4272 4274 4276 4278 4280 4282 4284 4286 4288 4290 4292 4294 4296 4298 4300 4302 4304 4306 4308 4310 4312 4314 4316 4318 4320 4322 4324 4326 4328 4330 4332 4334 4336 4338 4340 4342 4344 4346 4348 4350 4352 4354 4356 4358 4360 4362 4364 4366 4368 4370 4372 4374 4376 4378 4380 4382 4384 4386 4388 4390 4392 4394 4396 4398 4400 4402 4404 4406 4408 4410 4412 4414 4416 4418 4420 4422 4424 4426 4428 4430 4432 4434 4436 4438 4440 4442 4444 4446 4448 4450 4452 4454 4456 4458 4460 4462 4464 4466 4468 4470 4472 4474 4476 4478 4480 4482 4484 4486 4488 4490 4492 4494 4496 4498 4500 4502 4504 4506 4508 4510 4512 4514 4516 4518 4520 4522 4524 4526 4528 4530 4532 4534 4536 4538 4540 4542 4544 4546 4548 4550 4552 4554 4556 4558 4560 4562 4564 4566 4568 4570 4572 4574 4576 4578 4580 4582 4584 4586 4588 4590 4592 4594 4596 4598 4600 4602 4604 4606 4608 4610 4612 4614 4616 4618 4620 4622 4624 4626 4628 4630 4632 4634 4636 4638 4640 4642 4644 4646 4648 4650 4652 4654 4656 4658 4660 4662 4664 4666 4668 4670 4672 4674 4676 4678 4680 4682 4684 4686 4688 4690 4692 4694 4696 4698 4700 4702 4704 4706 4708 4710 4712 4714 4716 4718 4720 4722 4724 4726 4728 4730 4732 4734 4736 4738 4740 4742 4744 4746 4748 4750 4752 4754 4756 4758 4760 4762 4764 4766 4768 4770 4772 4774 4776 4778 4780 4782 4784 4786 4788 4790 4792 4794 4796 4798 4800 4802 4804 4806 4808 4810 4812 4814 4816 4818 4820 4822 4824 4826 4828 4830 4832 4834 4836 4838 4840 4842 4844 4846 4848 4850 4852 4854 4856 4858 4860 4862 4864 4866 4868 4870 4872 4874 4876 4878 4880 4882 4884 4886 4888 4890 4892 4894 4896 4898 4900 4902 4904 4906 4908 4910 4912 4914 4916 4918 4920 4922 4924 4926 4928 4930 4932 4934 4936 4938 4940 4942 4944 4946 4948 4950 4952 4954 4956 4958 4960 4962 4964 4966 4968 4970 4972 4974 4976 4978 4980 4982 4984 4986 4988 4990 4992 4994 4996 4998 5000 5002 5004 5006 5008 5010 5012 5014 5016 5018 5020 5022 5024 5026 5028 5030 5032 5034 5036 5038 5040 5042 5044 5046 5048 5050 5052 5054 5056 5058 5060 5062 5064 5066 5068 5070 5072 5074 5076 5078 5080 5082 5084 5086 5088 5090 5092 5094 5096 5098 5100 5102 5104 5106 5108 5110 5112 5114 5116 5118 5120 5122 5124 5126 5128 5130 5132 5134 5136 5138 5140 5142 5144 5146 5148 5150 5152 5154 5156 5158 5160 5162 5164 5166 5168 5170 5172 5174 5176 5178 5180 5182 5184 5186 5188 5190 5192 5194 5196 5198 5200 5202 5204 5206 5208 5210 5212 5214 5216 5218 5220 5222 5224 5226 5228 5230 5232 5234 5236 5238 5240 5242 5244 5246 5248 5250 5252 5254 5256 5258 5260 5262 5264 5266 5268 5270 5272 5274 5276 5278 5280 5282 5284 5286 5288 5290 5292 5294 5296 5298 5300 5302 5304 5306 5308 5310 5312 5314 5316 5318 5320 5322 5324 5326 5328 5330 5332 5334 5336 5338 5340 5342 5344 5346 5348 5350 5352 5354 5356 5358 5360 5362 5364 5366 5368 5370 5372 5374 5376 5378 5380 5382 5384 5386 5388 5390 5392 5394 5396 5398 5400 5402 5404 5406 5408 5410 5412 5414 5416 5418 5420 5422 5424 5426 5428 5430 5432 5434 5436 5438 5440 5442 5444 5446 5448 5450 5452 5454 5456 5458 5460 5462 5464 5466 5468 5470 5472 5474 5476 5478 5480 5482 5484 5486 5488 5490 5492 5494 5496 5498 5500 5502 5504 5506 5508 5510 5512 5514 5516 5518 5520 5522 5524 5526 5528 5530 5532 5534 5536 5538 5540 5542 5544 5546 5548 5550 5552 5554 5556 5558 5560 5562 5564 5566 5568 5570 5572 5574 5576 5578 5580 5582 5584 5586 5588 5590 5592 5594 5596 5598 5600 5602 5604 5606 5608 5610 5612 5614 5616 5618 5620 5622 5624 5626 5628 5630 5632 5634 5636 5638 5640 5642 5644 5646 5648 5650 5652 5654 5656 5658 5660 5662 5664 5666 5668 5670 5672 5674 5676 5678 5680 5682 5684 5686 5688 5690 5692 5694 5696 5698 5700 5702 5704 5706 5708 5710 5712 5714 5716 5718 5720 5722 5724 5726 5728 5730 5732 5734 5736 5738 5740 5742 5744 5746 5748 5750 5752 5754 5756 5758 5760 5762 5764 5766 5768 5770 5772 5774 5776 5778 5780 5782 5784 5786 5788 5790 5792 5794 5796 5798 5800 5802 5804 5806 5808 5810 5812 5814 5816 5818 5820 5822 5824 5826 5828 5830 5832 5834 5836 5838 5840 5842 5844 5846 5848 5850 5852 5854 5856 5858 5860 5862 5864 5866 5868 5870 5872 5874 5876 5878 5880 5882 5884 5886 5888 5890 5892 5894 5896 5898 5900 5902 5904 5906 5908 5910 5912 5914 5916 5918 5920 5922 5924 5926 5928 5930 5932 5934 5936 5938 5940 5942 5944 5946 5948 5950 5952 5954 5956 5958 5960 5962 5964 5966 5968 5970 5972 5974 5976 5978 5980 5982 5984 5986 5988 5990 5992 5994 5996 5998 6000 6002 6004 6006 6008 6010 6012 6014 6016 6018 6020 6022 6024 6026 6028 6030 6032 6034 6036 6038 6040 6042 6044 6046 6048 6050 6052 6054 6056 6058 6060 6062 6064 6066 6068 6070 6072 6074 6076 6078 6080 6082 6084 6086 6088 6090 6092 6094 6096 6098 6100 6102 6104 6106 6108 6110 6112 6114 6116 6118 6120 6122 6124 6126 6128 6130 6132 6134 6136 6138 6140 6142 6144 6146 6148 6150 6152 6154 6156 6158 6160 6162 6164 6166 6168 6170 6172 6174 6176 6178 6180 6182 6184 6186 6188 6190 6192 6194 6196 6198 6200 6202 6204 6206 6208 6210 6212 6214 6216 6218 6220 6222 6224 6226 6228 6230 6232 6234 6236 6238 6240 6242 6244 6246 6248 6250 6252 6254 6256 6258 6260 6262 6264 6266 6268 6270 6272 6274 6276 6278 6280 6282 6284 6286 6288 6290 6292 6294 6296 6298 6300 6302 6304 6306 6308 6310 6312 6314 6316 6318 6320 6322 6324 6326 6328 6330 6332 6334 6336 6338 6340 6342 6344 6346 6348 6350 6352 6354 6356 6358 6360 6362 6364 6366 6368 6370 6372 6374 6376 6378 6380 6382 6384 6386 6388 6390 6392 6394 6396 6398 6400 6402 6404 6406 6408 6410 6412 6414 6416 6418 6420 6422 6424 6426 6428 6430 6432 6434 6436 6438 6440 6442 6444 6446 6448 6450 6452 6454 6456 6458 6460 6462 6464 6466 6468 6470 6472 6474 6476 6478 6480 6482 6484 6486 6488 6490 6492 6494 6496 6498 6500 6502 6504 6506 6508 6510 6512 6514 6516 6518 6520 6522 6524 6526 6528 6530 6532 6534 6536 6538 6540 6542 6544 6546 6548 6550 6552 6554 6556 6558 6560 6562 6564 6566 6568 6570 6572 6574 6576 6578 6580 6582 6584 6586 6588 6590 6592 6594 6596 6598 6600 6602 6604 6606 6608 6610 6612 6614 6616 6618 6620 6622 6624 6626 6628 6630 6632 6634 6636 6638 6640 6642 6644 6646 6648 6650 6652 6654 6656 6658 6660 6662 6664 6666 6668 6670 6672 6674 6676 6678 6680 6682 6684 6686 6688 6690 6692 6694 6696 6698 6700 6702 6704 6706 6708 6710 6712 6714 6716 6718 6720 6722 6724 6726 6728 6730 6732 6734 6736 6738 6740 6742 6744 6746 6748 6750 6752 6754 6756 6758 6760 6762 6764 6766 6768 6770 6772 6774 6776 6778 6780 6782 6784 6786 6788 6790 6792 6794 6796 6798 6800 6802 6804 6806 6808 6810 6812 6814 6816 6818 6820 6822 6824 6826 6828 6830 6832 6834 6836 6838 6840 6842 6844 6846 6848 6850 6852 6854 6856 6858 6860 6862 6864 6866 6868 6870 6872 6874 6876 6878 6880 6882 6884 6886 6888 6890 6892 6894 6896 6898 6900 6902 6904 6906 6908 6910 6912 6914 6916 6918 6920 6922 6924 6926 6928 6930 6932 6934 6936 6938 6940 6942 6944 6946 6948 6950 6952 6954 6956 6958 6960 6962 6964 6966 6968 6970 6972 6974 6976 6978 6980 6982 6984 6986 6988 6990 6992 6994 6996 6998 7000 7002 7004 7006 7008 7010 7012 7014 7016 7018 7020 7022 7024 7026 7028 7030 7032 7034 7036 7038 7040 7042 7044 7046 7048 7050 7052 7054 7056 7058 7060 7062 7064 7066 7068 7070 7072 7074 7076 7078 7080 7082 7084 7086 7088 7090 7092 7094 7096 7098 7100 7102 7104 7106 7108 7110 7112 7114 7116 7118 7120 7122 7124 7126 7128 7130 7132 7134 7136 7138 7140 7142 7144 7146 7148 7150 7152 7154 7156 7158 7160 7162 7164 7166 7168 7170 7172 7174 7176 7178 7180 7182 7184 7186 7188 7190 7192 7194 7196 7198 7200 7202 7204 7206 7208 7210 7212 7214 7216 7218 7220 7222 7224 7226 7228 7230 7232 7234 7236 7238 7240 7242 7244 7246 7248 7250 7252 7254 7256 7258 7260 7262 7264 7266 7268 7270 7272 7274 7276 7278 7280 7282 7284 7286 7288 7290 7292 7294 7296 7298 7300 7302 7304 7306 7308 7310 7312 7314 7316 7318 7320 7322 7324 7326 7328 7330 7332 7334 7336 7338 7340 7342 7344 7346 7348 7350 7352 7354 7356 7358 7360 7362 7364 7366 7368 7370 7372 7374 7376 7378 7380 7382 7384 7386 7388 7390 7392 7394 7396 7398 7400 7402 7404 7406 7408 7410 7412 7414 7416 7418 7420 7422 7424 7426 7428 7430 7432 7434 7436 7438 7440 7442 7444 7446 7448 7450 7452 7454 7456 7458 7460 7462 7464 7466 7468 7470 7472 7474 7476 7478 7480 7482 7484 7486 7488 7490 7492 7494 7496 7498 7500 7502 7504 7506 7508 7510 7512 7514 7516 7518 7520 7522 7524 7526 7528 7530 7532 7534 7536 7538 7540 7542 7544 7546 7548 7550 7552 7554 7556 7558 7560 7562 7564 7566 7568 7570 7572 7574 7576 7578 7580 7582 7584 7586 7588 7590 7592 7594 7596 7598 7600 7602 7604 7606 7608 7610 7612 7614 7616 7618 7620 7622 7624 7626 7628 7630 7632 7634 7636 7638 7640 7642 7644 7646 7648 7650 7652 7654 7656 7658 7660 7662 7664 7666 7668 7670 7672 7674 7676 7678 7680 7682 7684 7686 7688 7690 7692 7694 7696 7698 7700 7702 7704 7706 7708 7710 7712 7714 7716 7718 7720 7722 7724 7726 7728 7730 7732 7734 7736 7738 7740 7742 7744 7746 7748 7750 7752 7754 7756 7758 7760 7762 7764 7766 7768 7770 7772 7774 7776 7778 7780 7782 7784 7786 7788 7790 7792 7794 7796 7798 7800 7802 7804 7806 7808 7810 7812 7814 7816 7818 7820 7822 7824 7826 7828 7830 7832 7834 7836 7838 7840 7842 7844 7846 7848 7850 7852 7854 7856 7858 7860 7862 7864 7866 7868 7870 7872 7874 7876 7878 7880 7882 7884 7886 7888 7890 7892 7894 7896 7898 7900 7902 7904 7906 7908 7910 7912 7914 7916 7918 7920 7922 7924 7926 7928 7930 7932 7934 7936 7938 7940 7942 7944 7946 7948 7950 7952 7954 7956 7958 7960 7962 7964 7966 7968 7970 7972 7974 7976 7978 7980 7982 7984 7986 7988 7990 7992 7994 7996 7998 8000 8002 8004 8006 8008 8010 8012 8014 8016 8018 8020 8022 8024 8026 8028 8030 8032 8034 8036 8038 8040 8042 8044 8046 8048 8050 8052 8054 8056 8058 8060 8062 8064 8066 8068 8070 8072 8074 8076 8078 8080 8082 8084 8086 8088 8090 8092 8094 8096 8098 8100 8102 8104 8106 8108 8110 8112 8114 8116 8118 8120 8122 8124 8126 8128 8130 8132 8134 8136 8138 8140 8142 8144 8146 8148 8150 8152 8154 8156 8158 8160 8162 8164 8166 8168 8170 8172 8174 8176 8178 8180 8182 8184 8186 8188 8190 8192 8194 8196 8198 8200 8202 8204 8206 8208 8210 8212 8214 8216 8218 8220 8222 8224 8226 8228 8230 8232 8234 8236 8238 8240 8242 8244 8246 8248 8250 8252 8254 8256 8258 8260 8262 8264 8266 8268 8270 8272 8274 8276 8278 8280 8282 8284 8286 8288 8290 8292 8294 8296 8298 8300 8302 8304 8306 8308 8310 8312 8314 8316 8318 8320 8322 8324 8326 8328 8330 8332 8334 8336 8338 8340 8342 8344 8346 8348 8350 8352 8354 8356 8358 8360 8362 8364 8366 8368 8370 8372 8374 8376 8378 8380 8382 8384 8386 8388 8390 8392 8394 8396 8398 8400 8402 8404 8406 8408 8410 8412 8414 8416 8418 8420 8422 8424 8426 8428 8430 8432 8434 8436 8438 8440 8442 8444 8446 8448 8450 8452 8454 8456 8458 8460 8462 8464 8466 8468 8470 8472 8474 8476 8478 8480 8482 8484 8486 8488 8490 8492 8494 8496 8498 8500 8502 8504 8506 8508 8510 8512 8514 8516 8518 8520 8522 8524 8526 8528 8530 8532 8534 8536 8538 8540 8542 8544 8546 8548 8550 8552 8554 8556 8558 8560 8562 8564 8566 8568 8570 8572 8574 8576 8578 8580 8582 8584 8586 8588 8590 8592 8594 8596 8598 8600 8602 8604 8606 8608 8610 8612 8614 8616 8618 8620 8622 8624 8626 8628 8630 8632 8634 8636 8638 8640 8642 8644 8646 8648 8650 8652 8654 8656 8658 8660 8662 8664 8666 8668 8670 8672 8674 8676 8678 8680 8682 8684 8686 8688 8690 8692 8694 8696 8698 8700 8702 8704 8706 8708 8710 8712 8714 8716 8718 8720 8722 8724 8726 8728 8730 8732 8734 8736 8738 8740 8742 8744 8746 8748 8750 8752 8754 8756 8758 8760 8762 8764 8766 8768 8770 8772 8774 8776 8778 8780 8782 8784 8786 8788 8790 8792 8794 8796 8798 8800 8802 8804 8806 8808 8810 8812 8814 8816 8818 8820 8822 8824 8826 8828 8830 8832 8834 8836 8838 8840 8842 8844 8846 8848 8850 8852 8854 8856 8858 8860 8862 8864 8866 8868 8870 8872 8874 8876 8878 8880 8882 8884 8886 8888 8890 8892 8894 8896 8898 8900 8902 8904 8906 8908 8910 8912 8914 8916 8918 8920 8922 8924 8926 8928 8930 8932 8934 8936 8938 8940 8942 8944 8946 8948 8950 8952 8954 8956 8958 8960 8962 8964 8966 8968 8970 8972 8974 8976 8978 8980 8982 8984 8986 8988 8990 8992 8994 8996 8998 9000 9002 9004 9006 9008 9010 9012 9014 9016 9018 9020 9022 9024 9026 9028 9030 9032 9034 9036 9038 9040 9042 9044 9046 9048 9050 9052 9054 9056 9058 9060 9062 9064 9066 9068 9070 9072 9074 9076 9078 9080 9082 9084 9086 9088 9090 9092 9094 9096 9098 9100 9102 9104 9106 9108 9110 9112 9114 9116 9118 9120 9122 9124 9126 9128 9130 9132 9134 9136 9138 9140 9142 9144 9146 9148 9150 9152 9154 9156 9158 9160 9162 9164 9166 9168 9170 9172 9174 9176 9178 9180 9182 9184 9186 9188 9190 9192 9194 9196 9198 9200 9202 9204 9206 9208 9210 9212 9214 9216 9218 9220 9222 9224 9226 9228 9230 9232 9234 9236 9238 9240 9242 9244 9246 9248 9250 9252 9254 9256 9258 9260 9262 9264 9266 9268 9270 9272 9274 9276 9278 9280 9282 9284 9286 9288 9290 9292 9294 9296 9298 9300 9302 9304 9306 9308 9310 9312 9314 9316 9318 9320 9322 9324 9326 9328 9330 9332 9334 9336 9338 9340 9342 9344 9346 9348 9350 9352 9354 9356 9358 9360 9362 9364 9366 9368 9370 9372 9374 9376 9378 9380 9382 9384 9386 9388 9390 9392 9394 9396 9398 9400 9402 9404 9406 9408 9410 9412 9414 9416 9418 9420 9422 9424 9426 9428 9430 9432 9434 9436 9438 9440 9442 9444 9446 9448 9450 9452 9454 9456 9458 9460 9462 9464 9466 9468 9470 9472 9474 9476 9478 9480 9482 9484 9486 9488 9490 9492 9494 9496 9498 9500 9502 9504 9506 9508 9510 9512 9514 9516 9518 9520 9522 9524 9526 9528 9530 9532 9534 9536 9538 9540 9542 9544 9546 9548 9550 9552 9554 9556 9558 9560 9562 9564 9566 9568 9570 9572 9574 9576 9578 9580 9582 9584 9586 9588 9590 9592 9594 9596 9598 9600 9602 9604 9606 9608 9610 9612 9614 9616 9618 9620 9622 9624 9626 9628 9630 9632 9634 9636 9638 9640 9642 9644 9646 9648 9650 9652 9654 9656 9658 9660 9662 9664 9666 9668 9670 9672 9674 9676 9678 9680 9682 9684 9686 9688 9690 9692 9694 9696 9698 9700 9702 9704 9706 9708 9710 9712 9714 9716 9718 9720 9722 9724 9726 9728 9730 9732 9734 9736 9738 9740 9742 9744 9746 9748 9750 9752 9754 9756 9758 9760 9762 9764 9766 9768 9770 9772 9774 9776 9778 9780 9782 9784 9786 9788 9790 9792 9794 9796 9798 9800 9802 9804 9806 9808 9810 9812 9814 9816 9818 9820 9822 9824 9826 9828 9830 9832 9834 9836 9838 9840 9842 9844 9846 9848 9850 9852 9854 9856 9858 9860 9862 9864 9866 9868 9870 9872 9874 9876 9878 9880 9882 9884 9886 9888 9890 9892 9894 9896 9898 9900 9902 9904 9906 9908 9910 9912 9914 9916 9918 9920 9922 9924 9926 9928 9930 9932 9934 9936 9938 9940 9942 9944 9946 9948 9950 9952 9954 9956 9958 9960 9962 9964 9966 9968 9970 9972 9974 9976 9978 9980 9982 9984 9986 9988 9990 9992 9994 9996 9998 10000 10002 10004 10006 10008 10010 10012 10014 10016 10018 10020 10022 10024 10026 10028 10030 10032 10034 10036 10038 10040 10042 10044 10046 10048 10050 10052 10054 10056 10058 10060 10062 10064 10066 10068 10070 10072 10074 10076 10078 10080 10082 10084 10086 10088 10090 10092 10094 10096 10098 10100 10102 10104 10106 10108 10110 10112 10114 10116 10118 10120 10122 10124 10126 10128 10130 10132 10134 10136 10138 10140 10142 10144 10146 10148 10150 10152 10154 10156 10158 10160 10162 10164 10166 10168 10170 10172 10174 10176 10178 10180 10182 10184 10186 10188 10190 10192 10194 10196 10198 10200 10202 10204 10206 10208 10210 10212 10214 10216 10218 10220 10222 10224 10226 10228 10230 10232 10234 10236 10238 10240 10242 10244 10246 10248 10250 10252 10254 10256 10258 10260 10262 10264 10266 10268 10270 10272 10274 10276 10278 10280 10282 10284 10286 10288 10290 10292 10294 10296 10298 10300 10302 10304 10306 10308 10310 10312 10314 10316 10318 10320 10322 10324 10326 10328 10330 10332 10334 10336 10338 10340 10342 10344 10346 10348 10350 10352 10354 10356 10358 10360 10362 10364 10366 10368 10370 10372 10374 10376 10378 10380 10382 10384 10386 10388 10390 10392 10394 10396 10398 10400 10402 10404 10406 10408 10410 10412 10414 10416 10418 10420 10422 10424 10426 10428 10430 10432 10434 10436 10438 10440 10442 10444 10446 10448 10450 10452 10454 10456 10458 10460 10462 10464 10466 10468 10470 10472 10474 10476 10478 10480 10482 10484 10486 10488 10490 10492 10494 10496 10498 10500 10502 10504 10506 10508 10510 10512 10514 10516 10518 10520 10522 10524 10526 10528 10530 10532 10534 10536 10538 10540 10542 10544 10546 10548 10550 10552 10554 10556 10558 10560 10562 10564 10566 10568 10570 10572 10574 10576 10578 10580 10582 10584 10586 10588 10590 10592 10594 10596 10598 10600 10602 10604 10606 10608 10610 10612 10614 10616 10618 10620 10622 10624 10626 10628 10630 10632 10634 10636 10638 10640 10642 10644 10646 10648 10650 10652 10654 10656 10658 10660 10662 10664 10666 10668 10670 10672 10674 10676 10678 10680 10682 10684 10686 10688 10690 10692 10694 10696 10698 10700 10702 10704 10706 10708 10710 10712 10714 10716 10718 10720 10722 10724 10726 10728 10730 10732 10734 10736 10738 10740 10742 10744 10746 10748 10750 10752 10754 10756 10758 10760 10762 10764 10766 10768 10770 10772 10774 10776 10778 10780 10782 10784 10786 10788 10790 10792 10794 10796 10798 10800 10802 10804 10806 10808 10810 10812 10814 10816 10818 10820 10822 10824 10826 10828 10830 10832 10834 10836 10838 10840 10842 10844 10846 10848 10850 10852 10854 10856 10858 10860 10862 10864 10866 10868 10870 10872 10874 10876 10878 10880 10882 10884 10886 10888 10890 10892 10894 10896 10898 10900 10902 10904 10906 10908 10910 10912 10914 10916 10918 10920 10922 10924 10926 10928 10930 10932 10934 10936 10938 10940 10942 10944 10946 10948 10950 10952 10954 10956 10958 10960 10962 10964 10966 10968 10970 10972 10974 10976 10978 10980 10982 10984 10986 10988 10990 10992 10994 10996 10998 11000 11002 11004 11006 11008 11010 11012 11014 11016 11018 11020 11022 11024 11026 11028 11030 11032 11034 11036 11038 11040 11042 11044 11046 11048 11050 11052 11054 11056 11058 11060 11062 11064 11066 11068 11070 11072 11074 11076 11078 11080 11082 11084 11086 11088 11090 11092 11094 11096 11098 11100 11102 11104 11106 11108 11110 11112 11114 11116 11118 11120 11122 11124 11126 11128 11130 11132 11134 11136 11138 11140 11142 11144 11146 11148 11150 11152 11154 11156 11158 11160 11162 11164 11166 11168 11170 11172 11174 11176 11178 11180 11182 11184 11186 11188 11190 11192 11194 11196 11198 11200 11202 11204 11206 11208 11210 11212 11214 11216 11218 11220 11222 11224 11226 11228 11230 11232 11234 11236 11238 11240 11242 11244 11246 11248 11250 11252 11254 11256 11258 11260 11262 11264 11266 11268 11270 11272 11274 11276 11278 11280 11282 11284 11286 11288 11290 11292 11294 11296 11298 11300 11302 11304 11306 11308 11310 11312 11314 11316 11318 11320 11322 11324 11326 11328 11330 11332 11334 11336 11338 11340 11342 11344 11346 11348 11350 11352 11354 11356 11358 11360 11362 11364 11366 11368 11370 11372 11374 11376 11378 11380 11382 11384 11386 11388 11390 11392 11394 11396 11398 11400 11402 11404 11406 11408 11410 11412 11414 11416 11418 11420 11422 11424 11426 11428 11430 11432 11434 11436 11438 11440 11442 11444 11446 11448 11450 11452 11454 11456 11458 11460 11462 11464 11466 11468 11470 11472 11474 11476 11478 11480 11482 11484 11486 11488 11490 11492 11494 11496 11498 11500 11502 11504 11506 11508 11510 11512 11514 11516 11518 11520 11522 11524 11526 11528 11530 11532 11534 11536 11538 11540 11542 11544 11546 11548 11550 11552 11554 11556 11558 11560 11562 11564 11566 11568 11570 11572 11574 11576 11578 11580 11582 11584 11586 11588 11590 11592 11594 11596 11598 11600 11602 11604 11606 11608 11610 11612 11614 11616 11618 11620 11622 11624 11626 11628 11630 11632 11634 11636 11638 11640 11642 11644 11646 11648 11650 11652 11654 11656 11658 11660 11662 11664 11666 11668 11670 11672 11674 11676 11678 11680 11682 11684 11686 11688 11690 11692 11694 11696 11698 11700 11702 11704 11706 11708 11710 11712 11714 11716 11718 11720 11722 11724 11726 11728 11730 11732 11734 11736 11738 11740 11742 11744 11746 11748 11750 11752 11754 11756 11758 11760 11762 11764 11766 11768 11770 11772 11774 11776 11778 11780 11782 11784 11786 11788 11790 11792 11794 11796 11798 11800 11802 11804 11806 11808 11810 11812 11814 11816 11818 11820 11822 11824 11826 11828 11830 11832 11834 11836 11838 11840 11842 11844 11846 11848 11850 11852 11854 11856 11858 11860 11862 11864 11866 11868 11870 11872 11874 11876 11878 11880 11882 11884 11886 11888 11890 11892 11894 11896 11898 11900 11902 11904 11906 11908 11910 11912 11914 11916 11918 11920 11922 11924 11926 11928 11930 11932 11934 11936 11938 11940 11942 11944 11946 11948 11950 11952 11954 11956 11958 11960 11962 11964 11966 11968 11970 11972 11974 11976 11978 11980 11982 11984 11986 11988 11990 11992 11994 11996 11998 12000 12002 12004 12006 12008 12010 12012 12014 12016 12018 12020 12022 12024 12026 12028 12030 12032 12034 12036 12038 12040 12042 12044 12046 12048 12050 12052 12054 12056 12058 12060 12062 12064 12066 12068 12070 12072 12074 12076 12078 12080 12082 12084 12086 12088 12090 12092 12094 12096 12098 12100 12102 12104 12106 12108 12110 12112 12114 12116 12118 12120 12122 12124 12126 12128 12130 12132 12134 12136 12138 12140 12142 12144 12146 12148 12150 12152 12154 12156 12158 12160 12162 12164 12166 12168 12170 12172 12174 12176 12178 12180 12182 12184 12186 12188 12190 12192 12194 12196 12198 12200 12202 12204 12206 12208 12210 12212 12214 12216 12218 12220 12222 12224 12226 12228 12230 12232 12234 12236 12238 12240 12242 12244 12246 12248 12250 12252 12254 12256 12258 12260 12262 12264 12266 12268 12270 12272 12274 12276 12278 12280 12282 12284 12286 12288 12290 12292 12294 12296 12298 12300 12302 12304 12306 12308 12310 12312 12314 12316 12318 12320 12322 12324 12326 12328 12330 12332 12334 12336 12338 12340 12342 12344 12346 12348 12350 12352 12354 12356 12358 12360 12362 12364 12366 12368 12370 12372 12374 12376 12378 12380 12382 12384 12386 12388 12390 12392 12394 12396 12398 12400 12402 12404 12406 12408 12410 12412 12414 12416 12418 12420 12422 12424 12426 12428 12430 12432 12434 12436 12438 12440 12442 12444 12446 12448 12450 12452 12454 12456 12458 12460 12462 12464 12466 12468 12470 12472 12474 12476 12478 12480 12482 12484 12486 12488 12490 12492 12494 12496 12498 12500 12502 12504 12506 12508 12510 12512 12514 12516 12518 12520 12522 12524 12526 12528 12530 12532 12534 12536 12538 12540 12542 12544 12546 12548 12550 12552 12554 12556 12558 12560 12562 12564 12566 12568 12570 12572 12574 12576 12578 12580 12582 12584 12586 12588 12590 12592 12594 12596 12598 12600 12602 12604 12606 12608 12610 12612 12614 12616 12618 12620 12622 12624 12626 12628 12630 12632 12634 12636 12638 12640 12642 12644 12646 12648 12650 12652 12654 12656 12658 12660 12662 12664 12666 12668 12670 12672 12674 12676 12678 12680 12682 12684 12686 12688 12690 12692 12694 12696 12698 12700 12702 12704 12706 12708 12710 12712 12714 12716 12718 12720 12722 12724 12726 12728 12730 12732 12734 12736 12738 12740 12742 12744 12746 12748 12750 12752 12754 12756 12758 12760 12762 12764 12766 12768 12770 12772 12774 12776 12778 12780 12782 12784 12786 12788 12790 12792 12794 12796 12798 12800 12802 12804 12806 12808 12810 12812 12814 12816 12818 12820 12822 12824 12826 12828 12830 12832 12834 12836 12838 12840 12842 12844 12846 12848 12850 12852 12854 12856 12858 12860 12862 12864 12866 12868 12870 12872 12874 12876 12878 12880 12882 12884 12886 12888 12890 12892 12894 12896 12898 12900 12902 12904 12906 12908 12910 12912 12914 12916 12918 12920 12922 12924 12926 12928 12930 12932 12934 12936 12938 12940 12942 12944 12946 12948 12950 12952 12954 12956 12958 12960 12962 12964 12966 12968 12970 12972 12974 12976 12978 12980 12982 12984 12986 12988 12990 12992 12994 12996 12998 13000 13002 13004 13006 13008 13010 13012 13014 13016 13018 13020 13022 13024 13026 13028 13030 13032 13034 13036 13038 13040 13042 13044 13046 13048 13050 13052 13054 13056 13058 13060 13062 13064 13066 13068 13070 13072 13074 13076 13078 13080 13082 13084 13086 13088 13090 13092 13094 13096 13098 13100 13102 13104 13106 13108 13110 13112 13114 13116 13118 13120 13122 13124 13126 13128 13130 13132 13134 13136 13138 13140 13142 13144 13146 13148 13150 13152 13154 13156 13158 13160 13162 13164 13166 13168 13170 13172 13174 13176 13178 13180 13182 13184 13186 13188 13190 13192 13194 13196 13198 13200 13202 13204 13206 13208 13210 13212 13214 13216 13218 13220 13222 13224 13226 13228 13230 13232 13234 13236 13238 13240 13242 13244 13246 13248 13250 13252 13254 13256 13258 13260 13262 13264 13266 13268 13270 13272 13274 13276 13278 13280 13282 13284 13286 13288 13290 13292 13294 13296 13298 13300 13302 13304 13306 13308 13310 13312 13314 13316 13318 13320 13322 13324 13326 13328 13330 13332 13334 13336 13338 13340 13342 13344 13346 13348 13350 13352 13354 13356 13358 13360 13362 13364 13366 13368 13370 13372 13374 13376 13378 13380 13382 13384 13386 13388 13390 13392 13394 13396 13398 13400 13402 13404 13406 13408 13410 13412 13414 13416 13418 13420 13422 13424 13426 13428 13430 13432 13434 13436 13438 13440 13442 13444 13446 13448 13450 13452 13454 13456 13458 13460 13462 13464 13466 13468 13470 13472 13474 13476 13478 13480 13482 13484 13486 13488 13490 13492 13494 13496 13498 13500 13502 13504 13506 13508 13510 13512 13514 13516 13518 13520 13522 13524 13526 13528 13530 13532 13534 13536 13538 13540 13542 13544 13546 13548 13550 13552 13554 13556 13558 13560 13562 13564 13566 13568 13570 13572 13574 13576 13578 13580 13582 13584 13586 13588 13590 13592 13594 13596 13598 13600 13602 13604 13606 13608 13610 13612 13614 13616 13618 13620 13622 13624 13626 13628 13630 13632 13634 13636 13638 13640 13642 13644 13646 13648 13650 13652 13654 13656 13658 13660 13662 13664 13666 13668 13670 13672 13674 13676 13678 13680 13682 13684 13686 13688 13690 13692 13694 13696 13698 13700 13702 13704 13706 13708 13710 13712 13714 13716 13718 13720 13722 13724 13726 13728 13730 13732 13734 13736 13738 13740 13742 13744 13746 13748 13750 13752 13754 13756 13758 13760 13762 13764 13766 13768 13770 13772 13774 13776 13778 13780 13782 13784 13786 13788 13790 13792 13794 13796 13798 13800 13802 13804 13806 13808 13810 13812 13814 13816 13818 13820 13822 13824 13826 13828 13830 13832 13834 13836 13838 13840 13842 13844 13846 13848 13850 13852 13854 13856 13858 13860 13862 13864 13866 13868 13870 13872 13874 13876 13878 13880 13882 13884 13886 13888 13890 13892 13894 13896 13898 13900 13902 13904 13906 13908 13910 13912 13914 13916 13918 13920 13922 13924 13926 13928 13930 13932 13934 13936 13938 13940 13942 13944 13946 13948 13950 13952 13954 13956 13958 13960 13962 13964 13966 13968 13970 13972 13974 13976 13978 13980 13982 13984 13986 13988 13990 13992 13994 13996 13998 14000 14002 14004 14006 14008 14010 14012 14014 14016 14018 14020 14022 14024 14026 14028 14030 14032 14034 14036 14038 14040 14042 14044 14046 14048 14050 14052 14054 14056 14058 14060 14062 14064 14066 14068 14070 14072 14074 14076 14078 14080 14082 14084 14086 14088 14090 14092 14094 14096 14098 14100 14102 14104 14106 14108 14110 14112 14114 14116 14118 14120 14122 14124 14126 14128 14130 14132 14134 14136 14138 14140 14142 14144 14146 14148 14150 14152 14154 14156 14158 14160 14162 14164 14166 14168 14170 14172 14174 14176 14178 14180 14182 14184 14186 14188 14190 14192 14194 14196 14198 14200 14202 14204 14206 14208 14210 14212 14214 14216 14218 14220 14222 14224 14226 14228 14230 14232 14234 14236 14238 14240 14242 14244 14246 14248 14250 14252 14254 14256 14258 14260 14262 14264 14266 14268 14270 14272 14274 14276 14278 14280 14282 14284 14286 14288 14290 14292 14294 14296 14298 14300 14302 14304 14306 14308 14310 14312 14314 14316 14318 14320 14322 14324 14326 14328 14330 14332 14334 14336 14338 14340 14342 14344 14346 14348 14350 14352 14354 14356 14358 14360 14362 14364 14366 14368 14370 14372 14374 14376 14378 14380 14382 14384 14386 14388 14390 14392 14394 14396 14398 14400 14402 14404 14406 14408 14410 14412 14414 14416 14418 14420 14422 14424 14426 14428 14430 14432 14434 14436 14438 14440 14442 14444 14446 14448 14450 14452 14454 14456 14458 14460 14462 14464 14466 14468 14470 14472 14474 14476 14478 14480 14482 14484 14486 14488 14490 14492 14494 14496 14498 14500 14502 14504 14506 14508 14510 14512 14514 14516 14518 14520 14522 14524 14526 14528 14530 14532 14534 14536 14538 14540 14542 14544 14546 14548 14550 14552 14554 14556 14558 14560 14562 14564 14566 14568 14570 14572 14574 14576 14578 14580 14582 14584 14586 14588 14590 14592 14594 14596 14598 14600 14602 14604 14606 14608 14610 14612 14614 14616 14618 14620 14622 14624 14626 14628 14630 14632 14634 14636 14638 14640 14642 14644 14646 14648 14650 14652 14654 14656 14658 14660 14662 14664 14666 14668 14670 14672 14674 14676 14678 14680 14682 14684 14686 14688 14690 14692 14694 14696 14698 14700 14702 14704 14706 14708 14710 14712 14714 14716 14718 14720 14722 14724 14726 14728 14730 14732 14734 14736 14738 14740 14742 14744 14746 14748 14750 14752 14754 14756 14758 14760 14762 14764 14766 14768 14770 14772 14774 14776 14778 14780 14782 14784 14786 14788 14790 14792 14794 14796 14798 14800 14802 14804 14806 14808 14810 14812 14814 14816 14818 14820 14822 14824 14826 14828 14830 14832 14834 14836 14838 14840 14842 14844 14846 14848 14850 14852 14854 14856 14858 14860 14862 14864 14866 14868 14870 14872 14874 14876 14878 14880 14882 14884 14886 14888 14890 14892 14894 14896 14898 14900 14902 14904 14906 14908 14910 14912 14914 14916 14918 14920 14922 14924 14926 14928 14930 14932 14934 14936 14938 14940 14942 14944 14946 14948 14950 14952 14954 14956 14958 14960 14962 14964 14966 14968 14970 14972 14974 14976 14978 14980 14982 14984 14986 14988 14990 14992 14994 14996 14998 15000 15002 15004 15006 15008 15010 15012 15014 15016 15018 15020 15022 15024 15026 15028 15030 15032 15034 15036 15038 15040 15042 15044 15046 15048 15050 15052 15054 15056 15058 15060 15062 15064 15066 15068 15070 15072 15074 15076 15078 15080 15082 15084 15086 15088 15090 15092 15094 15096 15098 15100 15102 15104 15106 15108 15110 15112 15114 15116 15118 15120 15122 15124 15126 15128 15130 15132 15134 15136 15138 15140 15142 15144 15146 15148 15150 15152 15154 15156 15158 15160 15162 15164 15166 15168 15170 15172 15174 15176 15178 15180 15182 15184 15186 15188 15190 15192 15194 15196 15198 15200 15202 15204 15206 15208 15210 15212 15214 15216 15218 15220 15222 15224 15226 15228 15230 15232 15234 15236 15238 15240 15242 15244 15246 15248 15250 15252 15254 15256 15258 15260 15262 15264 15266 15268 15270 15272 15274 15276 15278 15280 15282 15284 15286 15288 15290 15292 15294 15296 15298 15300 15302 15304 15306 15308 15310 15312 15314 15316 15318 15320 15322 15324 15326 15328 15330 15332 15334 15336 15338 15340 15342 15344 15346 15348 15350 15352 15354 15356 15358 15360 15362 15364 15366 15368 15370 15372 15374 15376 15378 15380 15382 15384 15386 15388 15390 15392 15394 15396 15398 15400 15402 15404 15406 15408 15410 15412 15414 15416 15418 15420 15422 15424 15426 15428 15430 15432 15434 15436 15438 15440 15442 15444 15446 15448 15450 15452 15454 15456 15458 15460 15462 15464 15466 15468 15470 15472 15474 15476 15478 15480 15482 15484 15486 15488 15490 15492 15494 15496 15498 15500 15502 15504 15506 15508 15510 15512 15514 15516 15518 15520 15522 15524 15526 15528 15530 15532 15534 15536 15538 15540 15542 15544 15546 15548 15550 15552 15554 15556 15558 15560 15562 15564 15566 15568 15570 15572 15574 15576 15578 15580 15582 15584 15586 15588 15590 15592 15594 15596 15598 15600 15602 15604 15606 15608 15610 15612 15614 15616 15618 15620 15622 15624 15626 15628 15630 15632 15634 15636 15638 15640 15642 15644 15646 15648 15650 15652 15654 15656 15658 15660 15662 15664 15666 15668 15670 15672 15674 15676 15678 15680 15682 15684 15686 15688 15690 15692 15694 15696 15698 15700 15702 15704 15706 15708 15710 15712 15714 15716 15718 15720 15722 15724 15726 15728 15730 15732 15734 15736 15738 15740 15742 15744 15746 15748 15750 15752 15754 15756 15758 15760 15762 15764 15766 15768 15770 15772 15774 15776 15778 15780 15782 15784 15786 15788 15790 15792 15794 15796 15798 15800 15802 15804 15806 15808 15810 15812 15814 15816 15818 15820 15822 15824 15826 15828 15830 15832 15834 15836 15838 15840 15842 15844 15846 15848 15850 15852 15854 15856 15858 15860 15862 15864 15866 15868 15870 15872 15874 15876 15878 15880 15882 15884 15886 15888 15890 15892 15894 15896 15898 15900 15902 15904 15906 15908 15910 15912 15914 15916 15918 15920 15922 15924 15926 15928 15930 15932 15934 15936 15938 15940 15942 15944 15946 15948 15950 15952 15954 15956 15958 15960 15962 15964 15966 15968 15970 15972 15974 15976 15978 15980 15982 15984 15986 15988 15990 15992 15994 15996 15998 16000 16002 16004 16006 16008 16010 16012 16014 16016 16018 16020 16022 16024 16026 16028 16030 16032 16034 16036 16038 16040 16042 16044 16046 16048 16050 16052 16054 16056 16058 16060 16062 16064 16066 16068 16070 16072 16074 16076 16078 16080 16082 16084 16086 16088 16090 16092 16094 16096 16098 16100 16102 16104 16106 16108 16110 16112 16114 16116 16118 16120 16122 16124 16126 16128 16130 16132 16134 16136 16138 16140 16142 16144 16146 16148 16150 16152 16154 16156 16158 16160 16162 16164 16166 16168 16170 16172 16174 16176 16178 16180 16182 16184 16186 16188 16190 16192 16194 16196 16198 16200 16202 16204 16206 16208 16210 16212 16214 16216 16218 16220 16222 16224 16226 16228 16230 16232 16234 16236 16238 16240 16242 16244 16246 16248 16250 16252 16254 16256 16258 16260 16262 16264 16266 16268 16270 16272 16274 16276 16278 16280 16282 16284 16286 16288 16290 16292 16294 16296 16298 16300 16302 16304 16306 16308 16310 16312 16314 16316 16318 16320 16322 16324 16326 16328 16330 16332 16334 16336 16338 16340 16342 16344 16346 16348 16350 16352 16354 16356 16358 16360 16362 16364 16366 16368 16370 16372 16374 16376 16378 16380 16382 16384 16386 16388 16390 16392 16394 16396 16398 16400 16402 16404 16406 16408 16410 16412 16414 16416 16418 16420 16422 16424 16426 16428 16430 16432 16434 16436 16438 16440 16442 16444 16446 16448 16450 16452 16454 16456 16458 16460 16462 16464 16466 16468 16470 16472 16474 16476 16478 16480 16482 16484 16486 16488 16490 16492 16494 16496 16498 16500 16502 16504 16506 16508 16510 16512 16514 16516 16518 16520 16522 16524 16526 16528 16530 16532 16534 16536 16538 16540 16542 16544 16546 16548 16550 16552 16554 16556 16558 16560 16562 16564 16566 16568 16570 16572 16574 16576 16578 16580 16582 16584 16586 16588 16590 16592 16594 16596 16598 16600 16602 16604 16606 16608 16610 16612 16614 16616 16618 16620 16622 16624 16626 16628 16630 16632 16634 16636 16638 16640 16642 16644 16646 16648 16650 16652 16654 16656 16658 16660 16662 16664 16666 16668 16670 16672 16674 16676 16678 16680 16682 16684 16686 16688 16690 16692 16694 16696 16698 16700 16702 16704 16706 16708 16710 16712 16714 16716 16718 16720 16722 16724 16726 16728 16730 16732 16734 16736 16738 16740 16742 16744 16746 16748 16750 16752 16754 16756 16758 16760 16762 16764 16766 16768 16770 16772 16774 16776 16778 16780 16782 16784 16786 16788 16790 16792 16794 16796 16798 16800 16802 16804 16806 16808 16810 16812 16814 16816 16818 16820 16822 16824 16826 16828 16830 16832 16834 16836 16838 16840 16842 16844 16846 16848 16850 16852 16854 16856 16858 16860 16862 16864 16866 16868 16870 16872 16874 16876 16878 16880 16882 16884 16886 16888 16890 16892 16894 16896 16898 16900 16902 16904 16906 16908 16910 16912 16914 16916 16918 16920 16922 16924 16926 16928 16930 16932 16934 16936 16938 16940 16942 16944 16946 16948 16950 16952 16954 16956 16958 16960 16962 16964 16966 16968 16970 16972 16974 16976 16978 16980 16982 16984 16986 16988 16990 16992 16994 16996 16998 17000 17002 17004 17006 17008 17010 17012 17014 17016 17018 17020 17022 17024 17026 17028 17030 17032 17034 17036 17038 17040 17042 17044 17046 17048 17050 17052 17054 17056 17058 17060 17062 17064 17066 17068 17070 17072 17074 17076 17078 17080 17082 17084 17086 17088 17090 17092 17094 17096 17098 17100 17102 17104 17106 17108 17110 17112 17114 17116 17118 17120 17122 17124 17126 17128 17130 17132 17134 17136 17138 17140 17142 17144 17146 17148 17150 17152 17154 17156 17158 17160 17162 17164 17166 17168 17170 17172 17174 17176 17178 17180 17182 17184 17186 17188 17190 17192 17194 17196 17198 17200 17202 17204 17206 17208 17210 17212 17214 17216 17218 17220 17222 17224 17226 17228 17230 17232 17234 17236 17238 17240 17242 17244 17246 17248 17250 17252 17254 17256 17258 17260 17262 17264 17266 17268 17270 17272 17274 17276 17278 17280 17282 17284 17286 17288 17290 17292 17294 17296 17298 17300 17302 17304 17306 17308 17310 17312 17314 17316 17318 17320 17322 17324 17326 17328 17330 17332 17334 17336 17338 17340 17342 17344 17346 17348 17350 17352 17354 17356 17358 17360 17362 17364 17366 17368 17370 17372 17374 17376 17378 17380 17382 17384 17386 17388 17390 17392 17394 17396 17398 17400 17402 17404 17406 17408 17410 17412 17414 17416 17418 17420 17422 17424 17426 17428 17430 17432 17434 17436 17438 17440 17442 17444 17446 17448 17450 17452 17454 17456 17458 17460 17462 17464 17466 17468 17470 17472 17474 17476 17478 17480 17482 17484 17486 17488 17490 17492 17494 17496 17498 17500 17502 17504 17506 17508 17510 17512 17514 17516 17518 17520 17522 17524 17526 17528 17530 17532 17534 17536 17538 17540 17542 17544 17546 17548 17550 17552 17554 17556 17558 17560 17562 17564 17566 17568 17570 17572 17574 17576 17578 17580 17582 17584 17586 17588 17590 17592 17594 17596 17598 17600 17602 17604 17606 17608 17610 17612 17614 17616 17618 17620 17622 17624 17626 17628 17630 17632 17634 17636 17638 17640 17642 17644 17646 17648 17650 17652 17654 17656 17658 17660 17662 17664 17666 17668 17670 17672 17674 17676 17678 17680 17682 17684 17686 17688 17690 17692 17694 17696 17698 17700 17702 17704 17706 17708 17710 17712 17714 17716 17718 17720 17722 17724 17726 17728 17730 17732 17734 17736 17738 17740 17742 17744 17746 17748 17750 17752 17754 17756 17758 17760 17762 17764 17766 17768 17770 17772 17774 17776 17778 17780 17782 17784 17786 17788 17790 17792 17794 17796 17798 17800 17802 17804 17806 17808 17810 17812 17814 17816 17818 17820 17822 17824 17826 17828 17830 17832 17834 17836 17838 17840 17842 17844 17846 17848 17850 17852 17854 17856 17858 17860 17862 17864 17866 17868 17870 17872 17874 17876 17878 17880 17882 17884 17886 17888 17890 17892 17894 17896 17898 17900 17902 17904 17906 17908 17910 17912 17914 17916 17918 17920 17922 17924 17926 17928 17930 17932 17934 17936 17938 17940 17942 17944 17946 17948 17950 17952 17954 17956 17958 17960 17962 17964 17966 17968 17970 17972 17974 17976 17978 17980 17982 17984 17986 17988 17990 17992 17994 17996 17998 18000 18002 18004 18006 18008 18010 18012 18014 18016 18018 18020 18022 18024 18026 18028 18030 18032 18034 18036 18038 18040 18042 18044 18046 18048 18050 18052 18054 18056 18058 18060 18062 18064 18066 18068 18070 18072 18074 18076 18078 18080 18082 18084 18086 18088 18090 18092 18094 18096 18098 18100 18102 18104 18106 18108 18110 18112 18114 18116 18118 18120 18122 18124 18126 18128 18130 18132 18134 18136 18138 18140 18142 18144 18146 18148 18150 18152 18154 18156 18158 18160 18162 18164 18166 18168 18170 18172 18174 18176 18178 18180 18182 18184 18186 18188 18190 18192 18194 18196 18198 18200 18202 18204 18206 18208 18210 18212 18214 18216 18218 18220 18222 18224 18226 18228 18230 18232 18234 18236 18238 18240 18242 18244 18246 18248 18250 18252 18254 18256 18258 18260 18262 18264 18266 18268 18270 18272 18274 18276 18278 18280 18282 18284 18286 18288 18290 18292 18294 18296 18298 18300 18302 18304 18306 18308 18310 18312 18314 18316 18318 18320 18322 18324 18326 18328 18330 18332 18334 18336 18338 18340 18342 18344 18346 18348 18350 18352 18354 18356 18358 18360 18362 18364 18366 18368 18370 18372 18374 18376 18378 18380 18382 18384 18386 18388 18390 18392 18394 18396 18398 18400 18402 18404 18406 18408 18410 18412 18414 18416 18418 18420 18422 18424 18426 18428 18430 18432 18434 18436 18438 18440 18442 18444 18446 18448 18450 18452 18454 18456 18458 18460 18462 18464 18466 18468 18470 18472 18474 18476 18478 18480 18482 18484 18486 18488 18490 18492 18494 18496 18498 18500 18502 18504 18506 18508 18510 18512 18514 18516 18518 18520 18522 18524 18526 18528 18530 18532 18534 18536 18538 18540 18542 18544 18546 18548 18550 18552 18554 18556 18558 18560 18562 18564 18566 18568 18570 18572 18574 18576 18578 18580 18582 18584 18586 18588 18590 18592 18594 18596 18598 18600 18602 18604 18606 18608 18610 18612 18614 18616 18618 18620 18622 18624 18626 18628 18630 18632 18634 18636 18638 18640 18642 18644 18646 18648 18650 18652 18654 18656 18658 18660 18662 18664 18666 18668 18670 18672 18674 18676 18678 18680 18682 18684 18686 18688 18690 18692 18694 18696 18698 18700 18702 18704 18706 18708 18710 18712 18714 18716 18718 18720 18722 18724 18726 18728 18730 18732 18734 18736 18738 18740 18742 18744 18746 18748 18750 18752 18754 18756 18758 18760 18762 18764 18766 18768 18770 18772 18774 18776 18778 18780 18782 18784 18786 18788 18790 18792 18794 18796 18798 18800 18802 18804 18806 18808 18810 18812 18814 18816 18818 18820 18822 18824 18826 18828 18830 18832 18834 18836 18838 18840 18842 18844 18846 18848 18850 18852 18854 18856 18858 18860 18862 18864 18866 18868 18870 18872 18874 18876 18878 18880 18882 18884 18886 18888 18890 18892 18894 18896 18898 18900 18902 18904 18906 18908 18910 18912 18914 18916 18918 18920 18922 18924 18926 18928 18930 18932 18934 18936 18938 18940 18942 18944 18946 18948 18950 18952 18954 18956 18958 18960 18962 18964 18966 18968 18970 18972 18974 18976 18978 18980 18982 18984 18986 18988 18990 18992 18994 18996 18998 19000 19002 19004 19006 19008 19010 19012 19014 19016 19018 19020 19022 19024 19026 19028 19030 19032 19034 19036 19038 19040 19042 19044 19046 19048 19050 19052 19054 19056 19058 19060 19062 19064 19066 19068 19070 19072 19074 19076 19078 19080 19082 19084 19086 19088 19090 19092 19094 19096 19098 19100 19102 19104 19106 19108 19110 19112 19114 19116 19118 19120 19122 19124 19126 19128 19130 19132 19134 19136 19138 19140 19142 19144 19146 19148 19150 19152 19154 19156 19158 19160 19162 19164 19166 19168 19170 19172 19174 19176 19178 19180 19182 19184 19186 19188 19190 19192 19194 19196 19198 19200 19202 19204 19206 19208 19210 19212 19214 19216 19218 19220 19222 19224 19226 19228 19230 19232 19234 19236 19238 19240 19242 19244 19246 19248 19250 19252 19254 19256 19258 19260 19262 19264 19266 19268 19270 19272 19274 19276 19278 19280 19282 19284 19286 19288 19290 19292 19294 19296 19298 19300 19302 19304 19306 19308 19310 19312 19314 19316 19318 19320 19322 19324 19326 19328 19330 19332 19334 19336 19338 19340 19342 19344 19346 19348 19350 19352 19354 19356 19358 19360 19362 19364 19366 19368 19370 19372 19374 19376 19378 19380 19382 19384 19386 19388 19390 19392 19394 19396 19398 19400 19402 19404 19406 19408 19410 19412 19414 19416 19418 19420 19422 19424 19426 19428 19430 19432 19434 19436 19438 19440 19442 19444 19446 19448 19450 19452 19454 19456 19458 19460 19462 19464 19466 19468 19470 19472 19474 19476 19478 19480 19482 19484 19486 19488 19490 19492 19494 19496 19498 19500 19502 19504 19506 19508 19510 19512 19514 19516 19518 19520 19522 19524 19526 19528 19530 19532 19534 19536 19538 19540 19542 19544 19546 19548 19550 19552 19554 19556 19558 19560 19562 19564 19566 19568 19570 19572 19574 19576 19578 19580 19582 19584 19586 19588 19590 19592 19594 19596 19598 19600 19602 19604 19606 19608 19610 19612 19614 19616 19618 19620 19622 19624 19626 19628 19630 19632 19634 19636 19638 19640 19642 19644 19646 19648 19650 19652 19654 19656 19658 19660 19662 19664 19666 19668 19670 19672 19674 19676 19678 19680 19682 19684 19686 19688 19690 19692 19694 19696 19698 19700 19702 19704 19706 19708 19710 19712 19714 19716 19718 19720 19722 19724 19726 19728 19730 19732 19734 19736 19738 19740 19742 19744 19746 19748 19750 19752 19754 19756 19758 19760 19762 19764 19766 19768 19770 19772 19774 19776 19778 19780 19782 19784 19786 19788 19790 19792 19794 19796 19798 19800 19802 19804 19806 19808 19810 19812 19814 19816 19818 19820 19822 19824 19826 19828 19830 19832 19834 19836 19838 19840 19842 19844 19846 19848 19850 19852 19854 19856 19858 19860 19862 19864 19866 19868 19870 19872 19874 19876 19878 19880 19882 19884 19886 19888 19890 19892 19894 19896 19898 19900 19902 19904 19906 19908 19910 19912 19914 19916 19918 19920 19922 19924 19926 19928 19930 19932 19934 19936 19938 19940 19942 19944 19946 19948 19950 19952 19954 19956 19958 19960 19962 19964 19966 19968 19970 19972 19974 19976 19978 19980 19982 19984 19986 19988 19990 19992 19994 19996 19998 20000 20002 20004 20006 20008 20010 20012 20014 20016 20018 20020 20022 20024 20026 20028 20030 20032 20034 20036 20038 20040 20042 20044 20046 20048 20050 20052 20054 20056 20058 20060 20062 20064 20066 20068 20070 20072 20074 20076 20078 20080 20082 20084 20086 20088 20090 20092 20094 20096 20098 20100 20102 20104 20106 20108 20110 20112 20114 20116 20118 20120 20122 20124 20126 20128 20130 20132 20134 20136 20138 20140 20142 20144 20146 20148 20150 20152 20154 20156 20158 20160 20162 20164 20166 20168 20170 20172 20174 20176 20178 20180 20182 20184 20186 20188 20190 20192 20194 20196 20198 20200 20202 20204 20206 20208 20210 20212 20214 20216 20218 20220 20222 20224 20226 20228 20230 20232 20234 20236 20238 20240 20242 20244 20246 20248 20250 20252 20254 20256 20258 20260 20262 20264 20266 20268 20270 20272 20274 20276 20278 20280 20282 20284 20286 20288 20290 20292 20294 20296 20298 20300 20302 20304 20306 20308 20310 20312 20314 20316 20318 20320 20322 20324 20326 20328 20330 20332 20334 20336 20338 20340 20342 20344 20346 20348 20350 20352 20354 20356 20358 20360 20362 20364 20366 20368 20370 20372 20374 20376 20378 20380 20382 20384 20386 20388 20390 20392 20394 20396 20398 20400 20402 20404 20406 20408 20410 20412 20414 20416 20418 20420 20422 20424 20426 20428 20430 20432 20434 20436 20438 20440 20442 20444 20446 20448 20450 20452 20454 20456 20458 20460 20462 20464 20466 20468 20470 20472 20474 20476 20478 20480 20482 20484 20486 20488 20490 20492 20494 20496 20498 20500 20502 20504 20506 20508 20510 20512 20514 20516 20518 20520 20522 20524 20526 20528 20530 20532 20534 20536 20538 20540 20542 20544 20546 20548 20550 20552 20554 20556 20558 20560 20562 20564 20566 20568 20570 20572 20574 20576 20578 20580 20582 20584 20586 20588 20590 20592 20594 20596 20598 20600 20602 20604 20606 20608 20610 20612 20614 20616 20618 20620 20622 20624 20626 20628 20630 20632 20634 20636 20638 20640 20642 20644 20646 20648 20650 20652 20654 20656 20658 20660 20662 20664 20666 20668 20670 20672 20674 20676 20678 20680 20682 20684 20686 20688 20690 20692 20694 20696 20698 20700 20702 20704 20706 20708 20710 20712 20714 20716 20718 20720 20722 20724 20726 20728 20730 20732 20734 20736 20738 20740 20742 20744 20746 20748 20750 20752 20754 20756 20758 20760 20762 20764 20766 20768 20770 20772 20774 20776 20778 20780 20782 20784 20786 20788 20790 20792 20794 20796 20798 20800 20802 20804 20806 20808 20810 20812 20814 20816 20818 20820 20822 20824 20826 20828 20830 20832 20834 20836 20838 20840 20842 20844 20846 20848 20850 20852 20854 20856 20858 20860 20862 20864 20866 20868 20870 20872 20874 20876 20878 20880 20882 20884 20886 20888 20890 20892 20894 20896 20898 20900 20902 20904 20906 20908 20910 20912 20914 20916 20918 20920 20922 20924 20926 20928 20930 20932 20934 20936 20938 20940 20942 20944 20946 20948 20950 20952 20954 20956 20958 20960 20962 20964 20966 20968 20970 20972 20974 20976 20978 20980 20982 20984 20986 20988 20990 20992 20994 20996 20998 21000 21002 21004 21006 21008 21010 21012 21014 21016 21018 21020 21022 21024 21026 21028 21030 21032 21034 21036 21038 21040 21042 21044 21046 21048 21050 21052 21054 21056 21058 21060 21062 21064 21066 21068 21070 21072 21074 21076 21078 21080 21082 21084 21086 21088 21090 21092 21094 21096 21098 21100 21102 21104 21106 21108 21110 21112 21114 21116 21118 21120 21122 21124 21126 21128 21130 21132 21134 21136 21138 21140 21142 21144 21146 21148 21150 21152 21154 21156 21158 21160 21162 21164 21166 21168 21170 21172 21174 21176 21178 21180 21182 21184 21186 21188 21190 21192 21194 21196 21198 21200 21202 21204 21206 21208 21210 21212 21214 21216 21218 21220 21222 21224 21226 21228 21230 21232 21234 21236 21238 21240 21242 21244 21246 21248 21250 21252 21254 21256 21258 21260 21262 21264 21266 21268 21270 21272 21274 21276 21278 21280 21282 21284 21286 21288 21290 21292 21294 21296 21298 21300 21302 21304 21306 21308 21310 21312 21314 21316 21318 21320 21322 21324 21326 21328 21330 21332 21334 21336 21338 21340 21342 21344 21346 21348 21350 21352 21354 21356 21358 21360 21362 21364 21366 21368 21370 21372 21374 21376 21378 21380 21382 21384 21386 21388 21390 21392 21394 21396 21398 21400 21402 21404 21406 21408 21410 21412 21414 21416 21418 21420 21422 21424 21426 21428 21430 21432 21434 21436 21438 21440 21442 21444 21446 21448 21450 21452 21454 21456 21458 21460 21462 21464 21466 21468 21470 21472 21474 21476 21478 21480 21482 21484 21486 21488 21490 21492 21494 21496 21498 21500 21502 21504 21506 21508 21510 21512 21514 21516 21518 21520 21522 21524 21526 21528 21530 21532 21534 21536 21538 21540 21542 21544 21546 21548 21550 21552 21554 21556 21558 21560 21562 21564 21566 21568 21570 21572 21574 21576 21578 21580 21582 21584 21586 21588 21590 21592 21594 21596 21598 21600 21602 21604 21606 21608 21610 21612 21614 21616 21618 21620 21622 21624 21626 21628 21630 21632 21634 21636 21638 21640 21642 21644 21646 21648 21650 21652 21654 21656 21658 21660 21662 21664 21666 21668 21670 21672 21674 21676 21678 21680 21682 21684 21686 21688 21690 21692 21694 21696 21698 21700 21702 21704 21706 21708 21710 21712 21714 21716 21718 21720 21722 21724 21726 21728 21730 21732 21734 21736 21738 21740 21742 21744 21746 21748 21750 21752 21754 21756 21758 21760 21762 21764 21766 21768 21770 21772 21774 21776 21778 21780 21782 21784 21786 21788 21790 21792 21794 21796 21798 21800 21802 21804 21806 21808 21810 21812 21814 21816 21818 21820 21822 21824 21826 21828 21830 21832 21834 21836 21838 21840 21842 21844 21846 21848 21850 21852 21854 21856 21858 21860 21862 21864 21866 21868 21870 21872 21874 21876 21878 21880 21882 21884 21886 21888 21890 21892 21894 21896 21898 21900 21902 21904 21906 21908 21910 21912 21914 21916 21918 21920 21922 21924 21926 21928 21930 21932 21934 21936 21938 21940 21942 21944 21946 21948 21950 21952 21954 21956 21958 21960 21962 21964 21966 21968 21970 21972 21974 21976 21978 21980 21982 21984 21986 21988 21990 21992 21994 21996 21998 22000 22002 22004 22006 22008 22010 22012 22014 22016 22018 22020 22022 22024 22026 22028 22030 22032 22034 22036 22038 22040 22042 22044 22046 22048 22050 22052 22054 22056 22058 22060 22062 22064 22066 22068 22070 22072 22074 22076 22078 22080 22082 22084 22086 22088 22090 22092 22094 22096 22098 22100 22102 22104 22106 22108 22110 22112 22114 22116 22118 22120 22122 22124 22126 22128 22130 22132 22134 22136 22138 22140 22142 22144 22146 22148 22150 22152 22154 22156 22158 22160 22162 22164 22166 22168 22170 22172 22174 22176 22178 22180 22182 22184 22186 22188 22190 22192 22194 22196 22198 22200 22202 22204 22206 22208 22210 22212 22214 22216 22218 22220 22222 22224 22226 22228 22230 22232 22234 22236 22238 22240 22242 22244 22246 22248 22250 22252 22254 22256 22258 22260 22262 22264 22266 22268 22270 22272 22274 22276 22278 22280 22282 22284 22286 22288 22290 22292 22294 22296 22298 22300 22302 22304 22306 22308 22310 22312 22314 22316 22318 22320 22322 22324 22326 22328 22330 22332 22334 22336 22338 22340 22342 22344 22346 22348 22350 22352 22354 22356 22358 22360 22362 22364 22366 22368 22370 22372 22374 22376 22378 22380 22382 22384 22386 22388 22390 22392 22394 22396 22398 22400 22402 22404 22406 22408 22410 22412 22414 22416 22418 22420 22422 22424 22426 22428 22430 22432 22434 22436 22438 22440 22442 22444 22446 22448 22450 22452 22454 22456 22458 22460 22462 22464 22466 22468 22470 22472 22474 22476 22478 22480 22482 22484 22486 22488 22490 22492 22494 22496 22498 22500 22502 22504 22506 22508 22510 22512 22514 22516 22518 22520 22522 22524 22526 22528 22530 22532 22534 22536 22538 22540 22542 22544 22546 22548 22550 22552 22554 22556 22558 22560 22562 22564 22566 22568 22570 22572 22574 22576 22578 22580 22582 22584 22586 22588 22590 22592 22594 22596 22598 22600 22602 22604 22606 22608 22610 22612 22614 22616 22618 22620 22622 22624 22626 22628 22630 22632 22634 22636 22638 22640 22642 22644 22646 22648 22650 22652 22654 22656 22658 22660 22662 22664 22666 22668 22670 22672 22674 22676 22678 22680 22682 22684 22686 22688 22690 22692 22694 22696 22698 22700 22702 22704 22706 22708 22710 22712 22714 22716 22718 22720 22722 22724 22726 22728 22730 22732 22734 22736 22738 22740 22742 22744 22746 22748 22750 22752 22754 22756 22758 22760 22762 22764 22766 22768 22770 22772 22774 22776 22778 22780 22782 22784 22786 22788 22790 22792 22794 22796 22798 22800 22802 22804 22806 22808 22810 22812 22814 22816 22818 22820 22822 22824 22826 22828 22830 22832 22834 22836 22838 22840 22842 22844 22846 22848 22850 22852 22854 22856 22858 22860 22862 22864 22866 22868 22870 22872 22874 22876 22878 22880 22882 22884 22886 22888 22890 22892 22894 22896 22898 22900 22902 22904 22906 22908 22910 22912 22914 22916 22918 22920 22922 22924 22926 22928 22930 22932 22934 22936 22938 22940 22942 22944 22946 22948 22950 22952 22954 22956 22958 22960 22962 22964 22966 22968 22970 22972 22974 22976 22978 22980 22982 22984 22986 22988 22990 22992 22994 22996 22998 23000 23002 23004 23006 23008 23010 23012 23014 23016 23018 23020 23022 23024 23026 23028 23030 23032 23034 23036 23038 23040 23042 23044 23046 23048 23050 23052 23054 23056 23058 23060 23062 23064 23066 23068 23070 23072 23074 23076 23078 23080 23082 23084 23086 23088 23090 23092 23094 23096 23098 23100 23102 23104 23106 23108 23110 23112 23114 23116 23118 23120 23122 23124 23126 23128 23130 23132 23134 23136 23138 23140 23142 23144 23146 23148 23150 23152 23154 23156 23158 23160 23162 23164 23166 23168 23170 23172 23174 23176 23178 23180 23182 23184 23186 23188 23190 23192 23194 23196 23198 23200 23202 23204 23206 23208 23210 23212 23214 23216 23218 23220 23222 23224 23226 23228 23230 23232 23234 23236 23238 23240 23242 23244 23246 23248 23250 23252 23254 23256 23258 23260 23262 23264 23266 23268 23270 23272 23274 23276 23278 23280 23282 23284 23286 23288 23290 23292 23294 23296 23298 23300 23302 23304 23306 23308 23310 23312 23314 23316 23318 23320 23322 23324 23326 23328 23330 23332 23334 23336 23338 23340 23342 23344 23346 23348 23350 23352 23354 23356 23358 23360 23362 23364 23366 23368 23370 23372 23374 23376 23378 23380 23382 23384 23386 23388 23390 23392 23394 23396 23398 23400 23402 23404 23406 23408 23410 23412 23414 23416 23418 23420 23422 23424 23426 23428 23430 23432 23434 23436 23438 23440 23442 23444 23446 23448 23450 23452 23454 23456 23458 23460 23462 23464 23466 23468 23470 23472 23474 23476 23478 23480 23482 23484 23486 23488 23490 23492 23494 23496 23498 23500 23502 23504 23506 23508 23510 23512 23514 23516 23518 23520 23522 23524 23526 23528 23530 23532 23534 23536 23538 23540 "]}, "index": 94}, {"input": "Count the number of distinct sequences a1, a2, ..., an (1 \u2264 ai) consisting of positive integers such that gcd(a1, a2, ..., an) = x and <image>. As this number could be large, print the answer modulo 109 + 7.\n\ngcd here means the [greatest common divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor).\n\nInput\n\nThe only line contains two positive integers x and y (1 \u2264 x, y \u2264 109).\n\nOutput\n\nPrint the number of such sequences modulo 109 + 7.\n\n", "output": "M=10**9+7\na,b=map(int,input().split())\nif b%a:print(0)\nelse:\n    b//=a\n    d=set()\n    for i in range(1,int(pow(b,0.5)+1)):\n        if b%i==0:\n            d.add(i)\n            d.add(b//i)\n    d=sorted(list(d))\n    f=d[::]\n    for i in range(len(f)):\n        f[i]=pow(2,d[i]-1,M)\n        for j in range(i):\n            if d[i]%d[j]==0:\n                f[i]-=f[j]\n    print(f[-1]%M)", "public_tests": {"input": ["3 9\n", "5 8\n"], "output": ["3\n", "0"]}, "private_tests": {"input": ["2 12\n", "1 223092870\n", "415879151 194713963\n", "859550004 563726557\n", "417485019 230941257\n", "34601 35742833\n", "1000000000 1\n", "1 1\n", "1 9\n", "741547455 471761895\n", "495219 444706662\n", "1 282521795\n", "524 991033864\n", "1 8\n", "225 315096300\n", "9357 18255507\n", "231096994 462193988\n", "109936444 989427996\n", "1 425613469\n", "183612440 509579899\n", "1 994593600\n", "1000000000 1000000000\n", "1 1000000000\n"], "output": ["27\n", "521342052\n", "0", "0", "0", "60054095\n", "0", "1\n", "252\n", "0", "115165527\n", "436596181\n", "172439543\n", "120\n", "413133630\n", "745979764\n", "1\n", "252\n", "455729363\n", "0", "558135120\n", "1\n", "824916815\n"]}, "index": 95}, {"input": "Alice likes snow a lot! Unfortunately, this year's winter is already over, and she can't expect to have any more of it. Bob has thus bought her a gift \u2014 a large snow maker. He plans to make some amount of snow every day. On day i he will make a pile of snow of volume Vi and put it in her garden.\n\nEach day, every pile will shrink a little due to melting. More precisely, when the temperature on a given day is Ti, each pile will reduce its volume by Ti. If this would reduce the volume of a pile to or below zero, it disappears forever. All snow piles are independent of each other. \n\nNote that the pile made on day i already loses part of its volume on the same day. In an extreme case, this may mean that there are no piles left at the end of a particular day.\n\nYou are given the initial pile sizes and the temperature on each day. Determine the total volume of snow melted on each day. \n\nInput\n\nThe first line contains a single integer N (1 \u2264 N \u2264 105) \u2014 the number of days. \n\nThe second line contains N integers V1, V2, ..., VN (0 \u2264 Vi \u2264 109), where Vi is the initial size of a snow pile made on the day i.\n\nThe third line contains N integers T1, T2, ..., TN (0 \u2264 Ti \u2264 109), where Ti is the temperature on the day i.\n\nOutput\n\nOutput a single line with N integers, where the i-th integer represents the total volume of snow melted on day i.\n\n", "output": "from heapq import *\n\n\nn = int(input())\nv = list(map(int, input().split()))\nt = list(map(int, input().split()))\ns = 0\nh = []\nans = []\nfor i in range(n):\n    heappush(h, v[i] + s)\n    sm = 0\n    while h and h[0] <= s + t[i]:\n        sm += heappop(h) - s\n    ans.append(sm + len(h) * t[i])\n    s += t[i]\nprint(*ans)\n\n", "public_tests": {"input": ["5\n30 25 20 15 10\n9 10 12 4 13\n", "3\n10 10 5\n5 7 2\n"], "output": ["9 20 35 11 25 ", "5 12 4 "]}, "private_tests": {"input": ["2\n9 3\n10 2\n", "1\n5\n4\n", "10\n20 35 4 0 6 29 4 9 17 10\n0 9 4 7 5 1 4 3 9 4\n", "1\n4\n5\n", "4\n0 0 0 0\n1 2 3 4\n", "13\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n", "2\n9 3\n8 2\n", "10\n11 39 16 34 25 3 12 11 31 16\n10 0 4 9 8 9 7 8 9 2\n", "1\n5\n5\n", "2\n9 3\n4 4\n"], "output": ["9 2 ", "4 ", "0 18 12 14 10 3 12 9 26 12 ", "4 ", "0 0 0 0 ", "1 1 1 1 1 1 1 1 1 1 1 1 1 ", "8 3 ", "10 0 9 27 27 30 28 17 12 4 ", "5 ", "4 7 "]}, "index": 96}, {"input": "Dima is a beginner programmer. During his working process, he regularly has to repeat the following operation again and again: to remove every second element from the array. One day he has been bored with easy solutions of this problem, and he has come up with the following extravagant algorithm.\n\nLet's consider that initially array contains n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step Dima selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows:\n\n<image>\n\nYou have to write a program that allows you to determine what number will be in the cell with index x (1 \u2264 x \u2264 n) after Dima's algorithm finishes.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n \u2264 1018, 1 \u2264 q \u2264 200 000), the number of elements in the array and the number of queries for which it is needed to find the answer.\n\nNext q lines contain integers xi (1 \u2264 xi \u2264 n), the indices of cells for which it is necessary to output their content after Dima's algorithm finishes.\n\nOutput\n\nFor each of q queries output one integer number, the value that will appear in the corresponding array cell after Dima's algorithm finishes.\n\n", "output": "import sys\n \n[n, q] = map(int, sys.stdin.readline().strip().split())\nqis = [int(sys.stdin.readline().strip()) for _ in range(q)]\n \ndef query(n, q):\n\td = 2 * n - q\n\twhile d % 2 == 0:\n\t\td //= 2\n\treturn (n - d // 2)\n \nfor qi in qis:\n\tprint (query(n, qi))", "public_tests": {"input": ["4 3\n2\n3\n4\n", "13 4\n10\n5\n4\n8\n"], "output": ["3\n2\n4\n", "13\n3\n8\n9\n"]}, "private_tests": {"input": ["12 12\n9\n11\n5\n3\n7\n2\n8\n6\n4\n10\n12\n1\n", "3 3\n3\n2\n1\n", "2 2\n1\n2\n", "1 1\n1\n"], "output": ["5\n6\n3\n2\n4\n7\n12\n8\n10\n9\n11\n1\n", "2\n3\n1\n", "1\n2\n", "1\n"]}, "index": 97}, {"input": "Petya studies at university. The current academic year finishes with n special days. Petya needs to pass m exams in those special days. The special days in this problem are numbered from 1 to n.\n\nThere are three values about each exam:\n\n  * s_i \u2014 the day, when questions for the i-th exam will be published, \n  * d_i \u2014 the day of the i-th exam (s_i < d_i), \n  * c_i \u2014 number of days Petya needs to prepare for the i-th exam. For the i-th exam Petya should prepare in days between s_i and d_i-1, inclusive. \n\n\n\nThere are three types of activities for Petya in each day: to spend a day doing nothing (taking a rest), to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can't pass/prepare for multiple exams in a day. He can't mix his activities in a day. If he is preparing for the i-th exam in day j, then s_i \u2264 j < d_i.\n\nIt is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days.\n\nFind the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 n) \u2014 the number of days and the number of exams.\n\nEach of the following m lines contains three integers s_i, d_i, c_i (1 \u2264 s_i < d_i \u2264 n, 1 \u2264 c_i \u2264 n) \u2014 the day, when questions for the i-th exam will be given, the day of the i-th exam, number of days Petya needs to prepare for the i-th exam. \n\nGuaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.\n\nOutput\n\nIf Petya can not prepare and pass all the exams, print -1. In case of positive answer, print n integers, where the j-th number is:\n\n  * (m + 1), if the j-th day is a day of some exam (recall that in each day no more than one exam is conducted), \n  * zero, if in the j-th day Petya will have a rest, \n  * i (1 \u2264 i \u2264 m), if Petya will prepare for the i-th exam in the day j (the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it).\n\nAssume that the exams are numbered in order of appearing in the input, starting from 1.\n\nIf there are multiple schedules, print any of them.\n\n", "output": "f = lambda: map(int, input().split())\nn, m = f()\nt = []\np = [0] * n\nfor i in range(m):\n    s, d, c = f()\n    p[d - 1] = m + 1\n    t.append((d - 1, s - 1, c, i + 1))\nt.sort()\nfor d, s, c, i in t:\n    while c:\n        if not p[s]:\n            p[s] = i\n            c -= 1\n        if s == d: exit(print(-1))\n        s += 1\nprint(*p)", "public_tests": {"input": ["3 2\n1 3 1\n1 2 1\n", "10 3\n4 7 2\n1 10 3\n8 9 1\n", "5 2\n1 3 1\n1 5 1\n"], "output": ["-1\n", "2 2 2 1 1 0 4 3 4 4\n", "1 2 3 0 3\n"]}, "private_tests": {"input": ["100 37\n49 51 2\n79 81 2\n46 48 2\n71 73 2\n31 33 2\n42 44 1\n17 19 2\n64 66 2\n24 26 1\n8 10 2\n38 40 1\n1 3 2\n75 77 2\n52 54 2\n11 13 2\n87 89 1\n98 100 2\n60 62 1\n56 58 2\n39 41 1\n92 94 1\n13 15 1\n67 69 2\n4 6 2\n19 21 1\n91 93 1\n86 88 1\n43 45 1\n25 27 1\n94 96 1\n81 83 1\n35 37 1\n34 36 1\n61 63 1\n21 23 1\n83 85 1\n27 29 1\n", "97 22\n10 17 6\n24 31 6\n79 86 7\n60 67 6\n42 49 5\n67 74 5\n34 41 4\n70 77 3\n51 58 5\n82 89 2\n89 96 5\n14 21 2\n40 47 1\n1 8 2\n23 30 1\n59 66 1\n50 57 2\n26 33 1\n15 22 2\n90 97 1\n32 39 1\n2 9 4\n", "90 8\n7 10 2\n27 28 1\n18 20 2\n12 48 2\n37 84 27\n29 32 2\n37 73 16\n3 40 14\n", "86 5\n66 74 1\n29 33 3\n13 78 38\n20 34 2\n72 85 1\n", "2 1\n1 2 1\n", "7 2\n2 6 4\n3 4 1\n", "7 2\n1 7 3\n2 3 1\n", "88 1\n1 3 1\n", "10 2\n1 10 5\n2 4 1\n", "61 2\n12 41 24\n20 29 2\n", "100 2\n1 100 49\n1 99 49\n", "100 37\n49 51 2\n79 81 2\n46 48 2\n71 73 2\n31 33 3\n42 44 1\n17 19 2\n64 66 2\n24 26 1\n8 10 2\n38 40 1\n1 3 2\n75 77 2\n52 54 2\n11 13 2\n87 89 1\n98 100 2\n60 62 1\n56 58 2\n39 41 1\n92 94 1\n13 15 1\n67 69 2\n4 6 2\n19 21 1\n91 93 1\n86 88 1\n43 45 1\n25 27 1\n94 96 1\n81 83 1\n35 37 1\n34 36 1\n61 63 1\n21 23 1\n83 85 1\n27 29 1\n", "85 6\n4 63 17\n1 47 2\n25 26 1\n1 8 1\n24 78 44\n39 79 4\n", "10 2\n3 7 4\n6 10 1\n", "100 38\n41 43 1\n53 55 2\n91 93 2\n47 49 2\n77 79 2\n5 7 2\n2 4 2\n28 30 1\n79 81 1\n42 44 1\n27 29 1\n95 97 2\n58 60 1\n57 59 1\n61 63 2\n33 35 2\n22 24 1\n44 46 1\n10 12 2\n13 15 1\n97 99 1\n37 39 2\n18 20 1\n50 52 2\n21 23 1\n68 70 2\n83 85 1\n71 73 2\n65 67 1\n64 66 1\n15 17 1\n7 9 1\n88 90 2\n30 32 1\n74 76 1\n24 26 1\n85 87 1\n82 84 1\n", "100 2\n1 100 30\n1 20 1\n", "12 11\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n5 6 5\n6 7 6\n7 8 7\n8 9 8\n9 10 9\n10 11 10\n11 12 1\n", "20 5\n4 14 4\n3 13 1\n1 11 1\n10 20 4\n6 16 3\n", "100 6\n3 43 40\n46 86 24\n38 78 5\n51 91 8\n59 99 12\n60 100 2\n", "11 2\n1 11 5\n4 8 4\n", "27 8\n7 22 2\n3 5 1\n24 26 1\n1 14 1\n4 23 8\n10 12 1\n16 18 1\n5 6 1\n", "28 4\n4 23 11\n11 12 1\n2 4 1\n16 24 1\n", "10 4\n2 5 1\n1 4 2\n4 7 1\n7 10 2\n", "100 3\n17 21 3\n1 66 38\n8 22 2\n", "20 2\n3 4 1\n2 7 3\n", "100 4\n73 83 4\n79 89 8\n12 22 6\n23 33 9\n", "90 29\n1 5 1\n56 60 2\n31 35 4\n86 90 2\n25 29 4\n58 62 2\n73 77 2\n12 16 2\n65 69 1\n16 20 3\n42 46 4\n62 66 2\n2 6 2\n77 81 1\n80 84 1\n48 52 4\n81 85 2\n68 72 1\n57 61 1\n75 79 1\n35 39 2\n37 41 1\n18 22 1\n4 8 2\n67 71 1\n85 89 1\n20 24 1\n10 14 2\n51 55 2\n", "100 43\n76 77 1\n24 25 1\n2 3 1\n85 86 1\n49 50 1\n15 16 1\n30 31 1\n78 79 2\n54 55 1\n58 59 1\n17 18 1\n67 68 1\n21 22 1\n80 81 1\n35 36 1\n8 9 1\n83 84 1\n44 45 1\n62 63 1\n64 65 1\n72 73 1\n27 28 1\n56 57 1\n12 13 1\n40 41 1\n32 33 1\n52 53 1\n70 71 1\n97 98 1\n37 38 1\n87 88 1\n46 47 1\n89 90 1\n4 5 1\n94 95 1\n60 61 1\n99 100 1\n10 11 1\n74 75 1\n6 7 1\n91 92 1\n19 20 1\n42 43 1\n", "90 30\n1 5 1\n57 61 3\n13 17 1\n60 64 1\n73 77 2\n5 9 2\n16 20 3\n29 33 5\n83 87 3\n63 67 2\n35 39 4\n18 22 1\n42 46 4\n46 50 2\n48 52 2\n23 27 1\n82 86 1\n77 81 3\n67 71 2\n22 26 2\n37 41 1\n6 10 1\n50 54 1\n8 12 1\n86 90 1\n68 72 1\n11 15 1\n72 76 1\n62 66 1\n52 56 1\n", "100 5\n24 57 8\n28 72 15\n20 75 49\n27 67 7\n68 100 21\n", "100 1\n1 100 98\n", "5 2\n1 5 2\n2 3 1\n", "50 7\n45 50 4\n26 31 5\n35 40 3\n38 43 1\n39 44 3\n3 8 2\n1 6 1\n", "50 15\n41 46 5\n35 40 5\n27 32 3\n10 15 2\n1 6 3\n20 25 1\n11 16 1\n9 14 1\n13 18 2\n18 23 3\n2 7 2\n25 30 1\n29 34 1\n43 48 1\n45 50 1\n", "29 5\n5 10 3\n15 22 2\n18 27 4\n16 20 4\n7 11 1\n", "4 2\n1 4 1\n1 2 1\n", "100 2\n39 43 1\n82 86 3\n", "10 2\n1 10 4\n2 4 2\n", "9 4\n3 7 1\n6 9 1\n2 3 1\n1 8 2\n", "6 2\n1 5 2\n2 3 1\n", "100 38\n41 43 1\n53 55 2\n91 93 2\n47 49 2\n77 79 2\n5 7 2\n2 4 2\n28 30 1\n79 81 1\n42 44 1\n27 29 1\n95 97 2\n58 60 1\n57 59 1\n61 63 2\n33 35 2\n22 24 1\n44 46 1\n10 12 2\n13 15 1\n97 99 1\n37 39 3\n18 20 1\n50 52 2\n21 23 1\n68 70 2\n83 85 1\n71 73 2\n65 67 1\n64 66 1\n15 17 1\n7 9 1\n88 90 2\n30 32 1\n74 76 1\n24 26 1\n85 87 1\n82 84 1\n", "88 8\n1 5 2\n29 50 7\n36 42 6\n72 81 2\n12 19 4\n65 73 2\n15 80 29\n4 43 16\n", "34 17\n1 2 1\n6 12 4\n22 23 1\n5 6 1\n8 30 9\n2 7 2\n22 26 3\n3 34 31\n1 19 9\n4 11 7\n2 5 1\n4 9 3\n8 14 4\n2 22 14\n3 8 5\n32 33 1\n18 31 10\n", "10 2\n1 10 5\n2 3 1\n", "100 35\n52 55 1\n55 58 1\n69 72 1\n32 35 1\n9 12 3\n68 71 1\n78 81 3\n51 54 1\n56 59 1\n63 66 3\n4 7 2\n12 15 2\n74 77 1\n87 90 3\n72 75 1\n93 96 2\n39 42 2\n15 18 1\n92 95 1\n23 26 4\n83 86 2\n28 31 2\n58 61 1\n47 50 1\n46 49 2\n31 34 1\n82 85 1\n96 99 2\n38 41 1\n41 44 1\n5 8 1\n34 37 1\n19 22 3\n27 30 1\n67 70 1\n", "3 1\n1 3 2\n", "100 1\n1 100 99\n", "100 43\n76 77 1\n24 25 1\n2 3 1\n85 86 1\n49 50 1\n15 16 1\n30 31 1\n78 79 1\n54 55 1\n58 59 1\n17 18 1\n67 68 1\n21 22 1\n80 81 1\n35 36 1\n8 9 1\n83 84 1\n44 45 1\n62 63 1\n64 65 1\n72 73 1\n27 28 1\n56 57 1\n12 13 1\n40 41 1\n32 33 1\n52 53 1\n70 71 1\n97 98 1\n37 38 1\n87 88 1\n46 47 1\n89 90 1\n4 5 1\n94 95 1\n60 61 1\n99 100 1\n10 11 1\n74 75 1\n6 7 1\n91 92 1\n19 20 1\n42 43 1\n", "30 7\n1 4 1\n22 25 1\n25 28 2\n9 12 1\n13 16 1\n11 14 1\n14 17 1\n", "100 1\n1 100 100\n", "10 4\n1 10 2\n1 4 2\n2 5 1\n7 8 1\n", "50 5\n7 23 7\n4 12 4\n7 46 14\n15 32 8\n16 24 2\n", "73 2\n33 35 2\n12 63 44\n", "85 5\n3 44 9\n77 85 7\n3 27 8\n5 42 4\n4 7 1\n", "10 2\n1 10 7\n3 7 1\n", "6 2\n1 6 3\n1 2 1\n", "10 2\n1 10 7\n2 3 1\n", "9 2\n3 7 2\n1 9 5\n", "100 36\n2 5 2\n35 38 1\n55 58 2\n40 43 3\n73 76 2\n30 33 3\n87 90 3\n93 96 1\n97 100 1\n42 45 1\n44 47 1\n66 69 3\n95 98 1\n12 15 3\n47 50 1\n72 75 1\n57 60 2\n1 4 1\n8 11 3\n15 18 1\n22 25 2\n76 79 2\n82 85 1\n91 94 2\n83 86 2\n33 36 1\n62 65 3\n26 29 3\n18 21 1\n36 39 1\n68 71 1\n50 53 1\n51 54 1\n4 7 1\n17 20 1\n78 81 1\n", "100 5\n15 53 23\n16 85 32\n59 93 3\n54 57 1\n13 40 11\n", "50 16\n42 44 2\n18 20 2\n10 12 1\n9 11 2\n25 27 1\n45 47 1\n12 14 1\n29 31 2\n4 6 1\n46 48 1\n32 34 2\n34 36 1\n48 50 1\n21 23 1\n15 17 2\n24 26 1\n", "6 3\n1 5 1\n1 6 1\n1 2 1\n", "10 3\n4 8 2\n1 10 3\n5 6 1\n", "100 36\n2 5 2\n35 38 1\n55 58 2\n40 43 3\n73 76 2\n30 33 3\n87 90 3\n93 96 1\n97 100 1\n42 45 1\n44 47 1\n66 69 3\n95 98 1\n12 15 3\n47 50 1\n72 75 1\n57 60 2\n1 4 1\n8 11 3\n15 18 1\n22 25 2\n76 79 2\n82 85 1\n91 94 2\n83 86 2\n33 36 1\n62 65 3\n26 29 3\n18 21 1\n36 39 1\n68 71 1\n50 53 2\n51 54 1\n4 7 1\n17 20 1\n78 81 1\n", "96 37\n9 43 23\n60 66 4\n7 15 1\n3 86 4\n30 65 14\n36 38 1\n28 36 8\n68 80 4\n7 22 5\n17 68 1\n7 18 1\n12 47 2\n4 6 2\n5 11 3\n41 55 10\n7 45 22\n6 67 16\n12 50 18\n64 70 2\n21 48 26\n2 17 6\n14 44 10\n63 84 18\n14 19 5\n34 92 56\n51 56 2\n13 20 5\n62 74 2\n1 3 1\n6 46 17\n58 62 4\n10 27 16\n13 37 16\n21 23 1\n48 69 13\n67 82 13\n17 51 18\n", "100 35\n52 55 1\n55 58 1\n69 72 1\n32 35 1\n9 12 3\n68 71 1\n78 81 3\n51 54 1\n56 59 1\n63 66 3\n4 7 2\n12 15 2\n74 77 1\n87 90 3\n72 75 1\n93 96 2\n39 42 2\n15 18 1\n92 95 1\n23 26 3\n83 86 2\n28 31 2\n58 61 1\n47 50 1\n46 49 2\n31 34 1\n82 85 1\n96 99 2\n38 41 1\n41 44 1\n5 8 1\n34 37 1\n19 22 3\n27 30 1\n67 70 1\n", "3 1\n1 2 2\n", "20 5\n6 16 3\n4 14 4\n3 13 1\n1 11 1\n10 20 4\n", "88 1\n1 2 1\n", "10 2\n1 10 6\n3 7 1\n", "31 3\n2 3 1\n1 12 4\n13 15 1\n", "90 30\n1 5 1\n57 61 3\n13 17 1\n60 64 1\n73 77 2\n5 9 2\n16 20 3\n29 33 4\n83 87 3\n63 67 2\n35 39 4\n18 22 1\n42 46 4\n46 50 2\n48 52 2\n23 27 1\n82 86 1\n77 81 3\n67 71 2\n22 26 2\n37 41 1\n6 10 1\n50 54 1\n8 12 1\n86 90 1\n68 72 1\n11 15 1\n72 76 1\n62 66 1\n52 56 1\n", "8 2\n3 8 2\n4 5 1\n", "50 14\n42 44 2\n38 40 1\n6 8 2\n37 39 1\n33 35 1\n17 19 2\n12 14 2\n2 4 1\n9 11 2\n1 3 1\n32 34 1\n24 26 1\n44 46 1\n48 50 1\n"], "output": ["12 12 38 24 24 38 0 10 10 38 15 15 38 22 38 0 7 7 38 25 38 35 38 9 29 38 38 37 38 0 5 5 38 33 32 38 38 11 20 38 38 6 28 38 38 3 3 38 1 1 38 14 14 38 0 19 19 38 0 18 34 38 38 8 8 38 23 23 38 0 4 4 38 0 13 13 38 0 2 2 38 31 38 36 38 27 16 38 38 0 26 21 38 38 30 38 0 17 17 38\n", "14 14 22 22 22 22 0 23 23 1 1 1 1 1 1 12 23 12 19 19 23 23 15 2 2 2 2 2 2 23 23 18 23 21 7 7 7 7 23 13 23 5 5 5 5 5 23 0 23 17 17 9 9 9 9 9 23 23 16 4 4 4 4 4 4 23 23 6 6 6 6 6 8 23 8 8 23 0 3 3 3 3 3 3 3 23 10 10 23 11 11 11 11 11 20 23 23\n", "0 0 8 8 8 8 1 1 8 9 8 8 8 8 8 8 8 3 3 9 8 8 4 4 0 0 2 9 6 6 0 9 0 0 0 0 7 7 7 9 7 7 7 7 7 7 7 9 7 7 7 7 7 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 9 5 5 5 5 5 5 5 5 5 0 9 0 0 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 4 4 3 3 3 3 3 3 3 2 2 2 3 6 6 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 1 0 0 0 0 0 5 0 6 0 0 0 6 0 0 0 0 0 0 6 0\n", "1 2\n", "-1\n", "1 2 3 1 1 0 3\n", "1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "1 2 1 3 1 1 1 0 0 3\n", "0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3\n", "-1\n", "4 2 2 1 1 1 1 7 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 5 3 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 5 5 5 5 5 5 5 5 6 6 6 6 0 0 7 7 0 0 0 0 0 0\n", "0 0 1 1 1 1 3 2 0 3\n", "0 7 7 39 6 6 39 32 39 19 19 39 20 0 39 31 39 23 0 39 25 17 39 39 36 39 11 8 39 39 34 39 16 16 39 0 22 22 39 0 1 10 39 39 18 39 4 4 39 24 24 39 2 2 39 0 14 13 39 39 15 15 39 30 29 39 39 26 26 39 28 28 39 35 0 39 5 5 39 9 39 38 27 39 39 37 39 33 33 39 3 3 39 0 12 12 39 21 39 0\n", "2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3\n", "-1\n", "3 0 2 1 1 1 1 5 5 5 6 4 6 6 4 6 4 4 0 6\n", "0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 7 4 4 4 5 5 5 5 7 5 5 5 5 7 5 5 5 5 6 6 0 7 7\n", "1 1 1 2 2 2 2 3 1 1 3\n", "-1\n", "0 3 0 5 1 1 1 1 1 1 2 5 1 1 1 1 1 4 0 0 0 0 5 5 0 0 0 0\n", "2 2 1 5 5 3 5 4 4 5\n", "2 2 2 2 2 2 2 3 3 2 2 2 2 2 2 2 1 1 1 2 4 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "0 2 1 3 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 0 0 0 0 5 4 4 4 4 4 4 4 4 4 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 2 2 2 2 5 2 2 2 2 0 5 0 0 0 0 0 0 0 0 0 0 0\n", "-1\n", "-1\n", "-1\n", "-1\n", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2\n", "1 2 3 1 3\n", "7 0 6 6 0 8 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 8 0 0 0 3 3 3 4 5 8 5 5 8 8 1 1 1 1 0 8\n", "5 5 5 11 11 16 16 0 8 4 4 7 9 16 16 16 9 16 10 10 10 6 16 0 16 12 3 3 3 16 13 16 0 16 2 2 2 2 2 16 1 1 1 1 1 16 14 16 15 16\n", "0 0 0 0 1 1 1 5 0 6 6 0 0 0 2 4 4 4 4 6 2 6 3 3 3 3 6 0 0\n", "2 3 1 3\n", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "1 2 2 3 1 1 1 0 0 3\n", "4 3 5 1 4 2 5 5 5\n", "1 2 3 1 3 0\n", "-1\n", "1 1 0 8 9 8 8 8 8 8 8 5 5 5 5 8 8 8 9 8 8 8 8 8 8 7 7 7 2 2 2 2 2 2 2 3 3 3 3 3 3 9 9 7 7 7 7 7 7 9 7 7 7 7 7 7 7 7 7 7 7 7 7 7 6 6 7 7 7 7 7 7 9 4 4 0 0 0 0 9 9 0 0 0 0 0 0 0\n", "-1\n", "1 2 3 1 1 1 1 0 0 3\n", "-1\n", "1 1 2\n", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2\n", "0 3 44 34 44 40 44 16 44 38 44 24 44 0 6 44 11 44 42 44 13 44 0 2 44 0 22 44 0 7 44 26 44 0 15 44 30 44 0 25 44 43 44 18 44 32 44 0 5 44 0 27 44 9 44 23 44 10 44 36 44 19 44 20 44 0 12 44 0 28 44 21 44 39 44 1 44 8 44 14 44 0 17 44 4 44 31 44 33 44 41 44 0 35 44 0 29 44 37 44\n", "1 0 0 8 0 0 0 0 4 0 6 8 5 8 7 8 8 0 0 0 0 2 0 0 8 3 3 8 0 0\n", "-1\n", "2 2 3 5 5 1 4 5 1 5\n", "0 0 0 2 2 2 2 1 1 1 1 6 1 1 1 5 5 4 4 4 4 4 6 6 4 4 4 3 3 3 3 6 3 3 3 3 3 3 3 3 3 3 0 0 0 6 0 0 0 0\n", "0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0\n", "0 0 3 5 3 3 6 3 3 3 3 3 4 4 4 4 1 1 1 1 1 1 1 1 1 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 0 6\n", "1 1 2 1 1 1 3 1 1 3\n", "2 3 1 1 1 3\n", "1 2 3 1 1 1 1 1 1 3\n", "2 2 1 1 2 2 3 2 3\n", "18 1 1 37 37 34 37 19 19 19 37 14 14 14 37 20 35 37 29 37 37 21 21 0 37 28 28 28 37 6 6 6 37 26 2 37 30 37 37 4 4 4 37 10 37 11 37 15 0 37 32 33 37 37 3 3 17 37 17 37 0 27 27 27 37 12 12 12 37 31 37 16 5 5 37 37 22 22 37 36 37 23 25 25 37 37 7 7 7 37 24 24 8 37 13 37 9 37 0 37\n", "0 0 0 0 0 0 0 0 0 0 0 0 5 5 5 5 5 5 5 5 5 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1 2 2 2 2 2 6 4 2 2 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 6 3 0 0 0 0 0 0 6 0 0 0 0 0 0 0\n", "-1\n", "3 4 1 2 4 4\n", "2 2 2 1 3 4 1 4 0 4\n", "-1\n", "-1\n", "0 0 0 11 11 31 36 36 5 5 5 36 12 12 36 18 0 36 33 33 33 36 20 20 20 36 34 22 22 36 36 26 4 36 36 32 36 29 17 17 36 36 30 36 0 25 25 24 36 36 8 1 0 36 36 2 9 36 36 23 36 0 10 10 10 36 35 6 3 36 36 36 15 13 36 0 36 7 7 7 36 27 21 21 36 36 14 14 14 36 0 19 16 16 36 36 28 28 36 0\n", "-1\n", "4 0 3 2 2 2 2 1 1 1 6 5 6 6 5 6 5 5 0 6\n", "1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "1 1 2 1 1 1 3 1 0 3\n", "2 1 4 2 2 2 0 0 0 0 0 4 3 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "1 0 0 0 31 6 6 22 31 31 24 31 27 3 31 7 31 7 7 31 12 31 20 20 16 31 31 0 8 8 8 8 31 0 11 11 11 11 31 21 31 13 13 13 13 31 14 14 15 31 15 31 23 31 30 31 2 2 2 4 31 29 10 31 10 31 31 19 19 26 31 31 28 5 5 31 31 18 18 18 31 17 9 9 9 31 31 25 0 31\n", "0 0 1 2 3 1 0 3\n", "10 8 15 15 0 3 3 15 9 9 15 7 7 15 0 0 6 6 15 0 0 0 0 12 0 15 0 0 0 0 0 11 5 15 15 0 4 2 15 15 0 1 1 15 13 15 0 14 0 15 \n"]}, "index": 98}, {"input": "Mishka started participating in a programming contest. There are n problems in the contest. Mishka's problem-solving skill is equal to k.\n\nMishka arranges all problems from the contest into a list. Because of his weird principles, Mishka only solves problems from one of the ends of the list. Every time, he chooses which end (left or right) he will solve the next problem from. Thus, each problem Mishka solves is either the leftmost or the rightmost problem in the list.\n\nMishka cannot solve a problem with difficulty greater than k. When Mishka solves the problem, it disappears from the list, so the length of the list decreases by 1. Mishka stops when he is unable to solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nInput\n\nThe first line of input contains two integers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.\n\nOutput\n\nPrint one integer \u2014 the maximum number of problems Mishka can solve.\n\n", "output": "n,k=map(int,input().split())\nprint(n-len(''.join(' o'[int(x)>k]for x in input().split()).strip()))\n", "public_tests": {"input": ["5 2\n3 1 2 1 3\n", "8 4\n4 2 3 1 5 1 6 4\n", "5 100\n12 34 55 43 21\n"], "output": ["0\n", "5\n", "5\n"]}, "private_tests": {"input": ["100 3\n86 53 82 40 2 20 59 2 46 63 75 49 24 81 70 22 9 9 93 72 47 23 29 77 78 51 17 59 19 71 35 3 20 60 70 9 11 96 71 94 91 19 88 93 50 49 72 19 53 30 38 67 62 71 81 86 5 26 5 32 63 98 1 97 22 32 87 65 96 55 43 85 56 37 56 67 12 100 98 58 77 54 18 20 33 53 21 66 24 64 42 71 59 32 51 69 49 79 10 1\n", "100 49\n71 25 14 36 36 48 36 49 28 40 49 49 49 38 40 49 33 22 49 49 14 46 8 44 49 11 37 49 40 49 2 49 3 49 37 49 49 11 25 49 49 32 49 11 49 30 16 21 49 49 23 24 30 49 49 49 49 49 49 27 49 42 49 49 20 32 30 29 35 49 30 49 9 49 27 25 5 49 49 42 49 20 49 35 49 22 15 49 49 49 19 49 29 28 13 49 22 7 6 24\n", "100 51\n51 51 38 51 51 45 51 51 51 18 51 36 51 19 51 26 37 51 11 51 45 34 51 21 51 51 33 51 6 51 51 51 21 47 51 13 51 51 30 29 50 51 51 51 51 51 51 45 14 51 2 51 51 23 9 51 50 23 51 29 34 51 40 32 1 36 31 51 11 51 51 47 51 51 51 51 51 51 51 50 39 51 14 4 4 12 3 11 51 51 51 51 41 51 51 51 49 37 5 93\n", "100 50\n43 50 50 91 97 67 6 50 86 50 76 60 50 59 4 56 11 38 49 50 37 50 50 20 60 47 33 54 95 58 22 50 77 77 72 9 57 40 81 57 95 50 81 63 62 76 13 87 50 39 74 69 50 99 63 1 11 62 84 31 97 99 56 73 70 36 45 100 28 91 93 9 19 52 73 50 83 58 84 52 86 12 50 44 64 52 97 50 12 71 97 52 87 66 83 66 86 50 9 49\n", "100 69\n80 31 12 89 16 35 8 28 39 12 32 51 42 67 64 53 17 88 63 97 29 41 57 28 51 33 82 75 93 79 57 86 32 100 83 82 99 33 1 27 86 22 65 15 60 100 42 37 38 85 26 43 90 62 91 13 1 92 16 20 100 19 28 30 23 6 5 69 24 22 9 1 10 14 28 14 25 9 32 8 67 4 39 7 10 57 15 7 8 35 62 6 53 59 62 13 24 7 53 2\n", "100 2\n2 2 2 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 2 1 1 2 2 2 1 1 1 2 2 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 2 16\n", "100 99\n84 82 43 4 71 3 30 92 15 47 76 43 2 17 76 4 1 33 24 96 44 98 75 99 59 11 73 27 67 17 8 88 69 41 44 22 91 48 4 46 42 21 21 67 85 51 57 84 11 100 100 59 39 72 89 82 74 19 98 14 37 97 20 78 38 52 44 83 19 83 69 32 56 6 93 13 98 80 80 2 33 71 11 15 55 51 98 58 16 91 39 32 83 58 77 79 88 81 17 98\n", "7 4\n4 2 3 4 4 2 3\n", "1 5\n1\n", "100 90\n57 90 90 90 90 90 90 90 81 90 3 90 39 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 92 90 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90 90 90 90 90 90 90 54 90 90 90 90 90 62 90 90 91 90 90 90 90 90 90 91 90 90 90 90 90 90 90 3 90 90 90 90 90 90 90 2 90 90 90 90 90 90 90 90 90 2 90 90 90 90 90\n", "1 6\n3\n", "100 48\n8 6 23 47 29 48 48 48 48 48 48 26 24 48 48 48 3 48 27 28 41 45 9 29 48 48 48 48 48 48 48 48 48 48 47 23 48 48 48 5 48 22 40 48 48 48 20 48 48 57 48 32 19 48 33 2 4 19 48 48 39 48 16 48 48 44 48 48 48 48 29 14 25 43 46 7 48 19 30 48 18 8 39 48 30 47 35 18 48 45 48 48 30 13 48 48 48 17 9 48\n", "1 1\n1\n", "1 10\n5\n", "1 2\n1\n", "2 1\n1 1\n", "5 3\n3 4 3 2 1\n", "1 5\n4\n", "1 4\n2\n", "2 8\n8 8\n", "5 5\n1 1 1 1 1\n", "100 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 78 90 61 40 87 39 91 50 64 30 10 24 10 55 28 11 28 35 26 26 10 57 45 67 14 99 96 51 67 79 59 11 21 55 70 33 10 16 92 70 38 50 66 52 5 10 10 10 2 4 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 10 10 10 10 8 10 10 10 10 10\n", "100 50\n80 39 33 69 75 50 23 88 50 50 67 90 87 50 29 15 55 32 60 50 50 50 38 95 62 50 50 88 8 97 45 50 42 12 22 93 49 50 24 50 50 71 60 4 50 72 57 57 50 50 50 83 69 17 1 31 72 55 50 11 50 80 93 41 91 94 20 60 50 50 51 48 53 56 76 73 50 72 19 98 50 50 50 50 50 28 48 45 62 11 16 67 93 88 63 50 50 66 48 95\n", "100 10\n10 2 10 10 10 10 10 10 10 7 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 7 9 10 10 10 37 10 4 10 10 10 59 5 95 10 10 10 10 39 10 10 10 10 10 10 10 5 10 10 10 10 10 10 10 10 10 10 10 10 66 10 10 10 10 10 5 10 10 10 10 10 10 44 10 10 10 10 10 10 10 10 10 10 10 7 10 10 10 10 10 10 10 10 10 2\n", "100 90\n17 16 5 51 17 62 24 45 49 41 90 30 19 78 67 66 59 34 28 47 42 8 33 77 90 41 61 16 86 33 43 71 90 95 23 9 56 41 24 90 31 12 77 36 90 67 47 15 92 50 79 88 42 19 21 79 86 60 41 26 47 4 70 62 44 90 82 89 84 91 54 16 90 53 29 69 21 44 18 28 88 74 56 43 12 76 10 22 34 24 27 52 28 76 90 75 5 29 50 90\n", "1 5\n5\n", "100 100\n44 47 36 83 76 94 86 69 31 2 22 77 37 51 10 19 25 78 53 25 1 29 48 95 35 53 22 72 49 86 60 38 13 91 89 18 54 19 71 2 25 33 65 49 53 5 95 90 100 68 25 5 87 48 45 72 34 14 100 44 94 75 80 26 25 7 57 82 49 73 55 43 42 60 34 8 51 11 71 41 81 23 20 89 12 72 68 26 96 92 32 63 13 47 19 9 35 56 79 62\n", "100 10\n6 4 8 4 1 9 4 8 5 2 2 5 2 6 10 2 2 5 3 5 2 3 10 5 2 9 1 1 6 1 5 9 16 42 33 49 26 31 81 27 53 63 81 90 55 97 70 51 87 21 79 62 60 91 54 95 26 26 30 61 87 79 47 11 59 34 40 82 37 40 81 2 7 1 8 4 10 7 1 10 8 7 3 5 2 8 3 3 9 2 1 1 5 7 8 7 1 10 9 8\n", "1 2\n100\n", "100 50\n38 68 9 6 50 18 19 50 50 20 33 34 43 50 24 50 50 2 50 50 50 50 50 21 30 50 41 40 50 50 50 50 50 7 50 21 19 23 1 50 24 50 50 50 25 50 50 50 50 50 50 50 7 24 28 18 50 5 43 50 20 50 13 50 50 16 50 3 2 24 50 50 18 5 50 4 50 50 38 50 33 49 12 33 11 14 50 50 50 33 50 50 50 50 50 50 7 4 50 50\n", "6 6\n7 1 1 1 1 1\n", "1 2\n15\n", "3 2\n1 4 1\n", "100 50\n50 37 28 92 7 76 50 50 50 76 100 57 50 50 50 32 76 50 8 72 14 8 50 91 67 50 55 82 50 50 24 97 88 50 59 61 68 86 44 15 61 67 88 50 40 50 36 99 1 23 63 50 88 59 76 82 99 76 68 50 50 30 31 68 57 98 71 12 15 60 35 79 90 6 67 50 50 50 50 68 13 6 50 50 16 87 84 50 67 67 50 64 50 58 50 50 77 51 50 51\n", "100 10\n2 5 1 10 10 2 7 7 9 4 1 8 1 1 8 4 7 9 10 5 7 9 5 6 7 2 7 5 3 2 1 82 4 80 9 8 6 1 10 7 5 7 1 5 6 7 19 4 2 4 6 2 1 8 31 6 2 2 57 42 3 2 7 1 9 5 10 8 5 4 10 8 3 5 8 7 2 7 6 5 3 3 4 10 6 7 10 8 7 10 7 2 4 6 8 10 10 2 6 4\n", "5 5\n6 5 5 5 5\n", "88 10\n10 8 1 10 10 1 3 7 10 5 8 8 10 2 7 10 10 10 10 10 1 10 10 10 10 1 2 9 10 9 10 10 10 64 100 25 10 12 9 52 13 8 10 56 10 4 10 7 10 3 10 79 74 8 73 10 10 10 9 10 3 5 10 10 10 5 1 10 10 4 3 10 10 10 4 10 6 4 10 10 10 10 3 3 8 5 6 8\n", "100 90\n90 90 90 90 90 90 55 21 90 90 90 90 90 90 90 90 90 90 69 83 90 90 90 90 90 90 90 90 93 95 92 98 92 97 91 92 92 91 91 95 94 95 100 100 96 97 94 93 90 90 95 95 97 99 90 95 98 91 94 96 99 99 94 95 95 97 99 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 12 90 3 90 90 90 90 90 90 90\n", "1 1\n2\n", "100 57\n57 9 57 4 43 57 57 57 57 26 57 18 57 57 57 57 57 57 57 47 33 57 57 43 57 57 55 57 14 57 57 4 1 57 57 57 57 57 46 26 57 57 57 57 57 57 57 39 57 57 57 5 57 12 11 57 57 57 25 37 34 57 54 18 29 57 39 57 5 57 56 34 57 24 7 57 57 57 2 57 57 57 57 1 55 39 19 57 57 57 57 21 3 40 13 3 57 57 62 57\n", "9 4\n1 2 1 2 4 2 1 2 1\n", "13 7\n1 1 1 1 1 1 1 1 1 1 1 1 1\n", "100 50\n87 91 95 73 50 50 16 97 39 24 58 50 33 89 42 37 50 50 12 71 3 55 50 50 80 10 76 50 52 36 88 44 66 69 86 71 77 50 72 50 21 55 50 50 78 61 75 89 65 2 50 69 62 47 11 92 97 77 41 31 55 29 35 51 36 48 50 91 92 86 50 36 50 94 51 74 4 27 55 63 50 36 87 50 67 7 65 75 20 96 88 50 41 73 35 51 66 21 29 33\n", "100 50\n70 50 38 50 38 50 32 30 50 31 26 42 50 33 34 50 50 50 28 21 50 44 50 47 50 50 9 40 50 50 50 50 50 42 50 50 16 50 50 3 24 50 50 50 4 26 50 2 50 50 33 1 27 50 50 50 8 29 50 23 33 50 6 29 50 50 15 50 50 50 32 50 43 50 50 50 31 50 4 50 50 31 50 50 31 16 50 17 50 17 31 13 25 16 50 10 50 47 50 66\n", "100 90\n45 57 52 69 17 81 85 60 59 39 55 14 87 90 90 31 41 57 35 89 74 20 53 4 33 49 71 11 46 90 71 41 71 90 63 74 51 13 99 92 99 91 100 97 93 40 93 96 100 99 100 92 98 96 78 91 91 91 91 100 94 97 95 97 96 95 17 13 45 35 54 26 2 74 6 51 20 3 73 90 90 42 66 43 86 28 84 70 37 27 90 30 55 80 6 58 57 51 10 22\n"], "output": ["1\n", "99\n", "99\n", "6\n", "39\n", "99\n", "98\n", "7\n", "1\n", "60\n", "1\n", "99\n", "1\n", "1\n", "1\n", "2\n", "4\n", "1\n", "1\n", "2\n", "5\n", "56\n", "0\n", "52\n", "63\n", "1\n", "100\n", "61\n", "0\n", "99\n", "5\n", "0\n", "2\n", "3\n", "71\n", "4\n", "66\n", "61\n", "0\n", "99\n", "9\n", "13\n", "3\n", "0\n", "72\n"]}, "index": 99}]
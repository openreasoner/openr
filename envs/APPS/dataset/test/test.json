[{"index": 4000, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given an unweighted tree with $n$ vertices. Recall that a tree is a connected undirected graph without cycles.\n\nYour task is to choose three distinct vertices $a, b, c$ on this tree such that the number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$ is the maximum possible. See the notes section for a better understanding.\n\nThe simple path is the path that visits each vertex at most once.\n\n\n-----Input-----\n\nThe first line contains one integer number $n$ ($3 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree. \n\nNext $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \\le a_i$, $b_i \\le n$, $a_i \\ne b_i$). It is guaranteed that given graph is a tree.\n\n\n-----Output-----\n\nIn the first line print one integer $res$ \u2014 the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.\n\nIn the second line print three integers $a, b, c$ such that $1 \\le a, b, c \\le n$ and $a \\ne, b \\ne c, a \\ne c$.\n\nIf there are several answers, you can print any.\n\n\n-----Example-----\nInput\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n\nOutput\n5\n1 8 6\n\n\n\n-----Note-----\n\nThe picture corresponding to the first example (and another one correct answer):\n\n[Image]\n\nIf you choose vertices $1, 5, 6$ then the path between $1$ and $5$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 5)$, the path between $1$ and $6$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 6)$ and the path between $5$ and $6$ consists of edges $(4, 5), (4, 6)$. The union of these paths is $(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)$ so the answer is $5$. It can be shown that there is no better answer.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n", "5\n3 2\n3 5\n2 4\n1 3\n", "4\n1 2\n2 3\n3 4\n", "6\n1 2\n1 3\n2 4\n2 5\n3 6\n", "4\n4 3\n3 1\n1 2\n", "3\n1 2\n1 3\n", "3\n1 2\n1 3\n", "3\n3 1\n1 2\n", "3\n1 3\n1 2\n", "3\n1 2\n1 3\n", "3\n1 2\n1 3\n", "3\n3 1\n3 2\n", "3\n1 3\n2 1\n", "3\n1 3\n1 2\n", "3\n3 1\n2 1\n", "3\n1 2\n1 3\n", "3\n2 1\n3 1\n", "3\n2 3\n3 1\n", "3\n1 3\n3 2\n", "3\n1 3\n1 2\n", "3\n3 2\n1 3\n", "3\n1 2\n3 1\n", "3\n1 2\n1 3\n", "3\n3 2\n2 1\n", "3\n3 2\n3 1\n", "3\n1 2\n2 3\n", "3\n3 1\n3 2\n", "3\n2 3\n1 3\n", "3\n1 2\n3 2\n", "3\n3 2\n3 1\n", "3\n3 2\n1 2\n", "3\n2 3\n2 1\n", "3\n3 2\n1 3\n", "3\n2 3\n3 1\n", "3\n2 3\n2 1\n", "3\n1 2\n2 3\n", "3\n2 3\n3 1\n", "3\n3 2\n3 1\n", "3\n2 3\n2 1\n", "3\n2 3\n3 1\n", "4\n1 3\n1 2\n1 4\n", "4\n1 3\n3 4\n2 3\n", "4\n1 2\n1 3\n1 4\n", "4\n1 4\n1 3\n2 1\n", "4\n4 1\n1 2\n3 1\n", "4\n3 1\n4 1\n2 1\n", "4\n4 1\n1 2\n1 3\n", "4\n1 4\n3 1\n1 2\n", "4\n1 3\n4 1\n3 2\n", "4\n1 4\n3 4\n1 2\n", "4\n2 1\n1 4\n2 3\n", "4\n4 1\n3 1\n1 2\n", "4\n2 1\n3 1\n4 1\n", "4\n1 3\n1 4\n3 2\n", "4\n4 1\n1 2\n3 1\n", "4\n4 1\n4 2\n3 1\n", "4\n1 4\n3 2\n3 4\n", "4\n3 2\n1 2\n4 1\n", "4\n2 1\n1 4\n2 3\n", "4\n3 4\n2 4\n3 1\n", "4\n1 4\n3 4\n2 4\n", "4\n3 1\n2 3\n2 4\n", "4\n2 3\n1 2\n1 4\n", "4\n4 1\n2 3\n1 3\n", "4\n2 1\n2 3\n4 3\n", "4\n4 1\n2 4\n1 3\n", "4\n4 2\n1 3\n3 4\n", "4\n2 3\n4 2\n1 3\n", "4\n2 3\n1 4\n4 2\n", "4\n3 4\n2 4\n1 4\n", "4\n2 3\n3 1\n2 4\n", "4\n2 3\n4 1\n4 3\n", "4\n2 3\n3 1\n4 2\n", "4\n2 1\n4 3\n3 2\n", "4\n4 1\n4 2\n3 4\n", "5\n1 3\n3 2\n5 1\n1 4\n", "5\n1 3\n1 2\n4 1\n1 5\n", "5\n1 5\n4 1\n1 2\n1 3\n", "5\n1 2\n1 4\n5 1\n1 3\n", "5\n2 1\n3 1\n4 1\n5 1\n", "5\n5 1\n4 2\n4 1\n1 3\n", "5\n3 1\n2 1\n1 5\n4 1\n", "5\n1 5\n3 1\n1 4\n2 1\n", "5\n2 3\n1 5\n4 1\n3 1\n", "5\n1 2\n4 1\n3 1\n1 5\n", "5\n5 4\n1 4\n1 2\n3 4\n", "5\n5 1\n5 4\n4 3\n1 2\n", "5\n2 4\n4 1\n1 3\n1 5\n", "5\n3 1\n2 1\n1 5\n1 4\n", "5\n1 4\n2 1\n5 1\n5 3\n", "5\n1 5\n3 4\n2 3\n1 3\n", "5\n2 5\n5 3\n1 3\n2 4\n", "5\n3 1\n5 1\n2 1\n4 2\n", "5\n1 3\n5 3\n2 1\n1 4\n", "5\n3 5\n3 1\n2 1\n4 3\n", "5\n2 3\n2 1\n1 5\n4 2\n", "5\n5 2\n4 5\n1 2\n3 5\n", "5\n5 3\n2 4\n1 2\n4 3\n", "5\n4 1\n1 5\n3 5\n2 5\n", "5\n5 3\n4 2\n1 2\n2 5\n", "5\n5 1\n2 3\n5 4\n3 5\n", "5\n4 5\n1 5\n2 5\n2 3\n", "5\n5 1\n4 2\n5 4\n3 5\n", "5\n1 5\n2 3\n2 5\n3 4\n", "5\n2 3\n4 1\n5 4\n5 2\n", "5\n5 4\n2 3\n2 5\n1 3\n", "5\n5 4\n5 2\n1 3\n4 3\n", "5\n2 5\n2 1\n3 2\n4 3\n", "5\n4 5\n2 1\n3 2\n5 3\n", "5\n5 2\n4 3\n1 2\n2 4\n", "6\n4 2\n5 1\n6 1\n2 1\n1 3\n", "6\n2 1\n1 4\n1 6\n1 3\n5 1\n", "6\n5 1\n1 4\n2 3\n1 6\n1 3\n", "6\n1 5\n1 3\n6 1\n4 1\n1 2\n", "6\n1 2\n5 3\n3 4\n1 3\n6 3\n", "6\n2 4\n4 1\n4 3\n5 4\n1 6\n", "6\n2 1\n5 1\n1 4\n6 1\n1 3\n", "6\n1 3\n5 1\n2 4\n1 2\n1 6\n", "6\n1 5\n1 6\n4 1\n1 2\n3 1\n", "6\n5 6\n4 1\n3 1\n6 1\n2 6\n", "6\n6 1\n5 4\n1 3\n1 5\n5 2\n", "6\n1 6\n6 3\n4 3\n5 6\n2 1\n", "6\n2 3\n1 6\n1 3\n1 4\n5 6\n", "6\n5 1\n3 1\n4 1\n1 6\n2 6\n", "6\n2 1\n1 6\n3 1\n4 2\n2 5\n"], "outputs": ["5\n1 8 6\n", "4\n5 1 4\n", "3 \n1 2 4\n", "5\n5 4 6\n", "3 \n2 1 4\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n1 3 2\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n1 3 2\n", "2 \n1 3 2\n", "2 \n2 1 3\n", "2 \n1 3 2\n", "2 \n2 1 3\n", "2 \n2 1 3\n", "2 \n1 2 3\n", "2 \n1 3 2\n", "2 \n1 2 3\n", "2 \n1 3 2\n", "2 \n1 3 2\n", "2 \n1 2 3\n", "2 \n1 3 2\n", "2 \n1 2 3\n", "2 \n1 2 3\n", "2 \n1 3 2\n", "2 \n1 3 2\n", "2 \n1 2 3\n", "2 \n1 2 3\n", "2 \n1 3 2\n", "2 \n1 3 2\n", "2 \n1 2 3\n", "2 \n1 3 2\n", "3\n3 2 4\n", "3\n2 1 4\n", "3\n3 2 4\n", "3\n3 2 4\n", "3\n3 2 4\n", "3\n3 2 4\n", "3\n3 2 4\n", "3\n3 2 4\n", "3 \n4 1 2\n", "3 \n2 1 3\n", "3 \n4 1 3\n", "3\n3 2 4\n", "3\n3 2 4\n", "3 \n4 1 2\n", "3\n3 2 4\n", "3 \n3 1 2\n", "3 \n1 4 2\n", "3 \n4 1 3\n", "3 \n4 1 3\n", "3 \n1 3 2\n", "3\n2 1 3\n", "3 \n1 3 4\n", "3 \n4 1 3\n", "3 \n4 1 2\n", "3 \n1 2 4\n", "3 \n3 1 2\n", "3 \n1 3 2\n", "3 \n1 3 4\n", "3 \n1 4 3\n", "3\n2 1 3\n", "3 \n1 3 4\n", "3 \n1 4 2\n", "3 \n1 3 4\n", "3 \n1 2 4\n", "3\n2 1 3\n", "4\n5 4 2\n", "3\n4 3 5\n", "3\n4 3 5\n", "3\n4 3 5\n", "3\n4 3 5\n", "4\n5 3 2\n", "3\n4 3 5\n", "3\n4 3 5\n", "4\n5 4 2\n", "3\n4 3 5\n", "4\n2 3 5\n", "4 \n2 1 3\n", "4\n5 3 2\n", "3\n4 3 5\n", "4\n4 2 3\n", "4\n5 2 4\n", "4 \n1 3 4\n", "4\n5 3 4\n", "4\n4 2 5\n", "4\n2 4 5\n", "4\n5 3 4\n", "4\n1 3 4\n", "4 \n1 2 5\n", "4\n4 2 3\n", "4\n4 1 3\n", "4\n4 1 2\n", "4\n4 1 3\n", "4\n3 1 2\n", "4 \n1 5 4\n", "4 \n1 4 3\n", "4 \n1 3 4\n", "4 \n1 3 2\n", "4\n5 1 4\n", "4 \n1 2 4\n", "4\n5 1 3\n", "4\n6 5 4\n", "3\n5 4 6\n", "4\n6 5 2\n", "3\n5 4 6\n", "4\n2 5 6\n", "4\n6 3 5\n", "3\n5 4 6\n", "4\n6 5 4\n", "3\n5 4 6\n", "4\n4 3 5\n", "4\n6 3 4\n", "5\n2 5 4\n", "5\n2 4 5\n", "4\n5 4 2\n", "4\n6 4 5\n"]}, "test_in_outs": {"inputs": ["6\n1 3\n1 6\n6 4\n5 1\n2 5\n", "6\n2 5\n4 1\n2 1\n1 6\n3 4\n", "6\n2 4\n6 1\n5 1\n6 2\n3 6\n", "6\n1 5\n1 6\n6 2\n1 4\n4 3\n", "6\n1 4\n5 3\n3 1\n2 5\n1 6\n", "6\n5 3\n5 4\n2 1\n2 4\n6 4\n", "6\n4 3\n5 6\n6 1\n5 2\n6 3\n", "6\n5 3\n3 1\n5 6\n4 5\n2 3\n", "6\n4 3\n4 2\n2 1\n2 6\n5 4\n", "6\n3 6\n6 2\n6 5\n2 1\n6 4\n", "6\n5 4\n5 3\n2 4\n5 6\n2 1\n", "6\n6 3\n4 2\n6 5\n4 1\n2 5\n", "6\n5 3\n4 6\n6 2\n1 2\n2 3\n", "6\n1 4\n6 2\n2 5\n3 5\n2 4\n", "6\n2 4\n3 6\n5 1\n3 5\n6 2\n", "6\n5 4\n6 2\n1 5\n4 6\n5 3\n", "6\n6 2\n3 5\n4 2\n5 4\n1 2\n", "6\n1 4\n2 3\n5 6\n5 3\n2 4\n", "6\n6 4\n4 1\n5 6\n3 2\n4 2\n", "6\n6 1\n5 6\n5 3\n2 5\n2 4\n", "7\n1 7\n6 1\n5 1\n2 1\n3 2\n2 4\n", "7\n3 1\n6 1\n4 1\n1 5\n5 2\n1 7\n", "7\n7 1\n5 1\n1 3\n1 2\n6 1\n4 7\n", "7\n1 7\n2 1\n1 5\n4 1\n3 1\n5 6\n", "7\n3 1\n1 5\n1 7\n1 4\n6 1\n2 1\n", "7\n1 4\n7 4\n5 1\n3 2\n6 4\n3 1\n", "7\n1 3\n6 1\n1 7\n1 4\n5 4\n1 2\n", "7\n5 1\n6 1\n2 1\n1 3\n1 7\n1 4\n", "7\n5 1\n5 7\n1 2\n5 6\n3 1\n4 5\n", "7\n1 4\n6 1\n2 1\n7 5\n1 7\n1 3\n", "7\n1 2\n7 3\n1 6\n5 1\n2 7\n4 6\n", "7\n2 6\n5 6\n4 1\n1 7\n1 6\n3 5\n", "7\n3 2\n1 4\n3 1\n1 6\n7 1\n5 4\n", "7\n1 5\n4 1\n2 1\n2 3\n1 7\n6 2\n", "7\n7 2\n3 4\n4 2\n7 1\n6 7\n5 7\n", "7\n1 6\n3 1\n5 6\n1 4\n1 2\n1 7\n", "7\n2 7\n4 6\n7 1\n5 1\n3 1\n7 6\n", "7\n3 2\n5 1\n3 5\n2 7\n3 6\n4 2\n", "7\n4 1\n4 3\n7 5\n1 6\n7 4\n2 6\n", "7\n5 3\n2 4\n6 1\n4 7\n3 1\n2 3\n", "7\n1 7\n6 5\n4 3\n7 4\n2 5\n5 4\n", "7\n1 4\n3 6\n6 7\n3 5\n4 2\n2 7\n", "7\n2 7\n2 4\n1 3\n5 6\n5 3\n3 2\n", "7\n4 2\n6 3\n5 1\n6 1\n7 4\n6 4\n", "7\n3 2\n1 7\n7 2\n6 5\n6 1\n4 5\n", "7\n3 2\n3 5\n4 7\n3 6\n4 5\n5 1\n", "7\n7 6\n7 1\n4 2\n4 5\n7 3\n5 3\n", "7\n1 2\n3 6\n6 5\n4 3\n7 5\n2 6\n", "7\n2 7\n6 7\n5 4\n1 2\n5 3\n3 6\n", "7\n1 5\n4 2\n5 3\n6 5\n7 2\n1 2\n", "7\n5 2\n3 6\n7 1\n3 7\n3 4\n2 6\n", "7\n1 5\n3 5\n7 2\n7 6\n3 7\n4 5\n", "7\n7 6\n2 1\n6 5\n3 2\n3 6\n7 4\n", "7\n7 6\n2 3\n3 6\n5 4\n4 2\n1 5\n", "7\n2 4\n7 1\n6 5\n3 6\n2 7\n7 6\n", "8\n1 5\n1 8\n7 1\n1 6\n1 2\n4 2\n1 3\n", "8\n6 1\n2 1\n5 4\n8 1\n7 3\n7 1\n4 7\n", "8\n6 8\n1 8\n8 2\n1 7\n5 7\n1 3\n4 1\n", "8\n2 1\n6 1\n4 1\n7 1\n1 3\n1 5\n1 8\n", "8\n1 8\n2 1\n1 7\n1 5\n1 3\n4 8\n1 6\n", "8\n2 1\n2 8\n7 8\n5 1\n2 6\n3 1\n4 6\n", "8\n6 4\n7 6\n1 5\n1 3\n1 6\n8 1\n2 7\n", "8\n8 5\n6 4\n2 4\n1 5\n1 7\n1 4\n4 3\n", "8\n6 5\n7 4\n1 3\n8 7\n1 7\n2 1\n6 1\n", "8\n7 3\n2 8\n4 1\n1 3\n2 1\n6 3\n5 1\n", "8\n1 4\n6 5\n1 6\n7 1\n2 1\n3 6\n5 8\n", "8\n4 8\n4 6\n1 3\n7 4\n7 5\n1 4\n1 2\n", "8\n7 8\n5 4\n8 1\n8 6\n1 2\n4 3\n1 4\n", "8\n2 3\n6 5\n1 7\n2 1\n4 6\n8 4\n1 6\n", "8\n5 3\n4 2\n6 5\n8 1\n5 1\n7 8\n1 2\n", "8\n7 3\n5 6\n6 1\n7 4\n6 2\n2 8\n6 4\n", "8\n8 3\n4 2\n4 1\n1 7\n1 3\n6 2\n8 5\n", "8\n5 1\n1 6\n6 3\n4 3\n5 2\n1 7\n3 8\n", "8\n5 1\n7 2\n4 3\n8 5\n7 1\n4 6\n5 4\n", "8\n8 7\n3 2\n1 3\n6 4\n1 8\n1 4\n8 5\n", "8\n7 2\n5 4\n2 6\n1 3\n3 2\n4 2\n4 8\n", "8\n3 5\n3 6\n8 7\n2 7\n2 1\n2 6\n1 4\n", "8\n1 8\n5 4\n2 5\n6 3\n1 5\n1 7\n8 6\n", "8\n1 7\n6 7\n2 3\n8 4\n5 7\n2 1\n6 8\n", "8\n8 1\n3 4\n6 4\n3 5\n2 4\n8 4\n7 3\n", "8\n2 3\n4 7\n3 7\n2 6\n5 6\n4 1\n3 8\n", "8\n3 6\n8 2\n3 1\n8 4\n8 7\n6 4\n1 5\n", "8\n1 6\n2 7\n4 5\n6 5\n4 8\n2 5\n3 7\n", "8\n2 3\n6 5\n1 8\n4 5\n4 8\n7 6\n2 6\n", "8\n1 2\n5 8\n6 8\n4 5\n6 2\n3 7\n7 4\n", "8\n1 7\n2 8\n7 8\n4 5\n3 4\n1 5\n6 3\n", "8\n2 8\n8 1\n5 7\n6 4\n4 7\n7 2\n7 3\n", "8\n8 5\n6 3\n8 3\n7 2\n1 2\n5 4\n6 7\n", "8\n6 7\n5 8\n4 1\n3 5\n3 6\n7 2\n4 2\n", "8\n6 7\n6 8\n1 3\n2 3\n5 6\n8 4\n7 3\n", "9\n3 1\n7 4\n1 4\n1 8\n2 1\n2 6\n9 1\n1 5\n", "9\n8 9\n6 2\n1 6\n1 4\n3 1\n9 1\n1 5\n1 7\n", "9\n3 9\n5 1\n4 1\n7 6\n3 1\n3 2\n8 1\n7 1\n", "9\n1 3\n6 4\n4 1\n5 1\n7 5\n1 9\n8 5\n1 2\n", "9\n4 1\n8 2\n6 1\n1 5\n3 1\n6 7\n9 5\n1 2\n", "9\n1 9\n4 9\n7 1\n3 2\n1 2\n1 6\n1 8\n2 5\n", "9\n4 1\n2 9\n1 2\n8 1\n9 5\n3 2\n7 6\n7 1\n", "9\n8 4\n5 8\n3 1\n2 8\n1 7\n9 8\n1 6\n1 8\n", "9\n8 3\n6 8\n9 4\n1 8\n8 5\n9 3\n2 1\n1 7\n", "9\n1 8\n5 1\n4 3\n9 1\n2 1\n1 4\n7 1\n6 1\n", "9\n7 2\n2 4\n5 8\n8 3\n2 1\n1 6\n6 9\n1 8\n", "9\n5 1\n8 1\n2 1\n4 1\n3 4\n1 7\n7 6\n5 9\n", "9\n8 1\n9 6\n6 1\n1 3\n2 1\n7 2\n1 4\n4 5\n", "9\n1 2\n9 8\n5 8\n7 5\n6 2\n5 3\n1 4\n1 5\n", "9\n7 1\n6 5\n1 8\n4 9\n2 8\n4 1\n3 8\n8 6\n", "9\n3 7\n3 9\n1 5\n6 1\n1 2\n4 3\n8 2\n3 2\n", "9\n6 2\n3 7\n5 1\n6 5\n3 1\n9 4\n6 8\n4 3\n", "9\n4 3\n6 9\n1 9\n1 3\n5 1\n7 1\n8 7\n2 5\n", "9\n3 5\n9 1\n4 1\n7 4\n3 8\n2 6\n9 2\n3 2\n", "9\n4 2\n9 5\n1 4\n1 7\n4 9\n5 3\n3 6\n9 8\n", "9\n5 2\n3 9\n2 4\n7 8\n5 6\n9 8\n1 2\n9 4\n", "9\n5 8\n8 9\n2 6\n2 7\n3 6\n2 1\n8 1\n4 9\n", "9\n4 2\n2 6\n4 1\n8 5\n8 7\n6 5\n3 4\n9 2\n", "9\n1 4\n5 8\n8 7\n3 4\n6 3\n5 3\n2 4\n2 9\n", "9\n3 6\n9 7\n1 6\n2 8\n7 4\n9 5\n8 6\n3 9\n", "9\n7 9\n6 7\n4 6\n3 9\n9 8\n2 5\n2 8\n1 2\n", "9\n9 3\n5 8\n2 7\n2 3\n9 6\n1 7\n4 5\n4 2\n", "9\n2 7\n3 7\n8 2\n6 7\n1 3\n2 9\n5 2\n4 6\n", "9\n9 2\n6 8\n4 1\n2 5\n1 9\n8 7\n3 6\n5 7\n", "9\n4 3\n6 9\n4 8\n6 5\n7 5\n1 6\n8 5\n7 2\n", "9\n6 7\n8 6\n1 4\n3 8\n4 7\n5 6\n9 3\n2 7\n", "9\n6 4\n9 5\n7 8\n1 8\n9 3\n4 2\n7 5\n7 4\n", "9\n9 2\n3 8\n4 6\n7 9\n2 5\n5 3\n1 6\n9 1\n", "9\n6 9\n1 3\n6 7\n2 8\n4 6\n2 6\n5 2\n3 7\n", "9\n1 8\n6 9\n6 7\n4 3\n3 5\n8 7\n2 6\n9 3\n"], "outputs": ["5\n2 3 4\n", "5\n3 6 5\n", "5\n5 3 4\n", "5\n2 5 3\n", "5\n6 4 2\n", "5\n1 6 3\n", "5\n2 1 4\n", "4\n2 4 6\n", "4\n6 3 5\n", "4\n1 4 5\n", "5\n1 3 6\n", "5 \n1 4 3\n", "5\n4 1 5\n", "5\n1 6 3\n", "5 \n1 5 4\n", "5\n3 1 2\n", "5\n6 1 3\n", "5 \n1 4 6\n", "5\n3 1 5\n", "5\n1 3 4\n", "4\n7 6 4\n", "4\n7 6 2\n", "4\n6 5 4\n", "4\n7 4 6\n", "3\n6 5 7\n", "5\n2 6 7\n", "4\n7 6 5\n", "3\n6 5 7\n", "4\n3 6 7\n", "4\n6 4 5\n", "6\n4 5 3\n", "5\n7 4 3\n", "5\n2 7 5\n", "4\n7 5 6\n", "5\n6 5 3\n", "4\n7 4 5\n", "5\n5 3 4\n", "5\n1 6 7\n", "6\n2 3 5\n", "6\n6 5 7\n", "5\n1 3 6\n", "6 \n1 4 5\n", "5\n6 4 7\n", "5\n5 3 7\n", "6 \n3 2 4\n", "5\n6 2 7\n", "6\n6 1 2\n", "6\n4 1 7\n", "6 \n1 2 4\n", "5\n6 4 7\n", "6\n1 4 5\n", "5\n4 2 6\n", "6\n1 5 4\n", "6 \n1 5 7\n", "5\n4 3 5\n", "4\n8 7 4\n", "5\n8 6 5\n", "5\n5 4 6\n", "3\n7 6 8\n", "4\n7 6 4\n", "6\n5 4 7\n", "5\n8 5 2\n", "5\n6 7 8\n", "5\n5 4 8\n", "5\n7 6 8\n", "5\n7 4 8\n", "5\n3 8 5\n", "5\n5 6 7\n", "6\n3 7 8\n", "6\n6 4 7\n", "6\n8 5 3\n", "7\n5 7 6\n", "6\n2 7 8\n", "6\n2 8 6\n", "6\n6 2 7\n", "5\n1 7 8\n", "7\n8 4 5\n", "6\n4 7 3\n", "7\n3 5 4\n", "5\n1 6 7\n", "7\n1 8 5\n", "7\n5 2 7\n", "7\n8 1 3\n", "7\n1 7 3\n", "7 \n1 2 3\n", "7 \n2 8 6\n", "6\n1 5 6\n", "7 \n1 2 4\n", "7 \n1 4 8\n", "6\n2 5 4\n", "5\n6 9 7\n", "5\n2 7 8\n", "5\n6 8 9\n", "5\n6 9 8\n", "6\n8 7 9\n", "5\n4 8 5\n", "6\n6 8 5\n", "4\n7 6 9\n", "6\n7 6 4\n", "4\n9 8 3\n", "6\n7 5 9\n", "6\n6 3 9\n", "6\n7 5 9\n", "6\n6 7 9\n", "6\n9 7 5\n", "5\n6 8 9\n", "7\n8 7 9\n", "6\n6 4 8\n", "7\n7 6 8\n", "7\n7 8 6\n", "7\n6 3 7\n", "7\n3 7 4\n", "7\n3 9 7\n", "7\n9 6 7\n", "7\n2 5 4\n", "7\n5 3 4\n", "8\n6 1 8\n", "6\n4 1 9\n", "8 \n4 1 3\n", "7\n9 2 3\n", "7\n1 5 9\n", "7\n6 1 3\n", "8\n4 7 8\n", "6\n1 9 8\n", "7\n1 4 5\n"]}}, {"index": 4001, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nRecently you have received two positive integer numbers $x$ and $y$. You forgot them, but you remembered a shuffled list containing all divisors of $x$ (including $1$ and $x$) and all divisors of $y$ (including $1$ and $y$). If $d$ is a divisor of both numbers $x$ and $y$ at the same time, there are two occurrences of $d$ in the list.\n\nFor example, if $x=4$ and $y=6$ then the given list can be any permutation of the list $[1, 2, 4, 1, 2, 3, 6]$. Some of the possible lists are: $[1, 1, 2, 4, 6, 3, 2]$, $[4, 6, 1, 1, 2, 3, 2]$ or $[1, 6, 3, 2, 4, 1, 2]$.\n\nYour problem is to restore suitable positive integer numbers $x$ and $y$ that would yield the same list of divisors (possibly in different order).\n\nIt is guaranteed that the answer exists, i.e. the given list of divisors corresponds to some positive integers $x$ and $y$.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 128$) \u2014 the number of divisors of $x$ and $y$.\n\nThe second line of the input contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_i \\le 10^4$), where $d_i$ is either divisor of $x$ or divisor of $y$. If a number is divisor of both numbers $x$ and $y$ then there are two copies of this number in the list.\n\n\n-----Output-----\n\nPrint two positive integer numbers $x$ and $y$ \u2014 such numbers that merged list of their divisors is the permutation of the given list of integers. It is guaranteed that the answer exists.\n\n\n-----Example-----\nInput\n10\n10 2 8 1 2 4 1 20 4 5\n\nOutput\n20 8\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["10\n10 2 8 1 2 4 1 20 4 5\n", "4\n9973 9973 1 1\n", "66\n35 90 36 7560 189 14 360 180 168 12 1 252 21 8 630 15 40 1512 18 9973 108 7 540 3 210 270 2520 504 1890 6 378 70 1080 30 20 84 1260 420 105 9 135 28 60 72 315 24 63 126 27 280 45 5 120 1 42 945 216 4 756 140 840 56 10 2 54 3780\n", "128\n540 90 378 3780 270 35 180 15 6 14 20 3780 2520 140 1080 54 540 120 1890 15 420 840 20 756 10 126 42 54 36 14 216 8 168 210 60 7 63 2 216 21 30 189 28 135 2 630 21 30 60 1512 7560 70 5 12 40 7560 252 378 3 108 5 72 10 3 28 24 1 27 9 45 180 56 1260 945 1080 420 168 2520 18 70 1 27 9 7 315 4 84 40 504 360 252 6 8 360 315 140 45 210 84 56 945 135 1260 280 756 90 108 630 36 42 72 504 1512 189 120 105 105 280 24 270 63 18 840 1890 126 35 12 4\n", "23\n16 128 256 27 32 243 1 512 64 8192 2 1024 81 8 1 4 729 4096 3 2187 6561 9 2048\n", "65\n108 90 27 72 2520 30 3780 35 20 21 315 42 63 120 1 945 135 1512 28 40 210 756 9 24 180 1890 1 2 189 378 5 1080 280 168 126 840 45 7 6 216 630 4 7560 18 8 56 140 504 60 105 54 252 3 360 1260 15 420 12 14 36 270 70 10 540 84\n", "28\n8192 4 128 1024 8 4 2048 8 16 64 2 512 1 2048 32 256 8192 4096 64 4096 256 16 1024 512 128 2 32 1\n", "2\n1 1\n", "50\n1250 5000 250 1000 500 10 40 250 80 16 10000 125 200 50 80 1 4 20 1 10000 2500 100 4 20 625 10 2 200 8 1000 16 2000 400 5 5 2500 8 400 5000 2 625 125 50 25 2000 1250 100 40 500 25\n", "89\n1080 126 315 18 3780 84 180 2520 12 756 70 504 15 9 36 630 20 2 2500 360 200 1000 100 108 5000 5 14 1890 10 90 105 7560 2 80 16 28 35 840 1 189 125 6 4 1512 945 40 10 210 8 25 280 8 20 270 27 1260 72 420 120 168 30 625 500 540 140 42 252 1 54 50 56 40 21 7 1250 63 216 250 4 10000 5 400 3 60 45 24 135 2000 378\n", "8\n1234 4321 29 1 2 1 149 617\n", "64\n945 130 78 135 91 630 14 2730 27 1 35 2 5 210 9 65 195 1365 7 3 390 70 455 10 15 378 3 315 39 105 273 10 21 2 45 15 546 35 42 90 18 182 26 910 63 189 30 210 6 70 105 30 54 270 1890 6 13 5 21 7 1 42 14 126\n", "20\n1 243 1 6561 128 81 4 8 32 16 3 2187 64 512 9 27 256 1024 2 729\n", "12\n66 6 3 33 22 3 1 1 2 11 11 33\n", "6\n6 1 1 2 3 3\n", "14\n14 28 2 2 56 1 14 28 4 7 1 7 8 4\n", "69\n1 7560 2 3780 3 2520 4 1890 5 1512 6 1260 7 1080 8 945 9 840 10 756 12 630 14 540 15 504 18 420 20 378 21 360 24 315 27 280 28 270 30 252 35 216 36 210 40 189 42 180 45 168 54 140 56 135 60 126 63 120 70 108 72 105 84 90 1 2 4 8 16\n", "14\n2 1 3 1 16 2 12 8 24 6 3 6 48 4\n", "10\n2 1 5 6 15 2 30 10 3 1\n", "18\n1 2 4 5 10 20 1 2 4 5 10 20 30 60 15 3 6 12\n", "5\n1 3 9 3 1\n", "7\n1 1 2 2 4 4 8\n", "6\n1 7 1 14 7 2\n", "7\n1 2 4 1 2 4 8\n", "8\n1 2 4 1 2 4 8 16\n", "12\n5 2 10 8 20 4 2 4 1 40 1 8\n", "6\n29 29 1 1 58 2\n", "10\n1 2 4 5 10 20 1 2 5 10\n", "8\n16 8 4 2 1 4 2 1\n", "10\n1 2 5 10 1 2 4 5 10 20\n", "5\n1 2 4 1 2\n", "12\n3 15 1 10 2 15 1 3 30 5 5 6\n", "10\n1 2 1 2 4 5 5 10 10 20\n", "5\n1 7 49 1 7\n", "5\n1 1 2 2 4\n", "6\n29 58 2 29 1 1\n", "10\n7 14 5 35 70 1 7 2 10 1\n", "5\n1 2 1 2 4\n", "15\n12 36 8 4 6 9 72 2 4 2 1 18 24 3 1\n", "12\n1 2 8 4 3 24 4 6 1 2 8 12\n", "12\n2 32 64 4 16 16 8 8 2 1 1 4\n", "5\n31 1 1 7 49\n", "12\n2 3 13 3 39 13 1 6 39 26 78 1\n", "9\n7 49 1 1 98 14 49 7 2\n", "6\n13 5 1 1 13 65\n", "4\n1 61 31 1\n", "5\n1 5 5 25 1\n", "5\n25 5 1 5 1\n", "10\n1 1 2 2 3 3 4 6 6 12\n", "5\n25 5 5 1 1\n", "6\n23 1 2 46 23 1\n", "18\n10 1 4 5 20 10 40 16 20 8 2 5 8 40 2 80 1 4\n", "6\n1 1 2 2 5 10\n", "10\n6 10 1 3 15 5 2 61 30 1\n", "6\n1 6 3 2 3 1\n", "16\n30 1 3 90 9 27 3 9 45 10 6 18 1 15 2 5\n", "11\n54 18 1 3 27 9 6 1 9 3 2\n", "7\n1 2 4 8 16 1 2\n", "7\n1 16 1 4 2 2 8\n", "6\n1 1 2 5 5 10\n", "9\n9 2 6 3 18 1 1 3 9\n", "13\n1 2 3 4 6 9 12 18 36 1 2 3 6\n", "6\n1 1 2 3 3 6\n", "8\n2 2 1 5 50 25 10 1\n", "4\n67 1 13 1\n", "18\n75 3 9 8 18 2 12 36 25 3 15 72 24 4 6 1 5 1\n", "12\n2 1 3 12 4 8 24 4 1 8 6 2\n", "9\n20 10 5 4 2 1 4 2 1\n", "18\n8 8 3 16 4 2 20 2 5 4 24 6 40 1 1 10 80 12\n", "13\n100 50 25 20 10 5 4 2 1 10 5 2 1\n", "6\n94 2 47 1 1 3\n", "6\n58 2 2 1 29 1\n", "20\n1 18 10 9 2 15 5 45 3 10 1 30 15 6 5 2 30 3 6 90\n", "13\n2 1 8 10 2 4 16 5 40 1 4 20 80\n", "6\n6 3 1 3 2 1\n", "10\n1 3 5 15 1 3 5 9 15 45\n", "6\n47 47 2 94 1 1\n", "14\n4 56 14 4 2 7 28 8 14 7 1 1 2 28\n", "6\n1 1 2 2 4 8\n", "6\n55 5 11 1 1 5\n", "11\n36 2 3 1 18 6 2 4 1 9 12\n", "6\n1 2 31 31 1 62\n", "10\n1 7 11 77 121 847 1 7 11 77\n", "4\n1 1 2 7\n", "18\n90 18 2 9 5 6 18 1 6 3 1 3 10 45 9 15 2 30\n", "6\n1 2 1 2 4 8\n", "20\n24 16 32 2 3 96 1 2 12 48 4 6 8 12 6 8 24 3 4 1\n", "10\n1 2 3 6 1 2 3 4 6 12\n", "10\n11 11 1 44 2 22 4 22 1 2\n", "10\n3 1 15 2 30 10 1 5 23 6\n", "8\n1 3 9 27 81 1 3 9\n", "6\n6 1 3 3 2 1\n", "10\n76 38 1 2 1 4 5 3 15 19\n", "6\n1 2 3 6 1 3\n", "6\n23 23 2 1 1 46\n", "3\n1 3 1\n", "12\n4 1 1 12 6 21 63 2 9 3 7 3\n", "6\n11 1 2 22 2 1\n", "10\n21 3 63 9 5 1 15 7 1 3\n", "10\n3 11 1 11 1 33 33 3 9 99\n", "10\n22 1 33 11 3 6 66 11 1 2\n", "18\n4 2 30 5 3 1 12 6 4 60 12 15 1 3 6 10 2 20\n", "16\n2 7 84 14 6 1 7 1 3 21 12 42 28 2 4 14\n", "6\n1 2 5 10 1 5\n", "3\n1 1 2\n", "12\n3 1 2 6 5 1 10 2 10 5 30 15\n", "10\n3 1 5 30 10 2 15 6 3 1\n", "21\n72 9 3 6 3 1 18 36 2 24 36 2 12 4 9 12 8 18 6 4 1\n", "11\n2 6 12 4 18 3 1 3 36 1 9\n", "18\n1 4 12 6 72 8 3 36 1 18 9 18 24 2 3 2 9 6\n", "11\n36 3 1 1 4 9 12 2 3 18 6\n", "6\n65 1 5 5 1 13\n", "8\n1 2 17 17 34 68 1 4\n", "5\n1 1 3 3 9\n", "10\n39 26 6 1 1 2 13 78 3 13\n", "12\n2 5 50 25 25 5 10 20 100 1 4 1\n", "14\n1 6 9 90 10 5 5 2 30 1 18 15 3 45\n", "10\n17 17 1 34 4 68 2 2 34 1\n", "16\n4 36 3 4 2 1 72 9 8 2 6 8 12 24 18 1\n", "11\n1 9 54 27 6 3 2 1 9 3 18\n", "5\n1 3 3 9 1\n", "8\n1 65 29 58 5 2 1 13\n"], "outputs": ["20 8\n", "9973 9973\n", "9973 7560\n", "7560 7560\n", "8192 6561\n", "7560 1\n", "8192 8192\n", "1 1\n", "10000 10000\n", "10000 7560\n", "4321 1234\n", "2730 1890\n", "6561 1024\n", "66 33\n", "6 3\n", "56 28\n", "7560 16\n", "48 6\n", "30 2\n", "60 20\n", "9 3\n", "8 4\n", "14 7\n", "8 4\n", "16 4\n", "40 8\n", "58 29\n", "20 10\n", "16 4\n", "20 10\n", "4 2\n", "30 15\n", "20 10\n", "49 7\n", "4 2\n", "58 29\n", "70 7\n", "4 2\n", "72 4\n", "24 8\n", "64 16\n", "49 31\n", "78 39\n", "98 49\n", "65 13\n", "61 31\n", "25 5\n", "25 5\n", "12 6\n", "25 5\n", "46 23\n", "80 40\n", "10 2\n", "61 30\n", "6 3\n", "90 27\n", "54 9\n", "16 2\n", "16 2\n", "10 5\n", "18 9\n", "36 6\n", "6 3\n", "50 2\n", "67 13\n", "75 72\n", "24 8\n", "20 4\n", "80 24\n", "100 10\n", "94 3\n", "58 2\n", "90 30\n", "80 4\n", "6 3\n", "45 15\n", "94 47\n", "56 28\n", "8 2\n", "55 5\n", "36 2\n", "62 31\n", "847 77\n", "7 2\n", "90 18\n", "8 2\n", "96 24\n", "12 6\n", "44 22\n", "30 23\n", "81 9\n", "6 3\n", "76 15\n", "6 3\n", "46 23\n", "3 1\n", "63 12\n", "22 2\n", "63 15\n", "99 33\n", "66 11\n", "60 12\n", "84 14\n", "10 5\n", "2 1\n", "30 10\n", "30 3\n", "72 36\n", "36 3\n", "72 18\n", "36 3\n", "65 5\n", "68 17\n", "9 3\n", "78 13\n", "100 25\n", "90 5\n", "68 34\n", "72 8\n", "54 9\n", "9 3\n", "65 58\n"]}, "test_in_outs": {"inputs": ["3\n1 2 1\n", "14\n2 2 3 7 1 42 14 28 84 4 21 6 12 1\n", "8\n7 14 7 1 2 4 1 28\n", "6\n1 2 1 2 3 6\n", "12\n25 20 2 5 1 1 4 10 50 100 5 25\n", "10\n1 8 3 9 4 2 33 11 99 1\n", "6\n1 11 1 11 5 55\n", "10\n32 1 1 2 2 8 4 4 8 16\n", "8\n9 9 1 81 3 27 1 3\n", "6\n7 1 11 7 77 1\n", "20\n12 21 7 21 2 1 6 42 3 42 3 7 4 84 14 14 2 6 28 1\n", "4\n1 2 53 1\n", "14\n1 2 4 5 8 10 20 40 1 2 4 5 10 20\n", "18\n1 4 16 3 12 12 3 24 1 4 6 48 8 6 2 24 2 8\n", "4\n5 1 1 61\n", "15\n24 8 4 3 2 6 1 2 32 1 48 12 96 4 16\n", "6\n62 1 31 31 2 1\n", "11\n2 18 4 27 54 3 2 1 6 1 9\n", "18\n6 1 36 3 1 9 9 72 4 18 12 6 2 3 18 8 2 24\n", "6\n1 3 2 1 39 13\n", "6\n87 29 29 3 1 1\n", "12\n4 8 7 14 14 2 2 7 28 56 1 1\n", "6\n2 1 43 86 1 2\n", "12\n21 2 33 6 66 7 3 3 1 1 11 22\n", "5\n1 7 1 49 7\n", "12\n2 1 16 4 6 3 8 1 48 24 2 12\n", "4\n1 43 1 13\n", "11\n5 2 25 100 20 50 10 1 5 1 4\n", "9\n27 6 81 3 3 1 1 2 9\n", "6\n1 1 29 3 87 29\n", "8\n15 5 3 75 1 5 1 25\n", "10\n4 32 16 4 1 2 8 64 2 1\n", "8\n3 12 6 4 3 1 1 2\n", "6\n47 1 1 94 7 2\n", "12\n3 7 1 1 21 14 21 6 3 42 2 7\n", "8\n1 5 1 2 4 5 10 20\n", "16\n2 1 5 30 1 6 12 2 4 10 60 20 10 5 15 3\n", "20\n9 12 2 24 36 24 1 3 18 6 8 72 12 4 1 2 8 3 6 4\n", "14\n24 9 18 8 6 12 72 1 3 4 1 5 2 36\n", "6\n1 7 1 7 5 35\n", "16\n6 4 1 1 6 2 2 36 8 3 12 9 3 18 24 72\n", "3\n67 1 1\n", "6\n1 58 29 1 2 2\n", "20\n12 8 6 96 4 3 16 8 32 12 6 4 48 1 24 3 24 1 2 2\n", "4\n5 25 1 1\n", "8\n5 33 9 99 3 11 1 1\n", "6\n1 1 17 51 3 3\n", "8\n87 7 14 1 2 29 1 3\n", "6\n23 23 2 46 1 1\n", "10\n1 1 2 2 4 5 5 10 10 20\n", "9\n81 2 1 9 27 3 6 3 1\n", "14\n48 16 4 6 1 8 3 4 12 1 2 2 8 24\n", "6\n1 2 2 14 1 7\n", "14\n12 18 4 2 2 72 6 36 24 8 3 1 9 1\n", "12\n15 5 10 1 1 5 6 30 3 2 3 15\n", "6\n1 2 5 95 1 19\n", "10\n1 7 42 7 1 2 21 3 14 6\n", "9\n1 18 2 6 9 1 3 3 9\n", "12\n8 6 1 3 1 4 12 24 2 16 48 3\n", "5\n1 25 1 5 5\n", "7\n3 27 1 81 3 1 9\n", "11\n6 24 8 1 2 4 1 12 3 4 2\n", "11\n4 10 5 20 25 2 50 1 2 100 1\n", "8\n23 46 2 4 1 1 23 92\n", "6\n85 17 5 17 1 1\n", "9\n4 4 11 44 2 22 2 1 1\n", "11\n2 4 1 4 16 32 16 8 8 1 2\n", "14\n8 2 16 5 2 1 10 1 4 80 20 10 5 40\n", "11\n18 2 1 3 12 6 1 4 2 36 9\n", "6\n1 2 4 8 1 16\n", "8\n10 4 20 2 1 1 5 2\n", "5\n1 1 3 9 3\n", "18\n10 20 4 12 30 6 5 5 3 4 10 1 20 1 15 2 2 60\n", "13\n4 16 8 4 2 1 8 64 1 2 32 16 32\n", "10\n27 54 18 1 2 1 9 3 6 3\n", "8\n7 6 1 1 5 3 2 35\n", "16\n28 2 14 4 3 12 84 6 7 21 1 2 3 42 6 1\n", "10\n9 1 11 33 1 11 99 3 33 3\n", "11\n2 1 6 12 8 2 24 3 4 1 4\n", "18\n2 6 8 6 2 4 1 3 1 36 72 3 12 24 12 4 18 9\n", "15\n96 48 16 4 2 24 12 6 1 8 2 1 4 32 3\n", "18\n12 28 3 3 14 6 4 7 2 42 12 21 6 1 2 1 84 4\n", "15\n5 3 3 6 15 18 45 9 9 10 1 90 2 1 30\n", "12\n10 1 5 100 25 20 4 2 50 1 5 25\n", "6\n3 1 3 1 6 2\n", "10\n95 1 19 6 18 1 9 5 3 2\n", "18\n72 24 2 3 6 8 3 6 18 9 9 36 1 2 1 12 18 4\n", "6\n71 47 2 1 94 1\n", "20\n8 96 5 2 6 12 10 1 4 6 3 48 3 32 30 15 2 16 1 24\n", "7\n9 3 1 31 93 3 1\n", "10\n1 1 2 2 4 4 5 8 10 20\n", "12\n7 5 14 2 1 14 70 35 2 1 7 10\n", "4\n1 1 29 19\n", "14\n4 12 1 1 2 6 30 10 5 20 3 60 15 5\n", "11\n3 36 12 3 9 18 6 4 2 1 1\n", "12\n1 24 2 16 48 3 4 8 3 1 6 12\n", "10\n4 3 6 2 12 1 24 3 8 1\n", "6\n1 16 4 1 8 2\n", "5\n7 49 2 1 1\n", "7\n1 27 81 1 9 3 7\n", "4\n4 1 2 1\n", "13\n50 25 5 100 1 4 10 1 2 20 2 4 8\n", "9\n8 5 16 1 32 1 4 2 64\n", "8\n32 64 1 4 16 8 1 2\n", "12\n3 4 1 12 48 16 1 24 2 6 8 3\n", "4\n1 3 9 1\n", "6\n5 1 5 19 1 95\n", "9\n64 32 16 1 2 1 8 3 4\n", "5\n1 1 67 2 4\n", "5\n1 3 1 3 9\n", "9\n9 27 81 3 27 1 9 3 1\n", "8\n10 1 1 20 2 5 5 4\n", "5\n5 3 1 25 1\n", "6\n2 5 3 15 1 1\n", "10\n4 1 1 6 3 24 8 3 2 12\n", "3\n5 1 1\n", "4\n1 1 5 25\n", "12\n5 70 5 1 35 2 1 2 7 14 10 10\n", "4\n9 1 1 3\n", "9\n81 4 1 9 3 1 27 8 2\n", "6\n1 2 4 1 5 25\n", "9\n1 2 4 1 2 4 5 10 20\n"], "outputs": ["2 1\n", "84 2\n", "28 7\n", "6 2\n", "100 25\n", "99 8\n", "55 11\n", "32 8\n", "81 9\n", "77 7\n", "84 42\n", "53 2\n", "40 20\n", "48 24\n", "61 5\n", "96 4\n", "62 31\n", "54 4\n", "72 18\n", "39 2\n", "87 29\n", "56 14\n", "86 2\n", "66 21\n", "49 7\n", "48 2\n", "43 13\n", "100 5\n", "81 6\n", "87 29\n", "75 5\n", "64 4\n", "12 3\n", "94 7\n", "42 21\n", "20 5\n", "60 10\n", "72 24\n", "72 5\n", "35 7\n", "72 6\n", "67 1\n", "58 2\n", "96 24\n", "25 1\n", "99 5\n", "51 3\n", "87 14\n", "46 23\n", "20 10\n", "81 6\n", "48 8\n", "14 2\n", "72 2\n", "30 15\n", "95 2\n", "42 7\n", "18 9\n", "48 3\n", "25 5\n", "81 3\n", "24 4\n", "100 2\n", "92 23\n", "85 17\n", "44 4\n", "32 16\n", "80 10\n", "36 2\n", "16 1\n", "20 2\n", "9 3\n", "60 20\n", "64 32\n", "54 3\n", "35 6\n", "84 6\n", "99 33\n", "24 4\n", "72 12\n", "96 4\n", "84 12\n", "90 9\n", "100 25\n", "6 3\n", "95 18\n", "72 18\n", "94 71\n", "96 30\n", "93 9\n", "20 8\n", "70 14\n", "29 19\n", "60 5\n", "36 3\n", "48 3\n", "24 3\n", "16 1\n", "49 2\n", "81 7\n", "4 1\n", "100 8\n", "64 5\n", "64 1\n", "48 3\n", "9 1\n", "95 5\n", "64 3\n", "67 4\n", "9 3\n", "81 27\n", "20 5\n", "25 3\n", "15 2\n", "24 3\n", "5 1\n", "25 1\n", "70 10\n", "9 1\n", "81 8\n", "25 4\n", "20 4\n"]}}, {"index": 4002, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given a matrix $a$ of size $n \\times m$ consisting of integers.\n\nYou can choose no more than $\\left\\lfloor\\frac{m}{2}\\right\\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.\n\nIn other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.\n\nNote that you can choose zero elements (and the sum of such set is $0$).\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n$, $m$ and $k$ ($1 \\le n, m, k \\le 70$) \u2014 the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \\le a_{i, j} \\le 70$).\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum sum divisible by $k$ you can obtain.\n\n\n-----Examples-----\nInput\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\nOutput\n24\n\nInput\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\nOutput\n56\n\n\n\n-----Note-----\n\nIn the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n", "5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n", "1 1 2\n1\n", "1 1 2\n70\n", "1 2 3\n3 2\n", "1 2 3\n3 3\n", "2 1 2\n1\n1\n", "2 1 3\n69\n69\n", "4 2 49\n16 42\n58 37\n2 17\n40 61\n", "2 2 5\n1 3\n3 1\n", "2 2 8\n7 7\n7 7\n", "5 2 5\n1 1\n1 1\n1 1\n1 1\n1 1\n", "3 3 70\n1 1 1\n1 1 1\n1 1 1\n", "2 2 3\n1 7\n1 7\n", "1 2 4\n70 1\n", "2 2 3\n2 2\n2 2\n", "2 2 5\n1 6\n6 6\n", "1 2 3\n10 10\n", "1 2 2\n3 3\n", "3 4 19\n10 10 1 1\n10 10 1 1\n10 10 1 1\n", "3 4 7\n51 2 6 7\n52 62 65 5\n6 6 62 62\n", "3 3 2\n1 1 1\n1 1 1\n1 1 1\n", "1 2 10\n17 3\n", "2 2 3\n3 1\n70 1\n", "2 2 5\n4 4\n4 4\n", "3 2 2\n5 5\n5 5\n5 5\n", "1 3 3\n4 4 4\n", "10 6 55\n15 17 49 38 7 61\n60 22 27 46 21 65\n33 51 2 33 36 69\n14 54 24 36 51 9\n36 61 38 38 46 64\n51 20 38 4 19 2\n47 34 65 43 56 65\n5 39 31 59 27 9\n17 47 13 33 57 51\n48 22 53 69 28 68\n", "5 3 3\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n", "3 3 6\n4 6 4\n2 7 1\n2 2 2\n", "4 2 46\n1 56\n6 46\n12 28\n69 42\n", "3 4 10\n3 3 3 3\n3 3 3 3\n3 3 3 3\n", "3 3 10\n4 1 1\n4 1 1\n4 1 1\n", "2 2 4\n3 3\n3 3\n", "2 2 4\n1 5\n1 6\n", "2 2 4\n5 5\n5 5\n", "3 2 10\n55 1\n1 1\n1 1\n", "1 3 3\n8 8 8\n", "2 2 2\n1 3\n1 4\n", "2 2 4\n1 9\n1 5\n", "2 2 5\n3 3\n3 3\n", "1 4 5\n2 3 11 13\n", "4 2 6\n10 9\n10 9\n10 5\n10 5\n", "1 2 50\n51 51\n", "3 2 47\n1 14\n66 37\n30 12\n", "2 8 35\n41 60 45 69 29 13 35 36\n6 42 28 22 2 56 43 68\n", "7 2 9\n6 9\n3 6\n10 5\n5 10\n5 2\n4 3\n8 4\n", "4 2 21\n10 26\n2 46\n68 57\n22 61\n", "3 3 8\n70 69 62\n70 70 70\n70 70 70\n", "4 4 2\n8 8 8 8\n8 8 8 8\n8 8 8 8\n8 7 2 2\n", "9 6 26\n9 37 42 47 27 70\n30 22 30 58 45 70\n25 44 7 22 14 64\n66 13 33 3 23 5\n44 60 53 37 8 24\n24 13 14 25 9 26\n12 27 68 6 16 51\n32 65 65 32 47 4\n69 28 9 58 63 16\n", "3 4 7\n45 65 18 5\n54 54 9 7\n47 6 56 4\n", "2 2 32\n23 17\n22 7\n", "3 2 6\n1 1\n9 6\n4 7\n", "8 6 4\n46 41 41 66 50 42\n57 28 52 58 69 41\n33 42 33 33 41 64\n60 49 3 47 14 26\n55 53 36 29 13 14\n63 21 25 21 5 36\n62 23 56 34 20 42\n70 19 26 10 17 62\n", "8 2 67\n50 9\n21 34\n62 66\n54 24\n31 62\n47 17\n56 61\n21 44\n", "3 4 3\n1 1 3 4\n5 2 2 2\n7 1 1 4\n", "2 2 5\n5 5\n7 7\n", "5 4 64\n13 14 62 35\n32 6 30 13\n39 16 62 39\n18 58 12 43\n32 45 11 50\n", "2 2 7\n65 58\n4 3\n", "2 3 2\n9 3 8\n4 2 3\n", "15 2 53\n57 55\n3 69\n22 31\n57 7\n12 39\n47 21\n64 10\n65 24\n3 68\n8 14\n58 49\n59 30\n9 43\n62 43\n2 32\n", "1 4 6\n5 3 2 2\n", "1 8 20\n15 59 35 23 21 33 30 5\n", "3 4 9\n8 8 8 8\n8 8 8 8\n8 8 8 8\n", "2 2 3\n5 20\n3 5\n", "1 10 35\n6 1 17 23 66 25 49 51 34 39\n", "14 7 19\n7 2 57 50 36 70 11\n34 33 25 27 16 28 46\n48 15 67 9 18 35 4\n58 34 31 43 66 9 16\n38 56 36 3 17 10 7\n61 38 47 11 28 26 41\n38 5 9 6 51 64 57\n40 39 41 20 56 60 68\n49 30 8 69 35 12 17\n41 37 17 46 55 55 53\n18 15 50 14 9 40 20\n9 1 21 64 44 33 43\n62 30 43 14 13 22 58\n39 46 65 52 36 41 68\n", "1 6 5\n70 70 62 61 1 1\n", "3 3 5\n2 2 2\n2 2 2\n2 2 2\n", "6 2 5\n56 46\n30 2\n22 46\n16 11\n64 10\n61 70\n", "3 3 11\n4 4 4\n4 4 4\n4 4 4\n", "2 2 3\n13 3\n1 3\n", "3 3 7\n1 5 5\n7 5 5\n6 5 5\n", "3 4 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n", "7 3 70\n21 51 35\n38 68 26\n48 61 10\n2 60 24\n34 10 8\n16 26 1\n7 68 59\n", "3 3 69\n70 70 70\n70 70 70\n70 70 70\n", "2 2 2\n4 2\n3 15\n", "2 2 7\n66 24\n50 31\n", "8 2 3\n51 22\n4 9\n25 36\n14 62\n58 9\n61 1\n35 18\n2 43\n", "5 3 61\n7 68 7\n59 14 55\n16 12 18\n53 68 56\n59 6 68\n", "2 2 8\n6 16\n14 49\n", "5 3 6\n37 47 52\n46 68 25\n13 68 43\n63 59 34\n5 62 37\n", "7 5 4\n69 60 32 53 64\n17 66 70 63 27\n18 67 48 62 2\n49 35 43 45 62\n43 23 64 31 16\n18 39 27 69 65\n20 55 42 46 35\n", "2 8 9\n18 35 56 37 4 7 32 64\n48 63 22 70 11 24 5 61\n", "6 2 33\n55 58\n27 22\n3 54\n6 53\n50 50\n31 21\n", "7 3 10\n19 1 70\n54 58 18\n53 7 20\n21 5 27\n23 47 16\n26 52 25\n34 10 1\n", "5 2 43\n33 61\n39 3\n10 61\n10 66\n50 66\n", "1 3 9\n52 10 59\n", "2 5 10\n21 2 34 64 60\n28 19 16 5 69\n", "5 8 6\n28 20 8 15 65 21 44 24\n12 64 36 12 8 48 32 41\n53 36 58 27 61 17 49 69\n61 54 5 47 52 66 9 2\n27 17 44 28 49 6 59 27\n", "3 2 50\n30 30\n30 30\n30 30\n", "4 4 3\n7 7 7 7\n7 7 7 7\n7 7 7 7\n7 7 7 7\n", "6 2 5\n36 13\n46 26\n31 14\n60 66\n15 27\n56 44\n", "3 3 7\n1 7 5\n1 5 5\n1 5 5\n", "5 7 7\n7 9 50 67 24 45 13\n40 47 33 12 58 14 8\n19 62 63 44 40 3 14\n24 57 20 7 44 27 26\n65 13 27 62 15 48 35\n", "3 2 10\n20 67\n27 11\n30 18\n", "3 4 19\n1 8 1 1\n1 2 1 1\n1 1 1 1\n", "2 2 5\n1 5\n1 7\n", "8 7 4\n26 60 44 6 15 23 65\n38 68 60 40 18 28 63\n52 69 30 31 43 44 30\n34 49 49 49 18 6 63\n64 47 1 37 42 17 38\n9 59 9 57 64 69 28\n50 28 7 23 62 6 63\n51 62 24 51 62 53 21\n", "9 2 16\n66 36\n57 14\n46 32\n69 17\n8 42\n4 14\n20 70\n34 69\n37 52\n", "3 7 8\n7 67 56 16 53 13 42\n8 57 16 6 23 62 66\n20 41 17 46 63 41 24\n", "4 2 10\n27 12\n47 15\n17 29\n58 48\n", "4 2 23\n23 5\n5 5\n5 5\n5 5\n", "2 2 5\n3 4\n3 4\n", "3 2 7\n33 47\n49 22\n32 20\n", "7 2 5\n54 6\n61 13\n31 69\n4 53\n52 40\n65 26\n22 32\n", "8 2 21\n16 50\n2 65\n20 9\n59 5\n68 23\n28 20\n8 57\n56 62\n", "6 2 5\n62 17\n28 4\n37 1\n32 67\n66 47\n16 28\n", "3 3 8\n2 5 1\n1 7 1\n2 2 3\n", "5 2 25\n18 34\n33 23\n3 63\n59 46\n15 68\n", "3 4 10\n3 3 3 3\n3 6 8 5\n3 8 8 5\n", "9 2 24\n29 23\n62 24\n58 59\n57 17\n66 40\n70 2\n7 6\n41 35\n16 9\n", "3 2 10\n29 16\n65 23\n11 28\n", "8 2 3\n2 50\n59 33\n7 16\n29 55\n45 27\n8 10\n52 11\n41 19\n", "3 3 26\n6 58 63\n37 41 14\n33 37 65\n", "1 4 8\n6 48 31 55\n", "10 20 69\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n", "4 2 35\n44 49\n29 35\n5 17\n59 2\n", "4 3 6\n27 35 30\n9 11 55\n39 65 57\n22 64 41\n"], "outputs": ["24\n", "56\n", "0\n", "0\n", "3\n", "3\n", "0\n", "0\n", "98\n", "0\n", "0\n", "5\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "308\n", "2\n", "0\n", "3\n", "0\n", "10\n", "0\n", "1540\n", "6\n", "6\n", "46\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "4\n", "0\n", "0\n", "15\n", "30\n", "0\n", "0\n", "385\n", "45\n", "105\n", "0\n", "58\n", "1300\n", "294\n", "0\n", "6\n", "1228\n", "335\n", "21\n", "5\n", "384\n", "0\n", "12\n", "742\n", "0\n", "120\n", "0\n", "3\n", "175\n", "2147\n", "140\n", "0\n", "245\n", "0\n", "6\n", "14\n", "4\n", "280\n", "0\n", "4\n", "0\n", "339\n", "244\n", "16\n", "294\n", "848\n", "405\n", "165\n", "310\n", "172\n", "0\n", "170\n", "996\n", "0\n", "42\n", "250\n", "7\n", "763\n", "50\n", "0\n", "5\n", "1380\n", "432\n", "480\n", "100\n", "23\n", "0\n", "49\n", "335\n", "336\n", "260\n", "8\n", "200\n", "30\n", "384\n", "80\n", "318\n", "104\n", "48\n", "483\n", "105\n", "180\n"]}, "test_in_outs": {"inputs": ["3 4 3\n1 1 4 4\n8 5 4 1\n7 1 1 4\n", "38 2 53\n66 44\n25 14\n54 48\n22 54\n50 36\n23 49\n13 26\n48 26\n13 57\n54 29\n26 32\n47 36\n31 29\n63 66\n53 19\n32 3\n33 53\n16 30\n66 52\n25 11\n1 45\n38 15\n59 7\n31 37\n37 46\n23 1\n10 8\n49 69\n32 26\n21 26\n11 61\n65 5\n42 24\n53 53\n28 48\n1 50\n4 54\n70 25\n", "1 2 7\n44 25\n", "3 5 3\n63 37 25 28 56\n58 40 25 56 64\n15 34 60 28 55\n", "1 9 3\n28 11 24 56 62 35 30 31 28\n", "5 5 3\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n", "7 2 8\n2 17\n9 69\n15 33\n59 53\n61 61\n70 62\n28 62\n", "3 2 9\n12 49\n61 61\n19 33\n", "2 7 1\n2 35 41 36 1 1 57\n22 9 49 2 31 3 7\n", "1 2 5\n1 2\n", "3 3 5\n21 13 68\n62 3 17\n54 6 2\n", "3 3 10\n3 6 9\n8 20 20\n13 13 13\n", "3 3 8\n1 5 2\n1 7 2\n2 2 2\n", "3 2 8\n12 43\n51 23\n5 47\n", "2 4 64\n53 52 43 56\n2 57 34 23\n", "2 2 5\n11 5\n11 5\n", "1 4 9\n8 8 8 8\n", "1 23 56\n10 57 50 46 56 4 64 35 47 43 33 51 18 45 55 4 5 61 59 57 21 53 44\n", "3 2 13\n1 1\n13 1\n1 1\n", "6 2 7\n9 17\n4 64\n6 59\n10 14\n33 64\n50 30\n", "8 2 4\n64 22\n11 25\n67 29\n22 53\n22 59\n68 38\n63 31\n19 68\n", "3 4 3\n6 5 6 8\n1 4 1 9\n3 3 7 4\n", "6 2 10\n68 22\n40 67\n59 52\n39 43\n10 44\n65 2\n", "3 4 3\n7 7 7 7\n7 7 7 7\n3 3 3 3\n", "2 5 11\n30 65 26 33 59\n7 52 3 1 21\n", "3 8 7\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n", "5 4 8\n14 62 30 14\n11 62 5 29\n51 62 9 41\n47 49 38 21\n26 22 70 64\n", "3 7 29\n14 1 55 65 57 19 53\n41 20 10 5 39 37 49\n62 70 48 3 22 27 38\n", "2 2 9\n50 36\n61 44\n", "2 2 8\n35 69\n49 54\n", "3 3 69\n56 51 68\n68 4 66\n11 58 58\n", "1 4 4\n49 44 14 18\n", "3 3 67\n1 1 1\n1 1 1\n1 1 1\n", "3 2 5\n2 2\n2 2\n2 2\n", "5 4 6\n13 38 59 26\n28 62 36 14\n45 57 20 70\n31 10 51 42\n20 34 9 32\n", "7 2 8\n8 20\n55 10\n50 38\n28 10\n47 61\n16 49\n12 4\n", "1 6 7\n7 13 13 13 13 13\n", "5 3 9\n39 7 12\n3 35 13\n64 22 34\n7 29 23\n21 61 28\n", "2 2 10\n1 1\n1 1\n", "3 3 7\n5 5 5\n5 5 5\n5 5 5\n", "5 5 13\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n", "2 7 31\n23 26 57 15 39 9 48\n48 48 15 70 59 62 63\n", "6 2 9\n68 17\n56 66\n28 38\n51 11\n39 47\n66 57\n", "6 2 28\n16 3\n18 43\n55 45\n1 61\n53 9\n46 26\n", "2 7 68\n12 13 47 6 19 32 46\n36 65 25 68 18 50 10\n", "2 2 6\n64 22\n31 42\n", "8 9 5\n9 68 60 18 64 32 3 23 17\n65 29 38 2 20 54 3 67 35\n67 34 24 2 35 35 1 13 19\n9 17 1 14 34 33 24 13 14\n19 12 13 49 6 53 59 42 16\n52 24 25 22 40 62 18 42 8\n27 16 32 46 49 10 3 12 27\n17 10 16 51 37 19 64 54 8\n", "2 2 8\n39 59\n24 35\n", "7 2 7\n9 7\n50 2\n47 51\n17 68\n70 58\n43 19\n48 24\n", "4 6 51\n3 8 6 2 1 3\n7 6 6 1 6 7\n3 1 4 1 4 1\n10 7 6 8 3 1\n", "5 2 8\n16 38\n28 61\n40 10\n48 26\n24 49\n", "2 3 10\n62 32 25\n31 39 70\n", "2 2 52\n50 15\n26 57\n", "2 2 8\n18 39\n59 60\n", "4 3 70\n58 20 41\n9 18 67\n13 46 53\n24 51 9\n", "6 2 10\n65 64\n70 2\n60 43\n58 27\n29 46\n60 17\n", "2 2 8\n26 30\n13 23\n", "2 3 7\n62 14 10\n38 24 19\n", "2 2 4\n1 1\n1 2\n", "2 2 10\n2 2\n2 2\n", "2 3 7\n51 13 19\n8 35 25\n", "5 2 3\n39 2\n29 25\n64 21\n40 61\n67 43\n", "2 2 7\n3 4\n5 2\n", "2 3 6\n1 68 22\n19 33 12\n", "1 10 9\n20 10 8 9 5 55 42 31 18 5\n", "2 3 10\n64 56 64\n69 32 17\n", "7 2 9\n27 16\n40 36\n18 38\n48 17\n20 62\n37 49\n14 23\n", "2 2 3\n1 1\n1 5\n", "1 7 4\n59 51 50 65 59 51 9\n", "2 2 4\n2 3\n3 3\n", "2 2 3\n1 4\n1 4\n", "2 2 3\n1 1\n1 1\n", "3 3 8\n34 36 28\n26 56 48\n9 43 21\n", "7 2 8\n10 18\n30 59\n68 15\n55 2\n4 3\n45 18\n70 36\n", "4 2 10\n20 67\n12 28\n26 38\n46 1\n", "2 2 9\n15 15\n10 69\n", "8 3 7\n7 26 27\n46 16 23\n11 36 65\n37 43 19\n16 26 59\n35 39 45\n13 12 31\n16 57 57\n", "4 10 2\n38 37 6 28 18 34 46 20 40 44\n43 59 49 11 59 19 70 64 18 25\n45 4 24 46 49 21 7 15 56 28\n22 56 37 40 37 13 32 25 57 31\n", "3 2 3\n1 5\n1 9\n1 9\n", "4 2 18\n17 52\n51 52\n57 14\n60 58\n", "8 2 10\n31 39\n40 28\n41 5\n28 18\n16 14\n26 57\n23 1\n61 50\n", "7 2 18\n42 70\n22 6\n41 59\n20 20\n41 56\n1 60\n29 30\n", "2 2 5\n1 1\n1 1\n", "7 2 6\n40 6\n8 25\n13 54\n55 67\n33 41\n3 33\n67 33\n", "2 2 63\n20 24\n5 35\n", "1 4 15\n14 15 17 17\n", "2 4 40\n14 6 8 11\n23 7 25 5\n", "9 5 35\n3 6 7 8 6\n8 1 6 6 3\n6 8 6 3 7\n2 8 10 7 2\n5 5 7 6 6\n2 5 4 9 7\n8 4 1 2 3\n1 3 7 7 7\n8 4 1 2 9\n", "1 9 59\n69 25 67 62 37 15 67 47 34\n", "2 2 9\n1 5\n1 7\n", "2 2 60\n1 1\n1 1\n", "6 3 11\n9 64 44\n46 44 66\n10 14 68\n13 52 19\n40 21 21\n6 33 39\n", "9 2 37\n30 37\n12 68\n12 2\n11 7\n1 27\n54 6\n26 43\n30 43\n65 2\n", "4 2 68\n44 34\n47 65\n20 57\n57 26\n", "7 2 45\n26 54\n45 66\n65 8\n17 66\n60 32\n63 21\n2 17\n", "3 3 19\n11 18 1\n13 8 8\n3 9 3\n", "10 3 59\n27 52 15\n30 40 40\n41 59 69\n22 48 66\n25 53 5\n8 47 34\n4 49 18\n42 37 64\n31 11 38\n15 34 24\n", "4 2 35\n17 59\n29 47\n64 30\n33 25\n", "5 6 38\n6 13 48 59 20 17\n35 49 44 64 63 2\n63 4 66 5 66 32\n43 68 53 70 64 59\n65 56 5 27 58 9\n", "9 2 65\n34 30\n3 45\n13 54\n22 53\n12 23\n40 47\n9 22\n23 41\n58 26\n", "2 2 17\n21 4\n35 28\n", "5 2 52\n15 18\n17 23\n29 46\n58 58\n48 25\n", "6 2 64\n62 23\n7 59\n55 23\n66 27\n65 5\n67 55\n", "2 2 11\n6 7\n1 2\n", "2 3 4\n1 1 1\n1 1 1\n", "2 2 5\n4 3\n9 8\n", "2 6 44\n68 69 61 6 3 56\n2 45 15 59 58 41\n", "2 6 23\n57 6 52 22 10 5\n56 67 53 20 47 5\n", "5 2 57\n28 68\n54 37\n39 27\n3 29\n70 70\n", "3 3 61\n42 25 5\n12 68 10\n19 2 50\n", "7 1 39\n59\n4\n20\n27\n3\n52\n60\n", "6 2 56\n32 32\n63 50\n24 49\n53 37\n15 51\n40 9\n", "4 2 62\n19 1\n55 8\n53 20\n26 15\n", "3 2 33\n8 7\n50 13\n26 30\n", "1 6 60\n32 40 47 29 60 38\n", "3 2 11\n13 62\n9 53\n19 47\n", "1 5 38\n21 43 43 67 29\n", "3 3 49\n9 8 64\n36 5 29\n11 23 63\n", "2 2 3\n3 10\n3 10\n", "5 1 34\n24\n6\n36\n55\n42\n", "10 20 69\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n"], "outputs": ["27\n", "1696\n", "0\n", "354\n", "183\n", "18\n", "336\n", "45\n", "236\n", "0\n", "130\n", "30\n", "8\n", "56\n", "128\n", "10\n", "0\n", "560\n", "13\n", "231\n", "436\n", "36\n", "300\n", "27\n", "176\n", "7\n", "496\n", "464\n", "36\n", "0\n", "0\n", "44\n", "0\n", "0\n", "462\n", "224\n", "7\n", "198\n", "0\n", "0\n", "0\n", "310\n", "288\n", "196\n", "204\n", "42\n", "1480\n", "24\n", "315\n", "51\n", "192\n", "70\n", "0\n", "0\n", "140\n", "310\n", "0\n", "14\n", "0\n", "0\n", "35\n", "231\n", "0\n", "12\n", "153\n", "0\n", "252\n", "6\n", "168\n", "0\n", "0\n", "0\n", "56\n", "288\n", "120\n", "0\n", "357\n", "954\n", "18\n", "162\n", "280\n", "288\n", "0\n", "294\n", "0\n", "15\n", "40\n", "105\n", "118\n", "0\n", "0\n", "275\n", "333\n", "0\n", "270\n", "19\n", "472\n", "0\n", "874\n", "325\n", "0\n", "104\n", "256\n", "0\n", "0\n", "0\n", "308\n", "276\n", "57\n", "61\n", "0\n", "224\n", "124\n", "33\n", "60\n", "66\n", "0\n", "49\n", "6\n", "0\n", "552\n"]}}, {"index": 4003, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThe only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).\n\nYou are given a sequence $a$ consisting of $n$ integers.\n\nYou are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n\nFor example, for the sequence $[1, 2, 4, 3, 2]$ the answer is $4$ (you take $1$ and the sequence becomes $[2, 4, 3, 2]$, then you take the rightmost element $2$ and the sequence becomes $[2, 4, 3]$, then you take $3$ and the sequence becomes $[2, 4]$ and then you take $4$ and the sequence becomes $[2]$, the obtained increasing sequence is $[1, 2, 3, 4]$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nIn the first line of the output print $k$ \u2014 the maximum number of elements in a strictly increasing sequence you can obtain.\n\nIn the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n5\n1 2 4 3 2\n\nOutput\n4\nLRRR\n\nInput\n7\n1 3 5 6 5 4 2\n\nOutput\n6\nLRLRRR\n\nInput\n3\n2 2 2\n\nOutput\n1\nR\n\nInput\n4\n1 2 4 3\n\nOutput\n4\nLLRR\n\n\n\n-----Note-----\n\nThe first example is described in the problem statement.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5\n1 2 4 3 2\n", "7\n1 3 5 6 5 4 2\n", "3\n2 2 2\n", "4\n1 2 4 3\n", "15\n37504 79054 80071 95721 135743 164345 189260 190810 191657 196168 200000 200000 190810 190018 185437\n", "4\n1 2 3 4\n", "6\n1 2 3 4 2 3\n", "4\n2 2 2 3\n", "4\n1 3 2 2\n", "12\n2 3 5 2 5 8 9 4 6 5 2 2\n", "10\n1 2 1 5 6 1 1 2 7 1\n", "5\n1 2 1 3 1\n", "4\n4 2 2 2\n", "17\n1 1 3 1 2 3 1 1 1 2 2 2 3 2 1 3 3\n", "5\n5 4 4 2 1\n", "10\n5 10 2 1 4 9 9 5 5 5\n", "2\n1 1\n", "4\n3 3 3 4\n", "17\n1 2 2 1 1 1 2 1 2 2 3 1 3 2 3 1 1\n", "45\n1 3 4 6 8 5 1 5 10 10 8 3 2 7 4 1 9 8 9 1 9 10 10 4 7 8 7 7 7 10 8 8 3 8 1 9 8 5 9 3 6 10 3 1 3\n", "5\n5 1 4 4 4\n", "7\n1 2 3 1 3 3 1\n", "5\n4 5 3 1 4\n", "5\n1 1 4 4 3\n", "1\n1\n", "17\n1 3 3 1 1 1 1 2 1 1 3 3 2 3 3 2 1\n", "11\n3 2 1 3 2 2 2 3 2 2 1\n", "12\n1 1 3 2 1 1 2 2 3 1 2 2\n", "5\n1 3 3 2 5\n", "15\n1 3 3 3 3 2 2 3 2 3 3 3 3 1 1\n", "6\n2 3 5 6 3 2\n", "15\n1 2 1 1 3 2 2 2 3 3 3 1 1 2 2\n", "16\n2 1 3 1 1 2 3 3 1 1 2 1 1 3 1 2\n", "4\n1 4 3 3\n", "5\n2 2 4 5 2\n", "3\n2 2 3\n", "3\n1 1 2\n", "3\n2 2 1\n", "4\n3 3 2 2\n", "4\n1 1 2 4\n", "18\n3 3 1 1 2 3 2 1 1 1 1 2 2 2 2 3 2 2\n", "3\n3 1 1\n", "2\n2 1\n", "5\n1 4 1 3 3\n", "20\n1 1 2 3 1 1 3 1 2 3 2 1 2 2 1 1 2 2 3 1\n", "3\n3 2 2\n", "5\n4 5 5 2 1\n", "5\n5 1 7 8 5\n", "5\n2 1 3 4 2\n", "4\n1 1 1 3\n", "4\n3 1 1 1\n", "10\n2 2 3 3 2 1 1 1 3 3\n", "2\n1 2\n", "12\n2 3 1 3 1 1 2 3 3 2 2 2\n", "4\n3 2 3 1\n", "3\n3 2 3\n", "3\n2 1 1\n", "15\n2 2 1 3 1 3 1 3 2 2 3 3 2 3 3\n", "93\n6 6 10 10 8 4 7 10 2 3 4 10 7 2 8 8 4 2 4 4 7 7 3 2 3 1 5 3 7 2 4 9 10 8 10 5 1 6 2 1 10 3 5 6 6 9 3 10 1 10 1 6 2 3 8 7 1 5 4 10 4 3 5 8 8 1 3 8 2 3 10 7 2 4 5 2 6 4 10 4 4 8 5 1 6 3 1 9 5 4 9 4 3\n", "6\n4 4 4 4 1 3\n", "14\n1 1 3 3 2 3 1 3 1 3 3 3 2 2\n", "5\n4 2 1 1 1\n", "10\n3 3 2 3 2 1 2 2 2 2\n", "5\n1 2 1 2 1\n", "14\n2 1 1 1 2 2 2 1 1 2 1 2 3 3\n", "6\n2 2 3 4 2 2\n", "5\n5 4 4 2 2\n", "17\n2 1 1 2 1 2 3 1 3 1 3 2 1 2 1 1 3\n", "5\n4 1 2 1 5\n", "14\n1 2 2 3 1 3 3 2 3 1 3 2 1 1\n", "6\n3 3 1 2 1 2\n", "9\n6 6 7 9 6 1 4 4 4\n", "16\n2 1 1 3 2 2 2 2 3 2 2 3 1 3 2 2\n", "5\n3 4 5 2 2\n", "4\n4 3 1 1\n", "20\n1 3 3 1 2 1 1 2 3 1 3 2 3 1 3 3 1 2 1 2\n", "7\n1 1 1 2 7 2 1\n", "15\n3 2 2 2 1 2 2 1 3 3 2 1 2 2 1\n", "11\n1 1 3 1 1 2 3 1 2 2 1\n", "4\n3 3 4 2\n", "20\n2 2 2 3 3 3 2 1 1 1 2 3 3 3 3 2 1 2 2 3\n", "11\n3 2 1 2 3 1 3 2 2 2 1\n", "89\n4 5 4 8 3 3 6 3 3 2 10 10 1 2 7 6 8 4 4 1 5 4 10 3 4 2 2 4 8 2 9 8 5 4 2 4 3 3 6 4 10 2 9 4 9 10 1 1 4 4 2 8 10 3 7 5 1 4 8 8 10 6 1 4 9 4 7 6 3 9 6 8 1 6 7 3 10 10 9 7 10 10 9 9 5 4 9 9 7\n", "5\n2 5 1 3 2\n", "5\n4 4 2 5 1\n", "18\n3 3 3 2 1 3 1 1 3 3 3 2 3 1 2 3 1 1\n", "5\n1 3 3 2 1\n", "5\n5 5 2 4 4\n", "5\n4 3 4 4 2\n", "14\n1 1 3 1 1 2 3 1 3 1 2 3 1 3\n", "19\n1 1 1 2 1 3 2 3 2 3 3 3 1 3 2 3 1 3 3\n", "8\n2 3 1 3 2 2 1 2\n", "6\n1 1 2 1 2 1\n", "16\n1 3 2 3 2 1 1 3 1 1 2 3 2 1 2 2\n", "7\n2 2 3 2 1 1 1\n", "18\n1 2 1 3 3 1 2 1 1 1 2 2 1 1 2 3 1 1\n", "5\n1 2 2 2 3\n", "4\n4 3 4 1\n", "4\n2 3 2 2\n", "19\n1 1 3 1 1 1 2 1 1 1 2 1 1 3 1 1 2 2 1\n", "4\n1 1 3 3\n", "4\n4 3 3 1\n", "19\n2 2 2 1 2 1 1 3 2 3 1 2 1 1 2 3 1 2 2\n", "4\n4 1 1 2\n", "5\n3 1 2 3 1\n", "20\n3 3 3 1 3 2 3 1 2 1 1 3 2 3 2 1 1 3 2 2\n", "3\n2 1 2\n", "17\n2 3 1 3 2 3 2 3 3 3 1 3 2 3 2 1 2\n", "4\n3 4 2 3\n", "5\n4 3 3 2 1\n", "8\n2 3 3 1 1 1 2 2\n", "11\n2 3 2 1 2 3 1 3 1 1 2\n", "16\n2 1 1 1 2 3 1 1 3 2 3 1 3 3 2 2\n", "14\n2 1 3 1 3 3 1 2 2 3 3 2 1 3\n", "4\n1 4 1 1\n", "12\n1 3 2 2 3 1 1 2 3 1 1 1\n", "4\n3 4 4 4\n"], "outputs": ["4\nLRRR\n", "6\nLRLRRR\n", "1\nR\n", "4\nLLRR\n", "13\nLLLLLLRLRLLLL\n", "4\nLLLR\n", "4\nLLLL\n", "2\nLR\n", "3\nLRL\n", "3\nLLL\n", "2\nRR\n", "2\nRR\n", "2\nRL\n", "2\nLR\n", "4\nRRRL\n", "2\nLL\n", "1\nR\n", "2\nLR\n", "2\nLL\n", "5\nLLLLL\n", "2\nRL\n", "3\nLLL\n", "2\nLL\n", "3\nLRR\n", "1\nR\n", "3\nRRR\n", "3\nRRL\n", "2\nLR\n", "3\nLLR\n", "2\nLL\n", "4\nLLLL\n", "2\nLR\n", "1\nR\n", "3\nLRL\n", "2\nRR\n", "2\nLR\n", "2\nLR\n", "2\nRR\n", "2\nRL\n", "2\nLR\n", "2\nRL\n", "2\nRL\n", "2\nRR\n", "3\nLRL\n", "2\nRR\n", "2\nRL\n", "4\nRRLR\n", "2\nRR\n", "2\nRR\n", "2\nLR\n", "2\nRL\n", "2\nLR\n", "2\nLR\n", "2\nLL\n", "2\nRR\n", "1\nR\n", "2\nRL\n", "2\nLR\n", "4\nRRLR\n", "2\nRL\n", "2\nLR\n", "2\nRL\n", "2\nRL\n", "2\nRR\n", "2\nLR\n", "1\nR\n", "2\nRL\n", "2\nLR\n", "2\nLR\n", "2\nLL\n", "2\nRL\n", "2\nRL\n", "1\nR\n", "4\nRLLL\n", "2\nRL\n", "3\nLRL\n", "3\nRRR\n", "3\nRRL\n", "2\nRR\n", "3\nRLR\n", "2\nLR\n", "3\nRRL\n", "4\nLLRR\n", "2\nRR\n", "3\nRLR\n", "2\nRL\n", "3\nRRR\n", "2\nRL\n", "2\nRR\n", "2\nLR\n", "2\nLR\n", "2\nLL\n", "2\nRR\n", "3\nLRL\n", "2\nRL\n", "2\nLL\n", "3\nLLR\n", "2\nRR\n", "2\nLL\n", "2\nRR\n", "2\nLR\n", "3\nRRL\n", "1\nR\n", "2\nRL\n", "2\nRR\n", "2\nRL\n", "1\nR\n", "2\nLL\n", "2\nLL\n", "4\nRRRL\n", "2\nLL\n", "2\nLL\n", "1\nR\n", "2\nLR\n", "2\nLL\n", "2\nLL\n", "2\nLR\n"]}, "test_in_outs": {"inputs": ["13\n1 1 1 1 2 3 2 3 1 3 2 3 1\n", "13\n1 1 2 1 2 3 1 1 3 1 3 1 2\n", "9\n2 2 3 1 2 1 2 2 1\n", "9\n6 8 5 5 7 8 5 6 5\n", "11\n1 1 3 1 3 1 2 3 3 1 1\n", "6\n5 8 7 5 6 5\n", "10\n3 2 2 1 2 3 1 2 2 2\n", "14\n1 2 3 2 3 2 2 3 3 3 2 3 1 1\n", "18\n2 3 3 3 1 2 2 1 3 3 2 3 1 3 1 2 2 2\n", "18\n2 2 3 2 2 2 1 2 3 2 2 2 1 3 1 2 1 1\n", "17\n3 5 2 11 10 9 10 15 2 10 11 13 1 1 16 1 3\n", "7\n3 1 3 1 3 1 1\n", "5\n1 1 1 5 4\n", "13\n2 1 3 1 2 3 2 1 1 3 3 1 3\n", "12\n3 3 2 3 2 3 1 2 1 2 2 1\n", "12\n1 1 2 1 2 2 3 3 3 1 3 3\n", "18\n1 3 2 2 2 3 2 3 3 1 1 3 1 2 1 2 2 2\n", "3\n1 2 2\n", "6\n2 3 3 3 1 1\n", "5\n1 4 4 1 3\n", "15\n3 2 2 2 2 2 2 2 2 1 1 2 3 2 2\n", "4\n4 1 2 2\n", "9\n3 4 9 3 5 1 4 2 3\n", "5\n1 3 2 2 3\n", "12\n2 1 3 2 3 3 3 1 3 2 1 1\n", "5\n3 4 5 1 4\n", "5\n4 3 1 1 1\n", "6\n2 2 2 2 3 2\n", "12\n1 2 2 1 3 2 3 2 2 3 3 1\n", "13\n1 1 3 2 2 1 1 3 3 1 2 1 2\n", "10\n1 3 1 2 2 2 2 3 2 3\n", "15\n1 2 2 3 1 1 2 2 1 2 1 3 2 2 2\n", "4\n3 1 4 3\n", "4\n2 4 1 2\n", "17\n1 3 2 3 3 2 1 3 1 3 3 2 2 2 3 2 1\n", "5\n2 2 6 4 2\n", "18\n1 2 3 1 1 3 1 1 2 2 3 2 1 3 3 2 3 1\n", "12\n2 1 3 1 2 2 2 1 2 2 1 2\n", "5\n5 5 3 3 1\n", "4\n2 2 4 3\n", "4\n2 1 1 1\n", "20\n2 2 2 1 1 3 1 3 3 1 2 3 3 3 2 2 2 3 1 3\n", "5\n3 4 5 1 1\n", "17\n3 3 2 3 2 3 1 2 3 2 2 3 1 3 1 2 1\n", "20\n2 1 2 2 2 1 3 2 1 2 1 1 2 1 3 2 1 3 3 2\n", "4\n4 4 2 3\n", "20\n2 2 2 3 2 3 3 1 3 2 2 1 3 1 3 2 3 1 3 3\n", "15\n3 1 1 1 1 1 1 1 2 1 1 1 1 2 1\n", "4\n3 4 1 1\n", "19\n1 1 3 3 3 1 3 1 2 2 3 1 3 2 1 3 2 3 3\n", "4\n4 2 2 1\n", "18\n3 1 2 1 3 1 3 2 2 2 2 1 3 3 3 3 1 2\n", "4\n3 2 3 3\n", "15\n2 3 1 3 2 3 2 3 1 1 2 3 3 1 1\n", "17\n2 2 2 2 3 2 1 1 1 3 3 2 3 1 1 1 2\n", "5\n4 5 2 3 4\n", "18\n2 3 2 3 1 3 2 1 1 2 1 2 2 1 1 2 1 1\n", "20\n3 3 2 2 3 3 3 2 1 1 2 2 3 3 3 3 3 1 1 1\n", "9\n1 2 1 2 3 1 1 2 1\n", "5\n2 4 3 4 4\n", "8\n3 2 3 1 1 2 2 1\n", "10\n1 1 1 3 2 2 3 1 3 3\n", "5\n3 3 1 1 2\n", "5\n3 1 1 1 4\n", "4\n2 1 2 2\n", "4\n4 2 1 1\n", "5\n5 1 4 4 2\n", "5\n2 5 1 1 1\n", "17\n1 1 1 2 2 1 2 3 3 1 3 2 3 1 1 1 1\n", "5\n4 2 3 2 2\n", "7\n1 1 3 3 3 2 2\n", "15\n2 1 3 1 2 1 2 1 3 3 3 2 3 3 3\n", "5\n2 5 2 1 2\n", "9\n1 2 1 3 2 3 1 1 2\n", "5\n2 4 3 5 5\n", "4\n4 4 3 3\n", "15\n1 1 1 2 2 3 2 2 3 3 2 2 3 2 2\n", "5\n4 4 2 2 2\n", "5\n4 5 2 1 4\n", "14\n2 1 1 2 1 2 3 1 2 1 2 1 3 3\n", "8\n2 2 3 1 2 2 1 1\n", "5\n5 1 5 1 4\n", "6\n1 2 2 1 2 3\n", "9\n2 2 1 1 2 1 1 3 2\n", "8\n2 2 1 1 1 1 3 3\n", "5\n3 5 4 5 3\n", "5\n4 4 5 3 3\n", "9\n3 1 1 2 2 2 2 1 2\n", "5\n5 5 5 1 3\n", "8\n1 3 3 2 1 1 1 1\n", "12\n7 3 5 8 10 4 10 5 4 12 7 2\n", "5\n5 2 3 2 2\n", "18\n2 2 1 2 1 3 3 1 3 2 1 1 3 2 1 1 2 2\n", "13\n3 3 2 2 1 3 2 1 3 3 1 1 2\n", "7\n2 1 2 1 1 1 1\n", "16\n2 2 3 1 2 1 1 3 2 1 1 1 2 3 1 2\n", "5\n1 1 2 1 1\n", "14\n11 3 2 5 7 13 1 13 5 8 4 6 13 11\n", "5\n5 5 3 1 2\n", "11\n2 3 3 1 1 1 2 2 3 2 3\n", "18\n1 2 3 2 1 1 2 1 2 3 2 3 2 2 3 2 1 2\n", "9\n2 2 2 3 2 1 1 3 3\n", "4\n2 2 1 3\n", "6\n2 3 3 1 1 1\n", "18\n1 3 3 1 1 2 1 2 3 2 2 3 3 3 3 1 1 1\n", "19\n2 2 3 2 3 3 2 3 3 2 3 3 3 2 1 2 1 2 3\n", "17\n2 2 3 3 2 2 1 3 1 3 1 2 1 2 2 2 1\n", "5\n5 2 4 4 3\n", "4\n4 4 2 2\n", "11\n2 2 1 3 2 3 3 3 2 1 1\n", "13\n2 2 1 1 1 2 3 2 2 1 3 3 1\n", "15\n2 2 2 3 2 2 2 1 1 2 2 1 2 3 3\n", "17\n1 2 3 1 2 2 1 2 2 1 1 1 1 3 2 2 1\n", "3\n1 1 3\n", "4\n4 1 1 1\n", "7\n1 5 5 6 4 5 2\n", "9\n2 5 6 5 6 9 7 5 2\n", "7\n1 4 4 2 2 2 3\n"], "outputs": ["2\nRR\n", "2\nLR\n", "2\nRR\n", "3\nRLL\n", "1\nR\n", "2\nRR\n", "2\nRL\n", "3\nLLL\n", "2\nLL\n", "2\nRL\n", "2\nLL\n", "2\nRL\n", "3\nLRR\n", "2\nLR\n", "3\nRRL\n", "2\nLR\n", "3\nLRL\n", "2\nLR\n", "3\nRLL\n", "3\nLRL\n", "2\nRL\n", "2\nRL\n", "3\nLLL\n", "2\nLR\n", "2\nRL\n", "3\nLLL\n", "2\nRL\n", "2\nRR\n", "2\nRR\n", "2\nLR\n", "2\nLR\n", "2\nLR\n", "2\nRR\n", "2\nLL\n", "3\nRRR\n", "3\nRRR\n", "3\nLLL\n", "1\nR\n", "3\nRRL\n", "3\nLRR\n", "2\nRL\n", "2\nLR\n", "4\nRLLL\n", "3\nRRL\n", "2\nRR\n", "2\nRL\n", "2\nLR\n", "3\nRRL\n", "3\nRLL\n", "2\nLR\n", "3\nRRL\n", "2\nRL\n", "1\nR\n", "3\nRLL\n", "1\nR\n", "2\nLL\n", "3\nRLL\n", "2\nRL\n", "2\nRR\n", "2\nLR\n", "3\nRRL\n", "2\nLR\n", "2\nRL\n", "2\nLR\n", "1\nR\n", "2\nRL\n", "3\nRRL\n", "3\nRLL\n", "1\nR\n", "2\nRL\n", "2\nLR\n", "2\nLR\n", "2\nLL\n", "2\nLR\n", "3\nLLR\n", "2\nRL\n", "2\nLR\n", "2\nRL\n", "2\nLL\n", "2\nLR\n", "2\nRL\n", "2\nRL\n", "3\nLLR\n", "2\nRR\n", "2\nLR\n", "2\nRR\n", "2\nRL\n", "2\nRL\n", "2\nRL\n", "2\nLL\n", "3\nRRR\n", "2\nRL\n", "1\nR\n", "2\nRL\n", "2\nRL\n", "1\nR\n", "1\nR\n", "2\nRR\n", "2\nRL\n", "2\nLR\n", "3\nLLL\n", "2\nLR\n", "2\nLR\n", "3\nRLL\n", "2\nLL\n", "2\nLR\n", "2\nRR\n", "3\nRRL\n", "2\nRL\n", "2\nRL\n", "3\nRLR\n", "2\nLR\n", "3\nLLL\n", "2\nLR\n", "2\nRL\n", "3\nLRR\n", "4\nRRRR\n", "3\nLRL\n"]}}, {"index": 4004, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\n\nYou can choose any non-negative integer $D$ (i.e. $D \\ge 0$), and for each $a_i$ you can:\n\n  add $D$ (only once), i. e. perform $a_i := a_i + D$, or  subtract $D$ (only once), i. e. perform $a_i := a_i - D$, or  leave the value of $a_i$ unchanged. \n\nIt is possible that after an operation the value $a_i$ becomes negative.\n\nYour goal is to choose such minimum non-negative integer $D$ and perform changes in such a way, that all $a_i$ are equal (i.e. $a_1=a_2=\\dots=a_n$).\n\nPrint the required $D$ or, if it is impossible to choose such value $D$, print -1.\n\nFor example, for array $[2, 8]$ the value $D=3$ is minimum possible because you can obtain the array $[5, 5]$ if you will add $D$ to $2$ and subtract $D$ from $8$. And for array $[1, 4, 7, 7]$ the value $D=3$ is also minimum possible. You can add it to $1$ and subtract it from $7$ and obtain the array $[4, 4, 4, 4]$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 the sequence $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum non-negative integer value $D$ such that if you add this value to some $a_i$, subtract this value from some $a_i$ and leave some $a_i$ without changes, all obtained values become equal.\n\nIf it is impossible to choose such value $D$, print -1.\n\n\n-----Examples-----\nInput\n6\n1 4 4 7 4 1\n\nOutput\n3\n\nInput\n5\n2 2 5 2 5\n\nOutput\n3\n\nInput\n4\n1 3 3 7\n\nOutput\n-1\n\nInput\n2\n2 8\n\nOutput\n3\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["6\n1 4 4 7 4 1\n", "5\n2 2 5 2 5\n", "4\n1 3 3 7\n", "2\n2 8\n", "1\n100\n", "2\n1 1\n", "100\n49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100\n", "5\n1 2 2 1 1\n", "3\n1 2 4\n", "3\n1 3 4\n", "100\n1 1 1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "3\n2 6 6\n", "5\n2 4 6 8 10\n", "5\n1 1 1 1 1\n", "3\n2 3 4\n", "4\n2 3 6 9\n", "4\n4 2 6 6\n", "5\n1 2 3 4 5\n", "4\n1 4 7 10\n", "4\n2 2 10 10\n", "3\n7 5 3\n", "2\n2 7\n", "4\n2 2 12 12\n", "2\n5 8\n", "3\n52 52 54\n", "4\n1 2 3 4\n", "2\n3 1\n", "2\n2 5\n", "5\n1 5 1 5 1\n", "4\n4 4 4 4\n", "4\n4 2 2 4\n", "5\n1 4 7 10 13\n", "4\n2 2 4 4\n", "4\n1 2 3 6\n", "3\n1 5 3\n", "2\n3 8\n", "2\n2 9\n", "6\n1 3 5 1 5 5\n", "100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n", "3\n5 5 3\n", "2\n1 100\n", "3\n1 5 9\n", "2\n3 6\n", "4\n1 3 5 7\n", "2\n1 8\n", "4\n1 1 1 1\n", "3\n2 4 6\n", "3\n3 7 2\n", "2\n5 4\n", "3\n4 6 8\n", "2\n20 11\n", "5\n1 1 2 3 4\n", "3\n1 3 1\n", "2\n100 1\n", "4\n4 6 8 2\n", "2\n4 3\n", "2\n9 1\n", "2\n6 5\n", "4\n2 2 2 1\n", "2\n1 4\n", "4\n2 4 6 8\n", "3\n1 7 4\n", "3\n1 5 1\n", "3\n1 3 3\n", "2\n5 10\n", "3\n6 8 4\n", "3\n3 3 9\n", "3\n100 100 4\n", "2\n11 10\n", "3\n2 2 8\n", "2\n12 11\n", "3\n1 3 5\n", "7\n2 2 5 8 8 8 8\n", "3\n6 1 11\n", "2\n4 5\n", "2\n13 12\n", "2\n93 7\n"], "outputs": ["3\n", "3\n", "-1\n", "3\n", "0\n", "0\n", "-1\n", "1\n", "-1\n", "-1\n", "99\n", "2\n", "-1\n", "0\n", "1\n", "-1\n", "2\n", "-1\n", "-1\n", "4\n", "2\n", "5\n", "5\n", "3\n", "1\n", "-1\n", "1\n", "3\n", "2\n", "0\n", "1\n", "-1\n", "1\n", "-1\n", "2\n", "5\n", "7\n", "2\n", "-1\n", "1\n", "99\n", "4\n", "3\n", "-1\n", "7\n", "0\n", "2\n", "-1\n", "1\n", "2\n", "9\n", "-1\n", "1\n", "99\n", "-1\n", "1\n", "4\n", "1\n", "1\n", "3\n", "-1\n", "3\n", "2\n", "1\n", "5\n", "2\n", "3\n", "48\n", "1\n", "3\n", "1\n", "2\n", "3\n", "5\n", "1\n", "1\n", "43\n"]}, "test_in_outs": {"inputs": ["2\n1 7\n", "9\n54 16 67 14 49 84 30 44 59\n", "2\n4 7\n", "4\n1 2 3 3\n", "2\n8 7\n", "5\n1 3 1 3 3\n", "3\n1 9 5\n", "2\n9 8\n", "3\n10 16 22\n", "6\n4 2 2 4 4 4\n", "10\n1 2 3 4 5 6 7 8 9 10\n", "2\n1 10\n", "4\n10 16 22 28\n", "4\n1 7 4 10\n", "4\n2 5 8 11\n", "4\n100 100 100 4\n", "4\n2 2 1 3\n", "5\n5 5 5 5 11\n", "3\n1 50 99\n", "2\n1 5\n", "2\n1 2\n", "3\n3 3 1\n", "5\n6 4 2 1 1\n", "4\n4 7 4 10\n", "4\n7 8 8 6\n", "5\n7 6 5 4 6\n", "2\n5 3\n", "3\n1 1 1\n", "3\n5 2 8\n", "3\n2 10 6\n", "4\n2 6 10 14\n", "4\n2 4 4 6\n", "4\n2 4 4 4\n", "3\n1 7 19\n", "2\n1 11\n", "11\n69 8 70 23 47 72 48 41 63 86 20\n", "9\n1 4 7 7 4 1 4 7 1\n", "3\n4 3 5\n", "5\n4 2 6 6 6\n", "2\n72 32\n", "5\n7 9 5 7 7\n", "4\n1 1 5 1\n", "4\n2 4 6 10\n", "5\n10 8 6 4 2\n", "4\n4 4 12 12\n", "8\n2 2 2 6 6 6 4 4\n", "4\n1 3 4 5\n", "2\n4 18\n", "5\n1 3 5 1 5\n", "3\n1 100 99\n", "4\n4 3 2 1\n", "8\n1 11 1 11 1 11 1 21\n", "5\n1 3 2 1 4\n", "8\n1 1 1 1 4 7 7 1\n", "2\n4 19\n", "3\n5 3 1\n", "6\n1 3 5 5 3 1\n", "10\n10 20 30 10 20 30 10 20 30 31\n", "4\n1 4 3 5\n", "3\n1 2 6\n", "10\n20 20 20 20 20 20 20 21 19 18\n", "5\n1 2 3 4 4\n", "5\n1 5 9 1 5\n", "6\n1 3 5 3 5 1\n", "2\n52 50\n", "4\n3 3 9 9\n", "9\n4 6 6 4 6 7 8 6 4\n", "9\n2 4 6 4 6 2 5 6 2\n", "100\n72 72 89 89 89 89 55 72 55 72 89 55 55 89 55 72 72 55 55 89 89 89 55 89 89 55 55 89 72 72 89 89 55 55 89 89 55 55 89 72 55 55 72 72 72 72 72 89 72 55 72 72 55 55 89 72 72 89 89 55 89 72 72 89 55 55 55 72 55 55 89 89 89 89 72 55 72 72 55 55 55 55 72 55 72 72 55 72 55 72 55 55 72 72 55 89 89 72 72 89\n", "2\n1 6\n", "4\n2 6 4 4\n", "10\n3 5 5 7 7 5 5 1 1 1\n", "6\n4 4 2 2 6 6\n", "7\n7 7 5 7 8 5 8\n", "6\n4 4 4 2 6 8\n", "2\n2 1\n", "4\n1 5 3 3\n", "4\n1 3 4 7\n"], "outputs": ["3\n", "-1\n", "3\n", "1\n", "1\n", "1\n", "4\n", "1\n", "6\n", "1\n", "-1\n", "9\n", "-1\n", "-1\n", "-1\n", "48\n", "1\n", "3\n", "49\n", "2\n", "1\n", "1\n", "-1\n", "3\n", "1\n", "-1\n", "1\n", "0\n", "3\n", "4\n", "-1\n", "2\n", "1\n", "-1\n", "5\n", "-1\n", "3\n", "1\n", "2\n", "20\n", "2\n", "2\n", "-1\n", "-1\n", "4\n", "2\n", "-1\n", "7\n", "2\n", "-1\n", "-1\n", "10\n", "-1\n", "3\n", "15\n", "2\n", "2\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "4\n", "2\n", "1\n", "3\n", "-1\n", "-1\n", "17\n", "5\n", "2\n", "-1\n", "2\n", "-1\n", "-1\n", "1\n", "2\n", "-1\n"]}}, {"index": 4005, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThere is a white sheet of paper lying on a rectangle table. The sheet is a rectangle with its sides parallel to the sides of the table. If you will take a look from above and assume that the bottom left corner of the table has coordinates $(0, 0)$, and coordinate axes are left and bottom sides of the table, then the bottom left corner of the white sheet has coordinates $(x_1, y_1)$, and the top right \u2014 $(x_2, y_2)$.\n\nAfter that two black sheets of paper are placed on the table. Sides of both black sheets are also parallel to the sides of the table. Coordinates of the bottom left corner of the first black sheet are $(x_3, y_3)$, and the top right \u2014 $(x_4, y_4)$. Coordinates of the bottom left corner of the second black sheet are $(x_5, y_5)$, and the top right \u2014 $(x_6, y_6)$.  [Image] Example of three rectangles. \n\nDetermine if some part of the white sheet can be seen from the above after the two black sheets are placed. The part of the white sheet can be seen if there is at least one point lying not strictly inside the white sheet and strictly outside of both black sheets.\n\n\n-----Input-----\n\nThe first line of the input contains four integers $x_1, y_1, x_2, y_2$ $(0 \\le x_1 < x_2 \\le 10^{6}, 0 \\le y_1 < y_2 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the white sheet.\n\nThe second line of the input contains four integers $x_3, y_3, x_4, y_4$ $(0 \\le x_3 < x_4 \\le 10^{6}, 0 \\le y_3 < y_4 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the first black sheet.\n\nThe third line of the input contains four integers $x_5, y_5, x_6, y_6$ $(0 \\le x_5 < x_6 \\le 10^{6}, 0 \\le y_5 < y_6 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the second black sheet.\n\nThe sides of each sheet of paper are parallel (perpendicular) to the coordinate axes.\n\n\n-----Output-----\n\nIf some part of the white sheet can be seen from the above after the two black sheets are placed, print \"YES\" (without quotes). Otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n2 2 4 4\n1 1 3 5\n3 1 5 5\n\nOutput\nNO\n\nInput\n3 3 7 5\n0 0 4 6\n0 0 7 4\n\nOutput\nYES\n\nInput\n5 2 10 5\n3 1 7 6\n8 1 11 7\n\nOutput\nYES\n\nInput\n0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example the white sheet is fully covered by black sheets.\n\nIn the second example the part of the white sheet can be seen after two black sheets are placed. For example, the point $(6.5, 4.5)$ lies not strictly inside the white sheet and lies strictly outside of both black sheets.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["2 2 4 4\n1 1 3 5\n3 1 5 5\n", "3 3 7 5\n0 0 4 6\n0 0 7 4\n", "5 2 10 5\n3 1 7 6\n8 1 11 7\n", "0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n", "50 100 100000 99000\n13 4654 99999 1000000\n0 0 1000000 45653\n", "0 0 1000000 1000000\n0 0 1000000 999999\n0 0 999999 1000000\n", "0 0 1000000 1000000\n1 0 1000000 1000000\n0 0 1000000 999999\n", "128715 414887 594910 716176\n443190 112845 919607 589041\n76564 385268 123669 951664\n", "347722 718484 584813 736820\n280059 317406 997137 588815\n388486 281361 399827 854715\n", "0 0 1000000 1000000\n0 0 999999 1000000\n0 1 1000000 1000000\n", "50 100 100000 99000\n13 4654 999999 1000000\n0 0 1000000 45654\n", "50 100 100000 99000\n0 0 1 1\n999999 999999 1000000 1000000\n", "50 100 100000 99000\n0 0 100111 98999\n49 65999 100000 99431\n", "50 100 100000 99000\n0 0 99999 1000000\n51 0 100123 99321\n", "10 10 11 11\n10 10 11 11\n10 10 11 11\n", "50 100 100000 99000\n49 99 1000000 99000\n100 100 200 200\n", "50 100 100000 99000\n0 0 54443 1000000\n54443 3 1000000 99001\n", "50 100 100000 99000\n0 0 54443 1000000\n54444 3 1000000 99001\n", "0 0 1000000 1000000\n1 0 1000000 1000000\n0 1 1000000 1000000\n", "5 2 10 5\n8 1 11 7\n3 1 7 6\n", "0 0 3 3\n5 5 6 6\n0 0 4 4\n", "0 0 4 4\n0 0 4 2\n0 3 4 4\n", "72 55 101 102\n62 86 138 120\n69 42 114 59\n", "20928 630 21684 2628\n5490 5362 23490 19143\n17369 1636 25838 2841\n", "2 6 8 8\n1 2 3 3\n1 3 10 10\n", "0 2 4 3\n1 1 4 5\n0 2 3 3\n", "5 1 9 3\n0 2 1 9\n4 1 10 3\n", "62 28 73 92\n106 65 119 152\n77 52 128 99\n", "1 7 2 8\n0 0 1 1\n1 4 2 9\n", "44 17 46 92\n43 14 58 101\n65 36 110 124\n", "0 4 2 7\n4 3 7 8\n6 0 8 1\n", "6 6 7 9\n0 1 3 7\n5 6 7 9\n", "44 63 82 114\n76 46 95 147\n41 63 138 146\n", "1 1 3 3\n1 1 3 2\n1 2 3 3\n", "100 0 110 10\n99 5 111 11\n99 1 111 6\n", "5 5 9 9\n0 0 4 4\n5 5 9 9\n", "33 47 44 78\n76 71 162 159\n3 28 81 101\n", "6 6 10 8\n10 3 16 9\n2 3 7 11\n", "96 64 120 82\n102 1 135 107\n99 67 111 93\n", "1 2 3 4\n1 1 4 4\n5 5 9 9\n", "386262 760032 542069 772227\n911675 754955 999646 829927\n378348 689243 743180 973455\n", "63 8 84 16\n13 30 15 52\n25 7 84 19\n", "623181 608349 717362 757936\n654173 174442 707580 812338\n649542 255816 917899 810891\n", "10 62 11 94\n8 57 29 86\n9 66 45 89\n", "1 3 6 7\n2 2 4 8\n3 1 5 9\n", "40 40 61 55\n18 33 83 96\n52 20 53 40\n", "2 34 5 38\n64 51 79 65\n51 52 79 84\n", "1 4 9 9\n1 1 10 2\n1 3 9 9\n", "6 33 79 56\n18 18 93 78\n39 10 58 84\n", "28775 15542 38394 20166\n26125 12713 57946 30999\n2705 8834 5217 12154\n", "25313 25296 30476 31203\n2593 15252 22456 19837\n19859 22944 31515 50105\n", "1 4 3 8\n5 2 7 6\n1 4 3 9\n", "10 10 20 20\n9 9 21 11\n9 19 21 21\n", "3 0 6 7\n3 0 8 4\n3 1 10 5\n", "12076 20776 30893 22819\n20138 19000 30107 29254\n3726 20088 28731 46619\n", "3 0 4 1\n6 6 10 9\n3 0 4 8\n", "30228 19166 31396 28305\n17488 91 44825 10139\n14405 17644 40771 38925\n", "0 1 1 7\n6 1 10 5\n0 1 1 8\n", "11360 21479 13661 21563\n8924 9481 21073 27713\n16778 27004 23110 32529\n", "2 2 6 3\n1 0 3 2\n2 2 6 4\n", "2 7 3 9\n0 2 1 6\n1 3 3 9\n", "25739 32688 44216 35348\n29800 22866 55114 54031\n17721 29321 32956 40913\n", "0 0 5 1\n0 0 7 1\n7 5 9 6\n", "2 4 3 10\n2 0 5 1\n0 7 3 10\n", "3 3 4 4\n0 0 1 1\n3 3 4 4\n", "1 2 2 8\n5 0 8 1\n0 1 4 9\n", "2 4 7 5\n1 4 7 10\n0 2 1 3\n"], "outputs": ["NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n"]}, "test_in_outs": {"inputs": ["9 9 10 16\n9 5 15 8\n9 10 19 16\n", "4 8 13 9\n8 8 14 16\n2 2 8 11\n", "2 0 6 8\n2 3 7 5\n2 0 8 6\n", "9 5 13 7\n8 5 16 7\n4 2 5 12\n", "1 0 2 7\n1 0 2 3\n4 4 10 7\n", "0 0 3 3\n0 0 3 1\n0 2 3 3\n", "8 8 10 10\n10 4 14 11\n2 4 5 13\n", "4 7 8 8\n8 6 15 11\n4 1 7 10\n", "5 8 8 10\n1 8 9 18\n6 2 15 4\n", "676584 172869 696986 939949\n217531 247380 771662 973703\n630670 592931 929942 967883\n", "5 4 9 12\n2 9 11 17\n3 3 9 7\n", "0 1 1 2\n3 3 4 4\n3 4 4 5\n", "7 5 8 10\n5 3 8 12\n6 2 9 9\n", "1 4 3 6\n3 0 6 2\n3 6 6 10\n", "0 5 1 7\n5 0 7 9\n0 1 1 7\n", "4 4 5 6\n2 1 10 11\n1 7 9 15\n", "384066 916918 765119 935891\n222262 945490 915577 995511\n310286 10123 921636 688959\n", "10 9 15 11\n10 7 18 13\n5 9 8 17\n", "0 0 64000 67200\n0 0 11392 512\n200000 200000 200001 200001\n", "2 2 3 10\n8 1 18 10\n5 2 9 7\n", "41 37 49 42\n22 27 27 53\n40 27 73 61\n", "17 12 20 15\n8 7 19 29\n0 11 12 15\n", "15 14 17 15\n0 0 8 1\n9 7 18 19\n", "2 3 4 4\n26 3 31 39\n29 2 30 21\n", "6 6 7 15\n14 10 19 35\n3 2 15 11\n", "3 2 5 10\n2 1 10 4\n3 8 9 12\n", "2459 6365 5308 15923\n1847 22052 15585 27089\n336 308 27773 18664\n", "5 5 7 7\n0 0 2 9\n3 3 9 9\n", "4 12 20 15\n5 11 26 21\n14 8 18 18\n", "11488 12686 14861 25322\n263 9355 23103 24765\n3524 20940 17452 29689\n", "1 2 2 3\n1 0 2 1\n1 2 2 5\n", "2 0 3 2\n9 19 13 23\n1 0 4 2\n", "488689 537034 554397 658289\n966606 109329 985284 598401\n342151 126230 893625 984316\n", "10 22 17 30\n0 6 10 14\n7 6 22 37\n", "0 0 1 1\n12 15 19 18\n10 9 18 14\n", "26 19 31 21\n0 5 1 6\n3 0 4 3\n", "7 1 8 3\n0 0 4 2\n2 1 18 21\n", "20 10 21 35\n13 11 23 15\n4 8 14 35\n", "1 6 8 7\n2 4 19 36\n1 2 3 8\n", "1 1 3 3\n1 2 3 4\n1 5 3 6\n", "0 0 3 4\n0 3 3 4\n0 0 3 2\n", "67 37 107 67\n3 11 140 72\n77 82 192 108\n", "18819 25865 29363 26625\n18424 24009 23338 30333\n14928 4422 23749 31969\n", "11326 10029 21783 23590\n3523 10197 31181 30973\n25733 4494 31445 24783\n", "2975 7327 23972 7416\n9620 220 31879 22310\n2975 3099 14074 10669\n", "2 2 3 3\n3 3 4 4\n2 2 3 3\n", "14 5 18 17\n9 8 22 25\n12 16 27 35\n", "305226 115092 351397 858801\n179907 128966 724370 944812\n78823 602023 461809 960582\n", "9924 9975 22878 16516\n12808 6652 28411 23264\n8204 388 14798 5070\n", "8 14 11 37\n8 18 21 26\n6 11 18 34\n", "4 4 5 5\n0 0 2 6\n3 3 6 6\n", "5 0 7 2\n1 0 3 2\n0 7 10 10\n", "489631 107603 533004 219679\n180507 27927 660647 671315\n66302 622560 250301 900772\n", "1 1 5 5\n1 1 5 3\n1 4 5 5\n", "21221 4966 23465 12117\n10451 1226 31617 12028\n3206 8163 28643 29817\n", "457749 221391 481637 901029\n427621 205962 972764 927169\n11595 580533 366640 796529\n", "565785 704313 907569 768345\n732991 292147 948744 894422\n249829 311996 592862 996946\n", "4 3 6 7\n0 5 2 8\n3 2 8 8\n", "3 1 4 7\n3 1 7 2\n0 4 10 9\n", "1 8 5 9\n1 1 2 3\n2 0 4 1\n", "6 4 8 5\n1 0 2 1\n1 0 4 2\n", "4 6 6 7\n1 4 9 5\n4 5 6 10\n", "17091 4911 18849 17274\n13934 15726 22311 21493\n2884 3776 29047 15726\n", "8 8 9 9\n7 0 8 9\n1 6 8 9\n", "0 7 1 8\n0 6 3 8\n6 6 8 8\n", "3 8 10 10\n2 0 10 1\n4 8 10 10\n", "8656 18613 22899 20400\n4553 218 16704 19833\n11001 13673 30179 21141\n"], "outputs": ["YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n"]}}, {"index": 4006, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nLet's denote a function $f(x)$ in such a way: we add $1$ to $x$, then, while there is at least one trailing zero in the resulting number, we remove that zero. For example,   $f(599) = 6$: $599 + 1 = 600 \\rightarrow 60 \\rightarrow 6$;  $f(7) = 8$: $7 + 1 = 8$;  $f(9) = 1$: $9 + 1 = 10 \\rightarrow 1$;  $f(10099) = 101$: $10099 + 1 = 10100 \\rightarrow 1010 \\rightarrow 101$. \n\nWe say that some number $y$ is reachable from $x$ if we can apply function $f$ to $x$ some (possibly zero) times so that we get $y$ as a result. For example, $102$ is reachable from $10098$ because $f(f(f(10098))) = f(f(10099)) = f(101) = 102$; and any number is reachable from itself.\n\nYou are given a number $n$; your task is to count how many different numbers are reachable from $n$.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 10^9$).\n\n\n-----Output-----\n\nPrint one integer: the number of different numbers that are reachable from $n$.\n\n\n-----Examples-----\nInput\n1098\n\nOutput\n20\n\nInput\n10\n\nOutput\n19\n\n\n\n-----Note-----\n\nThe numbers that are reachable from $1098$ are:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["1098\n", "10\n", "1000000000\n", "1\n", "9\n", "10119\n", "1337\n", "51\n", "99\n", "79\n", "29\n", "633\n", "9000\n", "99999999\n", "932415950\n", "90\n", "45\n", "22\n", "987654321\n", "599\n", "54\n", "73180\n", "9392\n", "25659427\n", "1999\n", "712\n", "21\n", "916073472\n", "920\n", "61261142\n", "999999999\n", "30\n", "299\n", "20\n", "960879599\n", "41\n", "9590\n", "9169813\n", "2001\n", "6171\n", "23\n", "99932791\n", "959590\n", "90000001\n", "98\n", "442188277\n", "751780\n", "909590\n", "91\n", "89\n", "76\n", "34\n", "70\n", "38\n", "58\n", "852240\n", "94\n", "44\n", "83\n", "81\n", "49\n", "71\n", "204907\n", "3\n", "40\n"], "outputs": ["20\n", "19\n", "91\n", "9\n", "9\n", "35\n", "24\n", "18\n", "10\n", "10\n", "10\n", "22\n", "37\n", "10\n", "53\n", "19\n", "14\n", "17\n", "46\n", "10\n", "15\n", "34\n", "23\n", "35\n", "10\n", "25\n", "18\n", "52\n", "26\n", "56\n", "10\n", "19\n", "10\n", "19\n", "29\n", "18\n", "23\n", "36\n", "36\n", "28\n", "16\n", "33\n", "27\n", "72\n", "11\n", "43\n", "34\n", "32\n", "18\n", "10\n", "13\n", "15\n", "19\n", "11\n", "11\n", "42\n", "15\n", "15\n", "16\n", "18\n", "10\n", "18\n", "35\n", "9\n", "19\n"]}, "test_in_outs": {"inputs": ["123123124\n", "88\n", "97\n", "642853\n", "986792\n", "5\n", "73\n", "50\n", "556740\n", "259835150\n", "5932\n", "36\n", "96\n", "999999\n", "921280\n", "84\n", "19909590\n", "599785072\n", "303719549\n", "90909590\n", "940160238\n", "255\n", "439674440\n", "870826420\n", "93\n", "55\n", "631\n", "24\n", "59\n", "78\n", "997184\n", "189070\n", "46\n", "63\n", "869667992\n", "963\n", "86\n", "880708\n", "80\n", "902826\n", "57\n", "956126\n", "790643\n", "68\n", "990\n", "860082635\n", "940740\n", "87\n", "799170\n", "75\n", "19\n", "312770\n", "69\n", "855520\n", "53\n", "841480\n", "60\n", "196530\n", "883260\n", "962131\n", "77\n", "47\n", "62\n", "2333\n", "999999970\n"], "outputs": ["64\n", "11\n", "12\n", "33\n", "23\n", "9\n", "16\n", "19\n", "33\n", "46\n", "23\n", "13\n", "13\n", "10\n", "42\n", "15\n", "32\n", "35\n", "44\n", "41\n", "58\n", "18\n", "45\n", "53\n", "16\n", "14\n", "24\n", "15\n", "10\n", "11\n", "26\n", "31\n", "13\n", "16\n", "28\n", "19\n", "13\n", "32\n", "19\n", "37\n", "12\n", "35\n", "33\n", "11\n", "19\n", "52\n", "40\n", "12\n", "29\n", "14\n", "10\n", "38\n", "10\n", "38\n", "16\n", "38\n", "19\n", "32\n", "36\n", "42\n", "12\n", "12\n", "17\n", "28\n", "21\n"]}}, {"index": 4007, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThere are $n$ friends who want to give gifts for the New Year to each other. Each friend should give exactly one gift and receive exactly one gift. The friend cannot give the gift to himself.\n\nFor each friend the value $f_i$ is known: it is either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$.\n\nYou want to fill in the unknown values ($f_i = 0$) in such a way that each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself. It is guaranteed that the initial information isn't contradictory.\n\nIf there are several answers, you can print any.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of friends.\n\nThe second line of the input contains $n$ integers $f_1, f_2, \\dots, f_n$ ($0 \\le f_i \\le n$, $f_i \\ne i$, all $f_i \\ne 0$ are distinct), where $f_i$ is the either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$. It is also guaranteed that there is at least two values $f_i = 0$.\n\n\n-----Output-----\n\nPrint $n$ integers $nf_1, nf_2, \\dots, nf_n$, where $nf_i$ should be equal to $f_i$ if $f_i \\ne 0$ or the number of friend whom the $i$-th friend wants to give the gift to. All values $nf_i$ should be distinct, $nf_i$ cannot be equal to $i$. Each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself.\n\nIf there are several answers, you can print any.\n\n\n-----Examples-----\nInput\n5\n5 0 0 2 4\n\nOutput\n5 3 1 2 4 \n\nInput\n7\n7 0 0 1 4 0 6\n\nOutput\n7 3 2 1 4 5 6 \n\nInput\n7\n7 4 0 3 0 5 1\n\nOutput\n7 4 2 3 6 5 1 \n\nInput\n5\n2 1 0 0 0\n\nOutput\n2 1 4 5 3\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5\n5 0 0 2 4\n", "7\n7 0 0 1 4 0 6\n", "7\n7 4 0 3 0 5 1\n", "5\n2 1 0 0 0\n", "2\n0 0\n", "3\n3 0 0\n", "3\n0 0 1\n", "5\n2 0 1 0 3\n", "5\n0 4 0 2 1\n", "7\n0 1 2 3 0 4 6\n", "5\n0 0 5 3 1\n", "5\n0 0 0 1 2\n", "4\n0 1 0 2\n", "10\n6 3 0 0 0 5 0 4 2 1\n", "5\n4 5 0 0 0\n", "5\n5 0 0 2 1\n", "5\n5 4 0 0 0\n", "4\n0 0 0 0\n", "5\n5 1 2 0 0\n", "4\n3 0 0 0\n", "6\n2 0 1 5 3 0\n", "4\n2 0 0 1\n", "5\n5 0 0 1 2\n", "5\n5 0 4 0 0\n", "10\n0 3 0 0 1 5 6 9 2 8\n", "5\n5 0 4 3 0\n", "5\n0 4 0 2 0\n", "5\n2 0 0 5 1\n", "3\n0 1 0\n", "5\n0 1 0 2 4\n", "3\n2 0 0\n", "4\n0 0 4 1\n", "4\n0 0 1 0\n", "5\n5 0 1 0 2\n", "3\n0 0 2\n", "5\n0 0 4 5 3\n", "5\n0 5 1 2 0\n", "5\n2 0 0 1 4\n", "5\n4 0 0 1 2\n", "5\n5 0 0 1 4\n", "5\n0 0 0 2 1\n", "5\n0 0 1 5 4\n", "6\n5 4 0 0 1 2\n", "5\n4 0 2 1 0\n", "7\n7 6 5 0 0 0 0\n", "7\n0 4 0 0 6 7 3\n", "45\n32 3 19 7 20 16 34 6 8 41 25 21 27 13 24 5 30 36 40 22 37 23 15 28 35 42 26 4 11 44 14 31 0 12 38 0 0 17 29 9 39 0 1 45 43\n", "6\n0 6 0 2 0 4\n", "5\n0 0 4 5 1\n", "5\n3 0 1 0 2\n", "10\n6 3 0 0 0 0 0 0 2 1\n", "5\n0 5 0 1 4\n", "5\n2 3 0 0 1\n", "5\n4 0 0 2 1\n", "6\n3 1 2 0 0 4\n", "6\n5 1 6 0 0 0\n", "5\n5 0 0 3 4\n", "6\n2 1 0 0 3 5\n", "27\n12 5 17 0 24 0 11 6 19 1 14 0 15 7 21 22 8 25 20 16 0 13 2 27 26 9 0\n", "7\n0 0 0 0 0 1 0\n", "5\n0 4 0 1 2\n", "10\n6 3 0 8 9 5 0 4 2 1\n", "5\n0 1 2 0 3\n", "9\n8 0 1 6 0 4 2 7 3\n"], "outputs": ["5 3 1 2 4 \n", "7 3 2 1 4 5 6 \n", "7 4 2 3 6 5 1 \n", "2 1 4 5 3 \n", "2 1 \n", "3 1 2 \n", "2 3 1 \n", "2 4 1 5 3 \n", "3 4 5 2 1 \n", "5 1 2 3 7 4 6 \n", "2 4 5 3 1 \n", "3 5 4 1 2 \n", "3 1 4 2 \n", "6 3 7 9 10 5 8 4 2 1 \n", "4 5 1 2 3 \n", "5 3 4 2 1 \n", "5 4 1 2 3 \n", "2 3 4 1 \n", "5 1 2 3 4 \n", "3 4 1 2 \n", "2 6 1 5 3 4 \n", "2 3 4 1 \n", "5 3 4 1 2 \n", "5 1 4 2 3 \n", "4 3 10 7 1 5 6 9 2 8 \n", "5 1 4 3 2 \n", "3 4 5 2 1 \n", "2 3 4 5 1 \n", "3 1 2 \n", "3 1 5 2 4 \n", "2 3 1 \n", "2 3 4 1 \n", "3 4 1 2 \n", "5 4 1 3 2 \n", "3 1 2 \n", "2 1 4 5 3 \n", "3 5 1 2 4 \n", "2 3 5 1 4 \n", "4 3 5 1 2 \n", "5 3 2 1 4 \n", "3 5 4 2 1 \n", "2 3 1 5 4 \n", "5 4 6 3 1 2 \n", "4 5 2 1 3 \n", "7 6 5 1 2 3 4 \n", "2 4 1 5 6 7 3 \n", "32 3 19 7 20 16 34 6 8 41 25 21 27 13 24 5 30 36 40 22 37 23 15 28 35 42 26 4 11 44 14 31 2 12 38 10 18 17 29 9 39 33 1 45 43 \n", "3 6 5 2 1 4 \n", "2 3 4 5 1 \n", "3 4 1 5 2 \n", "6 3 9 5 7 10 8 4 2 1 \n", "3 5 2 1 4 \n", "2 3 4 5 1 \n", "4 3 5 2 1 \n", "3 1 2 5 6 4 \n", "5 1 6 2 3 4 \n", "5 1 2 3 4 \n", "2 1 4 6 3 5 \n", "12 5 17 3 24 4 11 6 19 1 14 10 15 7 21 22 8 25 20 16 18 13 2 27 26 9 23 \n", "6 3 4 5 7 1 2 \n", "3 4 5 1 2 \n", "6 3 7 8 9 5 10 4 2 1 \n", "4 1 2 5 3 \n", "8 5 1 6 9 4 2 7 3 \n"]}, "test_in_outs": {"inputs": ["5\n0 4 0 5 0\n", "6\n6 0 0 3 4 5\n", "5\n4 1 0 0 2\n", "5\n3 0 0 5 4\n", "5\n2 1 5 0 0\n", "4\n0 4 0 1\n", "8\n2 0 0 3 0 4 1 7\n", "4\n0 3 0 2\n", "6\n0 0 0 2 1 5\n", "75\n0 0 25 7 33 0 65 0 54 22 0 6 1 55 43 0 0 17 0 53 69 35 0 0 67 0 0 64 51 0 0 42 73 0 20 0 39 0 32 0 34 0 0 0 0 24 0 0 71 0 68 0 0 0 26 0 0 0 18 70 0 9 41 29 48 0 56 0 38 72 0 61 0 0 58\n", "5\n5 4 0 2 0\n", "44\n0 16 36 17 0 20 0 38 26 0 23 30 42 0 0 0 0 24 0 0 0 2 9 0 0 39 18 0 0 0 28 37 7 0 0 0 0 0 41 6 0 44 8 32\n", "12\n10 9 0 8 1 0 0 2 0 4 7 11\n", "6\n2 3 4 1 0 0\n", "51\n27 45 0 0 24 39 0 2 41 0 0 0 0 0 17 0 9 38 29 16 37 0 8 0 0 20 46 22 6 0 0 4 49 13 0 0 0 7 0 0 0 14 51 12 36 0 40 0 0 0 0\n", "10\n0 3 8 6 4 0 0 0 10 2\n", "117\n0 26 37 74 0 73 0 0 0 36 0 0 0 0 0 0 0 0 0 86 116 0 114 0 0 33 96 0 0 0 0 0 0 0 59 0 41 0 91 43 0 0 89 0 15 0 19 9 54 0 0 82 0 56 0 93 18 85 117 55 0 0 6 0 0 63 0 0 0 0 0 0 115 46 28 0 8 0 0 76 20 25 12 90 0 0 40 0 7 38 0 0 0 112 0 0 0 0 0 0 0 0 0 51 0 62 0 0 0 0 81 0 0 0 68 65 99\n", "11\n0 8 0 11 0 0 4 2 10 3 0\n", "5\n2 1 0 0 3\n", "10\n2 3 4 5 6 7 8 9 0 0\n", "9\n8 0 5 6 3 4 9 7 0\n", "6\n3 6 0 0 1 2\n", "5\n0 3 2 0 1\n", "93\n0 71 54 56 8 73 33 82 26 79 57 15 24 89 85 69 62 9 39 12 77 28 64 65 20 93 34 53 10 47 68 52 35 43 19 18 84 49 88 7 31 74 29 38 50 51 83 2 32 4 6 36 40 11 46 87 41 42 86 23 45 44 92 1 90 55 70 30 91 21 37 14 48 66 60 72 61 25 5 27 0 13 75 76 59 16 80 58 3 17 63 78 22\n", "104\n24 0 77 92 89 16 0 81 46 0 12 0 0 0 0 0 74 0 0 88 0 21 20 55 6 0 33 5 0 76 8 68 17 0 0 7 0 0 0 35 0 87 32 14 102 59 49 0 0 11 0 0 0 23 57 31 22 99 63 38 0 0 0 90 0 25 0 0 19 0 50 0 0 0 60 48 0 0 0 0 0 0 0 0 42 0 0 0 98 97 10 65 86 95 0 4 0 45 0 0 75 82 0 78\n", "6\n0 0 0 2 1 0\n", "7\n2 1 0 0 0 3 4\n", "9\n0 6 0 0 7 1 5 3 0\n", "7\n2 0 0 0 0 0 0\n", "46\n16 34 13 0 42 14 25 29 11 7 38 26 0 1 0 0 22 0 27 19 35 31 32 46 24 10 6 8 40 5 9 33 43 17 41 45 0 20 37 0 18 44 0 12 3 15\n", "5\n3 1 0 2 0\n", "12\n2 3 4 5 12 1 0 10 8 11 9 0\n", "4\n3 0 2 0\n", "10\n6 3 0 0 0 0 0 2 1 0\n", "4\n4 1 0 0\n", "19\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "5\n5 3 2 0 0\n", "9\n3 1 2 9 0 0 8 7 6\n", "9\n2 0 1 3 4 5 6 0 7\n", "5\n0 0 0 0 1\n", "7\n0 0 1 0 3 2 0\n", "5\n0 0 0 2 4\n", "5\n0 3 0 1 0\n", "11\n7 11 10 9 8 0 0 0 0 0 0\n", "9\n0 1 2 3 4 5 6 7 0\n", "116\n37 0 0 50 0 29 73 0 97 53 0 0 24 1 2 30 0 0 0 68 107 7 0 0 104 85 0 103 111 0 25 0 0 100 36 0 19 82 88 0 0 92 0 62 64 13 0 83 3 0 0 0 0 0 38 101 105 18 6 0 48 0 70 0 116 0 0 0 32 108 0 8 16 0 0 0 75 0 78 0 56 0 110 63 0 0 0 0 15 23 0 0 40 42 0 90 0 94 59 67 0 0 28 34 0 11 21 0 0 33 0 35 57 14 0 10\n", "6\n0 1 5 3 2 0\n", "7\n7 6 1 0 3 0 5\n", "4\n0 1 0 0\n", "148\n0 110 76 0 0 106 56 107 0 115 0 0 8 0 0 0 0 74 15 58 108 78 0 0 0 29 28 0 103 25 0 0 0 13 0 0 0 126 0 0 0 0 124 12 0 10 0 0 141 19 135 0 84 30 0 100 86 118 95 0 0 134 0 0 0 0 101 0 128 7 5 0 91 0 138 57 112 43 9 0 52 0 0 0 16 0 11 0 0 63 109 0 0 142 53 99 0 0 129 148 21 0 1 0 0 88 31 0 0 0 0 48 0 37 146 145 62 23 0 82 0 70 0 0 0 113 54 0 26 64 0 0 136 114 0 0 0 47 0 83 92 0 0 69 123 0 0 81\n", "32\n0 20 17 31 0 0 18 22 0 0 0 0 0 0 0 13 12 0 0 8 15 0 5 0 0 0 16 32 0 0 14 0\n", "48\n0 38 9 45 48 0 41 30 21 44 0 0 5 0 47 18 35 0 43 0 15 24 0 4 0 0 13 11 32 0 0 33 0 25 39 16 0 0 0 20 7 6 0 3 31 36 0 0\n", "5\n5 1 0 0 0\n", "5\n5 0 2 0 1\n", "6\n0 4 2 0 1 0\n", "5\n5 0 0 3 1\n", "12\n10 0 12 11 0 0 6 0 7 4 5 8\n", "115\n109 0 65 0 0 54 37 33 0 0 74 0 0 10 93 0 0 39 87 0 67 68 0 41 44 0 35 0 0 0 82 64 0 52 31 0 0 0 13 0 0 0 0 59 0 43 53 0 0 0 0 29 0 38 0 42 92 47 102 98 3 0 0 1 81 45 9 17 26 80 5 0 104 91 18 36 0 0 8 0 0 0 25 0 72 4 21 0 0 0 78 77 97 56 0 0 0 0 0 88 22 83 105 0 6 0 0 73 0 40 0 108 50 19 28\n", "143\n0 0 0 76 121 0 9 0 0 0 0 0 83 53 0 0 0 15 0 102 0 3 0 0 0 0 28 0 99 115 60 0 55 0 5 70 0 0 78 0 0 48 33 0 0 139 0 0 0 111 2 0 0 0 0 0 0 80 0 52 0 0 116 0 0 0 10 0 75 0 86 107 0 0 7 0 50 0 47 141 123 0 1 85 0 71 128 0 73 0 0 131 0 62 114 0 0 0 0 66 77 74 0 14 61 0 103 0 0 0 134 11 98 0 0 117 0 89 0 129 58 0 0 138 35 0 142 135 0 0 0 20 118 125 0 21 59 0 90 72 0 112 0\n", "95\n0 10 12 2 0 58 0 0 17 83 59 33 23 0 0 0 11 92 24 0 5 0 52 16 40 90 62 50 66 72 0 71 0 55 0 0 0 48 0 0 0 44 32 45 69 56 0 41 0 86 54 21 0 0 95 65 64 0 0 0 85 0 39 30 0 0 81 0 28 4 0 20 34 80 89 0 0 19 31 0 0 0 0 0 0 70 36 38 87 0 93 0 0 68 60\n", "13\n0 3 13 10 8 0 5 0 4 0 0 0 0\n", "6\n2 0 5 1 3 0\n", "6\n3 0 5 1 2 0\n", "4\n0 0 1 3\n", "4\n2 0 1 0\n"], "outputs": ["3 4 1 5 2 \n", "6 1 2 3 4 5 \n", "4 1 5 3 2 \n", "3 1 2 5 4 \n", "2 1 5 3 4 \n", "3 4 2 1 \n", "2 5 8 3 6 4 1 7 \n", "4 3 1 2 \n", "3 6 4 2 1 5 \n", "3 8 25 7 33 4 65 11 54 22 16 6 1 55 43 19 5 17 23 53 69 35 27 10 67 12 30 64 51 31 36 42 73 13 20 40 39 14 32 44 34 15 21 45 47 24 50 28 71 52 68 57 37 46 26 49 66 59 18 70 60 9 41 29 48 74 56 62 38 72 63 61 75 2 58 \n", "5 4 1 2 3 \n", "5 16 36 17 10 20 3 38 26 14 23 30 42 15 19 4 11 24 21 12 25 2 9 13 29 39 18 22 34 27 28 37 7 35 1 31 33 40 41 6 43 44 8 32 \n", "10 9 6 8 1 3 5 2 12 4 7 11 \n", "2 3 4 1 6 5 \n", "27 45 10 1 24 39 5 2 41 11 25 15 18 19 17 21 9 38 29 16 37 23 8 26 30 20 46 22 6 31 35 4 49 13 48 28 32 7 33 34 42 14 51 12 36 43 40 50 44 3 47 \n", "7 3 8 6 4 5 1 9 10 2 \n", "5 26 37 74 11 73 2 3 4 36 13 10 14 16 21 17 22 23 27 86 116 24 114 29 35 33 96 39 30 31 32 34 45 42 59 47 41 48 91 43 49 44 89 50 15 52 19 9 54 53 57 82 61 56 58 93 18 85 117 55 64 60 6 67 66 63 69 75 70 71 72 78 115 46 28 77 8 79 88 76 20 25 12 90 80 83 40 92 7 38 84 95 87 112 97 94 98 100 104 101 102 103 105 51 107 62 108 109 110 113 81 106 1 111 68 65 99 \n", "5 8 7 11 6 1 4 2 10 3 9 \n", "2 1 4 5 3 \n", "2 3 4 5 6 7 8 9 10 1 \n", "8 1 5 6 3 4 9 7 2 \n", "3 6 4 5 1 2 \n", "4 3 2 5 1 \n", "81 71 54 56 8 73 33 82 26 79 57 15 24 89 85 69 62 9 39 12 77 28 64 65 20 93 34 53 10 47 68 52 35 43 19 18 84 49 88 7 31 74 29 38 50 51 83 2 32 4 6 36 40 11 46 87 41 42 86 23 45 44 92 1 90 55 70 30 91 21 37 14 48 66 60 72 61 25 5 27 67 13 75 76 59 16 80 58 3 17 63 78 22 \n", "24 13 77 92 89 16 1 81 46 3 12 9 15 27 18 28 74 26 30 88 36 21 20 55 6 29 33 5 34 76 8 68 17 37 40 7 39 43 41 35 51 87 32 14 102 59 49 44 47 11 52 53 61 23 57 31 22 99 63 38 62 67 54 90 56 25 70 58 19 72 50 73 79 64 60 48 66 69 80 83 71 85 84 100 42 91 93 94 98 97 10 65 86 95 96 4 101 45 104 103 75 82 2 78 \n", "4 5 6 2 1 3 \n", "2 1 5 7 6 3 4 \n", "2 6 8 9 7 1 5 3 4 \n", "2 1 4 5 6 7 3 \n", "16 34 13 2 42 14 25 29 11 7 38 26 4 1 21 23 22 28 27 19 35 31 32 46 24 10 6 8 40 5 9 33 43 17 41 45 30 20 37 36 18 44 39 12 3 15 \n", "3 1 5 2 4 \n", "2 3 4 5 12 1 6 10 8 11 9 7 \n", "3 4 2 1 \n", "6 3 8 5 7 9 10 2 1 4 \n", "4 1 2 3 \n", "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 1 \n", "5 3 2 1 4 \n", "3 1 2 9 4 5 8 7 6 \n", "2 8 1 3 4 5 6 9 7 \n", "5 3 4 2 1 \n", "5 6 1 7 3 2 4 \n", "3 5 1 2 4 \n", "4 3 5 1 2 \n", "7 11 10 9 8 1 2 3 4 5 6 \n", "9 1 2 3 4 5 6 7 8 \n", "37 4 9 50 12 29 73 20 97 53 22 17 24 1 2 30 27 26 31 68 107 7 39 44 104 85 41 103 111 45 25 46 49 100 36 55 19 82 88 58 43 92 47 62 64 13 51 83 3 61 52 54 65 60 38 101 105 18 6 66 48 69 70 72 116 71 77 79 32 108 74 8 16 76 81 80 75 84 78 86 56 89 110 63 93 87 91 96 15 23 95 98 40 42 102 90 99 94 59 67 106 109 28 34 112 11 21 113 115 33 114 35 57 14 5 10 \n", "6 1 5 3 2 4 \n", "7 6 1 2 3 4 5 \n", "2 1 4 3 \n", "2 110 76 14 3 106 56 107 6 115 18 20 8 17 22 27 24 74 15 58 108 78 34 32 38 29 28 44 103 25 46 33 35 13 36 39 49 126 40 41 42 45 124 12 55 10 50 51 141 19 135 59 84 30 60 100 86 118 95 61 65 134 67 71 66 68 101 72 128 7 5 80 91 73 138 57 112 43 9 89 52 75 77 79 16 85 11 87 93 63 109 90 97 142 53 99 98 102 129 148 21 104 1 105 111 88 31 94 96 116 119 48 117 37 146 145 62 23 121 82 125 70 120 122 131 113 54 127 26 64 132 137 136 114 130 133 139 47 143 83 92 140 147 69 123 144 4 81 \n", "6 20 17 31 2 9 18 22 10 11 19 3 4 7 21 13 12 23 24 8 15 27 5 25 26 29 16 32 30 1 14 28 \n", "12 38 9 45 48 2 41 30 21 44 8 14 5 23 47 18 35 10 43 17 15 24 26 4 19 37 13 11 32 22 27 33 28 25 39 16 1 29 34 20 7 6 40 3 31 36 42 46 \n", "5 1 4 3 2 \n", "5 4 2 3 1 \n", "5 4 2 6 1 3 \n", "5 4 2 3 1 \n", "10 1 12 11 2 3 6 9 7 4 5 8 \n", "109 12 65 7 11 54 37 33 14 15 74 16 24 10 93 20 27 39 87 23 67 68 30 41 44 32 35 34 46 48 82 64 57 52 31 58 60 61 13 66 69 70 71 59 75 43 53 49 51 76 55 29 79 38 62 42 92 47 102 98 3 63 84 1 81 45 9 17 26 80 5 85 104 91 18 36 86 94 8 100 101 103 25 89 72 4 21 110 90 95 78 77 97 56 96 99 112 113 106 88 22 83 105 114 6 107 111 73 115 40 2 108 50 19 28 \n", "4 13 18 76 121 8 9 12 22 27 29 16 83 53 30 17 19 15 23 102 31 3 24 25 26 32 28 36 99 115 60 34 55 37 5 70 38 40 78 41 44 48 33 45 49 139 39 42 54 111 2 43 46 56 51 57 64 80 63 52 67 69 116 65 68 79 10 82 75 81 86 107 84 87 7 92 50 94 47 141 123 88 1 85 95 71 128 91 73 100 93 131 96 62 114 97 106 101 104 66 77 74 105 14 61 108 103 109 110 119 134 11 98 113 120 117 124 89 122 129 58 126 127 138 35 130 142 135 132 143 133 20 118 125 136 21 59 137 90 72 140 112 6 \n", "7 10 12 2 3 58 8 14 17 83 59 33 23 15 22 6 11 92 24 9 5 35 52 16 40 90 62 50 66 72 13 71 18 55 37 25 47 48 26 27 29 44 32 45 69 56 49 41 53 86 54 21 76 42 95 65 64 43 46 51 85 57 39 30 61 63 81 67 28 4 73 20 34 80 89 77 82 19 31 74 75 84 78 1 79 70 36 38 87 88 93 91 94 68 60 \n", "6 3 13 10 8 11 5 2 4 7 12 1 9 \n", "2 6 5 1 3 4 \n", "3 6 5 1 2 4 \n", "2 4 1 3 \n", "2 4 1 3 \n"]}}, {"index": 4008, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given an array $a$ consisting of $n$ integer numbers.\n\nYou have to color this array in $k$ colors in such a way that:   Each element of the array should be colored in some color;  For each $i$ from $1$ to $k$ there should be at least one element colored in the $i$-th color in the array;  For each $i$ from $1$ to $k$ all elements colored in the $i$-th color should be distinct. \n\nObviously, such coloring might be impossible. In this case, print \"NO\". Otherwise print \"YES\" and any coloring (i.e. numbers $c_1, c_2, \\dots c_n$, where $1 \\le c_i \\le k$ and $c_i$ is the color of the $i$-th element of the given array) satisfying the conditions above. If there are multiple answers, you can print any.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the length of the array $a$ and the number of colors, respectively.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 5000$) \u2014 elements of the array $a$.\n\n\n-----Output-----\n\nIf there is no answer, print \"NO\". Otherwise print \"YES\" and any coloring (i.e. numbers $c_1, c_2, \\dots c_n$, where $1 \\le c_i \\le k$ and $c_i$ is the color of the $i$-th element of the given array) satisfying the conditions described in the problem statement. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n4 2\n1 2 2 3\n\nOutput\nYES\n1 1 2 2\n\nInput\n5 2\n3 2 1 2 3\n\nOutput\nYES\n2 1 1 2 1\n\nInput\n5 2\n2 1 1 2 1\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example the answer $2~ 1~ 2~ 1$ is also acceptable.\n\nIn the second example the answer $1~ 1~ 1~ 2~ 2$ is also acceptable.\n\nThere exist other acceptable answers for both examples.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4 2\n1 2 2 3\n", "5 2\n3 2 1 2 3\n", "5 2\n2 1 1 2 1\n", "5 4\n1 1 1 2 2\n", "11 9\n1 1 2 2 2 2 2 2 3 4 5\n", "4 4\n1 2 2 3\n", "5 5\n1 1 2 1 1\n", "4 4\n1 1 2 2\n", "5 4\n1 2 1 2 3\n", "5 5\n1 1 2 1 3\n", "10 10\n1 2 3 1 2 3 4 5 6 7\n", "8 6\n1 2 3 3 2 2 3 1\n", "6 4\n1 1 2 2 3 3\n", "5 5\n1 1 2 2 3\n", "4 3\n2 2 1 1\n", "10 10\n1 1 2 2 3 3 4 4 5 5\n", "6 5\n1 1 2 2 3 3\n", "4 4\n3 3 3 5\n", "9 8\n1 2 2 3 3 3 4 5 4\n", "5 5\n2 1 1 2 1\n", "6 6\n1 1 2 1 2 2\n", "6 6\n1 1 1 2 2 2\n", "8 8\n1 1 1 1 1 2 2 3\n", "6 6\n2 1 1 2 1 3\n", "5 3\n3 2 1 2 3\n", "6 6\n1 2 3 3 3 3\n", "1 1\n5000\n", "3 3\n6 7 8\n", "8 6\n1 1 2 2 3 4 5 6\n", "7 5\n2 3 2 1 1 1 3\n", "5 4\n1 2 1 2 4\n", "8 8\n1 2 2 2 1 1 3 3\n", "3 2\n5000 5000 5000\n", "7 6\n1 2 3 4 2 3 4\n", "2 1\n5000 5000\n", "5 4\n3 2 1 2 3\n", "4 4\n2 1 2 3\n", "4 4\n2 1 3 2\n", "6 6\n1 2 2 2 3 3\n", "7 6\n1 2 3 7 7 7 7\n", "1 1\n500\n", "8 8\n2 1 1 1 1 1 1 1\n", "6 6\n1 1 2 2 3 3\n", "10 9\n1 2 1 1 1 1 1 1 2 1\n", "8 8\n1 2 8 2 3 3 3 3\n", "9 9\n1 2 2 3 2 5 3 6 8\n", "4 4\n1 2 1 2\n", "4 2\n2000 2000 2000 3\n", "5 5\n1 2 1 2 4\n", "8 8\n1 2 2 2 1 1 1 1\n"], "outputs": ["YES\n1 2 1 2 \n", "YES\n2 2 1 1 1 \n", "NO\n", "YES\n1 2 3 4 1 \n", "YES\n1 2 3 4 5 6 7 8 9 1 2 \n", "YES\n1 2 3 4 \n", "YES\n1 2 5 3 4 \n", "YES\n1 2 3 4 \n", "YES\n1 3 2 4 1 \n", "YES\n1 2 4 3 5 \n", "YES\n1 3 5 2 4 6 7 8 9 10 \n", "YES\n1 3 6 1 4 5 2 2 \n", "YES\n1 2 3 4 1 2 \n", "YES\n1 2 3 4 5 \n", "YES\n3 1 1 2 \n", "YES\n1 2 3 4 5 6 7 8 9 10 \n", "YES\n1 2 3 4 5 1 \n", "YES\n1 2 3 4 \n", "YES\n1 2 3 4 5 6 7 1 8 \n", "YES\n4 1 2 5 3 \n", "YES\n1 2 4 3 5 6 \n", "YES\n1 2 3 4 5 6 \n", "YES\n1 2 3 4 5 6 7 8 \n", "YES\n4 1 2 5 3 6 \n", "YES\n1 2 1 3 2 \n", "YES\n1 2 3 4 5 6 \n", "YES\n1 \n", "YES\n1 2 3 \n", "YES\n1 2 3 4 5 6 1 2 \n", "YES\n4 1 5 1 2 3 2 \n", "YES\n1 3 2 4 1 \n", "YES\n1 4 5 6 2 3 7 8 \n", "NO\n", "YES\n1 2 4 6 3 5 1 \n", "NO\n", "YES\n4 2 1 3 1 \n", "YES\n2 1 3 4 \n", "YES\n2 1 4 3 \n", "YES\n1 2 3 4 5 6 \n", "YES\n1 2 3 4 5 6 1 \n", "YES\n1 \n", "YES\n8 1 2 3 4 5 6 7 \n", "YES\n1 2 3 4 5 6 \n", "YES\n1 9 2 3 4 5 6 7 1 8 \n", "YES\n1 2 8 3 4 5 6 7 \n", "YES\n1 2 3 5 4 7 6 8 9 \n", "YES\n1 3 2 4 \n", "NO\n", "YES\n1 3 2 4 5 \n", "YES\n1 6 7 8 2 3 4 5 \n"]}, "test_in_outs": {"inputs": ["5 5\n3 2 1 2 3\n", "9 9\n1 1 1 1 2 2 2 2 2\n", "6 6\n1 1 1 1 2 3\n", "5 5\n1 2 2 1 1\n", "50 20\n1 1 1 1 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n", "5 5\n1 2 3 3 3\n", "5 5\n1 1 1 3 3\n", "7 3\n1 2 3 4 5 5 1\n", "2 1\n7 9\n", "4 2\n4999 4999 4999 3\n", "5 5\n1 1 3 3 3\n", "3 3\n1 1 2\n", "5 5\n2 2 1 1 2\n", "6 5\n1 2 3 4 4 4\n", "1 1\n1\n", "6 6\n1 2 1 2 4 5\n", "8 6\n1 2 3 4 1 2 3 4\n", "6 5\n1 2 1 2 1 2\n", "10 10\n1 2 3 1 2 3 1 2 4 5\n", "8 5\n9 3 9 6 10 7 8 2\n", "18 18\n10 9 8 7 5 3 6 2 2 9 7 8 2 9 2 8 10 7\n", "5 1\n5 2 3 4 5\n", "9 9\n9 8 1 3 4 5 3 8 9\n", "10 10\n1 2 3 3 2 1 4 5 7 10\n", "10 10\n1 2 3 3 2 1 4 5 6 10\n", "3 2\n500 500 500\n", "5 5\n1 2 3 1 2\n", "10 5\n1 2 3 4 1 2 3 4 1 2\n", "10 7\n1 2 3 1 2 3 1 2 3 1\n", "3 3\n1 2 2\n", "4 4\n4999 5000 5000 4999\n", "12 12\n8 8 8 8 8 8 4 4 4 4 2 2\n", "5 4\n25 2 3 2 2\n", "7 6\n1 1 1 1 1 2 2\n", "3 3\n5 5 5\n", "1 1\n2\n", "6 2\n100 100 101 101 102 102\n", "8 8\n1 1 2 2 3 3 4 4\n", "3 1\n2 2 1\n", "5 5\n1 1 2 2 1\n", "8 6\n1 1 1 1 2 2 2 2\n", "3 2\n2019 2019 2019\n", "3 2\n2018 2018 2018\n", "10 10\n1 2 3 1 2 3 4 5 6 42\n", "7 7\n1 1 1 1 2 3 4\n", "10 10\n2017 2018 2019 2017 2018 2019 2020 2021 2022 2023\n", "5 4\n1 4 6 6 3\n", "4 4\n1 2 2 1\n", "6 6\n1 1 2 2 3 4\n", "6 3\n2 1 3 4 5 1\n"], "outputs": ["YES\n4 2 1 3 5 \n", "YES\n1 2 3 4 5 6 7 8 9 \n", "YES\n1 2 3 4 5 6 \n", "YES\n1 4 5 2 3 \n", "YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 \n", "YES\n1 2 3 4 5 \n", "YES\n1 2 3 4 5 \n", "YES\n1 3 1 2 3 1 2 \n", "YES\n1 1 \n", "NO\n", "YES\n1 2 3 4 5 \n", "YES\n1 2 3 \n", "YES\n3 4 1 2 5 \n", "YES\n1 2 3 4 5 1 \n", "YES\n1 \n", "YES\n1 3 2 4 5 6 \n", "YES\n1 3 5 1 2 4 6 2 \n", "YES\n1 4 2 5 3 1 \n", "YES\n1 4 7 2 5 8 3 6 9 10 \n", "YES\n1 2 2 3 3 4 5 1 \n", "YES\n17 14 11 8 6 5 7 1 2 15 9 12 3 16 4 13 18 10 \n", "NO\n", "YES\n8 6 1 2 4 5 3 7 9 \n", "YES\n1 3 5 6 4 2 7 8 9 10 \n", "YES\n1 3 5 6 4 2 7 8 9 10 \n", "NO\n", "YES\n1 3 5 2 4 \n", "YES\n1 4 2 4 2 5 3 5 3 1 \n", "YES\n1 5 1 2 6 2 3 7 3 4 \n", "YES\n1 2 3 \n", "YES\n1 3 4 2 \n", "YES\n7 8 9 10 11 12 3 4 5 6 1 2 \n", "YES\n1 1 4 2 3 \n", "YES\n1 2 3 4 5 6 1 \n", "YES\n1 2 3 \n", "YES\n1 \n", "YES\n1 2 1 2 1 2 \n", "YES\n1 2 3 4 5 6 7 8 \n", "NO\n", "YES\n1 2 4 5 3 \n", "YES\n1 2 3 4 5 6 1 2 \n", "NO\n", "NO\n", "YES\n1 3 5 2 4 6 7 8 9 10 \n", "YES\n1 2 3 4 5 6 7 \n", "YES\n1 3 5 2 4 6 7 8 9 10 \n", "YES\n1 3 4 1 2 \n", "YES\n1 3 4 2 \n", "YES\n1 2 3 4 5 6 \n", "YES\n3 1 1 2 3 2 \n"]}}, {"index": 4009, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given a huge decimal number consisting of $n$ digits. It is guaranteed that this number has no leading zeros. Each digit of this number is either 0 or 1.\n\nYou may perform several (possibly zero) operations with this number. During each operation you are allowed to change any digit of your number; you may change 0 to 1 or 1 to 0. It is possible that after some operation you can obtain a number with leading zeroes, but it does not matter for this problem.\n\nYou are also given two integers $0 \\le y < x < n$. Your task is to calculate the minimum number of operations you should perform to obtain the number that has remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n, x, y$ ($0 \\le y < x < n \\le 2 \\cdot 10^5$) \u2014 the length of the number and the integers $x$ and $y$, respectively.\n\nThe second line of the input contains one decimal number consisting of $n$ digits, each digit of this number is either 0 or 1. It is guaranteed that the first digit of the number is 1.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum number of operations you should perform to obtain the number having remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n\n\n-----Examples-----\nInput\n11 5 2\n11010100101\n\nOutput\n1\n\nInput\n11 5 1\n11010100101\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example the number will be $11010100100$ after performing one operation. It has remainder $100$ modulo $100000$.\n\nIn the second example the number will be $11010100010$ after performing three operations. It has remainder $10$ modulo $100000$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["11 5 2\n11010100101\n", "11 5 1\n11010100101\n", "2 1 0\n10\n", "11 5 2\n11010000101\n", "11 5 0\n11010011001\n", "7 3 0\n1100101\n", "7 5 2\n1000100\n", "4 2 1\n1011\n", "100 89 33\n1011000100000110011111000100001000000000010110100111101110111011010001010110110011010110101101111101\n", "3 1 0\n100\n", "5 1 0\n10001\n", "11 5 2\n10000000000\n", "5 3 2\n10100\n", "13 10 0\n1000001101100\n", "8 5 2\n10000010\n", "9 3 2\n100010101\n", "8 3 1\n10000000\n", "5 3 2\n10111\n", "12 5 2\n100000000100\n", "5 3 0\n10000\n", "5 3 2\n10010\n", "5 2 1\n11010\n", "5 3 2\n10000\n", "5 1 0\n11101\n", "4 2 0\n1000\n", "6 4 2\n100010\n", "11 5 0\n11010100100\n", "6 2 1\n111000\n", "50 14 6\n10110010000100111011111111000010001011100010100110\n", "5 3 2\n10011\n", "5 2 0\n10000\n", "5 3 1\n10001\n", "60 17 15\n111101011111000010000001011000000001010011001000011100110100\n", "20 11 9\n11110000010011101010\n", "7 5 3\n1011000\n", "8 6 5\n10100000\n", "39 15 0\n101101100000000000110001011011111010011\n", "46 16 10\n1001011011100010100000101001001010001110111101\n", "5 2 1\n10000\n", "96 25 9\n101110000001101011011001000111010111110011010010100111111100101111010000100001111100101001101011\n", "8 5 2\n10000100\n", "11 5 2\n11110000101\n", "8 5 2\n10011110\n", "81 24 18\n111010110101010001111101100001101000000100111111111001100101011110001000001000110\n", "7 4 2\n1000100\n", "5 3 0\n10111\n", "16 2 0\n1101011000011000\n", "5 1 0\n10000\n", "5 3 0\n10001\n"], "outputs": ["1\n", "3\n", "1\n", "1\n", "2\n", "1\n", "0\n", "1\n", "47\n", "1\n", "0\n", "1\n", "0\n", "5\n", "2\n", "1\n", "1\n", "2\n", "0\n", "1\n", "2\n", "0\n", "1\n", "0\n", "1\n", "2\n", "2\n", "1\n", "8\n", "3\n", "1\n", "2\n", "6\n", "7\n", "1\n", "0\n", "9\n", "11\n", "1\n", "12\n", "0\n", "1\n", "3\n", "9\n", "0\n", "2\n", "1\n", "1\n", "0\n"]}, "test_in_outs": {"inputs": ["11 5 1\n11010000101\n", "5 2 0\n11011\n", "10 5 3\n1000000000\n", "74 45 35\n10110111111000011110111110000101000110000000100010101010001110010111100101\n", "10 5 2\n1101000100\n", "4 1 0\n1000\n", "46 15 12\n1000111101111100001010001100000001000101010100\n", "74 43 12\n10001011100000010110110111000101110100000000001100100100110110111101001011\n", "6 3 2\n100000\n", "51 44 21\n111011011001100110101011100110010010011111111101000\n", "213 5 3\n111001111110111001101011111100010010011001000001111010110110011000100000101010111110010001111110001010011001101000000011111110101001101100100100110100000111111100010100011010010001011100111011000001110000111000101\n", "64 40 14\n1010011100101100101011000001000011110111011011000111011011000100\n", "40 7 0\n1101010110000100101110101100100101001000\n", "10 5 3\n1111000100\n", "6 3 1\n100010\n", "12 4 3\n110011100111\n", "78 7 5\n101001001101100101110111111110010011101100010100100001111011110110111100011101\n", "10 7 3\n1101111111\n", "5 2 1\n10010\n", "28 25 19\n1000011111100000111101010101\n", "15 6 1\n100000000100100\n", "7 5 2\n1010100\n", "49 15 14\n1011110111101100110101010110110100001100011011010\n", "6 3 1\n110110\n", "6 4 2\n100100\n", "4 1 0\n1101\n", "7 5 2\n1000000\n", "4 2 1\n1000\n", "11 5 2\n11010000001\n", "6 1 0\n100000\n", "107 5 3\n11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "7 5 4\n1010100\n", "11 5 4\n10101010101\n", "7 5 2\n1000101\n", "8 5 1\n10000000\n", "6 3 0\n110011\n", "5 3 1\n10111\n", "103 5 2\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "102 5 2\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "5 1 0\n10101\n", "7 1 0\n1111001\n", "10 1 0\n1000000000\n", "10 1 0\n1010000100\n", "10 5 3\n1111001111\n", "11 5 2\n11110000100\n", "11 1 0\n11010100101\n", "11 5 1\n11111000010\n", "52 43 29\n1111010100110101101000010110101110011101110111101001\n", "4 2 0\n1001\n", "5 4 0\n11001\n"], "outputs": ["3\n", "1\n", "1\n", "20\n", "0\n", "1\n", "4\n", "21\n", "1\n", "26\n", "3\n", "19\n", "3\n", "2\n", "0\n", "4\n", "5\n", "6\n", "0\n", "13\n", "3\n", "1\n", "8\n", "1\n", "0\n", "0\n", "1\n", "1\n", "2\n", "1\n", "4\n", "1\n", "2\n", "1\n", "1\n", "1\n", "2\n", "4\n", "4\n", "0\n", "0\n", "1\n", "1\n", "3\n", "0\n", "0\n", "0\n", "26\n", "0\n", "1\n"]}}, {"index": 4010, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given an array $a$ consisting of $n$ integers.\n\nYour task is to determine if $a$ has some subsequence of length at least $3$ that is a palindrome.\n\nRecall that an array $b$ is called a subsequence of the array $a$ if $b$ can be obtained by removing some (possibly, zero) elements from $a$ (not necessarily consecutive) without changing the order of remaining elements. For example, $[2]$, $[1, 2, 1, 3]$ and $[2, 3]$ are subsequences of $[1, 2, 1, 3]$, but $[1, 1, 2]$ and $[4]$ are not.\n\nAlso, recall that a palindrome is an array that reads the same backward as forward. In other words, the array $a$ of length $n$ is the palindrome if $a_i = a_{n - i - 1}$ for all $i$ from $1$ to $n$. For example, arrays $[1234]$, $[1, 2, 1]$, $[1, 3, 2, 2, 3, 1]$ and $[10, 100, 10]$ are palindromes, but arrays $[1, 2]$ and $[1, 2, 3, 1]$ are not.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nNext $2t$ lines describe test cases. The first line of the test case contains one integer $n$ ($3 \\le n \\le 5000$) \u2014 the length of $a$. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$ ($\\sum n \\le 5000$).\n\n\n-----Output-----\n\nFor each test case, print the answer \u2014 \"YES\" (without quotes) if $a$ has some subsequence of length at least $3$ that is a palindrome and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\nOutput\nYES\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test case of the example, the array $a$ has a subsequence $[1, 2, 1]$ which is a palindrome.\n\nIn the second test case of the example, the array $a$ has two subsequences of length $3$ which are palindromes: $[2, 3, 2]$ and $[2, 2, 2]$.\n\nIn the third test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\n\nIn the fourth test case of the example, the array $a$ has one subsequence of length $4$ which is a palindrome: $[1, 2, 2, 1]$ (and has two subsequences of length $3$ which are palindromes: both are $[1, 2, 1]$).\n\nIn the fifth test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n", "1\n3\n1 1 1\n", "1\n3\n3 3 3\n", "1\n3\n2 2 2\n", "1\n5\n1 1 1 1 1\n", "2\n3\n1 1 1\n3\n1 1 1\n", "1\n6\n1 1 1 1 1 1\n", "1\n6\n1 2 1 2 1 2\n", "2\n3\n1 1 1\n5\n5 5 5 5 5\n", "1\n6\n1 1 2 2 1 1\n", "1\n5\n2 2 2 2 2\n", "1\n5\n1 2 3 3 3\n", "3\n5\n1 1 1 1 1\n3\n1 1 1\n3\n1 2 1\n", "1\n4\n2 2 2 2\n", "4\n5\n1 2 3 4 4\n5\n1 1 2 3 4\n3\n1 2 1\n3\n1 1 1\n", "1\n4\n1 1 1 1\n", "1\n10\n1 1 1 4 5 6 7 8 9 10\n", "1\n4\n4 3 1 2\n", "6\n14\n7 7 8 8 8 8 8 9 9 12 12 13 14 14\n27\n4 4 7 11 14 14 16 16 19 19 19 19 19 19 19 19 19 19 19 19 19 20 20 21 23 23 27\n30\n9 10 16 27 13 24 16 29 3 7 12 1 20 25 30 8 28 24 29 8 26 7 24 2 24 24 26 25 4 18\n25\n1 4 6 6 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 16 20\n21\n12 5 15 5 1 7 20 5 6 16 10 15 10 4 21 19 7 11 3 13 13\n13\n2 2 4 10 4 6 6 8 13 11 4 13 1\n", "1\n3\n2 2 1\n", "1\n4\n3 1 1 1\n", "5\n5\n1 2 3 4 4\n5\n1 1 2 3 4\n3\n1 2 1\n3\n1 1 1\n10\n1 2 3 4 5 6 7 8 9 1\n", "1\n3\n2 3 1\n", "2\n3\n1 1 1\n3\n2 2 2\n", "1\n22\n2 4 4 5 5 6 10 12 15 15 18 18 19 19 19 19 19 19 19 19 22 22\n", "1\n50\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\n", "6\n7\n2 3 3 7 2 4 7\n3\n1 1 2\n6\n1 1 6 6 6 6\n24\n3 3 4 4 5 5 7 11 13 13 14 14 14 14 14 14 14 14 14 15 15 21 21 23\n3\n1 1 3\n23\n1 1 4 4 9 9 11 11 12 12 13 14 14 14 14 14 14 18 18 19 19 22 22\n", "2\n4\n4 2 3 2\n23\n8 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 15 15 20\n", "1\n6\n2 2 2 2 2 2\n", "13\n6\n2 2 5 5 6 6\n6\n2 2 2 2 2 4\n11\n2 3 11 7 8 6 3 11 6 5 11\n14\n1 2 1 14 14 7 3 7 7 3 5 1 1 14\n6\n2 4 6 5 1 1\n17\n10 12 6 12 15 11 2 14 13 13 8 14 5 7 11 7 2\n29\n3 4 6 6 14 14 17 17 18 18 22 22 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27\n10\n9 1 2 10 7 6 5 4 5 1\n11\n1 1 1 1 1 1 1 1 1 9 11\n15\n3 4 6 9 9 14 14 14 14 14 14 14 14 14 14\n3\n2 3 3\n10\n8 10 3 6 6 8 3 1 9 4\n15\n1 2 3 4 4 4 4 4 4 4 4 4 11 14 14\n", "9\n4\n1 1 2 4\n22\n11 1 5 1 13 15 1 9 13 4 4 1 5 19 13 18 1 12 1 5 17 10\n17\n10 2 1 15 6 7 3 9 9 1 12 14 12 11 17 15 14\n29\n5 27 17 29 5 1 18 16 18 11 4 5 4 9 16 9 3 18 13 12 23 10 14 11 14 11 8 27 29\n9\n2 6 3 4 8 1 4 3 8\n13\n10 5 2 1 2 5 1 11 6 9 6 4 12\n10\n5 1 4 8 1 3 6 7 5 2\n26\n15 7 15 26 24 9 19 10 3 5 18 8 20 1 12 26 12 19 3 19 12 4 6 12 14 19\n28\n1 12 12 13 13 19 19 20 21 21 21 21 21 21 21 21 21 21 21 21 21 21 23 23 24 25 25 27\n", "3\n3\n1 1 1\n3\n2 1 1\n3\n1 2 1\n", "15\n16\n1 1 1 1 1 1 1 1 1 1 1 1 5 12 12 14\n18\n12 14 12 15 17 16 11 5 15 15 7 15 15 14 16 16 11 11\n13\n4 9 11 7 13 9 10 1 3 7 12 5 9\n3\n3 2 2\n6\n6 3 2 2 3 1\n20\n2 2 4 4 5 5 5 5 5 5 5 5 5 5 6 8 10 12 12 17\n25\n1 1 6 6 8 8 9 10 14 16 16 16 16 16 16 16 16 16 16 16 16 18 21 21 23\n15\n6 1 5 3 15 10 14 15 14 3 13 12 9 7 3\n6\n1 1 5 5 5 6\n11\n2 2 4 4 6 6 6 7 7 8 8\n7\n5 2 4 1 4 3 2\n9\n1 1 3 3 3 4 4 9 9\n16\n5 6 6 7 7 7 7 7 7 7 8 12 12 13 15 15\n17\n1 1 1 1 1 1 1 4 4 7 7 11 13 13 15 17 17\n4\n3 3 4 2\n", "1\n4\n1 4 3 2\n", "10\n11\n4 7 7 8 8 10 10 10 10 11 11\n26\n2 2 3 3 7 7 10 10 12 16 17 17 23 23 23 23 23 23 23 23 23 23 23 23 26 26\n6\n3 5 6 3 4 6\n30\n4 4 5 5 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 11 16 16 23 23 26 26 27\n22\n1 3 3 9 9 11 13 13 13 13 13 13 13 13 13 13 13 13 14 14 15 17\n20\n1 3 14 20 12 3 12 20 18 14 10 10 6 7 4 17 12 7 19 2\n25\n25 16 10 15 14 3 6 21 11 2 20 2 21 7 11 25 16 11 13 19 24 12 24 25 14\n13\n8 9 13 5 2 7 4 9 5 5 3 13 6\n10\n5 7 7 7 7 7 7 7 7 10\n12\n12 5 8 1 2 1 2 11 8 9 2 2\n", "4\n3\n1 1 1\n4\n1 1 2 1\n5\n1 2 3 3 1\n6\n1 1 1 1 1 1\n", "2\n3\n2 2 2\n5\n1 2 5 3 5\n", "9\n25\n1 1 3 7 12 16 16 19 21 21 22 22 22 22 22 22 22 22 22 22 22 22 22 22 23\n29\n1 1 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 11 12 15 17 17 20 21 21 22 24 24 27\n22\n2 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 12 12 14 15 20 22\n8\n3 5 8 4 1 8 3 3\n11\n1 2 2 3 4 4 6 6 6 8 8\n28\n3 5 5 6 6 9 9 12 18 21 22 22 25 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26\n7\n7 2 3 3 3 6 6\n7\n2 2 4 4 4 4 4\n30\n11 19 2 23 29 12 5 20 20 12 5 20 18 6 15 10 2 6 3 14 26 13 6 25 7 13 22 29 23 28\n", "2\n5\n1 1 1 1 1\n5\n1 2 5 3 5\n", "1\n4\n4 3 2 1\n", "5\n3\n1 1 1\n4\n1 1 2 1\n5\n1 2 3 3 1\n6\n1 1 1 1 1 1\n3\n1 1 2\n", "1\n6\n1 2 3 3 3 3\n", "2\n3\n2 2 2\n3\n2 2 2\n", "1\n6\n2 2 2 1 1 1\n", "1\n4\n2 1 1 1\n", "4\n18\n1 14 4 10 14 18 13 6 14 8 17 15 2 15 10 11 1 5\n14\n2 2 5 5 8 10 10 11 11 11 11 11 14 14\n6\n2 5 2 4 6 4\n10\n1 4 2 10 3 6 5 4 3 1\n", "3\n4\n3 1 1 1\n6\n1 3 4 2 5 4\n3\n1 2 1\n", "10\n20\n2 2 2 2 2 2 2 2 2 2 2 2 6 6 8 12 14 16 20 20\n11\n11 10 3 6 2 6 2 11 6 2 5\n13\n1 2 5 5 6 6 6 6 6 6 6 6 12\n6\n5 6 6 6 6 6\n18\n14 18 11 11 4 6 16 1 8 4 9 18 1 9 13 12 18 3\n23\n4 4 4 4 4 4 4 4 4 4 4 9 9 14 14 17 17 18 18 21 21 22 22\n7\n4 4 4 4 4 5 7\n21\n1 1 3 3 5 5 6 6 6 6 6 6 6 6 6 6 6 11 17 20 20\n25\n2 2 3 5 9 9 13 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 21 21\n15\n1 1 1 1 1 1 1 3 4 4 7 7 10 10 14\n", "1\n5\n3 3 1 4 2\n"], "outputs": ["YES\nYES\nNO\nYES\nNO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\nYES\n", "YES\n", "YES\n", "YES\nYES\n", "YES\n", "YES\n", "YES\n", "YES\nYES\nYES\n", "YES\n", "NO\nNO\nYES\nYES\n", "YES\n", "YES\n", "NO\n", "YES\nYES\nYES\nYES\nYES\nYES\n", "NO\n", "YES\n", "NO\nNO\nYES\nYES\nYES\n", "NO\n", "YES\nYES\n", "YES\n", "YES\n", "YES\nNO\nYES\nYES\nNO\nYES\n", "YES\nYES\n", "YES\n", "NO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\n", "NO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n", "YES\nNO\nYES\n", "YES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\n", "NO\n", "YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n", "YES\nYES\nYES\nYES\n", "YES\nYES\n", "YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n", "YES\nYES\n", "NO\n", "YES\nYES\nYES\nYES\nNO\n", "YES\n", "YES\nYES\n", "YES\n", "YES\n", "YES\nYES\nYES\nYES\n", "YES\nYES\nYES\n", "YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n", "NO\n"]}, "test_in_outs": {"inputs": ["1\n5\n5 5 5 5 5\n", "2\n4\n2 2 2 2\n4\n2 1 1 2\n", "1\n4\n1 1 1 2\n", "1\n5\n1 1 2 2 2\n", "2\n5\n3 3 1 4 2\n5\n1 2 3 3 3\n", "2\n4\n4 4 4 4\n17\n2 6 6 10 12 13 13 13 13 13 13 13 13 13 15 15 16\n", "3\n3\n2 2 2\n4\n2 1 1 2\n5\n1 3 3 2 1\n", "3\n5\n2 1 5 4 2\n5\n5 5 5 5 5\n6\n5 5 2 2 1 1\n", "3\n5\n3 3 1 4 2\n5\n1 2 3 3 3\n5\n3 3 3 1 2\n", "4\n5\n1 2 3 3 5\n7\n7 6 1 5 2 6 1\n7\n7 6 2 3 2 6 1\n10\n9 9 9 9 9 9 9 9 9 9\n", "1\n4\n1 2 2 2\n", "1\n5\n2 3 3 3 4\n", "3\n4\n2 2 2 2\n4\n2 1 1 2\n3\n2 1 2\n", "1\n3\n2 1 1\n", "1\n4\n2 3 3 3\n", "5\n5\n1 2 3 5 3\n7\n7 6 1 5 2 6 1\n7\n7 6 2 3 2 6 1\n10\n9 9 9 9 9 9 9 9 9 9\n8\n1 2 3 4 5 3 7 1\n", "7\n18\n2 2 2 2 2 2 2 2 2 2 3 7 7 10 13 14 14 16\n7\n4 7 2 2 2 3 1\n24\n8 8 9 2 20 14 6 2 12 20 1 6 19 6 5 8 14 23 16 14 5 2 18 3\n21\n20 6 18 4 6 14 7 14 4 12 10 8 11 2 5 9 16 12 4 1 15\n6\n3 3 4 4 6 6\n30\n12 2 28 17 24 21 19 2 25 5 20 15 29 7 7 9 13 19 15 30 9 21 2 28 23 3 21 15 18 12\n23\n4 4 7 7 12 13 13 14 14 14 14 14 14 14 14 14 14 14 14 18 18 23 23\n", "1\n5\n1 2 3 4 1\n", "3\n3\n3 3 3\n5\n5 5 5 5 5\n3\n1 2 3\n", "2\n6\n2 2 2 2 2 2\n3\n1 2 3\n", "3\n8\n2 2 2 2 2 5 5 8\n3\n1 1 1\n23\n3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 6 11 14 14 20 21\n", "3\n3\n3 3 3\n3\n3 1 3\n3\n3 3 2\n", "5\n3\n3 3 3\n3\n1 1 1\n5\n1 1 1 1 1\n5\n2 2 4 5 5\n3\n3 2 2\n", "1\n4\n2 4 4 4\n", "2\n5\n1 2 4 3 5\n3\n3 2 1\n", "4\n3\n1 1 1\n5\n1 2 3 1 1\n5\n1 2 3 4 4\n5\n1 2 3 3 3\n", "2\n3\n1 2 3\n3\n1 2 3\n", "3\n3\n2 2 2\n3\n2 2 3\n3\n3 2 2\n", "4\n3\n1 1 1\n3\n2 2 2\n4\n2 2 2 3\n4\n2 4 4 4\n", "1\n4\n4 4 4 4\n", "9\n4\n1 2 2 2\n6\n2 2 2 1 3 4\n5\n1 1 2 2 3\n7\n2 2 1 3 5 5 6\n8\n5 1 1 3 2 2 6 4\n5\n1 2 2 3 1\n7\n1 1 4 4 4 3 2\n10\n7 7 7 1 2 2 3 5 5 2\n10\n1 1 2 8 5 4 4 8 5 6\n", "1\n9\n7 5 2 6 4 5 4 4 8\n", "2\n4\n2 2 2 2\n3\n1 2 3\n", "1\n3\n1 2 2\n", "1\n7\n1 1 2 2 5 3 7\n", "1\n5\n1 2 3 4 5\n", "1\n3\n1 2 3\n", "1\n4\n1 2 1 3\n", "1\n5\n4 2 1 5 5\n", "5\n5\n2 2 1 1 3\n3\n2 2 1\n3\n2 1 1\n3\n1 1 2\n3\n1 1 1\n", "2\n4\n1 2 1 1\n5\n1 4 2 1 1\n", "1\n5\n5 4 4 1 5\n", "1\n6\n1 1 3 4 4 4\n", "30\n6\n1 1 4 4 3 3\n6\n1 1 4 3 2 2\n6\n1 1 3 4 4 4\n6\n1 1 3 2 3 4\n6\n1 1 3 4 2 2\n6\n1 1 2 2 4 2\n6\n1 1 3 3 2 4\n6\n1 1 4 4 4 2\n6\n1 1 4 2 2 3\n6\n1 1 4 3 3 2\n6\n1 1 4 2 4 2\n6\n1 1 2 4 2 3\n6\n1 1 4 3 4 4\n6\n1 1 3 2 2 3\n6\n1 1 4 2 3 3\n6\n1 1 3 4 4 2\n6\n1 1 2 3 3 4\n6\n1 1 3 3 4 2\n6\n1 1 4 2 3 4\n6\n1 1 2 2 2 4\n6\n1 1 2 4 2 3\n6\n1 1 2 4 3 4\n6\n1 1 4 3 2 2\n6\n1 1 4 3 4 3\n6\n1 1 4 2 2 4\n6\n1 1 2 4 3 2\n6\n1 1 2 2 2 4\n6\n1 1 4 2 4 4\n6\n1 1 4 3 2 2\n6\n1 1 4 2 2 2\n", "2\n3\n1 2 3\n3\n2 3 1\n", "1\n3\n3 1 2\n", "20\n6\n1 1 3 4 4 4\n6\n6 1 4 4 4 2\n6\n1 1 4 2 2 2\n6\n1 1 2 2 2 4\n6\n2 2 2 1 3 4\n4\n1 2 2 2\n7\n1 1 4 4 4 3 2\n6\n1 2 4 4 3 3\n6\n1 2 4 3 2 2\n6\n1 2 3 4 4 4\n6\n1 2 3 2 3 4\n6\n1 2 3 4 2 2\n6\n1 2 2 2 4 2\n6\n1 2 3 3 2 4\n6\n1 2 4 4 4 2\n6\n1 2 4 2 2 3\n6\n1 2 4 3 3 2\n6\n1 2 4 2 4 2\n6\n1 2 2 4 2 3\n6\n1 2 4 3 4 4\n", "2\n6\n1 1 1 2 2 2\n4\n1 2 2 2\n", "4\n16\n1 1 1 1 1 1 1 1 1 1 1 1 5 12 12 14\n18\n12 14 12 15 17 16 11 5 15 15 7 15 15 14 16 16 11 11\n13\n4 9 11 7 13 9 10 1 3 7 12 5 9\n3\n3 2 2\n"], "outputs": ["YES\n", "YES\nYES\n", "YES\n", "YES\n", "NO\nYES\n", "YES\nYES\n", "YES\nYES\nYES\n", "YES\nYES\nNO\n", "NO\nYES\nYES\n", "NO\nYES\nYES\nYES\n", "YES\n", "YES\n", "YES\nYES\nYES\n", "NO\n", "YES\n", "YES\nYES\nYES\nYES\nYES\n", "YES\nYES\nYES\nYES\nNO\nYES\nYES\n", "YES\n", "YES\nYES\nNO\n", "YES\nNO\n", "YES\nYES\nYES\n", "YES\nYES\nNO\n", "YES\nYES\nYES\nNO\nNO\n", "YES\n", "NO\nNO\n", "YES\nYES\nNO\nYES\n", "NO\nNO\n", "YES\nNO\nNO\n", "YES\nYES\nYES\nYES\n", "YES\n", "YES\nYES\nNO\nNO\nNO\nYES\nYES\nYES\nYES\n", "YES\n", "YES\nNO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\nNO\nNO\nNO\nYES\n", "YES\nYES\n", "YES\n", "YES\n", "NO\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nNO\nYES\n", "NO\nNO\n", "NO\n", "YES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n", "YES\nYES\n", "YES\nYES\nYES\nNO\n"]}}, {"index": 4011, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given a long decimal number $a$ consisting of $n$ digits from $1$ to $9$. You also have a function $f$ that maps every digit from $1$ to $9$ to some (possibly the same) digit from $1$ to $9$.\n\nYou can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in $a$, and replace each digit $x$ from this segment with $f(x)$. For example, if $a = 1337$, $f(1) = 1$, $f(3) = 5$, $f(7) = 3$, and you choose the segment consisting of three rightmost digits, you get $1553$ as the result.\n\nWhat is the maximum possible number you can obtain applying this operation no more than once?\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of digits in $a$.\n\nThe second line contains a string of $n$ characters, denoting the number $a$. Each character is a decimal digit from $1$ to $9$.\n\nThe third line contains exactly $9$ integers $f(1)$, $f(2)$, ..., $f(9)$ ($1 \\le f(i) \\le 9$).\n\n\n-----Output-----\n\nPrint the maximum number you can get after applying the operation described in the statement no more than once.\n\n\n-----Examples-----\nInput\n4\n1337\n1 2 5 4 6 6 3 1 9\n\nOutput\n1557\n\nInput\n5\n11111\n9 8 7 6 5 4 3 2 1\n\nOutput\n99999\n\nInput\n2\n33\n1 1 1 1 1 1 1 1 1\n\nOutput\n33\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4\n1337\n1 2 5 4 6 6 3 1 9\n", "5\n11111\n9 8 7 6 5 4 3 2 1\n", "2\n33\n1 1 1 1 1 1 1 1 1\n", "4\n1234\n1 1 4 5 1 1 1 1 1\n", "6\n912349\n1 1 4 5 1 1 1 1 1\n", "1\n5\n1 2 3 4 5 6 7 8 9\n", "2\n51\n1 2 5 4 6 6 3 1 9\n", "2\n51\n1 2 3 4 5 6 7 8 9\n", "3\n738\n3 7 4 9 4 6 7 3 3\n", "9\n193787726\n5 5 8 9 4 5 2 9 1\n", "4\n1733\n1 2 5 4 6 6 3 1 9\n", "15\n164563457334873\n4 3 3 3 6 6 8 8 5\n", "1\n9\n2 3 4 5 6 7 8 9 1\n", "8\n71222655\n8 4 8 9 7 6 6 4 8\n", "7\n6545161\n7 2 3 5 9 6 8 1 3\n", "4\n4444\n2 1 4 3 6 5 8 9 7\n", "5\n77372\n1 4 7 7 9 1 9 9 7\n", "2\n33\n4 5 5 8 7 7 5 4 4\n", "3\n931\n4 7 8 6 2 4 3 1 2\n", "1\n2\n9 7 6 2 2 6 2 4 4\n", "18\n263583239493593927\n7 7 3 7 7 6 9 7 6\n", "3\n512\n3 3 7 7 2 4 7 9 4\n", "2\n87\n6 2 9 2 4 3 9 6 4\n", "5\n21558\n6 9 4 9 6 6 5 9 7\n", "8\n72231447\n7 9 4 5 1 2 7 6 5\n", "2\n47\n9 1 2 3 7 3 8 6 1\n", "3\n934\n5 9 6 8 6 2 2 9 6\n", "4\n4841\n6 4 7 1 7 1 3 9 7\n", "1\n3\n2 8 4 5 4 1 7 2 3\n", "7\n3243631\n6 3 6 5 2 9 2 2 2\n", "3\n814\n5 7 1 7 4 3 9 4 4\n", "11\n95933442388\n4 8 4 6 3 7 5 8 5\n", "10\n2422346641\n4 2 8 7 4 7 1 9 7\n", "1\n2\n1 4 4 8 8 8 7 3 2\n", "4\n3753\n5 8 3 2 6 5 7 4 3\n", "2\n35\n1 8 7 2 1 8 8 6 2\n", "4\n7362\n2 6 4 6 5 7 5 5 8\n", "1\n3\n4 9 9 6 8 4 5 5 5\n", "15\n338725139492819\n6 2 4 9 2 9 3 8 9\n", "5\n96563\n6 7 4 8 5 5 4 7 4\n", "4\n5422\n3 4 1 8 6 5 1 7 2\n", "3\n743\n4 4 4 8 5 8 6 6 5\n", "5\n13362\n5 3 6 5 8 7 8 8 3\n", "3\n235\n4 7 3 2 6 8 8 7 5\n"], "outputs": ["1557\n", "99999\n", "33\n", "1245\n", "912459\n", "5\n", "61\n", "51\n", "748\n", "593787726\n", "1755\n", "464563457334873\n", "9\n", "78444677\n", "6959767\n", "4444\n", "99794\n", "55\n", "984\n", "7\n", "763783239493593927\n", "533\n", "89\n", "96669\n", "79947557\n", "48\n", "968\n", "4941\n", "4\n", "6356966\n", "857\n", "95944668488\n", "2722877774\n", "4\n", "3763\n", "75\n", "7476\n", "9\n", "448725139492819\n", "96564\n", "6844\n", "784\n", "56673\n", "736\n"]}, "test_in_outs": {"inputs": ["5\n28491\n1 6 5 5 8 9 6 9 4\n", "11\n42828727593\n8 8 7 5 6 5 4 8 9\n", "2\n42\n2 3 8 5 6 5 3 1 8\n", "20\n58832646452639258958\n9 2 2 1 1 4 8 6 6\n", "3\n649\n1 5 2 9 7 8 8 3 1\n", "6\n848821\n2 3 9 4 9 6 5 3 5\n", "6\n422354\n8 4 3 6 7 9 7 6 8\n", "2\n98\n7 5 5 4 8 3 1 9 4\n", "6\n853377\n3 5 7 3 9 5 8 1 5\n", "3\n613\n6 4 4 5 7 5 4 3 4\n", "3\n985\n3 5 3 8 8 6 4 4 3\n", "2\n22\n8 5 2 7 9 3 8 8 1\n", "4\n6785\n6 9 7 3 8 2 9 4 3\n", "1\n6\n4 8 2 6 8 8 8 8 3\n", "1\n3\n8 7 8 7 8 5 8 2 2\n", "5\n11636\n9 2 2 1 3 8 1 7 5\n", "5\n89126\n9 3 7 6 7 8 9 8 3\n", "5\n14241\n4 8 1 9 7 8 7 3 5\n", "19\n4752348644348366742\n6 7 9 7 5 7 9 9 5\n", "6\n463364\n9 7 7 4 9 7 3 3 6\n", "5\n14824\n6 3 4 5 4 7 9 9 7\n", "1\n6\n2 6 3 9 8 4 7 3 2\n", "11\n69351528788\n2 3 8 2 9 3 9 8 5\n", "3\n469\n5 6 8 9 2 6 7 1 5\n", "1\n4\n9 7 4 6 5 6 2 9 3\n", "4\n3511\n2 9 9 9 7 7 2 7 1\n", "1\n6\n4 2 1 6 8 9 5 2 3\n", "19\n2612437771227631192\n6 7 3 6 8 7 9 9 9\n", "5\n63192\n1 7 4 6 9 3 6 2 2\n", "2\n36\n1 4 7 5 3 2 7 8 7\n", "6\n135642\n7 9 3 8 4 8 2 3 8\n", "8\n25711736\n9 3 1 1 3 2 8 8 1\n", "9\n145553875\n9 2 5 3 8 6 3 1 5\n", "3\n536\n7 7 8 9 7 5 6 5 6\n", "5\n73491\n9 9 2 1 4 2 1 8 7\n", "11\n19727914253\n2 9 4 6 4 5 1 7 6\n", "1\n1\n9 6 4 3 4 6 8 9 6\n", "4\n3985\n2 8 1 1 9 2 2 8 3\n", "5\n97533\n2 8 4 8 9 2 2 8 2\n", "4\n3411\n2 9 5 8 1 9 9 1 1\n", "16\n3245311794575433\n3 5 3 4 3 4 2 7 5\n", "3\n149\n1 2 3 8 8 6 6 9 4\n", "3\n167\n3 1 6 6 7 8 5 6 3\n", "11\n15968722286\n8 6 8 3 5 7 3 8 4\n", "3\n149\n2 4 4 5 5 9 8 2 2\n"], "outputs": ["69591\n", "58888727593\n", "53\n", "58832646452639258958\n", "899\n", "848832\n", "644376\n", "99\n", "897788\n", "664\n", "988\n", "55\n", "6985\n", "8\n", "8\n", "99836\n", "89938\n", "49894\n", "7957979777979977977\n", "477774\n", "65935\n", "6\n", "69892938988\n", "969\n", "6\n", "9722\n", "9\n", "7767639996779736697\n", "64192\n", "76\n", "735642\n", "35711736\n", "945553875\n", "786\n", "73499\n", "29727914253\n", "9\n", "3989\n", "97944\n", "5822\n", "3545311794575433\n", "189\n", "387\n", "85968722286\n", "259\n"]}}, {"index": 4012, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given three integers $a \\le b \\le c$.\n\nIn one move, you can add $+1$ or $-1$ to any of these integers (i.e. increase or decrease any number by one). You can perform such operation any (possibly, zero) number of times, you can even perform this operation several times with one number. Note that you cannot make non-positive numbers using such operations.\n\nYou have to perform the minimum number of such operations in order to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$.\n\nYou have to answer $t$ independent test cases. \n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a separate line as three space-separated integers $a, b$ and $c$ ($1 \\le a \\le b \\le c \\le 10^4$).\n\n\n-----Output-----\n\nFor each test case, print the answer. In the first line print $res$ \u2014 the minimum number of operations you have to perform to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$. On the second line print any suitable triple $A, B$ and $C$.\n\n\n-----Example-----\nInput\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\nOutput\n1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n", "1\n137 10000 10000\n", "1\n1 137 10000\n", "1\n73 10000 10000\n", "1\n1667 3334 10000\n", "1\n256 4096 10000\n", "1\n1 1667 10000\n", "2\n1 137 10000\n1 1429 10000\n", "1\n1667 10000 10000\n", "1\n667 10000 10000\n", "1\n1 1000 1000\n", "1\n3334 3334 10000\n", "1\n137 137 10000\n", "1\n73 73 10000\n", "1\n3334 3335 10000\n", "1\n152 912 10000\n", "1\n3340 3340 10000\n", "1\n137 139 10000\n", "1\n1429 1429 10000\n", "2\n3334 3334 10000\n73 10000 10000\n", "1\n171 9999 10000\n", "1\n3 6 10000\n", "2\n437 10000 10000\n874 10000 10000\n", "1\n417 10000 10000\n", "1\n171 10000 10000\n", "1\n73 146 10000\n", "1\n1429 10000 10000\n", "1\n437 10000 10000\n", "1\n452 10000 10000\n", "1\n1 10000 10000\n", "1\n435 10000 10000\n", "1\n1 73 10000\n", "1\n1667 5001 9999\n", "1\n1667 1667 10000\n", "2\n73 10000 10000\n73 73 10000\n", "1\n1 667 10000\n", "1\n1667 5001 10000\n", "1\n2052 5002 10000\n", "1\n473 1771 9994\n", "1\n63 10000 10000\n"], "outputs": ["1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\n", "2\n137 10001 10001\n", "1\n1 137 10001\n", "2\n73 10001 10001\n", "2\n1667 3334 10002\n", "779\n257 3341 10023\n", "2\n1 1667 10002\n", "1\n1 137 10001\n3\n1 1429 10003\n", "4\n1667 10002 10002\n", "10\n667 10005 10005\n", "0\n1 1000 1000\n", "2\n3334 3334 10002\n", "1\n137 137 10001\n", "1\n73 73 10001\n", "3\n3334 3334 10002\n", "32\n152 912 10032\n", "14\n3334 3334 10002\n", "3\n137 137 10001\n", "3\n1429 1429 10003\n", "2\n3334 3334 10002\n2\n73 10001 10001\n", "16\n164 10004 10004\n", "2\n3 6 10002\n", "12\n435 10005 10005\n37\n909 9999 9999\n", "16\n417 10008 10008\n", "15\n164 10004 10004\n", "22\n77 154 10010\n", "6\n1429 10003 10003\n", "12\n435 10005 10005\n", "23\n455 10010 10010\n", "0\n1 10000 10000\n", "10\n435 10005 10005\n", "1\n1 73 10001\n", "3\n1667 5001 10002\n", "2\n1667 1667 10002\n", "2\n73 10001 10001\n1\n73 73 10001\n", "5\n1 667 10005\n", "2\n1667 5001 10002\n", "388\n1667 5001 10002\n", "173\n417 1668 10008\n", "10\n61 10004 10004\n"]}, "test_in_outs": {"inputs": ["1\n6 5583 8366\n", "1\n715 5005 10000\n", "2\n73 10000 10000\n71 10000 10000\n", "1\n152 912 9999\n", "3\n1 137 10000\n1 1429 10000\n1429 1429 10000\n", "1\n91 91 10000\n", "2\n667 10000 10000\n1 667 10000\n", "1\n556 5004 10000\n", "1\n278 10000 10000\n", "3\n1667 3334 10000\n137 10000 10000\n417 10000 10000\n", "1\n5 76 10000\n", "1\n44 2760 6796\n", "1\n667 667 10000\n", "3\n3334 3334 10000\n73 10000 10000\n273 10000 10000\n", "2\n455 10000 10000\n1 323 10000\n", "1\n2 749 1000\n", "1\n459 10000 10000\n", "1\n213 213 10000\n", "1\n1684 5052 10000\n", "3\n667 10000 10000\n1 667 10000\n1 556 10000\n", "6\n455 10000 10000\n1 323 10000\n278 10000 10000\n88 528 10000\n3334 3334 10000\n73 10000 10000\n", "1\n451 10000 10000\n", "1\n75 10000 10000\n", "1\n3533 3533 10000\n", "1\n1 1573 9014\n", "1\n54 7280 9967\n", "1\n176 4048 10000\n", "2\n1667 10000 10000\n3334 3335 10000\n", "2\n256 4096 10000\n2 749 1000\n", "1\n1 100 940\n", "10\n3351 6383 6479\n7051 9793 9929\n1 1061 9572\n5401 5401 5865\n9777 9987 9987\n3393 7229 9665\n8014 8533 8665\n9549 9917 9998\n3336 6686 9962\n5351 8201 9241\n", "3\n256 4096 10000\n2 749 1000\n417 10000 10000\n", "1\n1 1991 2975\n", "1\n71 9998 10000\n", "1\n71 9999 10000\n", "5\n1 2 3\n3 4 5\n5 6 7\n7 8 9\n10 11 12\n", "5\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n", "5\n1 2 3\n4 55 66\n888 999 1000\n483 2349 9999\n3842 8344 9999\n", "2\n233 233 233\n233 233 233\n", "1\n176 3344 10000\n", "1\n1 242 1324\n"], "outputs": ["1403\n4 4184 8368\n", "10\n715 5005 10010\n", "2\n73 10001 10001\n4\n73 10001 10001\n", "33\n152 912 10032\n", "1\n1 137 10001\n3\n1 1429 10003\n3\n1429 1429 10003\n", "10\n91 91 10010\n", "10\n667 10005 10005\n5\n1 667 10005\n", "8\n556 5004 10008\n", "16\n278 10008 10008\n", "2\n1667 3334 10002\n2\n137 10001 10001\n16\n417 10008 10008\n", "4\n5 80 10000\n", "502\n42 2268 6804\n", "5\n667 667 10005\n", "2\n3334 3334 10002\n2\n73 10001 10001\n21\n278 10008 10008\n", "20\n455 10010 10010\n13\n1 323 10013\n", "249\n2 500 1000\n", "24\n455 10010 10010\n", "11\n213 213 10011\n", "70\n1667 5001 10002\n", "10\n667 10005 10005\n5\n1 667 10005\n8\n1 556 10008\n", "20\n455 10010 10010\n13\n1 323 10013\n16\n278 10008 10008\n32\n88 528 10032\n2\n3334 3334 10002\n2\n73 10001 10001\n", "24\n455 10010 10010\n", "4\n73 10001 10001\n", "400\n3334 3334 10002\n", "73\n1 1502 9012\n", "2299\n56 4984 9968\n", "736\n176 3344 10032\n", "4\n1667 10002 10002\n3\n3334 3334 10002\n", "779\n257 3341 10023\n249\n2 500 1000\n", "6\n1 94 940\n", "208\n3239 6478 6478\n2223\n4964 9928 9928\n7\n1 1063 9567\n464\n5401 5401 5401\n210\n9987 9987 9987\n2608\n3221 9663 9663\n651\n8533 8533 8533\n449\n9917 9917 9917\n2551\n2491 4982 9964\n1771\n4620 9240 9240\n", "779\n257 3341 10023\n249\n2 500 1000\n16\n417 10008 10008\n", "504\n1 1488 2976\n", "6\n73 10001 10001\n", "5\n73 10001 10001\n", "1\n1 1 3\n2\n2 4 4\n2\n6 6 6\n2\n8 8 8\n2\n11 11 11\n", "0\n1 1 1\n0\n1 1 1\n0\n1 1 1\n0\n1 1 1\n0\n1 1 1\n", "1\n1 1 3\n11\n4 56 56\n112\n999 999 999\n169\n500 2500 10000\n1985\n4172 8344 8344\n", "0\n233 233 233\n0\n233 233 233\n", "32\n176 3344 10032\n", "23\n1 221 1326\n"]}}, {"index": 4013, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given an array $a$ consisting of $n$ integer numbers.\n\nLet instability of the array be the following value: $\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$.\n\nYou have to remove exactly one element from this array to minimize instability of the resulting $(n-1)$-elements array. Your task is to calculate the minimum possible instability.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 elements of the array $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible instability of the array if you have to remove exactly one element from the array $a$.\n\n\n-----Examples-----\nInput\n4\n1 3 3 7\n\nOutput\n2\n\nInput\n2\n1 100000\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can remove $7$ then instability of the remaining array will be $3 - 1 = 2$.\n\nIn the second example you can remove either $1$ or $100000$ then instability of the remaining array will be $100000 - 100000 = 0$ and $1 - 1 = 0$ correspondingly.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4\n1 3 3 7\n", "2\n1 100000\n", "5\n3 1 4 4 2\n", "3\n1 10 11\n", "60\n36 91 2 38 37 49 48 11 59 67 53 56 35 60 87 59 60 16 73 34 15 4 57 40 38 44 4 80 63 26 94 99 68 47 88 4 96 36 15 54 54 19 9 88 78 47 99 90 63 23 23 77 79 31 68 68 75 71 100 37\n", "3\n1 2 4\n", "4\n1 5 6 7\n", "4\n12 8 7 4\n", "23\n48 76 49 46 54 10 7 11 48 78 1 44 36 64 73 19 80 83 81 59 19 18 8\n", "5\n1 12 13 14 15\n", "3\n1 3 4\n", "6\n1 47 66 81 19 95\n", "12\n1 2 3 4 5 6 7 8 9 10 11 12\n", "4\n1 2 3 7\n", "3\n1 4 4\n", "23\n5 61 68 76 70 87 26 55 83 93 95 45 90 36 95 99 72 10 97 22 13 23 100\n", "4\n1 6 7 9\n", "24\n93 94 43 61 84 67 63 4 42 4 40 1 37 57 51 68 19 18 92 44 62 62 38 51\n", "3\n1 345 347\n", "3\n4 5 5\n", "5\n3 4 3 1 5\n", "3\n99999 100000 100000\n", "35\n13 9 84 88 42 75 73 3 10 44 94 74 36 14 23 67 85 94 55 93 38 82 96 54 19 99 73 58 65 90 41 29 50 77 17\n", "3\n4 1 2\n", "9\n94 33 89 40 53 48 71 78 88\n", "4\n1 4 8 9\n", "80\n85 14 30 21 2 68 24 96 71 4 78 33 15 32 55 86 62 55 71 26 14 45 26 47 24 6 16 21 84 52 87 20 65 68 40 18 35 15 13 57 70 91 89 84 22 43 21 83 50 92 8 15 36 86 61 12 43 28 32 26 31 70 97 47 37 88 64 23 3 77 80 24 67 68 8 40 63 80 74 64\n", "27\n89 65 26 78 91 30 4 18 65 72 96 15 99 22 26 60 36 98 86 79 30 57 52 94 70 35 29\n", "64\n58 66 82 99 26 95 18 87 83 65 29 83 89 72 23 41 87 48 14 7 83 20 34 63 83 80 33 70 12 59 88 21 76 70 71 53 16 88 40 99 5 20 81 93 91 55 33 29 54 46 35 36 18 69 50 100 100 82 21 11 40 60 31 68\n", "52\n27 30 55 43 7 12 25 21 76 78 61 88 96 8 12 88 50 57 37 36 57 59 48 39 44 71 91 74 94 42 3 72 23 57 14 81 20 90 53 48 19 13 35 14 73 98 1 74 55 90 9 11\n", "4\n4 11 12 17\n", "44\n76 38 4 52 34 38 23 88 8 80 33 43 37 48 67 18 37 21 94 60 90 18 9 85 60 45 18 26 20 72 74 95 9 77 98 94 14 72 81 73 52 13 15 88\n", "2\n47 2\n", "21\n91 46 66 24 98 3 2 16 64 47 66 9 88 24 55 39 42 23 39 69 4\n", "78\n20 4 81 66 78 5 47 77 63 9 26 91 45 44 28 70 73 58 30 61 92 55 8 1 54 9 41 83 79 58 80 50 13 13 68 90 69 14 18 31 22 43 73 66 38 1 88 11 10 17 71 53 71 30 5 76 38 98 59 69 7 38 70 19 2 37 60 70 50 78 53 72 72 25 89 62 77 76\n", "5\n1 9 4 11 10\n", "45\n97 87 66 76 82 5 67 20 77 29 63 18 48 18 28 26 12 13 96 60 21 93 94 7 20 23 100 80 21 10 80 69 96 97 96 29 1 62 49 78 42 11 47 90 29\n", "4\n1 5 5 6\n", "2\n1220 1000\n"], "outputs": ["2\n", "0\n", "2\n", "1\n", "96\n", "1\n", "2\n", "4\n", "76\n", "3\n", "1\n", "76\n", "10\n", "2\n", "0\n", "90\n", "3\n", "90\n", "2\n", "0\n", "2\n", "0\n", "90\n", "1\n", "54\n", "5\n", "94\n", "84\n", "93\n", "95\n", "6\n", "90\n", "0\n", "89\n", "91\n", "7\n", "95\n", "1\n", "0\n"]}, "test_in_outs": {"inputs": ["3\n1 1 4\n", "3\n1 4 8\n", "59\n73 46 90 8 44 17 32 67 18 68 35 85 86 63 44 64 73 12 96 37 86 70 88 2 73 61 37 12 23 55 96 96 100 85 55 95 53 38 61 70 57 96 7 94 10 50 57 83 13 53 71 50 74 58 51 47 19 39 10\n", "3\n40 67 65\n", "3\n4 56 62\n", "76\n23 38 14 65 43 92 98 33 32 71 52 88 6 9 38 63 20 14 84 58 84 66 87 62 30 14 81 6 39 32 22 61 22 87 77 16 30 26 48 62 97 51 49 2 60 38 65 31 51 100 40 86 17 78 47 47 92 80 52 82 63 25 42 84 12 19 99 41 96 99 54 92 49 54 46 60\n", "13\n43 28 60 70 71 57 24 94 54 95 34 7 93\n", "6\n67 100 5 97 83 85\n", "30\n28 69 21 75 45 3 30 78 95 30 49 53 29 50 44 90 15 47 84 88 15 80 29 83 12 43 36 71 75 23\n", "18\n88 16 51 10 26 52 88 56 54 16 30 43 89 90 70 66 5 72\n", "3\n1 7 8\n", "43\n20 75 10 50 77 99 75 54 1 62 46 19 37 4 79 37 100 85 54 59 91 91 96 38 62 49 28 39 29 81 49 48 7 11 49 83 9 24 88 61 85 33 31\n", "5\n3 3 3 5 7\n", "95\n28 37 51 19 54 38 21 62 47 83 96 60 36 89 14 77 4 16 99 25 41 55 67 38 13 35 88 19 73 70 16 100 6 66 70 12 55 90 73 54 24 20 13 60 8 27 88 11 94 86 87 34 40 5 23 5 92 11 23 64 32 38 16 38 56 37 1 10 79 25 63 54 44 28 65 3 54 52 66 99 37 4 33 29 9 7 33 52 17 55 67 49 45 82 38\n", "3\n2 30 33\n", "17\n99 42 52 81 78 94 100 56 20 60 74 88 2 55 7 78 35\n", "3\n7 9 11\n", "3\n1 4 5\n", "3\n2 23 3\n", "4\n7 24 20 12\n", "4\n6 4 1 2\n", "3\n1 8 7\n", "4\n6 4 2 1\n", "18\n71 72 96 81 89 62 42 28 92 1 37 28 3 19 65 79 73 33\n", "3\n39 14 59\n", "7\n14 20 15 12 1 4 7\n", "3\n9 15 16\n", "3\n4 4 14\n", "4\n12521 87651 61289 78514\n", "10\n671 529 765 761 54 406 450 284 312 567\n", "14\n14 10 4 19 16 16 8 8 15 23 14 1 8 16\n", "20\n9 10 23 6 15 10 13 3 3 20 16 16 7 3 24 25 25 10 18 6\n", "4\n49999 49999 100000 100000\n", "8\n8 20 7 16 11 9 24 2\n", "8\n1 5 5 6 6 7 7 9\n", "67\n76344 46992 50112 6145 4118 31055 70413 55046 92656 2066 2039 38823 73744 5618 66069 50373 77580 22466 7802 86261 5150 98903 97345 62706 21074 19227 39450 26828 85204 49023 1245 61547 12367 51356 84043 32836 98762 54455 87881 91417 56521 89919 46592 46616 95536 12660 96988 89467 51478 21141 92080 56627 20043 89424 35684 57469 25002 75133 648 26557 24155 1892 88103 36521 69599 72146 69356\n", "30\n5494 90839 21677 21065 33720 40995 69053 30133 68390 23593 73669 59438 16475 78283 85669 57228 19501 93784 45860 30592 31376 14060 99524 43144 38260 21140 37393 46696 26737 86463\n", "82\n53931 67166 20637 68570 4855 63080 53128 28375 54407 70564 46622 46903 32659 68966 20614 11381 51217 94774 90448 13368 51098 46518 15907 1090 44331 39269 17316 22813 66082 78034 58245 36364 45200 78881 4933 66406 58312 74413 94780 12718 61328 57754 75973 93986 26719 12938 21718 94288 24063 28518 7655 75160 91387 39913 76250 35717 95534 9917 74881 61615 87950 33125 97978 49501 28357 19262 15906 3021 93674 27038 15738 55002 84791 8062 65339 27861 20999 87057 22148 61413 15574 46154\n", "3\n1 20 21\n"], "outputs": ["0\n", "3\n", "93\n", "2\n", "6\n", "94\n", "71\n", "33\n", "83\n", "80\n", "1\n", "96\n", "2\n", "97\n", "3\n", "93\n", "2\n", "1\n", "1\n", "12\n", "3\n", "1\n", "3\n", "91\n", "20\n", "14\n", "1\n", "0\n", "26362\n", "481\n", "18\n", "22\n", "50001\n", "17\n", "4\n", "97658\n", "85464\n", "94444\n", "1\n"]}}, {"index": 4014, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nPetya studies at university. The current academic year finishes with $n$ special days. Petya needs to pass $m$ exams in those special days. The special days in this problem are numbered from $1$ to $n$.\n\nThere are three values about each exam:  $s_i$ \u2014 the day, when questions for the $i$-th exam will be published,  $d_i$ \u2014 the day of the $i$-th exam ($s_i < d_i$),  $c_i$ \u2014 number of days Petya needs to prepare for the $i$-th exam. For the $i$-th exam Petya should prepare in days between $s_i$ and $d_i-1$, inclusive. \n\nThere are three types of activities for Petya in each day: to spend a day doing nothing (taking a rest), to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can't pass/prepare for multiple exams in a day. He can't mix his activities in a day. If he is preparing for the $i$-th exam in day $j$, then $s_i \\le j < d_i$.\n\nIt is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days.\n\nFind the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ $(2 \\le n \\le 100, 1 \\le m \\le n)$ \u2014 the number of days and the number of exams.\n\nEach of the following $m$ lines contains three integers $s_i$, $d_i$, $c_i$ $(1 \\le s_i < d_i \\le n, 1 \\le c_i \\le n)$ \u2014 the day, when questions for the $i$-th exam will be given, the day of the $i$-th exam, number of days Petya needs to prepare for the $i$-th exam. \n\nGuaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.\n\n\n-----Output-----\n\nIf Petya can not prepare and pass all the exams, print -1. In case of positive answer, print $n$ integers, where the $j$-th number is:  $(m + 1)$, if the $j$-th day is a day of some exam (recall that in each day no more than one exam is conducted),  zero, if in the $j$-th day Petya will have a rest,  $i$ ($1 \\le i \\le m$), if Petya will prepare for the $i$-th exam in the day $j$ (the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it).\n\nAssume that the exams are numbered in order of appearing in the input, starting from $1$.\n\nIf there are multiple schedules, print any of them.\n\n\n-----Examples-----\nInput\n5 2\n1 3 1\n1 5 1\n\nOutput\n1 2 3 0 3 \n\nInput\n3 2\n1 3 1\n1 2 1\n\nOutput\n-1\n\nInput\n10 3\n4 7 2\n1 10 3\n8 9 1\n\nOutput\n2 2 2 1 1 0 4 3 4 4 \n\n\n\n-----Note-----\n\nIn the first example Petya can, for example, prepare for exam $1$ in the first day, prepare for exam $2$ in the second day, pass exam $1$ in the third day, relax in the fourth day, and pass exam $2$ in the fifth day. So, he can prepare and pass all exams.\n\nIn the second example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5 2\n1 3 1\n1 5 1\n", "3 2\n1 3 1\n1 2 1\n", "10 3\n4 7 2\n1 10 3\n8 9 1\n", "2 1\n1 2 1\n", "3 1\n1 2 2\n", "3 1\n1 3 2\n", "100 1\n1 100 99\n", "100 1\n1 100 100\n", "100 1\n1 100 98\n", "100 2\n1 100 49\n1 99 49\n", "10 2\n3 7 4\n6 10 1\n", "10 4\n2 5 1\n1 4 2\n4 7 1\n7 10 2\n", "20 5\n6 16 3\n4 14 4\n3 13 1\n1 11 1\n10 20 4\n", "30 7\n1 4 1\n22 25 1\n25 28 2\n9 12 1\n13 16 1\n11 14 1\n14 17 1\n", "50 14\n42 44 2\n38 40 1\n6 8 2\n37 39 1\n33 35 1\n17 19 2\n12 14 2\n2 4 1\n9 11 2\n1 3 1\n32 34 1\n24 26 1\n44 46 1\n48 50 1\n", "50 7\n45 50 4\n26 31 5\n35 40 3\n38 43 1\n39 44 3\n3 8 2\n1 6 1\n", "50 15\n41 46 5\n35 40 5\n27 32 3\n10 15 2\n1 6 3\n20 25 1\n11 16 1\n9 14 1\n13 18 2\n18 23 3\n2 7 2\n25 30 1\n29 34 1\n43 48 1\n45 50 1\n", "90 30\n1 5 1\n57 61 3\n13 17 1\n60 64 1\n73 77 2\n5 9 2\n16 20 3\n29 33 4\n83 87 3\n63 67 2\n35 39 4\n18 22 1\n42 46 4\n46 50 2\n48 52 2\n23 27 1\n82 86 1\n77 81 3\n67 71 2\n22 26 2\n37 41 1\n6 10 1\n50 54 1\n8 12 1\n86 90 1\n68 72 1\n11 15 1\n72 76 1\n62 66 1\n52 56 1\n", "100 38\n41 43 1\n53 55 2\n91 93 2\n47 49 2\n77 79 2\n5 7 2\n2 4 2\n28 30 1\n79 81 1\n42 44 1\n27 29 1\n95 97 2\n58 60 1\n57 59 1\n61 63 2\n33 35 2\n22 24 1\n44 46 1\n10 12 2\n13 15 1\n97 99 1\n37 39 2\n18 20 1\n50 52 2\n21 23 1\n68 70 2\n83 85 1\n71 73 2\n65 67 1\n64 66 1\n15 17 1\n7 9 1\n88 90 2\n30 32 1\n74 76 1\n24 26 1\n85 87 1\n82 84 1\n", "100 43\n76 77 1\n24 25 1\n2 3 1\n85 86 1\n49 50 1\n15 16 1\n30 31 1\n78 79 1\n54 55 1\n58 59 1\n17 18 1\n67 68 1\n21 22 1\n80 81 1\n35 36 1\n8 9 1\n83 84 1\n44 45 1\n62 63 1\n64 65 1\n72 73 1\n27 28 1\n56 57 1\n12 13 1\n40 41 1\n32 33 1\n52 53 1\n70 71 1\n97 98 1\n37 38 1\n87 88 1\n46 47 1\n89 90 1\n4 5 1\n94 95 1\n60 61 1\n99 100 1\n10 11 1\n74 75 1\n6 7 1\n91 92 1\n19 20 1\n42 43 1\n", "100 35\n52 55 1\n55 58 1\n69 72 1\n32 35 1\n9 12 3\n68 71 1\n78 81 3\n51 54 1\n56 59 1\n63 66 3\n4 7 2\n12 15 2\n74 77 1\n87 90 3\n72 75 1\n93 96 2\n39 42 2\n15 18 1\n92 95 1\n23 26 3\n83 86 2\n28 31 2\n58 61 1\n47 50 1\n46 49 2\n31 34 1\n82 85 1\n96 99 2\n38 41 1\n41 44 1\n5 8 1\n34 37 1\n19 22 3\n27 30 1\n67 70 1\n", "100 4\n73 83 4\n79 89 8\n12 22 6\n23 33 9\n", "100 2\n39 43 1\n82 86 3\n", "100 36\n2 5 2\n35 38 1\n55 58 2\n40 43 3\n73 76 2\n30 33 3\n87 90 3\n93 96 1\n97 100 1\n42 45 1\n44 47 1\n66 69 3\n95 98 1\n12 15 3\n47 50 1\n72 75 1\n57 60 2\n1 4 1\n8 11 3\n15 18 1\n22 25 2\n76 79 2\n82 85 1\n91 94 2\n83 86 2\n33 36 1\n62 65 3\n26 29 3\n18 21 1\n36 39 1\n68 71 1\n50 53 1\n51 54 1\n4 7 1\n17 20 1\n78 81 1\n", "100 37\n49 51 2\n79 81 2\n46 48 2\n71 73 2\n31 33 2\n42 44 1\n17 19 2\n64 66 2\n24 26 1\n8 10 2\n38 40 1\n1 3 2\n75 77 2\n52 54 2\n11 13 2\n87 89 1\n98 100 2\n60 62 1\n56 58 2\n39 41 1\n92 94 1\n13 15 1\n67 69 2\n4 6 2\n19 21 1\n91 93 1\n86 88 1\n43 45 1\n25 27 1\n94 96 1\n81 83 1\n35 37 1\n34 36 1\n61 63 1\n21 23 1\n83 85 1\n27 29 1\n", "50 16\n42 44 2\n18 20 2\n10 12 1\n9 11 2\n25 27 1\n45 47 1\n12 14 1\n29 31 2\n4 6 1\n46 48 1\n32 34 2\n34 36 1\n48 50 1\n21 23 1\n15 17 2\n24 26 1\n", "90 29\n1 5 1\n56 60 2\n31 35 4\n86 90 2\n25 29 4\n58 62 2\n73 77 2\n12 16 2\n65 69 1\n16 20 3\n42 46 4\n62 66 2\n2 6 2\n77 81 1\n80 84 1\n48 52 4\n81 85 2\n68 72 1\n57 61 1\n75 79 1\n35 39 2\n37 41 1\n18 22 1\n4 8 2\n67 71 1\n85 89 1\n20 24 1\n10 14 2\n51 55 2\n", "100 6\n3 43 40\n46 86 24\n38 78 5\n51 91 8\n59 99 12\n60 100 2\n", "100 36\n2 5 2\n35 38 1\n55 58 2\n40 43 3\n73 76 2\n30 33 3\n87 90 3\n93 96 1\n97 100 1\n42 45 1\n44 47 1\n66 69 3\n95 98 1\n12 15 3\n47 50 1\n72 75 1\n57 60 2\n1 4 1\n8 11 3\n15 18 1\n22 25 2\n76 79 2\n82 85 1\n91 94 2\n83 86 2\n33 36 1\n62 65 3\n26 29 3\n18 21 1\n36 39 1\n68 71 1\n50 53 2\n51 54 1\n4 7 1\n17 20 1\n78 81 1\n", "100 37\n49 51 2\n79 81 2\n46 48 2\n71 73 2\n31 33 3\n42 44 1\n17 19 2\n64 66 2\n24 26 1\n8 10 2\n38 40 1\n1 3 2\n75 77 2\n52 54 2\n11 13 2\n87 89 1\n98 100 2\n60 62 1\n56 58 2\n39 41 1\n92 94 1\n13 15 1\n67 69 2\n4 6 2\n19 21 1\n91 93 1\n86 88 1\n43 45 1\n25 27 1\n94 96 1\n81 83 1\n35 37 1\n34 36 1\n61 63 1\n21 23 1\n83 85 1\n27 29 1\n", "90 30\n1 5 1\n57 61 3\n13 17 1\n60 64 1\n73 77 2\n5 9 2\n16 20 3\n29 33 5\n83 87 3\n63 67 2\n35 39 4\n18 22 1\n42 46 4\n46 50 2\n48 52 2\n23 27 1\n82 86 1\n77 81 3\n67 71 2\n22 26 2\n37 41 1\n6 10 1\n50 54 1\n8 12 1\n86 90 1\n68 72 1\n11 15 1\n72 76 1\n62 66 1\n52 56 1\n", "100 38\n41 43 1\n53 55 2\n91 93 2\n47 49 2\n77 79 2\n5 7 2\n2 4 2\n28 30 1\n79 81 1\n42 44 1\n27 29 1\n95 97 2\n58 60 1\n57 59 1\n61 63 2\n33 35 2\n22 24 1\n44 46 1\n10 12 2\n13 15 1\n97 99 1\n37 39 3\n18 20 1\n50 52 2\n21 23 1\n68 70 2\n83 85 1\n71 73 2\n65 67 1\n64 66 1\n15 17 1\n7 9 1\n88 90 2\n30 32 1\n74 76 1\n24 26 1\n85 87 1\n82 84 1\n", "100 43\n76 77 1\n24 25 1\n2 3 1\n85 86 1\n49 50 1\n15 16 1\n30 31 1\n78 79 2\n54 55 1\n58 59 1\n17 18 1\n67 68 1\n21 22 1\n80 81 1\n35 36 1\n8 9 1\n83 84 1\n44 45 1\n62 63 1\n64 65 1\n72 73 1\n27 28 1\n56 57 1\n12 13 1\n40 41 1\n32 33 1\n52 53 1\n70 71 1\n97 98 1\n37 38 1\n87 88 1\n46 47 1\n89 90 1\n4 5 1\n94 95 1\n60 61 1\n99 100 1\n10 11 1\n74 75 1\n6 7 1\n91 92 1\n19 20 1\n42 43 1\n", "100 35\n52 55 1\n55 58 1\n69 72 1\n32 35 1\n9 12 3\n68 71 1\n78 81 3\n51 54 1\n56 59 1\n63 66 3\n4 7 2\n12 15 2\n74 77 1\n87 90 3\n72 75 1\n93 96 2\n39 42 2\n15 18 1\n92 95 1\n23 26 4\n83 86 2\n28 31 2\n58 61 1\n47 50 1\n46 49 2\n31 34 1\n82 85 1\n96 99 2\n38 41 1\n41 44 1\n5 8 1\n34 37 1\n19 22 3\n27 30 1\n67 70 1\n", "97 22\n10 17 6\n24 31 6\n79 86 7\n60 67 6\n42 49 5\n67 74 5\n34 41 4\n70 77 3\n51 58 5\n82 89 2\n89 96 5\n14 21 2\n40 47 1\n1 8 2\n23 30 1\n59 66 1\n50 57 2\n26 33 1\n15 22 2\n90 97 1\n32 39 1\n2 9 4\n", "12 11\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n5 6 5\n6 7 6\n7 8 7\n8 9 8\n9 10 9\n10 11 10\n11 12 1\n", "6 2\n1 6 3\n1 2 1\n", "88 1\n1 2 1\n"], "outputs": ["1 2 3 0 3 \n", "-1\n", "2 2 2 1 1 0 4 3 4 4 \n", "1 2 \n", "-1\n", "1 1 2 \n", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 \n", "-1\n", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2 \n", "2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 \n", "0 0 1 1 1 1 3 2 0 3 \n", "2 2 1 5 5 3 5 4 4 5 \n", "4 0 3 2 2 2 2 1 1 1 6 5 6 6 5 6 5 5 0 6 \n", "1 0 0 8 0 0 0 0 4 0 6 8 5 8 7 8 8 0 0 0 0 2 0 0 8 3 3 8 0 0 \n", "10 8 15 15 0 3 3 15 9 9 15 7 7 15 0 0 6 6 15 0 0 0 0 12 0 15 0 0 0 0 0 11 5 15 15 0 4 2 15 15 0 1 1 15 13 15 0 14 0 15 \n", "7 0 6 6 0 8 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 8 0 0 0 3 3 3 4 5 8 5 5 8 8 1 1 1 1 0 8 \n", "5 5 5 11 11 16 16 0 8 4 4 7 9 16 16 16 9 16 10 10 10 6 16 0 16 12 3 3 3 16 13 16 0 16 2 2 2 2 2 16 1 1 1 1 1 16 14 16 15 16 \n", "1 0 0 0 31 6 6 22 31 31 24 31 27 3 31 7 31 7 7 31 12 31 20 20 16 31 31 0 8 8 8 8 31 0 11 11 11 11 31 21 31 13 13 13 13 31 14 14 15 31 15 31 23 31 30 31 2 2 2 4 31 29 10 31 10 31 31 19 19 26 31 31 28 5 5 31 31 18 18 18 31 17 9 9 9 31 31 25 0 31 \n", "0 7 7 39 6 6 39 32 39 19 19 39 20 0 39 31 39 23 0 39 25 17 39 39 36 39 11 8 39 39 34 39 16 16 39 0 22 22 39 0 1 10 39 39 18 39 4 4 39 24 24 39 2 2 39 0 14 13 39 39 15 15 39 30 29 39 39 26 26 39 28 28 39 35 0 39 5 5 39 9 39 38 27 39 39 37 39 33 33 39 3 3 39 0 12 12 39 21 39 0 \n", "0 3 44 34 44 40 44 16 44 38 44 24 44 0 6 44 11 44 42 44 13 44 0 2 44 0 22 44 0 7 44 26 44 0 15 44 30 44 0 25 44 43 44 18 44 32 44 0 5 44 0 27 44 9 44 23 44 10 44 36 44 19 44 20 44 0 12 44 0 28 44 21 44 39 44 1 44 8 44 14 44 0 17 44 4 44 31 44 33 44 41 44 0 35 44 0 29 44 37 44 \n", "0 0 0 11 11 31 36 36 5 5 5 36 12 12 36 18 0 36 33 33 33 36 20 20 20 36 34 22 22 36 36 26 4 36 36 32 36 29 17 17 36 36 30 36 0 25 25 24 36 36 8 1 0 36 36 2 9 36 36 23 36 0 10 10 10 36 35 6 3 36 36 36 15 13 36 0 36 7 7 7 36 27 21 21 36 36 14 14 14 36 0 19 16 16 36 36 28 28 36 0 \n", "0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 0 0 0 0 5 4 4 4 4 4 4 4 4 4 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 2 2 2 2 5 2 2 2 2 0 5 0 0 0 0 0 0 0 0 0 0 0 \n", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", "18 1 1 37 37 34 37 19 19 19 37 14 14 14 37 20 35 37 29 37 37 21 21 0 37 28 28 28 37 6 6 6 37 26 2 37 30 37 37 4 4 4 37 10 37 11 37 15 0 37 32 33 37 37 3 3 17 37 17 37 0 27 27 27 37 12 12 12 37 31 37 16 5 5 37 37 22 22 37 36 37 23 25 25 37 37 7 7 7 37 24 24 8 37 13 37 9 37 0 37 \n", "12 12 38 24 24 38 0 10 10 38 15 15 38 22 38 0 7 7 38 25 38 35 38 9 29 38 38 37 38 0 5 5 38 33 32 38 38 11 20 38 38 6 28 38 38 3 3 38 1 1 38 14 14 38 0 19 19 38 0 18 34 38 38 8 8 38 23 23 38 0 4 4 38 0 13 13 38 0 2 2 38 31 38 36 38 27 16 38 38 0 26 21 38 38 30 38 0 17 17 38 \n", "-1\n", "-1\n", "0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 7 4 4 4 5 5 5 5 7 5 5 5 5 7 5 5 5 5 6 6 0 7 7 \n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "14 14 22 22 22 22 0 23 23 1 1 1 1 1 1 12 23 12 19 19 23 23 15 2 2 2 2 2 2 23 23 18 23 21 7 7 7 7 23 13 23 5 5 5 5 5 23 0 23 17 17 9 9 9 9 9 23 23 16 4 4 4 4 4 4 23 23 6 6 6 6 6 8 23 8 8 23 0 3 3 3 3 3 3 3 23 10 10 23 11 11 11 11 11 20 23 23 \n", "-1\n", "2 3 1 1 1 3 \n", "1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n"]}, "test_in_outs": {"inputs": ["4 2\n1 4 1\n1 2 1\n", "100 2\n1 100 30\n1 20 1\n", "88 1\n1 3 1\n", "6 2\n1 5 2\n2 3 1\n", "7 2\n1 7 3\n2 3 1\n", "8 2\n3 8 2\n4 5 1\n", "10 2\n1 10 7\n2 3 1\n", "5 2\n1 5 2\n2 3 1\n", "10 2\n1 10 5\n2 3 1\n", "10 2\n1 10 4\n2 4 2\n", "10 2\n1 10 6\n3 7 1\n", "10 3\n4 8 2\n1 10 3\n5 6 1\n", "20 5\n4 14 4\n3 13 1\n1 11 1\n10 20 4\n6 16 3\n", "73 2\n33 35 2\n12 63 44\n", "86 5\n66 74 1\n29 33 3\n13 78 38\n20 34 2\n72 85 1\n", "9 4\n3 7 1\n6 9 1\n2 3 1\n1 8 2\n", "10 2\n1 10 5\n2 4 1\n", "10 4\n1 10 2\n1 4 2\n2 5 1\n7 8 1\n", "10 2\n1 10 7\n3 7 1\n", "96 37\n9 43 23\n60 66 4\n7 15 1\n3 86 4\n30 65 14\n36 38 1\n28 36 8\n68 80 4\n7 22 5\n17 68 1\n7 18 1\n12 47 2\n4 6 2\n5 11 3\n41 55 10\n7 45 22\n6 67 16\n12 50 18\n64 70 2\n21 48 26\n2 17 6\n14 44 10\n63 84 18\n14 19 5\n34 92 56\n51 56 2\n13 20 5\n62 74 2\n1 3 1\n6 46 17\n58 62 4\n10 27 16\n13 37 16\n21 23 1\n48 69 13\n67 82 13\n17 51 18\n", "31 3\n2 3 1\n1 12 4\n13 15 1\n", "7 2\n2 6 4\n3 4 1\n", "20 2\n3 4 1\n2 7 3\n", "100 5\n15 53 23\n16 85 32\n59 93 3\n54 57 1\n13 40 11\n", "100 5\n24 57 8\n28 72 15\n20 75 49\n27 67 7\n68 100 21\n", "11 2\n1 11 5\n4 8 4\n", "29 5\n5 10 3\n15 22 2\n18 27 4\n16 20 4\n7 11 1\n", "28 4\n4 23 11\n11 12 1\n2 4 1\n16 24 1\n", "90 8\n7 10 2\n27 28 1\n18 20 2\n12 48 2\n37 84 27\n29 32 2\n37 73 16\n3 40 14\n", "61 2\n12 41 24\n20 29 2\n", "27 8\n7 22 2\n3 5 1\n24 26 1\n1 14 1\n4 23 8\n10 12 1\n16 18 1\n5 6 1\n", "88 8\n1 5 2\n29 50 7\n36 42 6\n72 81 2\n12 19 4\n65 73 2\n15 80 29\n4 43 16\n", "34 17\n1 2 1\n6 12 4\n22 23 1\n5 6 1\n8 30 9\n2 7 2\n22 26 3\n3 34 31\n1 19 9\n4 11 7\n2 5 1\n4 9 3\n8 14 4\n2 22 14\n3 8 5\n32 33 1\n18 31 10\n", "9 2\n3 7 2\n1 9 5\n", "85 6\n4 63 17\n1 47 2\n25 26 1\n1 8 1\n24 78 44\n39 79 4\n", "85 5\n3 44 9\n77 85 7\n3 27 8\n5 42 4\n4 7 1\n", "50 5\n7 23 7\n4 12 4\n7 46 14\n15 32 8\n16 24 2\n", "6 3\n1 5 1\n1 6 1\n1 2 1\n", "100 3\n17 21 3\n1 66 38\n8 22 2\n"], "outputs": ["2 3 1 3 \n", "2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 \n", "1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", "1 2 3 1 3 0 \n", "1 2 3 1 1 0 3 \n", "0 0 1 2 3 1 0 3 \n", "1 2 3 1 1 1 1 1 1 3 \n", "1 2 3 1 3 \n", "1 2 3 1 1 1 1 0 0 3 \n", "1 2 2 3 1 1 1 0 0 3 \n", "1 1 2 1 1 1 3 1 0 3 \n", "2 2 2 1 3 4 1 4 0 4 \n", "3 0 2 1 1 1 1 5 5 5 6 4 6 6 4 6 4 4 0 6 \n", "0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 \n", "0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 4 4 3 3 3 3 3 3 3 2 2 2 3 6 6 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 1 0 0 0 0 0 5 0 6 0 0 0 6 0 0 0 0 0 0 6 0 \n", "4 3 5 1 4 2 5 5 5 \n", "1 2 1 3 1 1 1 0 0 3 \n", "2 2 3 5 5 1 4 5 1 5 \n", "1 1 2 1 1 1 3 1 1 3 \n", "-1\n", "2 1 4 2 2 2 0 0 0 0 0 4 3 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", "-1\n", "0 2 1 3 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", "0 0 0 0 0 0 0 0 0 0 0 0 5 5 5 5 5 5 5 5 5 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1 2 2 2 2 2 6 4 2 2 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 6 3 0 0 0 0 0 0 6 0 0 0 0 0 0 0 \n", "-1\n", "1 1 1 2 2 2 2 3 1 1 3 \n", "0 0 0 0 1 1 1 5 0 6 6 0 0 0 2 4 4 4 4 6 2 6 3 3 3 3 6 0 0 \n", "0 3 0 5 1 1 1 1 1 1 2 5 1 1 1 1 1 4 0 0 0 0 5 5 0 0 0 0 \n", "0 0 8 8 8 8 1 1 8 9 8 8 8 8 8 8 8 3 3 9 8 8 4 4 0 0 2 9 6 6 0 9 0 0 0 0 7 7 7 9 7 7 7 7 7 7 7 9 7 7 7 7 7 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 9 5 5 5 5 5 5 5 5 5 0 9 0 0 0 0 0 0 \n", "0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n", "-1\n", "1 1 0 8 9 8 8 8 8 8 8 5 5 5 5 8 8 8 9 8 8 8 8 8 8 7 7 7 2 2 2 2 2 2 2 3 3 3 3 3 3 9 9 7 7 7 7 7 7 9 7 7 7 7 7 7 7 7 7 7 7 7 7 7 6 6 7 7 7 7 7 7 9 4 4 0 0 0 0 9 9 0 0 0 0 0 0 0 \n", "-1\n", "2 2 1 1 2 2 3 2 3 \n", "4 2 2 1 1 1 1 7 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 5 3 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 5 5 5 5 5 5 5 5 6 6 6 6 0 0 7 7 0 0 0 0 0 0 \n", "0 0 3 5 3 3 6 3 3 3 3 3 4 4 4 4 1 1 1 1 1 1 1 1 1 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 0 6 \n", "0 0 0 2 2 2 2 1 1 1 1 6 1 1 1 5 5 4 4 4 4 4 6 6 4 4 4 3 3 3 3 6 3 3 3 3 3 3 3 3 3 3 0 0 0 6 0 0 0 0 \n", "3 4 1 2 4 4 \n", "2 2 2 2 2 2 2 3 3 2 2 2 2 2 2 2 1 1 1 2 4 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n"]}}, {"index": 4015, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nPolycarp plays \"Game 23\". Initially he has a number $n$ and his goal is to transform it to $m$. In one move, he can multiply $n$ by $2$ or multiply $n$ by $3$. He can perform any number of moves.\n\nPrint the number of moves needed to transform $n$ to $m$. Print -1 if it is impossible to do so.\n\nIt is easy to prove that any way to transform $n$ to $m$ contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 5\\cdot10^8$).\n\n\n-----Output-----\n\nPrint the number of moves to transform $n$ to $m$, or -1 if there is no solution.\n\n\n-----Examples-----\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\nInput\n48 72\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["120 51840\n", "42 42\n", "48 72\n", "1 1\n", "1 2\n", "1 4\n", "1 5\n", "1 6\n", "3024 94058496\n", "1953125 500000000\n", "139999978 419999934\n", "1 223092870\n", "2 5\n", "289777775 341477104\n", "12 26\n", "4 9\n", "5 11\n", "3 83\n", "40 123\n", "3 10\n", "64 243\n", "2 7\n", "1 2048\n", "2 9\n", "120 51841\n", "1 512\n", "7 15\n", "10001 10001\n", "300000007 300000007\n", "5 7\n", "1001 1001\n", "120 1081\n", "2 19\n", "101 101\n", "1111 2223\n", "201 201\n", "202 202\n", "203 203\n"], "outputs": ["7\n", "0\n", "-1\n", "0\n", "1\n", "2\n", "-1\n", "2\n", "12\n", "8\n", "1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "11\n", "-1\n", "-1\n", "9\n", "-1\n", "0\n", "0\n", "-1\n", "0\n", "-1\n", "-1\n", "0\n", "-1\n", "0\n", "0\n", "0\n"]}, "test_in_outs": {"inputs": ["303 303\n", "403 403\n", "23 97\n", "404 404\n", "405 405\n", "505 505\n", "3 9\n", "2 6\n", "11 67\n", "1234 2469\n", "1000 1000\n", "6 20\n", "9 24\n", "18782 37565\n", "1 22\n", "10 61\n", "1000 2001\n", "100000000 100000001\n", "4000 8001\n", "1 499999993\n", "1 50331648\n", "3 13\n", "10 24\n", "2 22\n", "6 29\n", "1 7\n", "6 21\n", "50 64800\n", "5 16\n", "2 18\n", "1 491280007\n", "4 16\n", "2 13\n", "1 262144\n", "1 16777216\n", "405691171 405691171\n", "5 12\n", "1 500000000\n", "1 362797056\n"], "outputs": ["0\n", "0\n", "-1\n", "0\n", "0\n", "0\n", "1\n", "1\n", "-1\n", "-1\n", "0\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "25\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "8\n", "-1\n", "2\n", "-1\n", "2\n", "-1\n", "18\n", "24\n", "0\n", "-1\n", "-1\n", "22\n"]}}, {"index": 4016, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given a string $t$ consisting of $n$ lowercase Latin letters and an integer number $k$.\n\nLet's define a substring of some string $s$ with indices from $l$ to $r$ as $s[l \\dots r]$.\n\nYour task is to construct such string $s$ of minimum possible length that there are exactly $k$ positions $i$ such that $s[i \\dots i + n - 1] = t$. In other words, your task is to construct such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.\n\nIt is guaranteed that the answer is always unique.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 50$) \u2014 the length of the string $t$ and the number of substrings.\n\nThe second line of the input contains the string $t$ consisting of exactly $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nPrint such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.\n\nIt is guaranteed that the answer is always unique.\n\n\n-----Examples-----\nInput\n3 4\naba\n\nOutput\nababababa\n\nInput\n3 2\ncat\n\nOutput\ncatcat\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["3 4\naba\n", "3 2\ncat\n", "1 1\na\n", "1 50\nq\n", "20 3\nsfrpmsfrpmsfrpmsfrpm\n", "47 1\njjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\n", "25 24\nkyzdckyzdckyzdckyzdckyzdc\n", "4 25\nlclc\n", "5 34\nabcab\n", "8 3\nabcaabca\n", "4 4\naaaa\n", "9 2\ncccababbc\n", "3 6\naaa\n", "3 5\naaa\n", "24 20\nbaacaabccacbcbccccbbcabb\n", "6 2\nabcaba\n", "6 3\naabbaa\n", "6 3\nabaaba\n", "3 4\naaa\n", "4 3\nabaa\n", "8 2\ncaacdcaa\n", "6 3\nabcaba\n", "8 4\ncababbcc\n", "4 2\nabac\n", "4 2\nabaa\n", "11 2\naaabaacdaaa\n", "7 2\nabcabca\n", "18 9\naabaabcbbabaaccbac\n", "9 2\nababbaaba\n", "5 4\naabaa\n", "4 5\nadaa\n", "19 22\ncabacbbbaabccabaaca\n", "2 4\naa\n", "5 2\nzxxzz\n", "2 2\noo\n", "10 2\nababaababa\n", "2 2\naa\n"], "outputs": ["ababababa\n", "catcat\n", "a\n", "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "sfrpmsfrpmsfrpmsfrpmsfrpmsfrpm\n", "jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\n", "kyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdckyzdc\n", "lclclclclclclclclclclclclclclclclclclclclclclclclclc\n", "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab\n", "abcaabcaabcaabca\n", "aaaaaaa\n", "cccababbcccababbc\n", "aaaaaaaa\n", "aaaaaaa\n", "baacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabbaacaabccacbcbccccbbcabb\n", "abcababcaba\n", "aabbaabbaabbaa\n", "abaabaabaaba\n", "aaaaaa\n", "abaabaabaa\n", "caacdcaacdcaa\n", "abcababcababcaba\n", "cababbccababbccababbccababbcc\n", "abacabac\n", "abaabaa\n", "aaabaacdaaabaacdaaa\n", "abcabcabca\n", "aabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbacaabaabcbbabaaccbac\n", "ababbaababbaaba\n", "aabaabaabaabaa\n", "adaadaadaadaadaa\n", "cabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaacabacbbbaabccabaaca\n", "aaaaa\n", "zxxzzxxzz\n", "ooo\n", "ababaababaababa\n", "aaa\n"]}, "test_in_outs": {"inputs": ["6 2\nabbaba\n", "11 2\ncaaacddcaaa\n", "4 2\nabba\n", "5 3\naaaba\n", "4 3\naaaa\n", "5 2\nabaca\n", "5 4\naaaaa\n", "4 2\nxxxb\n", "4 5\nabaa\n", "5 3\naaaaa\n", "7 2\nabcabcc\n", "8 4\nbabbabab\n", "4 2\naaab\n", "3 1\naab\n", "3 2\naab\n", "7 4\naaaabba\n", "9 2\naabaaaaba\n", "4 2\naaba\n", "3 2\nabb\n", "3 2\naaa\n", "9 2\nbaabbaabb\n", "9 4\nbbaaabbab\n", "11 3\nabracadabra\n", "2 1\naa\n", "6 4\ncccacc\n", "6 12\nhmkkhh\n", "3 1\nabb\n", "2 2\nab\n", "15 27\nzteltxyxqqwgztz\n", "9 3\naaaabcaaa\n", "3 1\naba\n", "4 2\naabb\n", "9 2\nbabbabbab\n", "5 3\nbbcbb\n", "3 3\naaa\n", "4 2\nakaa\n", "5 2\naaaba\n", "5 5\nabbab\n"], "outputs": ["abbababbaba\n", "caaacddcaaacddcaaa\n", "abbabba\n", "aaabaaabaaaba\n", "aaaaaa\n", "abacabaca\n", "aaaaaaaa\n", "xxxbxxxb\n", "abaabaabaabaabaa\n", "aaaaaaa\n", "abcabccabcabcc\n", "babbababbababbababbabab\n", "aaabaaab\n", "aab\n", "aabaab\n", "aaaabbaaaabbaaaabbaaaabba\n", "aabaaaabaaaaba\n", "aabaaba\n", "abbabb\n", "aaaa\n", "baabbaabbaabb\n", "bbaaabbabbaaabbabbaaabbabbaaabbab\n", "abracadabracadabracadabra\n", "aa\n", "cccacccacccacccacc\n", "hmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhhmkkhh\n", "abb\n", "abab\n", "zteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztzteltxyxqqwgztz\n", "aaaabcaaaabcaaaabcaaa\n", "aba\n", "aabbaabb\n", "babbabbabbab\n", "bbcbbcbbcbb\n", "aaaaa\n", "akaakaa\n", "aaabaaaba\n", "abbabbabbabbabbab\n"]}}, {"index": 4017, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nLet's call an array good if there is an element in the array that equals to the sum of all other elements. For example, the array $a=[1, 3, 3, 7]$ is good because there is the element $a_4=7$ which equals to the sum $1 + 3 + 3$.\n\nYou are given an array $a$ consisting of $n$ integers. Your task is to print all indices $j$ of this array such that after removing the $j$-th element from the array it will be good (let's call such indices nice).\n\nFor example, if $a=[8, 3, 5, 2]$, the nice indices are $1$ and $4$:   if you remove $a_1$, the array will look like $[3, 5, 2]$ and it is good;  if you remove $a_4$, the array will look like $[8, 3, 5]$ and it is good. \n\nYou have to consider all removals independently, i. e. remove the element, check if the resulting array is good, and return the element into the array.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 elements of the array $a$.\n\n\n-----Output-----\n\nIn the first line print one integer $k$ \u2014 the number of indices $j$ of the array $a$ such that after removing the $j$-th element from the array it will be good (i.e. print the number of the nice indices).\n\nIn the second line print $k$ distinct integers $j_1, j_2, \\dots, j_k$ in any order \u2014 nice indices of the array $a$.\n\nIf there are no such indices in the array $a$, just print $0$ in the first line and leave the second line empty or do not print it at all.\n\n\n-----Examples-----\nInput\n5\n2 5 1 2 2\n\nOutput\n3\n4 1 5\nInput\n4\n8 3 5 2\n\nOutput\n2\n1 4 \n\nInput\n5\n2 1 2 4 3\n\nOutput\n0\n\n\n\n\n-----Note-----\n\nIn the first example you can remove any element with the value $2$ so the array will look like $[5, 1, 2, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 1 + 2 + 2$).\n\nIn the second example you can remove $8$ so the array will look like $[3, 5, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 3 + 2$). You can also remove $2$ so the array will look like $[8, 3, 5]$. The sum of this array is $16$ and there is an element equals to the sum of remaining elements ($8 = 3 + 5$).\n\nIn the third example you cannot make the given array good by removing exactly one element.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5\n2 5 1 2 2\n", "4\n8 3 5 2\n", "5\n2 1 2 4 3\n", "2\n4 5\n", "2\n2 2\n", "3\n4 4 4\n", "2\n1 1\n", "3\n8 1 8\n", "3\n1 1 1\n", "3\n5 5 5\n", "4\n2 2 4 4\n", "5\n5 5 1 2 2\n", "4\n2 1000000 1000000 14\n", "3\n3 3 3\n", "5\n1 2 2 5 5\n", "3\n1 2 5\n", "4\n3 3 2 1\n", "4\n1 2 3 4\n", "4\n4 4 2 2\n", "3\n2 2 2\n", "5\n1 2 3 4 6\n", "6\n4 1 1 1 1 4\n", "3\n1 3 1\n", "4\n4 4 8 8\n", "4\n2 2 4 8\n", "5\n5 5 2 2 1\n", "6\n4 4 1 1 1 1\n", "2\n1 5\n", "4\n8 8 4 4\n", "3\n5 1 5\n", "5\n1 9 4 10 4\n", "3\n4 5 4\n", "3\n8 8 8\n", "4\n1 1 2 2\n", "4\n5 7 7 2\n"], "outputs": ["3\n1 4 5 \n", "2\n1 4 \n", "0\n\n", "0\n\n", "0\n\n", "3\n1 2 3 \n", "0\n\n", "1\n2 \n", "3\n1 2 3 \n", "3\n1 2 3 \n", "2\n3 4 \n", "2\n1 2 \n", "0\n\n", "3\n1 2 3 \n", "2\n4 5 \n", "0\n\n", "2\n1 2 \n", "2\n2 4 \n", "2\n1 2 \n", "3\n1 2 3 \n", "1\n4 \n", "2\n1 6 \n", "1\n2 \n", "2\n3 4 \n", "1\n4 \n", "2\n1 2 \n", "2\n1 2 \n", "0\n\n", "2\n1 2 \n", "1\n2 \n", "1\n4 \n", "1\n2 \n", "3\n1 2 3 \n", "2\n3 4 \n", "2\n2 3 \n"]}, "test_in_outs": {"inputs": ["3\n3 9 12\n", "6\n1 1 1 5 8 8\n", "5\n1 1 1 3 3\n", "3\n1 2 1\n", "4\n3 3 3 3\n", "5\n8 8 5 1 2\n", "5\n1 1 2 4 4\n", "6\n2 2 2 2 8 8\n", "3\n2 2 4\n", "3\n2 3 3\n", "4\n1 1 2 4\n", "3\n4 2 2\n", "5\n1 7 4 12 12\n", "4\n1 1 1 2\n", "4\n1 2 3 5\n", "2\n1 2\n", "6\n16 4 4 4 4 16\n", "4\n500000 500000 1000000 1000000\n", "3\n3 1 3\n", "4\n2 3 5 10\n", "2\n5 1\n", "5\n6 6 1 2 3\n", "4\n3 2 5 5\n", "5\n4 6 7 8 18\n", "5\n7 7 1 3 3\n", "4\n2 3 1 3\n", "2\n1000000 1\n", "7\n5 5 1 1 1 1 1\n", "4\n2 7 7 5\n", "5\n5 1 2 3 1\n", "7\n1 2 3 4 5 6 7\n", "4\n2 3 5 8\n", "5\n1 1 1 3 7\n", "3\n1 2 3\n", "6\n1 3 5 8 16 33\n", "6\n4 7 1 1 1 1\n"], "outputs": ["0\n\n", "2\n5 6 \n", "2\n4 5 \n", "1\n2 \n", "0\n\n", "2\n1 2 \n", "2\n4 5 \n", "2\n5 6 \n", "1\n3 \n", "1\n1 \n", "1\n4 \n", "1\n1 \n", "2\n4 5 \n", "3\n1 2 3 \n", "2\n1 4 \n", "0\n\n", "2\n1 6 \n", "2\n3 4 \n", "1\n2 \n", "1\n4 \n", "0\n\n", "2\n1 2 \n", "2\n3 4 \n", "1\n3 \n", "2\n1 2 \n", "2\n2 4 \n", "0\n\n", "2\n1 2 \n", "2\n2 3 \n", "1\n3 \n", "0\n\n", "2\n1 4 \n", "1\n5 \n", "0\n\n", "0\n\n", "5\n2 3 4 5 6 \n"]}}, {"index": 4018, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThe only difference between the easy and the hard versions is constraints.\n\nA subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string \"abaca\" the following strings are subsequences: \"abaca\", \"aba\", \"aaa\", \"a\" and \"\" (empty string). But the following strings are not subsequences: \"aabaca\", \"cb\" and \"bcaa\".\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nIn one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).\n\nYour task is to find out the minimum possible total cost to obtain a set $S$ of size $k$ or report that it is impossible to do so.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 100, 1 \\le k \\le 10^{12}$) \u2014 the length of the string and the size of the set, correspondingly.\n\nThe second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nPrint one integer \u2014 if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.\n\n\n-----Examples-----\nInput\n4 5\nasdf\n\nOutput\n4\n\nInput\n5 6\naaaaa\n\nOutput\n15\n\nInput\n5 7\naaaaa\n\nOutput\n-1\n\nInput\n10 100\najihiushda\n\nOutput\n233\n\n\n\n-----Note-----\n\nIn the first example we can generate $S$ = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4 5\nasdf\n", "5 6\naaaaa\n", "5 7\naaaaa\n", "10 100\najihiushda\n", "1 2\nu\n", "1 5\nw\n", "1 10\ns\n", "1 25\no\n", "1 50\ns\n", "1 100\np\n", "5 2\nufdpx\n", "5 5\nwnxcc\n", "5 10\nbzitq\n", "5 25\nwjsel\n", "5 50\nbhhaj\n", "5 100\nnvyoj\n", "10 2\nmllbxoykle\n", "10 5\nnrdmcxnnbb\n", "10 10\nhittmcsvmo\n", "10 25\nbpehfvamul\n", "10 50\nfpsafelqno\n", "10 100\nwfykkiubdk\n", "25 2\nvwxvqvouhtbprdhrhlhotyqjp\n", "25 5\nxcrhvdevynotmxzxqafeijadl\n", "25 10\nquomusasazkywxnfvfjimiytg\n", "25 25\nmdxynjiiivwifvaspplpkoffc\n", "25 50\nqbntoutmcylbrtfzauvxmqvyn\n", "25 100\niasrasqpntslqjkefyzbklmtr\n", "50 2\nvjrvahvokiudpiocpvoqsqhukavyrckhcbctrbprqxizcofrfr\n", "50 5\nxplfeoiobchekdeiwkmgkbunixgcyzngznoicllobsqbpkbwnp\n", "50 10\ndnovfytvosvwbeykfnkkebgonntfqapbuphspjsclowovrgrae\n", "50 25\naxxjyqblymjgkciyzwnochociulhtdsabhrdtfldmtugmlsbwu\n", "50 50\ndxldyzmsrrwzwaofkcxwehgvtrsximxgdqrhjthkgfucrjdvwl\n", "50 100\nbybehmveefoqvsronaztdwjzhfspmoszgibthctsamgixqailz\n", "100 2\nzqdvwjzmgfmgngaxzgvuuukxyfzecafuflxpkvemenkorwhmnsxuoxsatlymyjugwjmutfxcksnwhxrwruyqbouyflxhwqhflczz\n"], "outputs": ["4\n", "15\n", "-1\n", "233\n", "1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "1\n", "4\n", "13\n", "52\n", "-1\n", "-1\n", "1\n", "4\n", "9\n", "38\n", "88\n", "242\n", "1\n", "4\n", "9\n", "27\n", "73\n", "173\n", "1\n", "4\n", "9\n", "24\n", "49\n", "149\n", "1\n"]}, "test_in_outs": {"inputs": ["100 5\nayvharmmxcxhibqfixtjmhurxchhkvhubxjcveajrkssbsbrxpijxolrtmvanzyybzbdpgzocicakipmkpxhcjtegksbvabfghpf\n", "100 10\nmaorgdrrnhytzrswsuomkdkdrqyqmwcdekbkgymqaqnacrbbbvwqzcqsdboztxygqjxsqwhjnftiguhemxhvvrnjwpdvbjexhlqt\n", "100 25\nihxdcuahvemeipfkmdqqiktqnyrsrxfdmclwmvgretjsulnlxlvcuvjxxvnmrhjlerhvrzfdvxehnvgslrjzvbscfehtsxvvcabq\n", "100 50\nmhnzadklojbuumkrxjayikjhwuxihgkinllackcavhjpxlydxcgcxjdloyicqkfwulytkpiflkrsdjseynwohymlehmtgswjfxzp\n", "100 100\noaxflkpcwimoiocbudbxgzvekmengbumbcumwxjjcdtqzlijdqoelpevcqfiommjgioxaxdrhbyoszifgxjfprraisgzpxrjhyln\n", "100 1\nyyojtyktazyfegvnnsexxiosqxdlpdwlyojsghpvjpavnvjvttbylqcdabyhleltltzalmgoelxdalcbjejsjxnfebzsxusnujdy\n", "7 100\nasdfgha\n", "7 100\nasdagha\n", "7 100\nasafgsa\n", "7 86\ndjfjfdj\n", "7 87\ndjfjfdj\n", "6 50\nfdjfjd\n", "6 49\nfdjfjd\n", "6 51\nfdjfjd\n", "10 1023\nhsjztkorpv\n", "10 992\nlzgbtqybar\n", "10 889\nltwnwdluhx\n", "20 688037\nttwnmquescldhxwdzxdi\n", "20 1019648\nalhmijcknryfkeurtcqk\n", "20 999409\nbfxajupatylfrczbfsgi\n", "30 363904895\nfwhadwbsskiitjkuwupbrsobdttmqz\n", "30 642235040\nqxkzwaiqbtffqogfkznyjfcshyjoao\n", "30 656341937\nqrzlwlvhfatfwmlpvndtgrxyphfjnn\n", "40 550188209247\nsxspwbifsqgndvxlrrdxwyvwygtvyiusxiyjgnuz\n", "40 313915447382\nfjljjtmxouncvyrsawkkflkzarwolwkuznyqtnnk\n", "40 739620532705\nfdawkecoubadbyxcmkahawfhiapgvwvdhjklxaec\n", "100 1000\nojlksfclwvhxhyhddsosbkwxgpbhnvdgtvvcvrajpiimqsqlxicqyehwsiqcbzqzdxsfbtlldefawclzezvbpwiomvkneibmwtfw\n", "100 10000\nxxprqtlnkqpurdilqdjnnmpsloumhbxymxmzplcwuyfexardpwodnhhkktipqcfwudbivaehhmqexffzgkpztmwrpzzzoudypoqe\n", "100 1000000\npjsakcxuoyyivmfmzuqafyqvcmvmjqitckfnixurgmdshuejptqvrwomnalijputhnylyqesycwjvxflneuwyecyiaxwahlougoa\n", "100 1000000000\ngaoxttalzmmhfhjphaftcwnnhjotuyxcnzlhqoynmcfhhmpzumichrghshdmbtjxmkwegnajkbtfhglkhnapizhltzxgfhyxyvfc\n", "100 1000000000000\ndjgykfqaywhkhpocyxcpvbiiouyielmighclnuopadzuvrirbecucwnzwahahagvfstbxxaednajfauscxwttiglbbxtomnnalcl\n", "40 1000000000000\nazipixmkcmxyzsyxerzggtjbfknpebgtwggrhyuu\n", "50 1000000000000\nfltdysjwwsfhuklxnzfesrnmvdinquktuaaqduxyacvdsgxshy\n", "45 1000000000000\nsakuacuunmcmnrqewlpukirumntsygulpywneaaipboho\n", "41 1000000000000\nxfubvojhogeggntkezhpbigfqbdkdnzxueylitqxr\n"], "outputs": ["4\n", "9\n", "24\n", "49\n", "101\n", "0\n", "299\n", "309\n", "319\n", "273\n", "-1\n", "139\n", "133\n", "-1\n", "5110\n", "4912\n", "-1\n", "6756991\n", "10129664\n", "-1\n", "5380084386\n", "9468426224\n", "-1\n", "10734053749240\n", "6160842348859\n", "-1\n", "1902\n", "25621\n", "3833346\n", "5936118201\n", "8854753825335\n", "-1\n", "13601148116701\n", "15850182637674\n", "19636604785323\n"]}}, {"index": 4019, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given an undirected unweighted connected graph consisting of $n$ vertices and $m$ edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.\n\nYour task is to find any spanning tree of this graph such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$ (or say that there are no such spanning trees). Recall that the degree of a vertex is the number of edges incident to it.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $D$ ($2 \\le n \\le 2 \\cdot 10^5$, $n - 1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2}), 1 \\le D < n$) \u2014 the number of vertices, the number of edges and required degree of the first vertex, respectively.\n\nThe following $m$ lines denote edges: edge $i$ is represented by a pair of integers $v_i$, $u_i$ ($1 \\le v_i, u_i \\le n$, $u_i \\ne v_i$), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ($v_i, u_i$) there are no other pairs ($v_i, u_i$) or ($u_i, v_i$) in the list of edges, and for each pair $(v_i, u_i)$ the condition $v_i \\ne u_i$ is satisfied.\n\n\n-----Output-----\n\nIf there is no spanning tree satisfying the condition from the problem statement, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line and then print $n-1$ lines describing the edges of a spanning tree such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$. Make sure that the edges of the printed spanning tree form some subset of the input edges (order doesn't matter and edge $(v, u)$ is considered the same as the edge $(u, v)$).\n\nIf there are multiple possible answers, print any of them.\n\n\n-----Examples-----\nInput\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n2 1\n2 3\n3 4\n\nInput\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 3\n4 1\n\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe picture corresponding to the first and second examples: [Image]\n\nThe picture corresponding to the third example: [Image]\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n", "4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n", "4 4 3\n1 2\n1 4\n2 3\n3 4\n", "2 1 1\n1 2\n", "3 2 1\n1 2\n3 1\n", "3 3 1\n2 3\n1 2\n3 1\n", "4 3 2\n1 2\n1 3\n1 4\n", "4 4 1\n4 1\n4 3\n4 2\n1 3\n", "4 5 2\n4 1\n2 4\n1 2\n1 3\n4 3\n", "4 6 2\n3 2\n2 1\n1 4\n3 1\n3 4\n4 2\n", "5 4 2\n3 1\n1 5\n4 5\n4 2\n", "5 6 3\n1 5\n2 4\n3 5\n4 3\n2 1\n1 4\n", "5 10 3\n5 3\n1 2\n1 5\n1 3\n4 2\n2 3\n2 5\n3 4\n4 5\n4 1\n", "6 5 1\n6 5\n4 1\n2 4\n5 4\n2 3\n", "6 6 1\n5 1\n3 4\n2 3\n1 6\n5 4\n3 5\n", "6 7 1\n5 1\n4 3\n1 3\n2 3\n1 6\n3 6\n2 1\n", "6 8 3\n3 1\n2 3\n4 1\n1 2\n5 4\n6 5\n6 1\n6 4\n", "6 9 1\n5 6\n3 6\n4 2\n4 1\n4 3\n5 1\n2 1\n1 3\n6 2\n", "6 10 3\n1 6\n3 2\n3 4\n1 3\n2 1\n1 4\n5 1\n2 6\n2 5\n4 2\n", "7 6 1\n2 1\n1 3\n7 4\n3 7\n5 2\n4 6\n", "7 8 1\n4 1\n5 7\n7 1\n6 3\n5 6\n1 2\n7 2\n4 6\n", "7 10 2\n7 1\n1 3\n5 2\n6 1\n6 5\n3 7\n5 7\n1 2\n5 1\n1 4\n", "7 13 6\n6 5\n6 1\n1 3\n3 5\n3 7\n6 7\n4 1\n5 7\n1 2\n1 5\n7 2\n1 7\n4 7\n", "7 15 1\n7 5\n4 6\n1 4\n6 5\n4 2\n5 2\n3 7\n6 3\n3 5\n1 2\n6 2\n7 4\n5 4\n2 7\n1 3\n", "7 17 1\n7 5\n3 4\n3 2\n7 1\n7 3\n6 1\n7 2\n6 3\n6 5\n3 5\n5 4\n5 2\n3 1\n2 1\n7 4\n6 7\n2 4\n", "10 15 2\n6 2\n5 1\n4 3\n4 9\n2 4\n4 10\n2 5\n1 8\n7 8\n9 1\n1 4\n1 2\n6 4\n2 8\n9 3\n", "10 15 1\n6 2\n10 2\n6 1\n7 6\n9 10\n7 4\n9 3\n7 9\n4 1\n3 4\n8 1\n5 10\n4 5\n1 5\n9 1\n", "10 15 3\n8 10\n9 8\n1 6\n7 6\n10 2\n4 3\n2 3\n8 5\n2 5\n4 8\n2 8\n6 10\n10 4\n5 1\n9 5\n", "10 16 1\n4 3\n4 10\n9 6\n2 5\n10 6\n5 4\n6 7\n3 1\n2 4\n8 6\n1 5\n8 1\n2 8\n1 4\n4 9\n9 5\n", "10 16 1\n2 6\n6 7\n2 7\n10 4\n6 4\n6 3\n4 2\n3 8\n7 5\n10 1\n9 7\n4 5\n2 3\n6 1\n1 2\n5 3\n", "10 16 1\n10 1\n7 8\n7 3\n5 9\n2 6\n4 10\n3 8\n2 10\n9 10\n4 3\n2 8\n9 2\n4 1\n5 8\n9 7\n10 8\n", "10 17 3\n1 8\n4 9\n7 5\n7 6\n3 1\n1 2\n1 6\n1 10\n2 8\n9 1\n7 4\n3 10\n1 7\n6 2\n2 7\n4 8\n1 5\n", "10 17 1\n8 2\n8 10\n5 8\n6 4\n4 10\n4 9\n2 5\n7 1\n2 9\n7 2\n2 1\n1 3\n3 2\n4 3\n5 7\n7 3\n7 6\n", "10 17 2\n7 4\n3 5\n6 5\n2 7\n2 3\n8 9\n5 7\n5 2\n7 1\n2 6\n4 2\n2 8\n8 6\n2 9\n10 2\n9 7\n8 4\n", "10 18 5\n10 9\n1 9\n2 4\n6 8\n10 5\n3 4\n1 3\n4 7\n5 7\n8 4\n9 8\n8 3\n1 2\n4 6\n2 10\n1 10\n4 1\n1 6\n", "10 18 3\n4 8\n9 3\n8 3\n9 1\n4 1\n1 5\n6 3\n1 10\n2 6\n6 4\n8 5\n8 7\n4 2\n6 8\n3 2\n5 10\n8 1\n7 3\n"], "outputs": ["YES\n2 3\n3 4\n2 1\n", "YES\n4 1\n2 1\n1 3\n", "NO\n", "YES\n1 2\n", "NO\n", "YES\n1 2\n3 2\n", "NO\n", "YES\n4 2\n4 3\n1 4\n", "YES\n4 3\n2 1\n1 4\n", "YES\n1 4\n2 3\n1 2\n", "YES\n1 3\n2 4\n5 4\n1 5\n", "YES\n5 3\n1 2\n4 1\n5 1\n", "YES\n2 4\n1 5\n3 1\n2 1\n", "YES\n2 3\n5 6\n2 4\n1 4\n5 4\n", "NO\n", "NO\n", "YES\n6 4\n2 1\n1 3\n1 4\n4 5\n", "YES\n2 4\n5 6\n2 6\n1 4\n4 3\n", "YES\n3 1\n4 2\n2 5\n1 6\n1 2\n", "NO\n", "YES\n4 1\n2 7\n6 4\n7 5\n6 3\n6 5\n", "YES\n1 7\n4 1\n5 6\n2 5\n7 3\n7 5\n", "YES\n1 6\n4 1\n7 1\n5 1\n3 1\n2 1\n", "YES\n1 4\n5 2\n3 5\n7 2\n2 4\n6 2\n", "YES\n7 1\n6 3\n2 7\n4 2\n2 5\n2 3\n", "YES\n1 5\n8 1\n2 5\n4 9\n6 2\n4 10\n7 8\n3 4\n2 4\n", "NO\n", "NO\n", "YES\n6 7\n3 4\n4 2\n2 5\n1 3\n6 8\n5 9\n8 2\n10 4\n", "YES\n3 8\n10 4\n4 2\n2 7\n1 10\n9 7\n7 5\n3 2\n6 2\n", "YES\n8 5\n10 2\n10 4\n2 8\n1 10\n3 8\n8 7\n9 2\n6 2\n", "YES\n1 2\n7 2\n1 3\n10 3\n8 4\n1 8\n2 6\n5 7\n4 9\n", "YES\n3 2\n8 10\n4 9\n2 8\n2 5\n6 7\n9 2\n2 7\n1 7\n", "NO\n", "YES\n1 9\n10 1\n6 4\n1 2\n7 4\n8 4\n1 4\n10 5\n3 1\n", "YES\n10 5\n3 7\n6 2\n9 3\n4 2\n5 1\n8 5\n4 1\n1 9\n"]}, "test_in_outs": {"inputs": ["10 18 4\n9 4\n3 8\n6 1\n8 6\n1 5\n2 4\n1 2\n10 9\n4 3\n8 7\n7 2\n4 1\n9 7\n5 10\n4 6\n3 10\n5 3\n3 1\n", "11 15 3\n10 7\n1 2\n9 6\n1 5\n1 11\n9 3\n9 8\n6 5\n5 3\n4 6\n1 9\n5 8\n2 4\n7 1\n6 11\n", "11 15 3\n3 8\n10 11\n11 3\n9 10\n6 5\n5 9\n11 6\n8 4\n9 3\n8 11\n6 10\n1 2\n1 5\n1 10\n7 11\n", "11 15 1\n8 4\n3 9\n11 10\n7 3\n9 1\n11 5\n9 7\n4 9\n3 2\n11 8\n7 5\n3 6\n11 7\n6 2\n3 4\n", "11 16 2\n9 3\n8 1\n7 10\n6 10\n4 1\n5 10\n9 11\n1 7\n3 10\n11 1\n10 11\n11 6\n2 11\n2 6\n6 5\n2 3\n", "11 16 3\n3 2\n6 4\n8 10\n5 3\n7 11\n2 9\n9 10\n3 4\n11 8\n6 10\n1 2\n6 1\n1 11\n7 9\n4 1\n11 10\n", "11 16 3\n10 2\n1 2\n11 7\n4 7\n8 4\n5 6\n4 10\n6 3\n11 3\n1 10\n7 8\n7 5\n6 9\n3 2\n2 9\n10 7\n", "11 17 1\n3 4\n8 2\n1 3\n6 1\n3 9\n2 5\n5 9\n7 2\n5 1\n4 1\n4 5\n8 1\n10 9\n11 1\n9 1\n3 7\n7 10\n", "11 17 2\n9 10\n2 3\n1 7\n10 7\n6 9\n8 9\n8 11\n1 5\n11 6\n5 4\n6 10\n1 9\n10 4\n4 3\n7 9\n2 7\n9 11\n", "11 17 2\n3 8\n8 1\n4 6\n1 5\n1 4\n10 2\n6 11\n11 3\n1 6\n11 7\n7 4\n2 5\n9 2\n10 5\n2 6\n8 2\n11 5\n", "11 18 1\n1 11\n11 8\n5 2\n8 4\n10 3\n4 2\n7 4\n6 8\n11 7\n11 4\n5 11\n2 6\n4 6\n1 5\n9 1\n11 6\n11 3\n2 1\n", "11 18 2\n8 5\n1 4\n4 3\n2 7\n3 6\n11 2\n2 4\n5 1\n2 10\n8 9\n5 6\n1 9\n10 8\n9 10\n3 10\n6 8\n1 11\n6 1\n", "11 18 3\n1 9\n11 9\n6 1\n7 9\n5 7\n3 8\n4 10\n5 9\n9 8\n9 6\n2 10\n8 5\n8 4\n2 1\n10 3\n10 9\n8 10\n3 11\n", "12 15 1\n5 2\n12 3\n12 8\n11 12\n1 6\n12 2\n1 12\n9 3\n9 1\n4 10\n9 7\n9 10\n5 1\n4 1\n7 5\n", "12 15 1\n6 12\n10 9\n9 4\n5 1\n3 11\n2 4\n3 7\n2 3\n9 8\n9 11\n12 1\n1 3\n1 2\n4 8\n11 12\n", "12 15 3\n9 8\n1 4\n10 11\n5 1\n12 9\n2 12\n7 3\n1 12\n2 4\n6 5\n8 4\n6 4\n12 3\n9 10\n12 8\n", "12 16 1\n2 1\n8 4\n5 7\n3 10\n9 6\n11 9\n8 2\n1 5\n6 10\n12 6\n9 3\n4 3\n10 1\n8 1\n1 12\n1 3\n", "12 16 1\n2 9\n1 9\n7 12\n10 9\n11 2\n3 12\n8 1\n2 12\n3 5\n11 1\n10 8\n1 3\n9 11\n8 4\n6 4\n6 3\n", "12 16 2\n11 7\n8 5\n7 6\n6 11\n9 6\n11 3\n1 12\n4 7\n1 7\n10 6\n4 12\n11 9\n7 2\n12 3\n10 11\n8 2\n", "12 17 1\n2 5\n8 1\n6 5\n4 1\n11 10\n2 11\n1 5\n1 7\n3 5\n8 10\n1 6\n9 6\n6 11\n11 1\n6 2\n4 8\n7 12\n", "12 17 1\n4 5\n12 6\n11 8\n10 12\n2 1\n5 8\n2 7\n11 5\n5 10\n5 9\n12 7\n2 3\n6 8\n6 1\n10 4\n9 6\n11 1\n", "12 17 1\n1 9\n5 3\n3 7\n4 7\n8 2\n11 3\n2 9\n11 8\n12 11\n7 6\n6 2\n10 7\n7 1\n11 5\n11 2\n3 6\n5 8\n", "12 18 3\n4 6\n2 12\n1 9\n8 3\n9 7\n3 6\n2 6\n11 6\n1 6\n4 9\n9 10\n6 5\n6 12\n8 9\n8 2\n10 11\n10 6\n9 2\n", "12 18 3\n2 4\n2 10\n9 1\n10 4\n7 8\n5 10\n10 1\n11 3\n2 1\n11 12\n6 2\n1 3\n5 7\n8 3\n6 1\n12 1\n2 8\n6 7\n", "12 18 1\n11 7\n11 1\n9 8\n5 2\n3 2\n5 6\n11 9\n10 7\n3 7\n1 7\n6 4\n10 3\n2 10\n9 4\n6 8\n6 12\n9 7\n12 4\n", "13 15 6\n1 3\n3 6\n13 3\n11 9\n7 1\n11 4\n1 9\n4 9\n13 7\n10 7\n4 1\n5 3\n3 2\n9 8\n1 12\n", "13 15 1\n7 12\n5 8\n12 5\n3 8\n7 4\n10 9\n2 9\n11 8\n3 5\n8 2\n5 13\n5 1\n1 6\n1 11\n1 4\n", "13 15 1\n7 12\n5 9\n4 5\n6 11\n6 12\n2 10\n7 4\n13 7\n3 1\n4 10\n2 12\n11 12\n3 10\n3 9\n8 7\n", "13 16 4\n1 8\n12 1\n7 1\n9 1\n1 4\n11 1\n9 7\n10 13\n5 7\n2 9\n12 4\n13 5\n9 13\n1 3\n6 9\n8 13\n", "13 16 2\n2 9\n5 11\n10 7\n5 8\n2 13\n4 10\n6 1\n9 6\n4 7\n3 8\n7 6\n11 2\n12 9\n2 1\n7 8\n1 3\n", "13 16 2\n11 10\n8 4\n13 1\n7 2\n7 11\n5 4\n2 13\n8 3\n9 1\n12 11\n6 4\n10 9\n10 2\n4 13\n11 13\n12 3\n", "13 17 7\n13 1\n6 1\n1 8\n4 6\n6 5\n1 3\n13 4\n1 11\n12 3\n8 7\n2 7\n12 1\n10 1\n9 8\n2 3\n1 5\n1 2\n", "13 17 1\n7 10\n9 3\n10 9\n10 4\n10 1\n3 4\n13 7\n7 2\n13 4\n2 12\n2 6\n5 8\n8 1\n1 4\n3 1\n7 3\n5 11\n", "13 17 1\n13 2\n2 1\n4 12\n11 2\n5 3\n3 12\n11 9\n9 8\n10 9\n5 11\n9 2\n10 8\n11 7\n10 6\n13 7\n8 6\n6 2\n", "13 18 4\n12 10\n4 12\n13 12\n5 4\n13 8\n5 10\n1 8\n7 8\n10 3\n5 2\n9 8\n6 11\n12 1\n9 2\n11 1\n7 1\n5 1\n10 1\n", "13 18 2\n5 1\n8 11\n2 1\n12 9\n3 2\n5 6\n5 2\n2 11\n12 6\n4 13\n3 4\n8 7\n6 2\n12 13\n2 10\n8 5\n7 5\n1 7\n", "13 18 2\n4 5\n11 8\n10 8\n5 8\n2 12\n9 2\n3 9\n13 7\n6 10\n7 4\n11 13\n3 7\n10 1\n6 12\n1 6\n5 12\n13 4\n5 9\n"], "outputs": ["YES\n9 4\n7 8\n10 9\n1 4\n5 3\n2 1\n7 2\n5 1\n1 6\n", "YES\n7 1\n5 6\n3 9\n7 10\n4 2\n9 6\n1 2\n8 9\n1 5\n11 6\n", "YES\n1 5\n11 6\n11 7\n8 3\n9 5\n1 2\n4 8\n3 9\n1 10\n11 10\n", "YES\n9 1\n11 7\n5 7\n3 7\n10 11\n2 3\n9 3\n6 2\n3 4\n8 4\n", "NO\n", "YES\n11 10\n2 3\n6 1\n9 2\n2 1\n5 3\n10 8\n4 6\n1 11\n9 7\n", "NO\n", "NO\n", "YES\n7 1\n7 9\n11 9\n2 3\n2 7\n6 10\n7 10\n5 1\n8 9\n5 4\n", "YES\n8 1\n5 11\n4 6\n2 9\n2 8\n6 2\n8 3\n5 1\n7 11\n2 10\n", "NO\n", "YES\n8 5\n1 4\n2 11\n3 4\n2 4\n2 7\n6 3\n1 5\n9 10\n10 2\n", "YES\n7 9\n1 9\n10 4\n10 9\n2 1\n9 5\n8 10\n1 6\n11 3\n3 10\n", "NO\n", "NO\n", "YES\n10 9\n2 4\n8 12\n3 12\n12 9\n12 1\n4 6\n7 3\n5 1\n1 4\n10 11\n", "NO\n", "YES\n7 12\n5 3\n1 9\n10 8\n12 3\n11 2\n9 10\n12 2\n3 6\n8 4\n2 9\n", "YES\n2 7\n10 11\n8 2\n7 11\n5 8\n11 9\n1 7\n7 6\n12 1\n3 11\n4 12\n", "NO\n", "YES\n11 8\n10 12\n2 1\n5 10\n7 12\n9 6\n10 4\n6 8\n6 12\n2 3\n7 2\n", "YES\n6 2\n4 7\n7 6\n2 11\n10 7\n11 12\n9 2\n8 5\n9 1\n3 6\n8 2\n", "NO\n", "YES\n2 8\n3 11\n4 2\n1 10\n9 1\n1 2\n3 8\n2 6\n5 10\n7 6\n12 11\n", "YES\n10 2\n8 6\n1 11\n2 5\n5 6\n9 7\n7 3\n2 3\n6 12\n6 4\n7 11\n", "NO\n", "NO\n", "YES\n10 4\n7 8\n10 2\n5 4\n12 2\n9 3\n10 3\n6 12\n1 3\n11 12\n7 13\n12 7\n", "YES\n9 6\n12 1\n9 7\n11 1\n13 9\n8 13\n12 4\n1 8\n5 7\n10 13\n2 9\n1 3\n", "YES\n4 7\n2 11\n8 3\n6 1\n12 9\n7 6\n2 13\n8 5\n1 2\n7 10\n9 6\n11 5\n", "YES\n8 4\n6 4\n3 12\n1 13\n4 5\n9 1\n10 9\n11 12\n13 4\n2 7\n2 13\n11 7\n", "YES\n2 1\n8 7\n5 6\n8 1\n1 10\n12 1\n8 9\n1 3\n11 1\n4 6\n4 13\n1 13\n", "NO\n", "YES\n5 3\n9 8\n9 2\n4 12\n11 5\n10 9\n2 1\n11 2\n7 13\n2 6\n2 13\n3 12\n", "YES\n9 2\n10 5\n1 11\n1 8\n13 8\n4 12\n10 3\n5 4\n11 6\n7 1\n12 1\n8 9\n", "YES\n6 2\n4 3\n9 12\n1 5\n2 10\n2 1\n3 2\n4 13\n5 7\n2 11\n8 5\n12 6\n", "YES\n4 5\n3 9\n7 3\n1 10\n5 8\n6 1\n5 12\n8 11\n12 2\n2 9\n12 6\n13 4\n"]}}, {"index": 4020, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nPolycarp is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\nPolycarp wants to know the time of the midpoint of the contest. For example, if the contest lasts from $10:00$ to $11:00$ then the answer is $10:30$, if the contest lasts from $11:10$ to $11:12$ then the answer is $11:11$.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $h_1$ and $m_1$ in the format hh:mm.\n\nThe second line of the input contains two integers $h_2$ and $m_2$ in the same format (hh:mm).\n\nIt is guaranteed that $0 \\le h_1, h_2 \\le 23$ and $0 \\le m_1, m_2 \\le 59$.\n\nIt is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\n\n-----Output-----\n\nPrint two integers $h_3$ and $m_3$ ($0 \\le h_3 \\le 23, 0 \\le m_3 \\le 59$) corresponding to the midpoint of the contest in the format hh:mm. Print each number as exactly two digits (prepend a number with leading zero if needed), separate them with ':'.\n\n\n-----Examples-----\nInput\n10:00\n11:00\n\nOutput\n10:30\n\nInput\n11:10\n11:12\n\nOutput\n11:11\n\nInput\n01:02\n03:02\n\nOutput\n02:02\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["10:00\n11:00\n", "11:10\n11:12\n", "01:02\n03:02\n", "00:00\n23:58\n", "00:01\n23:59\n", "00:00\n00:02\n", "23:57\n23:59\n", "11:40\n12:22\n", "05:05\n05:55\n", "21:12\n22:24\n", "09:12\n09:14\n", "09:10\n09:12\n", "00:00\n00:18\n", "09:54\n09:56\n", "10:35\n11:55\n", "00:01\n00:03\n", "15:15\n15:17\n", "12:12\n12:14\n", "09:24\n09:26\n", "08:08\n10:10\n", "09:50\n09:52\n", "09:00\n10:00\n", "10:00\n10:04\n", "09:08\n09:10\n", "00:00\n00:20\n", "00:00\n00:10\n", "00:00\n00:12\n", "02:08\n02:10\n", "10:06\n10:08\n", "10:08\n10:10\n", "12:00\n12:18\n", "13:00\n13:30\n", "10:09\n10:11\n"], "outputs": ["10:30\n", "11:11\n", "02:02\n", "11:59\n", "12:00\n", "00:01\n", "23:58\n", "12:01\n", "05:30\n", "21:48\n", "09:13\n", "09:11\n", "00:09\n", "09:55\n", "11:15\n", "00:02\n", "15:16\n", "12:13\n", "09:25\n", "09:09\n", "09:51\n", "09:30\n", "10:02\n", "09:09\n", "00:10\n", "00:05\n", "00:06\n", "02:09\n", "10:07\n", "10:09\n", "12:09\n", "13:15\n", "10:10\n"]}, "test_in_outs": {"inputs": ["10:00\n10:02\n", "06:20\n10:30\n", "01:21\n17:59\n", "13:00\n13:02\n", "08:00\n10:00\n", "13:13\n13:15\n", "00:00\n18:18\n", "09:00\n09:18\n", "09:09\n09:11\n", "08:08\n10:12\n", "11:04\n11:08\n", "00:01\n03:01\n", "11:30\n13:30\n", "00:00\n02:18\n", "00:01\n19:39\n", "11:11\n12:11\n", "08:20\n19:46\n", "20:04\n20:08\n", "10:00\n12:18\n", "10:11\n10:15\n", "07:04\n13:08\n", "12:15\n12:33\n", "15:37\n20:55\n", "21:06\n21:14\n", "03:00\n17:06\n", "09:07\n09:13\n", "09:06\n09:14\n", "09:00\n09:02\n", "09:05\n09:13\n", "00:00\n00:08\n", "00:08\n00:10\n", "09:30\n10:30\n", "01:00\n21:20\n"], "outputs": ["10:01\n", "08:25\n", "09:40\n", "13:01\n", "09:00\n", "13:14\n", "09:09\n", "09:09\n", "09:10\n", "09:10\n", "11:06\n", "01:31\n", "12:30\n", "01:09\n", "09:50\n", "11:41\n", "14:03\n", "20:06\n", "11:09\n", "10:13\n", "10:06\n", "12:24\n", "18:16\n", "21:10\n", "10:03\n", "09:10\n", "09:10\n", "09:01\n", "09:09\n", "00:04\n", "00:09\n", "10:00\n", "11:10\n"]}}, {"index": 4021, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\n-----Input-----\n\nThe input contains a single integer a (1 \u2264 a \u2264 64).\n\n\n-----Output-----\n\nOutput a single integer.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n1\n\nInput\n4\n\nOutput\n2\n\nInput\n27\n\nOutput\n5\n\nInput\n42\n\nOutput\n6\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["2\n", "4\n", "27\n", "42\n", "1\n", "3\n", "64\n", "5\n", "6\n", "7\n", "8\n", "9\n", "10\n", "11\n", "12\n", "13\n", "14\n", "15\n", "16\n", "17\n", "18\n", "19\n", "20\n", "21\n", "22\n", "23\n", "24\n", "25\n", "26\n", "28\n", "29\n", "30\n"], "outputs": ["1\n", "2\n", "5\n", "6\n", "1\n", "1\n", "267\n", "1\n", "2\n", "1\n", "5\n", "2\n", "2\n", "1\n", "5\n", "1\n", "2\n", "1\n", "14\n", "1\n", "5\n", "1\n", "5\n", "2\n", "2\n", "1\n", "15\n", "2\n", "2\n", "4\n", "1\n", "4\n"]}, "test_in_outs": {"inputs": ["31\n", "32\n", "33\n", "34\n", "35\n", "36\n", "37\n", "38\n", "39\n", "40\n", "41\n", "43\n", "44\n", "45\n", "46\n", "47\n", "48\n", "49\n", "50\n", "51\n", "52\n", "53\n", "54\n", "55\n", "56\n", "57\n", "58\n", "59\n", "60\n", "61\n", "62\n", "63\n"], "outputs": ["1\n", "51\n", "1\n", "2\n", "1\n", "14\n", "1\n", "2\n", "2\n", "14\n", "1\n", "1\n", "4\n", "2\n", "2\n", "1\n", "52\n", "2\n", "5\n", "1\n", "5\n", "1\n", "15\n", "2\n", "13\n", "2\n", "2\n", "1\n", "13\n", "1\n", "2\n", "4\n"]}}, {"index": 4022, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given $n$ segments on a number line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide.\n\nThe intersection of a sequence of segments is such a maximal set of points (not necesserily having integer coordinates) that each point lies within every segment from the sequence. If the resulting set isn't empty, then it always forms some continuous segment. The length of the intersection is the length of the resulting segment or $0$ in case the intersection is an empty set.\n\nFor example, the intersection of segments $[1;5]$ and $[3;10]$ is $[3;5]$ (length $2$), the intersection of segments $[1;5]$ and $[5;7]$ is $[5;5]$ (length $0$) and the intersection of segments $[1;5]$ and $[6;6]$ is an empty set (length $0$).\n\nYour task is to remove exactly one segment from the given sequence in such a way that the intersection of the remaining $(n - 1)$ segments has the maximal possible length.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of segments in the sequence.\n\nEach of the next $n$ lines contains two integers $l_i$ and $r_i$ ($0 \\le l_i \\le r_i \\le 10^9$) \u2014 the description of the $i$-th segment.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximal possible length of the intersection of $(n - 1)$ remaining segments after you remove exactly one segment from the sequence.\n\n\n-----Examples-----\nInput\n4\n1 3\n2 6\n0 4\n3 3\n\nOutput\n1\n\nInput\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\nOutput\n2\n\nInput\n3\n4 5\n1 2\n9 20\n\nOutput\n0\n\nInput\n2\n3 10\n1 5\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the first example you should remove the segment $[3;3]$, the intersection will become $[2;3]$ (length $1$). Removing any other segment will result in the intersection $[3;3]$ (length $0$).\n\nIn the second example you should remove the segment $[1;3]$ or segment $[2;6]$, the intersection will become $[2;4]$ (length $2$) or $[1;3]$ (length $2$), respectively. Removing any other segment will result in the intersection $[2;3]$ (length $1$).\n\nIn the third example the intersection will become an empty set no matter the segment you remove.\n\nIn the fourth example you will get the intersection $[3;10]$ (length $7$) if you remove the segment $[1;5]$ or the intersection $[1;5]$ (length $4$) if you remove the segment $[3;10]$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4\n1 3\n2 6\n0 4\n3 3\n", "5\n2 6\n1 3\n0 4\n1 20\n0 4\n", "3\n4 5\n1 2\n9 20\n", "2\n3 10\n1 5\n", "3\n1 5\n1 5\n6 10\n", "3\n6 10\n6 10\n1 5\n", "3\n6 10\n4 8\n5 9\n", "3\n1 10\n11 100\n50 51\n", "3\n3 4\n2 10\n2 10\n", "4\n1 4\n2 5\n1 5\n2 5\n", "4\n0 11\n10 16\n11 15\n12 14\n", "3\n1 2\n5 9\n8 28\n", "2\n1 10\n2 5\n", "2\n1 4\n2 3\n", "3\n1 20\n2 19\n10 11\n", "3\n1 7\n2 3\n4 10\n", "3\n1 6\n2 7\n4 4\n", "2\n3 4\n2 5\n", "2\n2 3\n1 6\n", "3\n101 200\n1 100\n2 3\n", "2\n1 5\n2 4\n", "3\n1 7\n2 8\n4 4\n", "3\n1 9\n2 8\n3 7\n", "2\n8 11\n5 13\n", "3\n0 8\n1 7\n2 6\n", "2\n7 9\n2 5\n", "2\n0 5\n1 4\n", "2\n0 10\n3 4\n", "3\n0 10\n5 10\n0 9\n", "4\n1 6\n4 6\n6 9\n4 10\n", "2\n1 6\n2 9\n"], "outputs": ["1\n", "2\n", "0\n", "7\n", "4\n", "4\n", "3\n", "1\n", "8\n", "3\n", "2\n", "1\n", "9\n", "3\n", "17\n", "3\n", "4\n", "3\n", "5\n", "1\n", "4\n", "5\n", "6\n", "8\n", "6\n", "3\n", "5\n", "10\n", "9\n", "2\n", "7\n"]}, "test_in_outs": {"inputs": ["2\n1 2\n6 9\n", "2\n1 3\n2 2\n", "4\n3 4\n2 5\n1 6\n1 6\n", "2\n0 0\n1 1\n", "4\n3 5\n2 6\n2 4\n2 4\n", "2\n0 4\n1 2\n", "3\n2 6\n2 5\n2 4\n", "5\n5 5\n1 4\n2 5\n2 4\n1 4\n", "4\n1 4\n1 4\n2 2\n1 5\n", "3\n3 5\n2 5\n2 6\n", "2\n0 1\n2 4\n", "6\n2 4\n3 5\n2 5\n1 6\n2 4\n3 6\n", "3\n3 4\n2 5\n1 5\n", "2\n1 2\n0 4\n", "2\n1 4\n0 2\n", "3\n2 5\n1 4\n1 6\n", "2\n2 2\n1 3\n", "5\n2 6\n2 4\n1 6\n2 5\n2 6\n", "5\n1 3\n5 5\n3 4\n2 6\n1 2\n", "4\n2 4\n1 5\n3 5\n2 6\n", "6\n6 6\n3 4\n3 5\n4 5\n1 2\n5 6\n", "6\n2 4\n3 6\n2 6\n2 5\n1 4\n1 4\n", "2\n4 4\n1 3\n", "2\n0 1\n1 2\n", "5\n3 5\n2 6\n2 5\n3 4\n2 5\n", "2\n2 4\n0 1\n", "2\n0 0\n1 3\n", "6\n1 5\n1 4\n1 6\n2 5\n2 6\n2 6\n", "3\n1 6\n2 5\n3 4\n", "4\n2 5\n1 2\n3 4\n2 4\n", "3\n2 2\n3 5\n4 4\n"], "outputs": ["3\n", "2\n", "3\n", "0\n", "2\n", "4\n", "3\n", "2\n", "3\n", "3\n", "2\n", "1\n", "3\n", "4\n", "3\n", "3\n", "2\n", "3\n", "0\n", "2\n", "0\n", "2\n", "2\n", "1\n", "2\n", "2\n", "2\n", "3\n", "3\n", "1\n", "0\n"]}}, {"index": 4023, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nVova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.\n\nThe current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.\n\nVova can only use $2 \\times 1$ bricks to put in the wall (he has infinite supply of them, however).\n\nVova can put bricks only horizontally on the neighbouring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\nNote that Vova can't put bricks vertically.\n\nVova is a perfectionist, so he considers the wall completed when:  all parts of the wall has the same height;  the wall has no empty spaces inside it. \n\nCan Vova complete the wall using any amount of bricks (possibly zero)?\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of parts in the wall.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the initial heights of the parts of the wall.\n\n\n-----Output-----\n\nPrint \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\n\nPrint \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n5\n2 1 1 2 5\n\nOutput\nYES\n\nInput\n3\n4 5 3\n\nOutput\nNO\n\nInput\n2\n10 10\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.\n\nIn the second example Vova can put no bricks in the wall.\n\nIn the third example the wall is already complete.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5\n2 1 1 2 5\n", "3\n4 5 3\n", "2\n10 10\n", "4\n1 2 2 1\n", "6\n3 2 3 3 2 3\n", "1\n1\n", "14\n7 7 7 4 3 3 4 5 4 4 5 7 7 7\n", "10\n1 9 7 6 2 4 7 8 1 3\n", "6\n1 1 1 1 2 1\n", "7\n1 1 2 2 3 3 1\n", "4\n2 2 2 3\n", "7\n4 1 1 2 4 3 3\n", "4\n3 1 2 4\n", "3\n5 5 2\n", "2\n1 2\n", "7\n4 1 1 2 3 3 4\n", "8\n2 2 10 6 4 2 2 4\n", "4\n3 3 3 4\n", "5\n1 2 2 1 1\n", "5\n2 1 1 1 2\n", "4\n10 10 40 60\n", "4\n5 3 3 3\n", "7\n2 2 2 2 2 2 1\n", "5\n1 1 2 2 1\n", "5\n3 2 2 3 1\n", "3\n5 5 4\n", "5\n3 3 1 1 2\n", "3\n10 10 9\n", "7\n9 7 6 5 5 6 7\n"], "outputs": ["YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n"]}, "test_in_outs": {"inputs": ["5\n1 1 2 3 3\n", "5\n2 2 2 2 1\n", "5\n5 4 4 4 5\n", "3\n5 5 3\n", "13\n5 2 2 1 1 2 5 2 1 1 2 2 5\n", "8\n9 7 6 5 5 6 7 8\n", "5\n4 3 3 4 1\n", "4\n4 4 4 3\n", "5\n10 9 5 3 7\n", "5\n1 2 1 2 5\n", "4\n2 1 4 5\n", "4\n2 10 1 1\n", "5\n1 2 2 1 5\n", "3\n2 2 1\n", "2\n3 2\n", "4\n1 1 3 5\n", "5\n5 5 1 1 2\n", "5\n5 5 1 1 3\n", "4\n1 1 3 4\n", "10\n5 3 1 2 2 1 3 5 1 1\n", "10\n10 9 8 7 7 7 8 9 10 11\n", "9\n5 4 3 3 2 2 1 1 5\n", "4\n4 3 2 1\n", "10\n5 2 2 6 9 7 8 1 5 5\n", "20\n10 5 2 3 5 7 7 9 4 9 9 4 9 7 7 5 3 2 5 10\n", "5\n10 10 9 8 8\n", "5\n1 1 4 4 6\n", "5\n1 1 6 4 4\n", "5\n1 6 1 4 4\n", "5\n3 2 2 4 5\n"], "outputs": ["NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n"]}}, {"index": 4024, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThe only difference between the easy and the hard versions is constraints.\n\nA subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string \"abaca\" the following strings are subsequences: \"abaca\", \"aba\", \"aaa\", \"a\" and \"\" (empty string). But the following strings are not subsequences: \"aabaca\", \"cb\" and \"bcaa\".\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nIn one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).\n\nYour task is to find out the minimum possible total cost to obtain a set $S$ of size $k$ or report that it is impossible to do so.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) \u2014 the length of the string and the size of the set, correspondingly.\n\nThe second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nPrint one integer \u2014 if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.\n\n\n-----Examples-----\nInput\n4 5\nasdf\n\nOutput\n4\n\nInput\n5 6\naaaaa\n\nOutput\n15\n\nInput\n5 7\naaaaa\n\nOutput\n-1\n\nInput\n10 100\najihiushda\n\nOutput\n233\n\n\n\n-----Note-----\n\nIn the first example we can generate $S$ = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4 5\nasdf\n", "5 6\naaaaa\n", "5 7\naaaaa\n", "10 100\najihiushda\n", "1 2\nu\n", "1 5\nw\n", "1 10\ns\n", "1 25\no\n", "1 50\ns\n", "1 100\np\n", "5 2\nufdpx\n", "5 5\nwnxcc\n", "5 10\nbzitq\n", "5 25\nwjsel\n", "5 50\nbhhaj\n", "5 100\nnvyoj\n", "10 2\nmllbxoykle\n", "10 5\nnrdmcxnnbb\n", "10 10\nhittmcsvmo\n", "10 25\nbpehfvamul\n", "10 50\nfpsafelqno\n", "10 100\nwfykkiubdk\n", "25 2\nvwxvqvouhtbprdhrhlhotyqjp\n", "25 5\nxcrhvdevynotmxzxqafeijadl\n", "25 10\nquomusasazkywxnfvfjimiytg\n", "25 25\nmdxynjiiivwifvaspplpkoffc\n", "25 50\nqbntoutmcylbrtfzauvxmqvyn\n", "25 100\niasrasqpntslqjkefyzbklmtr\n", "50 2\nvjrvahvokiudpiocpvoqsqhukavyrckhcbctrbprqxizcofrfr\n"], "outputs": ["4\n", "15\n", "-1\n", "233\n", "1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "1\n", "4\n", "13\n", "52\n", "-1\n", "-1\n", "1\n", "4\n", "9\n", "38\n", "88\n", "242\n", "1\n", "4\n", "9\n", "27\n", "73\n", "173\n", "1\n"]}, "test_in_outs": {"inputs": ["50 5\nxplfeoiobchekdeiwkmgkbunixgcyzngznoicllobsqbpkbwnp\n", "50 10\ndnovfytvosvwbeykfnkkebgonntfqapbuphspjsclowovrgrae\n", "50 25\naxxjyqblymjgkciyzwnochociulhtdsabhrdtfldmtugmlsbwu\n", "50 50\ndxldyzmsrrwzwaofkcxwehgvtrsximxgdqrhjthkgfucrjdvwl\n", "50 100\nbybehmveefoqvsronaztdwjzhfspmoszgibthctsamgixqailz\n", "100 2\nzqdvwjzmgfmgngaxzgvuuukxyfzecafuflxpkvemenkorwhmnsxuoxsatlymyjugwjmutfxcksnwhxrwruyqbouyflxhwqhflczz\n", "100 5\nayvharmmxcxhibqfixtjmhurxchhkvhubxjcveajrkssbsbrxpijxolrtmvanzyybzbdpgzocicakipmkpxhcjtegksbvabfghpf\n", "100 10\nmaorgdrrnhytzrswsuomkdkdrqyqmwcdekbkgymqaqnacrbbbvwqzcqsdboztxygqjxsqwhjnftiguhemxhvvrnjwpdvbjexhlqt\n", "100 25\nihxdcuahvemeipfkmdqqiktqnyrsrxfdmclwmvgretjsulnlxlvcuvjxxvnmrhjlerhvrzfdvxehnvgslrjzvbscfehtsxvvcabq\n", "100 50\nmhnzadklojbuumkrxjayikjhwuxihgkinllackcavhjpxlydxcgcxjdloyicqkfwulytkpiflkrsdjseynwohymlehmtgswjfxzp\n", "100 100\noaxflkpcwimoiocbudbxgzvekmengbumbcumwxjjcdtqzlijdqoelpevcqfiommjgioxaxdrhbyoszifgxjfprraisgzpxrjhyln\n", "100 1\nyyojtyktazyfegvnnsexxiosqxdlpdwlyojsghpvjpavnvjvttbylqcdabyhleltltzalmgoelxdalcbjejsjxnfebzsxusnujdy\n", "7 100\nasdfgha\n", "7 100\nasdagha\n", "7 100\nasafgsa\n", "7 86\ndjfjfdj\n", "7 87\ndjfjfdj\n", "6 50\nfdjfjd\n", "6 49\nfdjfjd\n", "6 51\nfdjfjd\n", "100 100\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "30 60\naaaaaaaaaaaaaaaaaaaaaaaaaaaaab\n", "50 60\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\n", "100 20\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "100 100\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\n", "30 30\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "82 100\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "98 100\nabaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "100 100\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbb\n", "50 100\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n"], "outputs": ["4\n", "9\n", "24\n", "49\n", "149\n", "1\n", "4\n", "9\n", "24\n", "49\n", "101\n", "0\n", "299\n", "309\n", "319\n", "273\n", "-1\n", "139\n", "133\n", "-1\n", "4950\n", "900\n", "900\n", "190\n", "2500\n", "435\n", "-1\n", "453\n", "850\n", "-1\n"]}}, {"index": 4025, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nPolycarp has a cat and his cat is a real gourmet! Dependent on a day of the week he eats certain type of food:  on Mondays, Thursdays and Sundays he eats fish food;  on Tuesdays and Saturdays he eats rabbit stew;  on other days of week he eats chicken stake. \n\nPolycarp plans to go on a trip and already packed his backpack. His backpack contains:  $a$ daily rations of fish food;  $b$ daily rations of rabbit stew;  $c$ daily rations of chicken stakes. \n\nPolycarp has to choose such day of the week to start his trip that his cat can eat without additional food purchases as long as possible. Print the maximum number of days the cat can eat in a trip without additional food purchases, if Polycarp chooses the day of the week to start his trip optimally.\n\n\n-----Input-----\n\nThe first line of the input contains three positive integers $a$, $b$ and $c$ ($1 \\le a, b, c \\le 7\\cdot10^8$) \u2014 the number of daily rations of fish food, rabbit stew and chicken stakes in Polycarps backpack correspondingly.\n\n\n-----Output-----\n\nPrint the maximum number of days the cat can eat in a trip without additional food purchases, if Polycarp chooses the day of the week to start his trip optimally.\n\n\n-----Examples-----\nInput\n2 1 1\n\nOutput\n4\n\nInput\n3 2 2\n\nOutput\n7\n\nInput\n1 100 1\n\nOutput\n3\n\nInput\n30 20 10\n\nOutput\n39\n\n\n\n-----Note-----\n\nIn the first example the best day for start of the trip is Sunday. In this case, during Sunday and Monday the cat will eat fish food, during Tuesday \u2014 rabbit stew and during Wednesday \u2014 chicken stake. So, after four days of the trip all food will be eaten.\n\nIn the second example Polycarp can start his trip in any day of the week. In any case there are food supplies only for one week in Polycarps backpack.\n\nIn the third example Polycarp can start his trip in any day, excluding Wednesday, Saturday and Sunday. In this case, the cat will eat three different dishes in three days. Nevertheless that after three days of a trip there will be $99$ portions of rabbit stew in a backpack, can cannot eat anything in fourth day of a trip.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["2 1 1\n", "3 2 2\n", "1 100 1\n", "30 20 10\n", "700000000 200000000 300000000\n", "300000000 700000000 400000000\n", "500000000 200000000 700000000\n", "700000000 700000000 700000000\n", "92 54 80\n", "97 46 46\n", "13 77 34\n", "4 1 2\n", "1009859 14748096 15475634\n", "2 100 100\n", "200 2 3\n", "2 8 9\n", "201 4 5\n", "3 1 4\n", "202 4 5\n", "205 2 4\n", "203 3 6\n", "3 2 1\n", "21234578 1231455 1230047\n", "5 4 3\n", "10 8 6\n", "27 20 20\n", "20 16 12\n", "11144477 3123445 6688711\n"], "outputs": ["4\n", "7\n", "3\n", "39\n", "700000003\n", "700000002\n", "700000003\n", "1633333336\n", "192\n", "163\n", "33\n", "6\n", "2356339\n", "6\n", "9\n", "6\n", "16\n", "6\n", "16\n", "10\n", "13\n", "6\n", "4305167\n", "12\n", "23\n", "65\n", "46\n", "10932060\n"]}, "test_in_outs": {"inputs": ["525643356 245126545 242111421\n", "1 1 2\n", "4 4 2\n", "580491178 465290676 24999591\n", "309767158 518372594 115844198\n", "600025643 600010745 600014575\n", "659209689 118781819 382068338\n", "600019415 600004367 600015718\n", "177674746 123877503 565008408\n", "123243 122112 234567\n", "650439292 352470919 347331093\n", "690005222 690012314 690019663\n", "222222 2222222 22223\n", "155247014 622599781 457401709\n", "10012219 123221 1234\n", "1 2 3\n", "4 2 3\n", "27053 31618 3317\n", "1 2 9\n", "5 4 1\n", "1 10 2\n", "1 5 6\n", "1 7 10\n", "1 1527 11861\n", "5 5 1\n", "5 1 6\n", "699999999 466666666 466666665\n", "31750 16654 16655\n"], "outputs": ["847389976\n", "4\n", "9\n", "87498571\n", "405454697\n", "1400059835\n", "415736369\n", "1400045303\n", "414574410\n", "287569\n", "1215658828\n", "1610012186\n", "77783\n", "362243034\n", "4323\n", "5\n", "9\n", "11612\n", "5\n", "6\n", "5\n", "5\n", "5\n", "5\n", "6\n", "6\n", "1633333330\n", "58291\n"]}}, {"index": 4026, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nMasha has $n$ types of tiles of size $2 \\times 2$. Each cell of the tile contains one integer. Masha has an infinite number of tiles of each type.\n\nMasha decides to construct the square of size $m \\times m$ consisting of the given tiles. This square also has to be a symmetric with respect to the main diagonal matrix, and each cell of this square has to be covered with exactly one tile cell, and also sides of tiles should be parallel to the sides of the square. All placed tiles cannot intersect with each other. Also, each tile should lie inside the square. See the picture in Notes section for better understanding.\n\nSymmetric with respect to the main diagonal matrix is such a square $s$ that for each pair $(i, j)$ the condition $s[i][j] = s[j][i]$ holds. I.e. it is true that the element written in the $i$-row and $j$-th column equals to the element written in the $j$-th row and $i$-th column.\n\nYour task is to determine if Masha can construct a square of size $m \\times m$ which is a symmetric matrix and consists of tiles she has. Masha can use any number of tiles of each type she has to construct the square. Note that she can not rotate tiles, she can only place them in the orientation they have in the input.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 100$) \u2014 the number of types of tiles and the size of the square Masha wants to construct.\n\nThe next $2n$ lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. \n\nThe first line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.\n\nIt is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.\n\n\n-----Output-----\n\nFor each test case print the answer: \"YES\" (without quotes) if Masha can construct the square of size $m \\times m$ which is a symmetric matrix. Otherwise, print \"NO\" (withtout quotes).\n\n\n-----Example-----\nInput\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\nOutput\nYES\nNO\nYES\nNO\nYES\nYES\n\n\n\n-----Note-----\n\nThe first test case of the input has three types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {7} & {8} & {9} \\\\ \\hline 7 & {4} & {9} & {8} \\\\ \\hline 8 & {9} & {5} & {7} \\\\ \\hline 9 & {8} & {7} & {4} \\\\ \\hline \\end{array} \\right.$\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n", "1\n2 2\n1 2\n3 4\n1 3\n2 4\n", "1\n2 10\n1 2\n3 4\n1 3\n2 4\n", "1\n1 2\n2 5\n5 3\n", "1\n1 2\n1 2\n2 2\n", "1\n1 2\n7 8\n8 9\n", "1\n2 2\n1 4\n3 2\n1 3\n4 2\n", "2\n1 2\n2 4\n4 3\n1 2\n2 3\n4 5\n", "1\n1 2\n4 7\n7 5\n", "1\n1 2\n1 2\n2 1\n", "1\n1 2\n2 69\n69 3\n", "1\n1 2\n1 3\n3 2\n", "1\n1 2\n4 2\n2 3\n", "1\n1 3\n1 1\n1 1\n", "1\n8 2\n3 5\n10 7\n3 3\n7 9\n5 9\n7 4\n6 8\n3 8\n7 6\n1 6\n5 7\n9 5\n3 8\n1 9\n3 1\n1 10\n", "1\n2 4\n1 2\n3 4\n1 3\n2 4\n", "1\n1 2\n4 1\n1 2\n", "1\n1 2\n1 2\n2 3\n", "1\n2 2\n1 2\n3 4\n1 2\n2 3\n", "1\n2 4\n1 5\n3 1\n1 3\n5 1\n", "1\n1 2\n3 2\n2 5\n", "1\n1 2\n7 8\n8 6\n", "1\n2 2\n3 5\n6 3\n3 6\n5 3\n", "1\n2 4\n3 2\n4 3\n3 4\n2 3\n", "1\n1 1\n1 2\n1 1\n", "1\n1 2\n1 2\n2 4\n", "1\n2 2\n3 5\n6 4\n3 6\n5 4\n", "1\n1 2\n1 2\n1 2\n"], "outputs": ["YES\nNO\nYES\nNO\nYES\nYES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\nNO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n"]}, "test_in_outs": {"inputs": ["1\n1 2\n1 5\n5 7\n", "1\n2 2\n2 5\n6 8\n2 6\n5 8\n", "1\n1 2\n2 1\n1 3\n", "1\n3 6\n3 3\n4 3\n3 4\n3 3\n3 3\n1 3\n", "1\n2 2\n1 2\n1 1\n1 1\n2 1\n", "1\n2 4\n1 2\n3 1\n1 3\n2 1\n", "1\n1 2\n5 3\n4 8\n", "1\n2 2\n9 1\n2 3\n9 2\n1 3\n", "1\n2 18\n1 2\n3 4\n1 3\n2 4\n", "1\n3 4\n1 2\n3 4\n1 3\n2 4\n9 10\n11 12\n", "1\n1 2\n99 3\n99 3\n", "1\n2 2\n1 1\n1 2\n1 2\n3 4\n", "1\n1 2\n2 1\n1 5\n", "1\n2 6\n1 2\n3 4\n1 3\n2 4\n", "1\n1 2\n5 7\n7 4\n", "1\n2 2\n1 2\n3 1\n1 3\n2 1\n", "1\n1 2\n2 6\n6 7\n", "1\n1 2\n1 1\n1 2\n", "1\n2 2\n1 2\n3 4\n1 2\n3 4\n", "1\n1 4\n6 6\n6 5\n", "1\n1 1\n1 1\n1 1\n", "1\n1 2\n4 6\n6 5\n", "1\n2 2\n3 6\n5 4\n3 5\n6 4\n", "1\n2 8\n1 2\n3 4\n1 2\n2 1\n", "1\n2 2\n1 2\n3 4\n1 4\n3 2\n", "1\n1 8\n1 1\n3 3\n", "1\n2 8\n1 2\n3 4\n1 3\n2 4\n", "1\n2 4\n1 3\n2 1\n1 2\n3 1\n"], "outputs": ["YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n"]}}, {"index": 4027, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given an integer sequence $1, 2, \\dots, n$. You have to divide it into two sets $A$ and $B$ in such a way that each element belongs to exactly one set and $|sum(A) - sum(B)|$ is minimum possible.\n\nThe value $|x|$ is the absolute value of $x$ and $sum(S)$ is the sum of elements of the set $S$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^9$).\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible value of $|sum(A) - sum(B)|$ if you divide the initial sequence $1, 2, \\dots, n$ into two sets $A$ and $B$.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n0\n\nInput\n5\n\nOutput\n1\n\nInput\n6\n\nOutput\n1\n\n\n\n-----Note-----\n\nSome (not all) possible answers to examples:\n\nIn the first example you can divide the initial sequence into sets $A = \\{1, 2\\}$ and $B = \\{3\\}$ so the answer is $0$.\n\nIn the second example you can divide the initial sequence into sets $A = \\{1, 3, 4\\}$ and $B = \\{2, 5\\}$ so the answer is $1$.\n\nIn the third example you can divide the initial sequence into sets $A = \\{1, 4, 5\\}$ and $B = \\{2, 3, 6\\}$ so the answer is $1$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["3\n", "5\n", "6\n", "2000000000\n", "1999999999\n", "1999999997\n", "1999999998\n", "1\n", "69420\n", "999999998\n", "65535\n", "27397633\n", "46341\n", "1000271094\n", "84457\n", "2\n", "250489\n", "1777777\n", "1825468885\n", "4\n", "1000005\n", "1000080110\n", "1999999993\n", "1000000002\n", "1999999929\n", "123456789\n", "1999999990\n"], "outputs": ["0\n", "1\n", "1\n", "0\n", "0\n", "1\n", "1\n", "1\n", "0\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n"]}, "test_in_outs": {"inputs": ["1000001\n", "129847189\n", "1777778\n", "7656765\n", "999998\n", "12345\n", "1000003346\n", "333333333\n", "1000070102\n", "46353\n", "199999990\n", "63245\n", "123214213\n", "123124213\n", "1244164813\n", "199999998\n", "1234567889\n", "10\n", "46342\n", "65538\n", "1465465413\n", "778778777\n", "46369\n", "46362\n", "46401\n", "99\n", "999\n"], "outputs": ["1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "0\n", "0\n"]}}, {"index": 4028, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given a bracket sequence $s$ (not necessarily a regular one). A bracket sequence is a string containing only characters '(' and ')'.\n\nA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example, bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"), and \")(\", \"(\" and \")\" are not.\n\nYour problem is to calculate the number of regular bracket sequences of length $2n$ containing the given bracket sequence $s$ as a substring (consecutive sequence of characters) modulo $10^9+7$ ($1000000007$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the half-length of the resulting regular bracket sequences (the resulting sequences must have length equal to $2n$).\n\nThe second line of the input contains one string $s$ ($1 \\le |s| \\le 200$) \u2014 the string $s$ that should be a substring in each of the resulting regular bracket sequences ($|s|$ is the length of $s$).\n\n\n-----Output-----\n\nPrint only one integer \u2014 the number of regular bracket sequences containing the given bracket sequence $s$ as a substring. Since this number can be huge, print it modulo $10^9+7$ ($1000000007$).\n\n\n-----Examples-----\nInput\n5\n()))()\n\nOutput\n5\n\nInput\n3\n(()\n\nOutput\n4\n\nInput\n2\n(((\n\nOutput\n0\n\n\n\n-----Note-----\n\nAll regular bracket sequences satisfying the conditions above for the first example:   \"(((()))())\";  \"((()()))()\";  \"((()))()()\";  \"(()(()))()\";  \"()((()))()\". \n\nAll regular bracket sequences satisfying the conditions above for the second example:   \"((()))\";  \"(()())\";  \"(())()\";  \"()(())\". \n\nAnd there is no regular bracket sequences of length $4$ containing \"(((\" as a substring in the third example.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5\n()))()\n", "3\n(()\n", "2\n(((\n", "100\n()(()))))(()((((()())()))(()))()()))(((()))))))))(\n", "100\n()(()(()((()(()(()()()(()((()))())())))()))())()()\n", "100\n(()))(()())()()((())(()((()()))(())()(((((()(((()()))())))))(())((((()()()()()))(()))(())(())(()))((\n", "100\n(()(()()()()(()(()()(((()((()(((()(((()(()()((()())))))()()()))))()()())))()()))()))()()()()())()())\n", "100\n(()))()())((())))((((())()((())(()(())))(()()(((()()())())()()(())))())((((()())(())())((((()((()((()()(())))(())))))()(()))))())()()))))()(()(()())((\n", "100\n()()()(((((()(()((((()((((((()()()((()()(()()()(((()()((()()((()()()))()()()))()))))())()())()()()())()()()())())())))())()())())))())()))))()()()()()\n", "100\n()()))(()()))))((()()))))(()()(()())()))))()())()()((((()(()()((())))((()()())())(())((()((()))(((()(()))))))())))((((()())))(()(()(())))(()))()()())((())()((())(()(((()((())))())))()()()((()))()()())\n", "100\n(()(()()()((()((((((()(()()((((()()((((()((()()((()((()()(()(((()((()()()()(()((()()(((()()(()((()()))())()))())()()()()())))())())()))()))()()))))()))()))))))())())()())))())))())))()()()())()())()()\n", "100\n()\n", "100\n()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n", "100\n(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "100\n()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n", "100\n((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "100\n)\n", "100\n))\n", "100\n))())())()))()())())()(((((((()()))())()())()(((()()))(())()((((()()()())()((()()()())()(((((()()()(()(()()((((()())))()))()(())(())))))))))((()((()())())(()((())((())()(()(()\n", "100\n()())(((()((())))((())((()(())))(((((((()))))))()(()((()()(((())))())()((((())()(())))(((((()))())(()))))((()))((())()(((())((()())(()(()))((()()()())())())))(()()()))()))))())))))))()(\n", "100\n()(()())()(())))()())()(())((()(()()((()((((((())()))(()(()()))(()()())((()())))())())))())))(())(()()))(((())))(((((())(())(()))((())(())))())))()))()((())()()())()))(()())(()(()))(()(())))\n", "12\n()()()\n", "20\n()(()()())\n", "32\n()((()()()())())\n", "50\n(\n", "10\n)()))())))())(())(()(((())(()))))))(()())))))))(((\n"], "outputs": ["5\n", "4\n", "0\n", "979898526\n", "711757760\n", "599470552\n", "812513651\n", "657505568\n", "264738339\n", "0\n", "1\n", "558488487\n", "1\n", "1\n", "2\n", "3\n", "558488487\n", "558488486\n", "325\n", "1820\n", "1\n", "62316\n", "296672330\n", "468509380\n", "265470434\n", "0\n"]}, "test_in_outs": {"inputs": ["20\n))()))(()()))(())()))()(((((((((()((())((((((())(())(()())))(()()((())(()()()()(()())()()))))))())((\n", "1\n(\n", "2\n)\n", "3\n)\n", "4\n(\n", "5\n(\n", "6\n)\n", "7\n)\n", "8\n(\n", "9\n(\n", "10\n)\n", "11\n(\n", "12\n(\n", "13\n)\n", "14\n)\n", "15\n(\n", "16\n(\n", "17\n)\n", "18\n)\n", "19\n(\n", "20\n)\n", "21\n(\n", "22\n(\n", "23\n)\n", "1\n(((\n", "100\n((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n"], "outputs": ["0\n", "1\n", "2\n", "5\n", "14\n", "42\n", "132\n", "429\n", "1430\n", "4862\n", "16796\n", "58786\n", "208012\n", "742900\n", "2674440\n", "9694845\n", "35357670\n", "129644790\n", "477638700\n", "767263183\n", "564120378\n", "466266852\n", "482563003\n", "59611249\n", "0\n", "0\n"]}}, {"index": 4029, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given an integer $n$ from $1$ to $10^{18}$ without leading zeroes.\n\nIn one move you can swap any two adjacent digits in the given number in such a way that the resulting number will not contain leading zeroes. In other words, after each move the number you have cannot contain any leading zeroes.\n\nWhat is the minimum number of moves you have to make to obtain a number that is divisible by $25$? Print -1 if it is impossible to obtain a number that is divisible by $25$.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 10^{18}$). It is guaranteed that the first (left) digit of the number $n$ is not a zero.\n\n\n-----Output-----\n\nIf it is impossible to obtain a number that is divisible by $25$, print -1. Otherwise print the minimum number of moves required to obtain such number.\n\nNote that you can swap only adjacent digits in the given number.\n\n\n-----Examples-----\nInput\n5071\n\nOutput\n4\n\nInput\n705\n\nOutput\n1\n\nInput\n1241367\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example one of the possible sequences of moves is 5071 $\\rightarrow$ 5701 $\\rightarrow$ 7501 $\\rightarrow$ 7510 $\\rightarrow$ 7150.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5071\n", "705\n", "1241367\n", "7501\n", "507\n", "17010\n", "52231\n", "50267\n", "574196831896431419\n", "1\n", "10\n", "123456123450\n", "1000000000000000000\n", "100000000000762582\n", "123456789987654321\n", "213716413141380147\n", "5284691\n", "750000000000000001\n", "101\n", "275257725752725722\n", "50932\n", "50272\n", "25\n", "52\n", "57\n", "75\n"], "outputs": ["4\n", "1\n", "-1\n", "2\n", "2\n", "1\n", "6\n", "5\n", "33\n", "-1\n", "-1\n", "0\n", "0\n", "2\n", "5\n", "-1\n", "11\n", "2\n", "-1\n", "3\n", "5\n", "5\n", "0\n", "1\n", "1\n", "0\n"]}, "test_in_outs": {"inputs": ["50\n", "71\n", "500111117\n", "50011117\n", "1002\n", "521\n", "50011111112\n", "50000111111112\n", "250070000011111111\n", "502727272727272727\n", "500044444444442\n", "2057\n", "700777111111222222\n", "50001111312\n", "700272727272727272\n", "700777711111222222\n", "20029292929292929\n", "257025702570257025\n", "5001111117\n", "227782777298772774\n", "205727272727272727\n", "50011112\n", "500272727272727272\n", "222772277289624486\n", "5002727272727272\n", "200000000222222222\n"], "outputs": ["0\n", "-1\n", "10\n", "9\n", "2\n", "3\n", "12\n", "17\n", "16\n", "18\n", "17\n", "1\n", "30\n", "13\n", "30\n", "30\n", "28\n", "0\n", "11\n", "-1\n", "15\n", "9\n", "19\n", "-1\n", "17\n", "18\n"]}}, {"index": 4030, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThis is a hard version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different.\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nYou have to color all its characters the minimum number of colors (each character to exactly one color, the same letters can be colored the same or different colors, i.e. you can choose exactly one color for each index in $s$).\n\nAfter coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary (possibly, zero) number of times.\n\nThe goal is to make the string sorted, i.e. all characters should be in alphabetical order.\n\nYour task is to find the minimum number of colors which you have to color the given string in so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $s$.\n\nThe second line of the input contains the string $s$ consisting of exactly $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nIn the first line print one integer $res$ ($1 \\le res \\le n$) \u2014 the minimum number of colors in which you have to color the given string so that after coloring it can become sorted by some sequence of swaps.\n\nIn the second line print any possible coloring that can be used to sort the string using some sequence of swaps described in the problem statement. The coloring is the array $c$ of length $n$, where $1 \\le c_i \\le res$ and $c_i$ means the color of the $i$-th character.\n\n\n-----Examples-----\nInput\n9\nabacbecfd\n\nOutput\n2\n1 1 2 1 2 1 2 1 2 \n\nInput\n8\naaabbcbb\n\nOutput\n2\n1 2 1 2 1 2 1 1\n\nInput\n7\nabcdedc\n\nOutput\n3\n1 1 1 1 1 2 3 \n\nInput\n5\nabcde\n\nOutput\n1\n1 1 1 1 1\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["9\nabacbecfd\n", "8\naaabbcbb\n", "7\nabcdedc\n", "5\nabcde\n", "200\nraaaaabbbccccccccccdddddeeeeeeeeeeeeeeffffffffffggggggggghhhhhiiiiiiiiijjjjkkkkkkkkkkllllllllmmmmmmmmnnnnnnnooooooooppppppqqqqqqqqqqrrrrrrrrssssttttttttttuuuuuuuuvvvvvvwwwwwwxxxxxxxyyyyyyyzzzzzzzzzzzz\n", "200\nazaaaaaabbbbbbbcccccccccdeeeeeeefffffffgggggggghhhhhhiijjjjjkkkkkkkkkllllllmmmmmmmmmmmmnnnnnnoooooopppppppppppqqqqqrrrrrrrrrrrrrssssssssssstttttttttttuuuuuuuuvvvvvvvwwwwwwwwwxxxxxxxyyyyyyyyyyyyzzzzzzz\n", "200\naaaaaaaaaaaabbbbccccccdddddddeeeeeeffgggggggggggghhhhhhiiiiiiiiiiiijjjjjjjjjkkkkklllllllmmmmmmmmnnnnnnnnoooooooopppppppppqqqqqrrrrrrrrrssssssssssttuuuuuuuvvvvvvvvvvwwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzw\n", "200\ncnaaaaaabbbbbccccdddddddddddddeeeeeeeeefffffffgggggggggghhhhhhhhhiiijjjjjkkkkkkklllllllmmmmmmmnnnnnnnnnooooooooooooppppppppqqqqqqqqqqqrrrssssssstuuuuuuuuvvvvvvvvvvvvwwwwwwxxxxxxxxyyyyyyyzzzzzzzzzzzzzz\n", "200\naaawaaaabbbbccccccccddddddddddeeeeeeeffffffffffgggggggggghhhhhhhhiiiiiiiiijjjjjjjkkkkkkkkklllllllmmmmmmmmnnnnnnooooooooppppppppqqqqrrrrrrrsssssssttttttuuuuuuuuuvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyzzzzzzzzzz\n", "200\naaaaabbbbbbbbbbbccccccdddddddddeeeeeefffffffffggggggggggggggghhhhhhhhhiiiiijjjjjjjjjjjkkkkkklllllllmmmmmmmmmnnnnnnnnnnoooooppppppqqqqqqqrrrrrssssssstttttuuuuuuuuvvvvwwwwwwwwwwwwxxxxxxyyyyyyzzzzzzzzzmu\n", "200\nfhrvyaaaaaaaaabbbbbbbccccccccccdddddeeeeeeeeeeeeefffffggggggghhiiiiiiiiiiiijjjjjkkkklllllllmmmmmmmmnnnnnoooooppppppppqqqrrrrrrrrrrsssssssstttttttttttttuuuuuuuvvvvvvwwwwwwwwwwwwwwxxxxxxyyyyyyyyzzzzzzzz\n", "200\naacdaeabblbxbbbbbbcccccdddddeeeeeeefffffffggggggghhhhhhhhhiiiiiiiiiijjjjjjjkkkkkkkklllllllllmmmmmmmmnnnoooooooopppppqqqqqqqqqqqrrrrrrrrrrsstttttttttuuuuuuuvvvvvvvvvvwwwwwwwxxxxxxxxxxxyyyyyyyyyzzzzzzzz\n", "200\naaaaaabbbbbbbbbbbbbccccccccccccdddeeeeeeffffggghhhhhhhhhiiiiiiiijjjjjjjjjjkkkkklllllmmmmmmmmmnnnnnnnoooooooppppppppqqqqqqrrrrrrrrrsssssssttttttttuuuuuuuuvvvvvvvvwwwwwwxxxxxxxyyyyyyyyyyzzzzzzzzzzzeinuy\n", "200\nbdimoqrstvaaaaaaaaabbbbbbbbbbcccccddddddeeeeeeeeeeeeeeeffffffgggggggghhhhhhhhhiiiiiiiijjjjjjjjjjjjkkkkkkkklllllllllmmmmmmmmnnnnnoooooooppppppqqqqqqrrrrrrrrssssssstttttuuvvvvvvwwwwwwwwxxxxxxxyyyyyyyzzz\n", "200\naaaaeillaoobbwbbxbzbbcccccccdddddddddeeeeeeeffffffffggggghhhhhiiiijjjjjjjkkkkklllllmmmmmmmmmnnnnnnnnnnnnnooooooooppppqqqqqqqqqqrrrrrrrrrrrsssssssssttttttttttuuuuuuuvvvvvvvwwwwwwwxxxxxxyyyyzzzzzzzzzzzz\n", "200\naaaaaaaaaabbbbbccccccccccccccdddddddddeeeeeeefffffffffgggggghhhhhhiiiiiiijjjjjjjjjjkkkkkkllllllllmmmmmmmmnnnnnnoooooooppppppqqqqqqqqqqqrrrrrrsssssssttttttttuuuuuuvvvvvwwwwwxxxyyyyzzzzzzzzzzzcddddjksvw\n", "200\naaaabbbbcceefffgghhhhijjllnnnnopqrrsstuuvvvwwxxyyyaaaabbbbbbbbcccdddddeeeeeefffffggggghhhhhhhhhiiiiiiiiijjjjkkkkkkllllllmmmmmmmnnnnnoooooooopppppppqqqrrrrrrsssssstttttuuuuuuuvvvvvwwwxxxxxyyyyzzzzzzzzz\n", "200\naaaaabbaaaaabcbebebbccecccffgjklccmcmnccoccooddoqqqdddqderreerrsfffsfsfghuuhhhvhhhhvviwixixixxixijjjxjyjzzjzkkklllllmmmmmmmnnnnnnnoooooppppppppppppqqqqqrrrrrrrsssssstttuuuvvvvvvvwwwwwwxxxyyyyyyyyyzzzz\n", "200\naaaabbbbbbcccccdddddeeeeeeeffffggggggggghhhhhiiiiijjjjjjjkkkkkkkkllmmmmmmmmmmnnoooooppppqqqqqrrrrrrsssssttttttttttttuuuvvvvvwwwwwwxxxxxxxxyyyzzzzzzzzzaccddddeeffgjjjjkkklllllmmmmnnooppqrrsssttwwxyyzzz\n", "200\naaaabbbbbbccccddddefffffgghhhiiiiiiiiijjjjjkkklmmmmnnnnnnooopppppppprrrstuuuuuuvvvvvvvwwxxxxyyyyyyzzaabbbbbbcccdddddddddeffggggghhhhhhiiijjjjjjkkkkllllmmmnnnoopqqqrrssssttttuuuvvvvvwwwwwxxxxyyyyyzzzzz\n", "200\naaaaaaabcbbbbcccccdccdcdddddeeddeeeeeeeeeefffffffggghgghghhhhhhhihhhiiiiiiiijijijjjjkjkkkkkkkklkkllllllllmmmmmmmmmmmnnnnnnnnoooppnqnnqoqroooorsoppqqstttqruuurruvrrvvtvttvvtuwvwwwwxxxwxyzzxzzyyzzyyzzzz\n", "200\naaaabccccdddddddeefffffffgghhhiiiiiijjjjjjjkkkkkllllmmmmnnnnnoooooooppqqqqqrrrrsssttuuuuuvwwxxyyyzzzaaaaaabbbbbccccddddddeefffffffggghhiiiikkllmmnnnnnnoooooppppqqqqrrrrsttttuuuuuvvvvwwwwwwxxxxyyyzzzzz\n", "200\naaaaaaaaabbbbcccccccccccdddeeeeeeeefffgggghhhhhhhhiiiiiiijjjjjjjkkklllmmmmmnnnnnnnoooooppppppppqqqqrrrrrrrssssssttttuuuuuuvvvvvwwwwxxxxxxyyyyyzzzzzzzzaabbbcccdeeefggggghhhhiijjjjkllnpqqqrrsssstuuvwyzz\n", "200\naaaabbbbabcaccaadbebfbbbfgbbggchhcccchhhcccicjdkkldldddldmdenoeeooffpppfqrfffuuufggguvgggvggwghhxhyyyhhhhzhiiiiiiijjjjjjjkkkllmmmnnnooooppppppppppppqqqqrssssttttttuuuvvvvwwwwwwwwxxxxxxxxyyyyzzzzzzzzzz\n"], "outputs": ["2\n1 1 2 1 2 1 2 1 2 \n", "2\n1 1 1 1 1 1 2 2 \n", "3\n1 1 1 1 1 2 3 \n", "1\n1 1 1 1 1 \n", "2\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 \n", "2\n1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 \n", "2\n1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 2 1 2 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 \n", "2\n1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 2 2 2 2 2 1 1 2 1 2 1 2 2 2 2 1 2 2 2 1 1 1 1 1 1 2 2 1 2 1 1 2 2 1 2 2 1 1 2 2 1 1 1 1 2 2 2 1 2 2 1 1 2 2 1 1 1 2 2 2 1 2 1 2 2 2 1 1 2 2 2 1 2 2 2 2 1 1 2 1 2 1 2 1 2 1 1 2 1 2 2 2 2 1 2 1 2 1 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 2 2 2 2 1 1 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 1 2 2 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 1 2 1 1 2 2 2 2 1 1 2 2 2 2 2 1 1 1 1 2 2 1 1 1 2 2 1 1 2 2 1 1 2 1 2 2 1 1 2 2 1 2 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 2 2 1 1 2 2 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 \n", "2\n1 1 1 1 1 1 1 1 2 1 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 2 1 1 2 1 1 2 2 2 2 1 1 1 2 2 2 1 2 1 2 1 1 1 2 1 2 2 2 1 2 1 2 2 1 1 2 2 1 1 2 2 1 1 1 2 1 1 2 2 2 1 1 1 2 2 2 2 1 1 2 2 2 1 2 2 1 2 2 2 1 2 1 1 1 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 \n"]}, "test_in_outs": {"inputs": ["200\naaaabccdeffgghhijklllmnnnoopqrrrrssssssttuuvvvwxyyaaaabbbcccccddddddeeeeeeffffgggggghhhhiiiiiiiiiiijjjjjjjjjkkkkllmmmmmmmmnnoooooooooooppppppppppqqqqqqrrrsssstttttuuuuvvvvwwwwwwwxxxxxxxxxyyyyyyyyyyzzz\n", "200\naaaaaaabbbbbbcccccccccdddddddeeeeffffffggggghhhhhiiiiiiiijjjjkkkkkllllllllmmmmmmmmmnnnnnnnnnooooooooopppppppppqqqqqqqqrrrrrrrrrrrsssssssttttuuvvvvvvvvvvwwwwwwwxxxxxxyyyyyyzzzzzbceghhhijjjmmooqrrttvvwx\n", "200\naaaaaadeafgibbbbbbjbjlncpccccsdsdddtdtdtdeetuevwwezzefffffgggghhhhhhhiijjjjjjjjkkklllllllmmmmmmmmmmmmmnnnnnnnooooooooopppppppppppppqqqqrrrrrrsssssssttttttttttuuuuuuuuuvvvvvvvwwwwwwxxxxxyyyyyyyyyzzzzzz\n", "200\naadfgghjjjkmnpqqtuuwwxyzaaaaaaaabbbbbbbbcccccddddeeeeeeeeeffgggghhhhhhiiiiiiiijjjjjjjjkkkkklllllmmmmmmmmmmmnnnnnoooooppppppppqqqqqqqqrrrrrrrrrrrssssstttttttttuuuuuuuuvvvvvvvwwwwwwxxxxxxxyyyyyzzzzzzzzz\n", "200\naaaaaaaaaabbbbbbccccccddddddddddddeeeeeeeeeeffffffffggggghhhhhhiiijjjjjjkkkkkklllllllllllllmmmmmmmnnnnnooooooooooppppppppppqqqqqqqqqrrrrrrrrsssssstttttttttuuuuvvvvvvwwwwwwwwwwwxxxxxyyyyyyyyyyzzzzzzzzw\n", "200\naaabbsbbbbbbbbbbbbbcccccccccdddddddddddddeeeeeeeeffffffffgggggggggghhhhhhhhhhhhijjjjjjjjjjkkkkkkllllmmmmmnnnnnnoooooooppppppqqqqqqqqqqqqrrrrrsssssssssttttttuuuuuuvvvvvvvvvwwwwwwxxxxxxyyyyyyzzzzzzzzzzz\n", "200\njaaaabbbbbbccccccccccccdddddddddddeeeeeeffffffggggghhhhhhhiiiijjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmnnnooooppppppqqqqqqqqqqqqqqrrrrrrrrrrrrsssssttttttuuuuuuuvvvvvwwwwwwwwwwwwxxxxxxxyyyyyyyyzzzzzz\n", "200\nzywmerhahxlqsjekpqsdqxnjiduyjrytswiweohctztgpiorwimhjmdfofqynyggcrtzslbyvkuvqrsgwyacyvcuathplliwwshusluiqwuhutnzwvuchfedhwwfdzizltdxibtsaocpnqezstblgkfdcvfsjjyzwalkksumsaljqljmmkcyejwwdkolmcgmodoiclte\n", "200\ntoimpgygoklxroowdhpacrtrrwmkhcgcpidapeyxrjmiqgilveimnazyydvnujtqpenfkeqdbylfdinompxupfwvirxohaampqihjueasygkucweptgcowjibgnwyqetynykgoujeargnhjbmntfovwusqavpdwtpnpqpkcgaxbhgdxloyealksmgkxprtpfugixdyfn\n", "200\nndwpatpnvwldptairxlxqmzzysfvglpjkwbebtosqvfnoebfvxfpupvohcaazsjbdshoducigmfoqzltdgvmdmputqmoaqscilmtafqrxdunwnijhrtbwonpvpeouednmjswhauahmgyozmbiilxxflkkmwywvuojbrwwbkyhxtdywiktkfcsmozklhrwlwyajekejrx\n", "200\nftiqlgirbkmlpzkthoivcifhflyietxsfiwiojenqgxrnetzutdsyfuhrbfpedyksfzuvnqonbyydogbrwsfuuivboanufitbjngppagzfgqwyroaofcdgrwoxwfpvcgzdnkhnwtlavnoppdbddpfpcaaipdcqskcqtccrrspvjyqpvjwziexnmmnlqvacdpgnzzhude\n", "2\ntj\n", "1\nr\n", "30\nrzlwlvhfatfwmlpvndtgrxyphfjnnm\n", "30\nlpxzyiymhgfemqbhburdctevpybxlv\n", "30\ndcjajwrqosgljwltqlozqmldwuukkg\n", "30\nxsvbtliwvggtjbvdebjwcirlfnnuio\n", "30\nrhkegyacbthzhghossgtqdxtmjfhhx\n", "100\nyojtyktazyfegvnnsexxiosqxdlpdwlyojsghpvjpavnvjvttbylqcdabyhleltltzalmgoelxdalcbjejsjxnfebzsxusnujdyk\n", "100\nqdvwjzmgfmgngaxzgvuuukxyfzecafuflxpkvemenkorwhmnsxuoxsatlymyjugwjmutfxcksnwhxrwruyqbouyflxhwqhflczzx\n", "100\nkshxumdmoygtdgjkwmpsiffhoswmapcogjkngvcznwhtufgjstqrbgwjtxrnoevhwaoaxporxbnrijtwkqnteergtvvwkxvbvwch\n", "100\neivzgzvqvlgzdltwjcmpublpvopzxylucxhrrltwmizxtdxdrnmuivvcewvaunkqmnjgqgcwdphbvapebhkltmkfcslvgmnqoseu\n", "100\nyvharmmxcxhibqfixtjmhurxchhkvhubxjcveajrkssbsbrxpijxolrtmvanzyybzbdpgzocicakipmkpxhcjtegksbvabfghpfg\n", "8\nenjmfmcb\n", "8\nhinzrvgh\n"], "outputs": ["2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n", "2\n1 1 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 2 1 2 1 1 1 2 1 2 2 2 2 1 2 1 2 2 2 1 2 1 2 1 2 2 2 1 1 2 1 1 1 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 \n", "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 \n", "2\n1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "2\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "19\n1 2 3 4 5 4 5 6 5 3 5 5 4 6 7 6 6 5 4 8 5 3 7 8 9 10 4 2 8 5 2 5 6 4 9 4 10 7 10 11 5 1 5 11 7 9 8 7 4 9 9 10 10 9 12 12 8 12 8 2 9 2 11 11 13 7 5 1 6 10 14 2 5 11 6 5 8 7 7 12 4 2 15 13 2 5 13 6 15 7 12 9 10 10 12 4 4 8 13 6 8 10 6 12 9 4 6 13 6 7 10 1 4 5 6 14 13 14 15 16 13 4 4 14 16 1 12 1 11 7 16 3 12 17 7 8 18 10 17 10 11 9 15 1 8 7 18 12 14 13 15 16 17 5 15 8 14 14 2 1 4 19 12 13 13 8 6 12 8 19 13 14 9 13 14 12 12 14 17 2 16 15 4 4 17 14 11 13 12 18 16 12 11 17 11 16 18 13 7 17 \n", "19\n1 2 3 3 2 4 1 4 3 4 4 2 3 4 4 3 5 5 4 6 6 4 4 5 5 3 6 7 8 9 9 10 6 8 10 11 6 10 1 2 5 8 7 9 6 10 9 8 4 11 9 7 7 12 1 2 2 12 4 7 5 9 6 7 8 11 9 11 10 12 7 13 14 2 10 11 13 11 9 9 10 8 3 5 8 12 4 5 11 7 3 9 12 15 15 10 8 8 11 12 11 6 13 15 7 2 13 11 6 14 4 14 9 7 13 15 10 4 12 13 16 14 11 4 2 8 15 7 2 11 2 12 14 10 6 13 15 17 8 14 11 14 13 16 12 11 7 15 10 5 4 6 8 9 17 5 10 16 4 7 10 11 10 9 10 13 17 15 18 3 18 14 15 16 3 13 11 2 16 19 13 14 8 12 15 14 3 10 9 7 10 16 6 15 15 3 17 2 16 12 \n", "19\n1 2 1 2 3 2 3 4 2 1 5 6 3 3 7 6 4 1 5 1 5 6 1 1 2 4 7 3 7 7 6 8 8 3 9 9 10 4 7 5 6 4 9 8 7 10 11 9 4 3 9 7 5 7 4 8 9 11 12 12 1 6 9 12 11 6 10 8 11 5 12 10 11 9 12 8 7 1 10 6 13 11 4 9 13 9 8 5 6 7 9 9 14 7 7 14 11 10 10 6 15 12 8 8 3 13 5 10 4 10 11 11 12 8 6 15 4 9 10 9 5 9 13 10 6 13 14 11 12 13 7 4 14 16 6 16 14 12 15 2 10 1 12 16 14 14 13 3 3 16 13 14 14 12 4 2 4 5 6 10 15 17 8 4 4 17 14 2 16 3 7 17 2 4 16 14 7 14 17 18 8 12 10 1 14 13 17 9 4 13 4 2 19 15 18 14 18 15 9 3 \n", "18\n1 1 2 2 3 4 4 2 5 4 3 4 3 1 5 2 6 4 6 2 7 6 7 7 8 5 2 6 9 3 3 4 8 6 4 6 5 6 9 6 5 8 3 5 6 9 5 1 5 6 10 7 2 9 5 8 8 11 9 9 10 11 2 10 7 11 1 5 5 10 9 10 11 12 2 2 12 10 12 13 8 4 7 13 6 6 12 5 14 10 15 11 6 13 12 7 14 12 11 13 10 10 15 13 1 14 13 9 4 2 8 11 15 11 14 15 15 13 8 4 11 3 4 14 10 5 16 13 1 15 12 13 14 12 4 7 13 17 5 12 11 10 10 15 17 15 15 10 15 10 16 18 18 14 10 16 17 9 8 14 17 9 7 17 17 9 9 8 10 5 15 2 10 11 5 15 4 1 16 17 3 12 13 13 12 14 10 5 18 18 18 11 17 12 1 1 17 6 18 18 \n", "2\n1 2 \n", "1\n1 \n", "8\n1 1 2 2 3 3 4 5 6 4 5 2 5 6 5 3 6 7 4 7 5 2 2 6 7 8 7 7 7 8 \n", "10\n1 1 1 1 2 3 2 3 4 5 6 7 3 3 8 4 8 3 4 8 9 4 7 3 5 2 10 3 6 4 \n", "8\n1 2 1 3 1 1 2 3 4 2 5 5 6 1 5 2 3 5 4 1 3 5 6 7 2 3 3 7 7 8 \n", "8\n1 2 2 3 3 4 5 2 3 6 6 4 5 7 3 7 7 8 5 2 8 6 5 6 7 6 6 4 7 6 \n", "7\n1 2 2 3 3 1 4 4 5 2 3 1 3 4 3 3 3 3 4 2 4 5 2 3 5 6 7 7 7 2 \n", "15\n1 2 3 2 1 3 2 4 1 2 4 5 4 3 4 4 4 5 3 3 5 5 4 5 3 6 6 6 7 4 7 2 7 8 5 9 9 6 5 8 6 10 5 8 5 9 5 6 6 10 2 9 7 10 10 11 11 2 10 9 11 9 6 9 6 1 12 9 9 11 8 12 10 3 13 14 10 14 15 11 12 11 7 11 3 9 12 13 15 1 7 3 6 7 9 6 11 14 2 11 \n", "14\n1 2 1 1 2 1 2 3 4 2 3 2 3 5 2 1 3 3 4 4 4 5 2 2 6 1 7 8 9 6 4 6 5 3 5 6 4 7 6 7 6 7 6 5 4 8 7 7 5 3 5 6 3 6 9 6 8 2 8 2 9 5 10 4 9 8 5 6 11 3 12 9 7 8 4 10 3 8 4 8 5 2 9 13 10 5 2 11 11 3 12 4 9 12 13 11 14 1 1 3 \n", "12\n1 1 2 1 2 3 4 3 3 1 4 3 5 4 4 4 2 4 4 4 5 6 6 6 5 4 2 6 7 5 7 6 7 7 7 7 8 3 9 1 7 2 8 4 4 9 9 8 5 5 6 6 10 9 2 8 5 2 6 7 7 10 3 9 3 11 7 11 2 7 8 6 2 11 9 6 10 10 5 3 10 7 9 5 11 11 6 11 5 4 4 3 10 2 4 12 4 3 12 11 \n", "14\n1 1 1 1 2 1 2 3 2 4 5 1 6 4 3 2 5 7 4 4 3 8 5 4 3 5 4 1 2 2 6 4 7 3 7 5 5 6 5 4 6 7 1 3 5 8 3 8 6 7 8 5 9 5 5 10 10 4 5 11 6 7 9 7 8 8 10 11 7 11 12 4 12 8 11 13 5 14 8 12 13 11 9 9 7 9 10 12 13 8 10 5 12 9 9 9 10 8 13 6 \n", "15\n1 2 3 4 3 4 4 2 5 2 5 5 6 4 6 5 2 3 5 5 6 3 4 2 7 6 6 6 3 7 4 8 2 7 8 3 8 9 7 5 6 5 5 9 5 9 6 2 7 8 8 2 8 9 6 5 9 3 10 9 1 2 2 10 1 10 10 7 10 1 8 11 10 11 12 10 11 7 10 11 7 3 12 13 12 5 13 13 11 6 14 4 15 14 14 13 13 7 14 14 \n", "5\n1 1 2 2 3 2 4 5 \n", "3\n1 1 1 1 2 2 3 3 \n"]}}, {"index": 4031, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given $n$ strings. Each string consists of lowercase English letters. Rearrange (reorder) the given strings in such a way that for every string, all strings that are placed before it are its substrings.\n\nString $a$ is a substring of string $b$ if it is possible to choose several consecutive letters in $b$ in such a way that they form $a$. For example, string \"for\" is contained as a substring in strings \"codeforces\", \"for\" and \"therefore\", but is not contained as a substring in strings \"four\", \"fofo\" and \"rof\".\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 100$) \u2014 the number of strings.\n\nThe next $n$ lines contain the given strings. The number of letters in each string is from $1$ to $100$, inclusive. Each string consists of lowercase English letters.\n\nSome strings might be equal.\n\n\n-----Output-----\n\nIf it is impossible to reorder $n$ given strings in required order, print \"NO\" (without quotes).\n\nOtherwise print \"YES\" (without quotes) and $n$ given strings in required order.\n\n\n-----Examples-----\nInput\n5\na\naba\nabacaba\nba\naba\n\nOutput\nYES\na\nba\naba\naba\nabacaba\n\nInput\n5\na\nabacaba\nba\naba\nabab\n\nOutput\nNO\n\nInput\n3\nqwerty\nqwerty\nqwerty\n\nOutput\nYES\nqwerty\nqwerty\nqwerty\n\n\n\n-----Note-----\n\nIn the second example you cannot reorder the strings because the string \"abab\" is not a substring of the string \"abacaba\".\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["5\na\naba\nabacaba\nba\naba\n", "5\na\nabacaba\nba\naba\nabab\n", "3\nqwerty\nqwerty\nqwerty\n", "1\nwronganswer\n", "3\na\nb\nab\n", "2\nababaab\nabaab\n", "2\nq\nqq\n", "5\nabab\nbab\nba\nab\na\n", "3\nb\nc\nd\n", "3\naba\nbab\nababa\n", "4\na\nba\nabacabac\nb\n", "4\nab\nba\nabab\na\n", "3\naaa\naab\naaab\n", "2\nac\nabac\n", "2\na\nb\n", "3\nbaa\nbaaaaaaaab\naaaaaa\n", "3\naaab\naab\naaaab\n", "2\naaba\naba\n", "10\na\nb\nc\nd\nab\nbc\ncd\nabc\nbcd\nabcd\n", "5\na\nab\nae\nabcd\nabcde\n", "3\nv\nab\nvab\n", "4\na\nb\nc\nabc\n", "2\nab\naab\n", "3\nabc\na\nc\n"], "outputs": ["YES\na\nba\naba\naba\nabacaba\n", "NO\n", "YES\nqwerty\nqwerty\nqwerty\n", "YES\nwronganswer\n", "NO\n", "YES\nabaab\nababaab\n", "YES\nq\nqq\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\nac\nabac\n", "NO\n", "NO\n", "YES\naab\naaab\naaaab\n", "YES\naba\naaba\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\nab\naab\n", "NO\n"]}, "test_in_outs": {"inputs": ["2\nabaab\nababaab\n", "3\ny\nxx\nxxy\n", "4\naaaa\naaaa\naaaa\nab\n", "3\nbad\naba\nabad\n", "3\nabcabc\nab\nbc\n", "2\naaaab\naaaaab\n", "5\nab\naba\naba\naba\nabd\n", "4\nded\nd\ne\nd\n", "5\nekgetterherforme\ner\nter\nher\ntter\n", "3\naa\nbba\ncbba\n", "3\nab\naa\naab\n", "6\naaaa\naaaa\naaaa\naaaaab\nab\nab\n", "3\na\nbcd\nabcd\n", "3\naa\nab\naab\n", "3\nabcde\nab\ncde\n", "4\nanoop\np\nan\noop\n", "3\nab\ncd\nabcd\n", "3\nafaba\nafab\nfaba\n", "3\nababc\nabababc\nab\n", "3\na\nba\nbbab\n", "2\naabaa\naba\n", "3\nbc\nbca\na\n", "2\naba\nabba\n", "7\na\nb\nc\nab\nac\nac\nac\n", "2\naa\nmmmmmmmammmmmmmm\n"], "outputs": ["YES\nabaab\nababaab\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\naaaab\naaaaab\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\nab\nababc\nabababc\n", "YES\na\nba\nbbab\n", "YES\naba\naabaa\n", "NO\n", "NO\n", "NO\n", "NO\n"]}}, {"index": 4032, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nMishka started participating in a programming contest. There are $n$ problems in the contest. Mishka's problem-solving skill is equal to $k$.\n\nMishka arranges all problems from the contest into a list. Because of his weird principles, Mishka only solves problems from one of the ends of the list. Every time, he chooses which end (left or right) he will solve the next problem from. Thus, each problem Mishka solves is either the leftmost or the rightmost problem in the list.\n\nMishka cannot solve a problem with difficulty greater than $k$. When Mishka solves the problem, it disappears from the list, so the length of the list decreases by $1$. Mishka stops when he is unable to solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\n\n-----Input-----\n\nThe first line of input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) \u2014 the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the difficulty of the $i$-th problem. The problems are given in order from the leftmost to the rightmost in the list.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum number of problems Mishka can solve.\n\n\n-----Examples-----\nInput\n8 4\n4 2 3 1 5 1 6 4\n\nOutput\n5\n\nInput\n5 2\n3 1 2 1 3\n\nOutput\n0\n\nInput\n5 100\n12 34 55 43 21\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example, Mishka can solve problems in the following order: $[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6] \\rightarrow [5, 1, 6]$, so the number of solved problems will be equal to $5$.\n\nIn the second example, Mishka can't solve any problem because the difficulties of problems from both ends are greater than $k$.\n\nIn the third example, Mishka's solving skill is so amazing that he can solve all the problems.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["8 4\n4 2 3 1 5 1 6 4\n", "5 2\n3 1 2 1 3\n", "5 100\n12 34 55 43 21\n", "100 100\n44 47 36 83 76 94 86 69 31 2 22 77 37 51 10 19 25 78 53 25 1 29 48 95 35 53 22 72 49 86 60 38 13 91 89 18 54 19 71 2 25 33 65 49 53 5 95 90 100 68 25 5 87 48 45 72 34 14 100 44 94 75 80 26 25 7 57 82 49 73 55 43 42 60 34 8 51 11 71 41 81 23 20 89 12 72 68 26 96 92 32 63 13 47 19 9 35 56 79 62\n", "100 99\n84 82 43 4 71 3 30 92 15 47 76 43 2 17 76 4 1 33 24 96 44 98 75 99 59 11 73 27 67 17 8 88 69 41 44 22 91 48 4 46 42 21 21 67 85 51 57 84 11 100 100 59 39 72 89 82 74 19 98 14 37 97 20 78 38 52 44 83 19 83 69 32 56 6 93 13 98 80 80 2 33 71 11 15 55 51 98 58 16 91 39 32 83 58 77 79 88 81 17 98\n", "100 69\n80 31 12 89 16 35 8 28 39 12 32 51 42 67 64 53 17 88 63 97 29 41 57 28 51 33 82 75 93 79 57 86 32 100 83 82 99 33 1 27 86 22 65 15 60 100 42 37 38 85 26 43 90 62 91 13 1 92 16 20 100 19 28 30 23 6 5 69 24 22 9 1 10 14 28 14 25 9 32 8 67 4 39 7 10 57 15 7 8 35 62 6 53 59 62 13 24 7 53 2\n", "100 2\n2 2 2 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 2 1 1 2 2 2 1 1 1 2 2 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 2 16\n", "100 3\n86 53 82 40 2 20 59 2 46 63 75 49 24 81 70 22 9 9 93 72 47 23 29 77 78 51 17 59 19 71 35 3 20 60 70 9 11 96 71 94 91 19 88 93 50 49 72 19 53 30 38 67 62 71 81 86 5 26 5 32 63 98 1 97 22 32 87 65 96 55 43 85 56 37 56 67 12 100 98 58 77 54 18 20 33 53 21 66 24 64 42 71 59 32 51 69 49 79 10 1\n", "13 7\n1 1 1 1 1 1 1 1 1 1 1 1 1\n", "1 5\n4\n", "3 2\n1 4 1\n", "1 2\n100\n", "7 4\n4 2 3 4 4 2 3\n", "1 2\n1\n", "1 2\n15\n", "2 1\n1 1\n", "5 3\n3 4 3 2 1\n", "1 1\n2\n", "1 5\n1\n", "6 6\n7 1 1 1 1 1\n", "5 5\n6 5 5 5 5\n", "1 4\n2\n", "9 4\n1 2 1 2 4 2 1 2 1\n", "1 1\n1\n"], "outputs": ["5\n", "0\n", "5\n", "100\n", "98\n", "39\n", "99\n", "1\n", "13\n", "1\n", "2\n", "0\n", "7\n", "1\n", "0\n", "2\n", "4\n", "0\n", "1\n", "5\n", "4\n", "1\n", "9\n", "1\n"]}, "test_in_outs": {"inputs": ["1 10\n5\n", "5 5\n1 1 1 1 1\n", "100 10\n2 5 1 10 10 2 7 7 9 4 1 8 1 1 8 4 7 9 10 5 7 9 5 6 7 2 7 5 3 2 1 82 4 80 9 8 6 1 10 7 5 7 1 5 6 7 19 4 2 4 6 2 1 8 31 6 2 2 57 42 3 2 7 1 9 5 10 8 5 4 10 8 3 5 8 7 2 7 6 5 3 3 4 10 6 7 10 8 7 10 7 2 4 6 8 10 10 2 6 4\n", "100 90\n17 16 5 51 17 62 24 45 49 41 90 30 19 78 67 66 59 34 28 47 42 8 33 77 90 41 61 16 86 33 43 71 90 95 23 9 56 41 24 90 31 12 77 36 90 67 47 15 92 50 79 88 42 19 21 79 86 60 41 26 47 4 70 62 44 90 82 89 84 91 54 16 90 53 29 69 21 44 18 28 88 74 56 43 12 76 10 22 34 24 27 52 28 76 90 75 5 29 50 90\n", "100 10\n6 4 8 4 1 9 4 8 5 2 2 5 2 6 10 2 2 5 3 5 2 3 10 5 2 9 1 1 6 1 5 9 16 42 33 49 26 31 81 27 53 63 81 90 55 97 70 51 87 21 79 62 60 91 54 95 26 26 30 61 87 79 47 11 59 34 40 82 37 40 81 2 7 1 8 4 10 7 1 10 8 7 3 5 2 8 3 3 9 2 1 1 5 7 8 7 1 10 9 8\n", "100 90\n45 57 52 69 17 81 85 60 59 39 55 14 87 90 90 31 41 57 35 89 74 20 53 4 33 49 71 11 46 90 71 41 71 90 63 74 51 13 99 92 99 91 100 97 93 40 93 96 100 99 100 92 98 96 78 91 91 91 91 100 94 97 95 97 96 95 17 13 45 35 54 26 2 74 6 51 20 3 73 90 90 42 66 43 86 28 84 70 37 27 90 30 55 80 6 58 57 51 10 22\n", "100 10\n10 2 10 10 10 10 10 10 10 7 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 7 9 10 10 10 37 10 4 10 10 10 59 5 95 10 10 10 10 39 10 10 10 10 10 10 10 5 10 10 10 10 10 10 10 10 10 10 10 10 66 10 10 10 10 10 5 10 10 10 10 10 10 44 10 10 10 10 10 10 10 10 10 10 10 7 10 10 10 10 10 10 10 10 10 2\n", "100 90\n57 90 90 90 90 90 90 90 81 90 3 90 39 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 92 90 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90 90 90 90 90 90 90 54 90 90 90 90 90 62 90 90 91 90 90 90 90 90 90 91 90 90 90 90 90 90 90 3 90 90 90 90 90 90 90 2 90 90 90 90 90 90 90 90 90 2 90 90 90 90 90\n", "100 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 78 90 61 40 87 39 91 50 64 30 10 24 10 55 28 11 28 35 26 26 10 57 45 67 14 99 96 51 67 79 59 11 21 55 70 33 10 16 92 70 38 50 66 52 5 10 10 10 2 4 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 10 10 10 10 8 10 10 10 10 10\n", "100 90\n90 90 90 90 90 90 55 21 90 90 90 90 90 90 90 90 90 90 69 83 90 90 90 90 90 90 90 90 93 95 92 98 92 97 91 92 92 91 91 95 94 95 100 100 96 97 94 93 90 90 95 95 97 99 90 95 98 91 94 96 99 99 94 95 95 97 99 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 12 90 3 90 90 90 90 90 90 90\n", "100 49\n71 25 14 36 36 48 36 49 28 40 49 49 49 38 40 49 33 22 49 49 14 46 8 44 49 11 37 49 40 49 2 49 3 49 37 49 49 11 25 49 49 32 49 11 49 30 16 21 49 49 23 24 30 49 49 49 49 49 49 27 49 42 49 49 20 32 30 29 35 49 30 49 9 49 27 25 5 49 49 42 49 20 49 35 49 22 15 49 49 49 19 49 29 28 13 49 22 7 6 24\n", "100 50\n38 68 9 6 50 18 19 50 50 20 33 34 43 50 24 50 50 2 50 50 50 50 50 21 30 50 41 40 50 50 50 50 50 7 50 21 19 23 1 50 24 50 50 50 25 50 50 50 50 50 50 50 7 24 28 18 50 5 43 50 20 50 13 50 50 16 50 3 2 24 50 50 18 5 50 4 50 50 38 50 33 49 12 33 11 14 50 50 50 33 50 50 50 50 50 50 7 4 50 50\n", "100 48\n8 6 23 47 29 48 48 48 48 48 48 26 24 48 48 48 3 48 27 28 41 45 9 29 48 48 48 48 48 48 48 48 48 48 47 23 48 48 48 5 48 22 40 48 48 48 20 48 48 57 48 32 19 48 33 2 4 19 48 48 39 48 16 48 48 44 48 48 48 48 29 14 25 43 46 7 48 19 30 48 18 8 39 48 30 47 35 18 48 45 48 48 30 13 48 48 48 17 9 48\n", "100 57\n57 9 57 4 43 57 57 57 57 26 57 18 57 57 57 57 57 57 57 47 33 57 57 43 57 57 55 57 14 57 57 4 1 57 57 57 57 57 46 26 57 57 57 57 57 57 57 39 57 57 57 5 57 12 11 57 57 57 25 37 34 57 54 18 29 57 39 57 5 57 56 34 57 24 7 57 57 57 2 57 57 57 57 1 55 39 19 57 57 57 57 21 3 40 13 3 57 57 62 57\n", "100 51\n51 51 38 51 51 45 51 51 51 18 51 36 51 19 51 26 37 51 11 51 45 34 51 21 51 51 33 51 6 51 51 51 21 47 51 13 51 51 30 29 50 51 51 51 51 51 51 45 14 51 2 51 51 23 9 51 50 23 51 29 34 51 40 32 1 36 31 51 11 51 51 47 51 51 51 51 51 51 51 50 39 51 14 4 4 12 3 11 51 51 51 51 41 51 51 51 49 37 5 93\n", "100 50\n87 91 95 73 50 50 16 97 39 24 58 50 33 89 42 37 50 50 12 71 3 55 50 50 80 10 76 50 52 36 88 44 66 69 86 71 77 50 72 50 21 55 50 50 78 61 75 89 65 2 50 69 62 47 11 92 97 77 41 31 55 29 35 51 36 48 50 91 92 86 50 36 50 94 51 74 4 27 55 63 50 36 87 50 67 7 65 75 20 96 88 50 41 73 35 51 66 21 29 33\n", "100 50\n50 37 28 92 7 76 50 50 50 76 100 57 50 50 50 32 76 50 8 72 14 8 50 91 67 50 55 82 50 50 24 97 88 50 59 61 68 86 44 15 61 67 88 50 40 50 36 99 1 23 63 50 88 59 76 82 99 76 68 50 50 30 31 68 57 98 71 12 15 60 35 79 90 6 67 50 50 50 50 68 13 6 50 50 16 87 84 50 67 67 50 64 50 58 50 50 77 51 50 51\n", "100 50\n43 50 50 91 97 67 6 50 86 50 76 60 50 59 4 56 11 38 49 50 37 50 50 20 60 47 33 54 95 58 22 50 77 77 72 9 57 40 81 57 95 50 81 63 62 76 13 87 50 39 74 69 50 99 63 1 11 62 84 31 97 99 56 73 70 36 45 100 28 91 93 9 19 52 73 50 83 58 84 52 86 12 50 44 64 52 97 50 12 71 97 52 87 66 83 66 86 50 9 49\n", "88 10\n10 8 1 10 10 1 3 7 10 5 8 8 10 2 7 10 10 10 10 10 1 10 10 10 10 1 2 9 10 9 10 10 10 64 100 25 10 12 9 52 13 8 10 56 10 4 10 7 10 3 10 79 74 8 73 10 10 10 9 10 3 5 10 10 10 5 1 10 10 4 3 10 10 10 4 10 6 4 10 10 10 10 3 3 8 5 6 8\n", "100 50\n80 39 33 69 75 50 23 88 50 50 67 90 87 50 29 15 55 32 60 50 50 50 38 95 62 50 50 88 8 97 45 50 42 12 22 93 49 50 24 50 50 71 60 4 50 72 57 57 50 50 50 83 69 17 1 31 72 55 50 11 50 80 93 41 91 94 20 60 50 50 51 48 53 56 76 73 50 72 19 98 50 50 50 50 50 28 48 45 62 11 16 67 93 88 63 50 50 66 48 95\n", "100 50\n70 50 38 50 38 50 32 30 50 31 26 42 50 33 34 50 50 50 28 21 50 44 50 47 50 50 9 40 50 50 50 50 50 42 50 50 16 50 50 3 24 50 50 50 4 26 50 2 50 50 33 1 27 50 50 50 8 29 50 23 33 50 6 29 50 50 15 50 50 50 32 50 43 50 50 50 31 50 4 50 50 31 50 50 31 16 50 17 50 17 31 13 25 16 50 10 50 47 50 66\n", "2 8\n8 8\n", "1 6\n3\n", "1 5\n5\n"], "outputs": ["1\n", "5\n", "71\n", "63\n", "61\n", "72\n", "52\n", "60\n", "56\n", "61\n", "99\n", "99\n", "99\n", "99\n", "99\n", "3\n", "3\n", "6\n", "66\n", "0\n", "0\n", "2\n", "1\n", "1\n"]}}, {"index": 4033, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThere is an infinite board of square tiles. Initially all tiles are white.\n\nVova has a red marker and a blue marker. Red marker can color $a$ tiles. Blue marker can color $b$ tiles. If some tile isn't white then you can't use marker of any color on it. Each marker must be drained completely, so at the end there should be exactly $a$ red tiles and exactly $b$ blue tiles across the board.\n\nVova wants to color such a set of tiles that:\n\n  they would form a rectangle, consisting of exactly $a+b$ colored tiles;  all tiles of at least one color would also form a rectangle. \n\nHere are some examples of correct colorings:\n\n [Image] \n\nHere are some examples of incorrect colorings:\n\n [Image] \n\nAmong all correct colorings Vova wants to choose the one with the minimal perimeter. What is the minimal perimeter Vova can obtain?\n\nIt is guaranteed that there exists at least one correct coloring.\n\n\n-----Input-----\n\nA single line contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^{14}$) \u2014 the number of tiles red marker should color and the number of tiles blue marker should color, respectively.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimal perimeter of a colored rectangle Vova can obtain by coloring exactly $a$ tiles red and exactly $b$ tiles blue.\n\nIt is guaranteed that there exists at least one correct coloring.\n\n\n-----Examples-----\nInput\n4 4\n\nOutput\n12\n\nInput\n3 9\n\nOutput\n14\n\nInput\n9 3\n\nOutput\n14\n\nInput\n3 6\n\nOutput\n12\n\nInput\n506 2708\n\nOutput\n3218\n\n\n\n-----Note-----\n\nThe first four examples correspond to the first picture of the statement.\n\nNote that for there exist multiple correct colorings for all of the examples.\n\nIn the first example you can also make a rectangle with sides $1$ and $8$, though its perimeter will be $18$ which is greater than $8$.\n\nIn the second example you can make the same resulting rectangle with sides $3$ and $4$, but red tiles will form the rectangle with sides $1$ and $3$ and blue tiles will form the rectangle with sides $3$ and $3$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4 4\n", "3 9\n", "9 3\n", "3 6\n", "506 2708\n", "11 24\n", "92 91\n", "58 53\n", "39 97\n", "47 96\n", "49 39\n", "76 100\n", "97821761637600 97821761637600\n", "65214507758400 97821761637600\n", "97821761637600 65214507758400\n", "10293281928930 11003163441270\n", "11003163441270 11003163441270\n", "1 1\n", "1 2\n", "2 2\n", "1 3\n", "2 3\n", "3 3\n", "4 1\n"], "outputs": ["12\n", "14\n", "14\n", "12\n", "3218\n", "24\n", "128\n", "80\n", "50\n", "48\n", "38\n", "54\n", "55949068\n", "51074268\n", "51074268\n", "18459236\n", "18764374\n", "6\n", "8\n", "8\n", "8\n", "12\n", "10\n", "12\n"]}, "test_in_outs": {"inputs": ["4 2\n", "4 3\n", "5 1\n", "5 2\n", "5 3\n", "5 4\n", "5 5\n", "1 6\n", "2 6\n", "4 6\n", "5 6\n", "6 6\n", "99999999999973 99999999999971\n", "11 17\n", "99999999999972 100000000000000\n", "100000000000000 100000000000000\n", "99999999999962 99999999999973\n", "99999999999973 99999999999930\n", "25 25\n", "11 49\n", "87897897895 29835496161\n", "49999819999926 50000000000155\n", "67280421310721 67280421310723\n", "100004 5\n"], "outputs": ["10\n", "16\n", "10\n", "16\n", "12\n", "12\n", "14\n", "16\n", "12\n", "14\n", "24\n", "14\n", "199999999999948\n", "32\n", "502512564406\n", "56850000\n", "133333333333296\n", "399999999999808\n", "30\n", "34\n", "728999990\n", "199999640000164\n", "813183752\n", "1588\n"]}}, {"index": 4034, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThis is an easy version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different.\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nYou have to color all its characters one of the two colors (each character to exactly one color, the same letters can be colored the same or different colors, i.e. you can choose exactly one color for each index in $s$).\n\nAfter coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary (possibly, zero) number of times.\n\nThe goal is to make the string sorted, i.e. all characters should be in alphabetical order.\n\nYour task is to say if it is possible to color the given string so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 200$) \u2014 the length of $s$.\n\nThe second line of the input contains the string $s$ consisting of exactly $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nIf it is impossible to color the given string so that after coloring it can become sorted by some sequence of swaps, print \"NO\" (without quotes) in the first line.\n\nOtherwise, print \"YES\" in the first line and any correct coloring in the second line (the coloring is the string consisting of $n$ characters, the $i$-th character should be '0' if the $i$-th character is colored the first color and '1' otherwise).\n\n\n-----Examples-----\nInput\n9\nabacbecfd\n\nOutput\nYES\n001010101\n\nInput\n8\naaabbcbb\n\nOutput\nYES\n01011011\n\nInput\n7\nabcdedc\n\nOutput\nNO\n\nInput\n5\nabcde\n\nOutput\nYES\n00000\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["9\nabacbecfd\n", "8\naaabbcbb\n", "7\nabcdedc\n", "5\nabcde\n", "200\nraaaaabbbccccccccccdddddeeeeeeeeeeeeeeffffffffffggggggggghhhhhiiiiiiiiijjjjkkkkkkkkkkllllllllmmmmmmmmnnnnnnnooooooooppppppqqqqqqqqqqrrrrrrrrssssttttttttttuuuuuuuuvvvvvvwwwwwwxxxxxxxyyyyyyyzzzzzzzzzzzz\n", "200\nazaaaaaabbbbbbbcccccccccdeeeeeeefffffffgggggggghhhhhhiijjjjjkkkkkkkkkllllllmmmmmmmmmmmmnnnnnnoooooopppppppppppqqqqqrrrrrrrrrrrrrssssssssssstttttttttttuuuuuuuuvvvvvvvwwwwwwwwwxxxxxxxyyyyyyyyyyyyzzzzzzz\n", "200\naaaaaaaaaaaabbbbccccccdddddddeeeeeeffgggggggggggghhhhhhiiiiiiiiiiiijjjjjjjjjkkkkklllllllmmmmmmmmnnnnnnnnoooooooopppppppppqqqqqrrrrrrrrrssssssssssttuuuuuuuvvvvvvvvvvwwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzw\n", "200\ncnaaaaaabbbbbccccdddddddddddddeeeeeeeeefffffffgggggggggghhhhhhhhhiiijjjjjkkkkkkklllllllmmmmmmmnnnnnnnnnooooooooooooppppppppqqqqqqqqqqqrrrssssssstuuuuuuuuvvvvvvvvvvvvwwwwwwxxxxxxxxyyyyyyyzzzzzzzzzzzzzz\n", "200\naaawaaaabbbbccccccccddddddddddeeeeeeeffffffffffgggggggggghhhhhhhhiiiiiiiiijjjjjjjkkkkkkkkklllllllmmmmmmmmnnnnnnooooooooppppppppqqqqrrrrrrrsssssssttttttuuuuuuuuuvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyzzzzzzzzzz\n", "200\naaaaabbbbbbbbbbbccccccdddddddddeeeeeefffffffffggggggggggggggghhhhhhhhhiiiiijjjjjjjjjjjkkkkkklllllllmmmmmmmmmnnnnnnnnnnoooooppppppqqqqqqqrrrrrssssssstttttuuuuuuuuvvvvwwwwwwwwwwwwxxxxxxyyyyyyzzzzzzzzzmu\n", "200\nfhrvyaaaaaaaaabbbbbbbccccccccccdddddeeeeeeeeeeeeefffffggggggghhiiiiiiiiiiiijjjjjkkkklllllllmmmmmmmmnnnnnoooooppppppppqqqrrrrrrrrrrsssssssstttttttttttttuuuuuuuvvvvvvwwwwwwwwwwwwwwxxxxxxyyyyyyyyzzzzzzzz\n", "200\naacdaeabblbxbbbbbbcccccdddddeeeeeeefffffffggggggghhhhhhhhhiiiiiiiiiijjjjjjjkkkkkkkklllllllllmmmmmmmmnnnoooooooopppppqqqqqqqqqqqrrrrrrrrrrsstttttttttuuuuuuuvvvvvvvvvvwwwwwwwxxxxxxxxxxxyyyyyyyyyzzzzzzzz\n", "200\naaaaaabbbbbbbbbbbbbccccccccccccdddeeeeeeffffggghhhhhhhhhiiiiiiiijjjjjjjjjjkkkkklllllmmmmmmmmmnnnnnnnoooooooppppppppqqqqqqrrrrrrrrrsssssssttttttttuuuuuuuuvvvvvvvvwwwwwwxxxxxxxyyyyyyyyyyzzzzzzzzzzzeinuy\n", "200\nbdimoqrstvaaaaaaaaabbbbbbbbbbcccccddddddeeeeeeeeeeeeeeeffffffgggggggghhhhhhhhhiiiiiiiijjjjjjjjjjjjkkkkkkkklllllllllmmmmmmmmnnnnnoooooooppppppqqqqqqrrrrrrrrssssssstttttuuvvvvvvwwwwwwwwxxxxxxxyyyyyyyzzz\n", "200\naaaaeillaoobbwbbxbzbbcccccccdddddddddeeeeeeeffffffffggggghhhhhiiiijjjjjjjkkkkklllllmmmmmmmmmnnnnnnnnnnnnnooooooooppppqqqqqqqqqqrrrrrrrrrrrsssssssssttttttttttuuuuuuuvvvvvvvwwwwwwwxxxxxxyyyyzzzzzzzzzzzz\n", "200\naaaaaaaaaabbbbbccccccccccccccdddddddddeeeeeeefffffffffgggggghhhhhhiiiiiiijjjjjjjjjjkkkkkkllllllllmmmmmmmmnnnnnnoooooooppppppqqqqqqqqqqqrrrrrrsssssssttttttttuuuuuuvvvvvwwwwwxxxyyyyzzzzzzzzzzzcddddjksvw\n", "200\naaaabbbbcceefffgghhhhijjllnnnnopqrrsstuuvvvwwxxyyyaaaabbbbbbbbcccdddddeeeeeefffffggggghhhhhhhhhiiiiiiiiijjjjkkkkkkllllllmmmmmmmnnnnnoooooooopppppppqqqrrrrrrsssssstttttuuuuuuuvvvvvwwwxxxxxyyyyzzzzzzzzz\n", "200\naaaaabbaaaaabcbebebbccecccffgjklccmcmnccoccooddoqqqdddqderreerrsfffsfsfghuuhhhvhhhhvviwixixixxixijjjxjyjzzjzkkklllllmmmmmmmnnnnnnnoooooppppppppppppqqqqqrrrrrrrsssssstttuuuvvvvvvvwwwwwwxxxyyyyyyyyyzzzz\n", "200\naaaabbbbbbcccccdddddeeeeeeeffffggggggggghhhhhiiiiijjjjjjjkkkkkkkkllmmmmmmmmmmnnoooooppppqqqqqrrrrrrsssssttttttttttttuuuvvvvvwwwwwwxxxxxxxxyyyzzzzzzzzzaccddddeeffgjjjjkkklllllmmmmnnooppqrrsssttwwxyyzzz\n", "200\naaaabbbbbbccccddddefffffgghhhiiiiiiiiijjjjjkkklmmmmnnnnnnooopppppppprrrstuuuuuuvvvvvvvwwxxxxyyyyyyzzaabbbbbbcccdddddddddeffggggghhhhhhiiijjjjjjkkkkllllmmmnnnoopqqqrrssssttttuuuvvvvvwwwwwxxxxyyyyyzzzzz\n", "200\naaaaaaabcbbbbcccccdccdcdddddeeddeeeeeeeeeefffffffggghgghghhhhhhhihhhiiiiiiiijijijjjjkjkkkkkkkklkkllllllllmmmmmmmmmmmnnnnnnnnoooppnqnnqoqroooorsoppqqstttqruuurruvrrvvtvttvvtuwvwwwwxxxwxyzzxzzyyzzyyzzzz\n", "200\naaaabccccdddddddeefffffffgghhhiiiiiijjjjjjjkkkkkllllmmmmnnnnnoooooooppqqqqqrrrrsssttuuuuuvwwxxyyyzzzaaaaaabbbbbccccddddddeefffffffggghhiiiikkllmmnnnnnnoooooppppqqqqrrrrsttttuuuuuvvvvwwwwwwxxxxyyyzzzzz\n", "200\naaaaaaaaabbbbcccccccccccdddeeeeeeeefffgggghhhhhhhhiiiiiiijjjjjjjkkklllmmmmmnnnnnnnoooooppppppppqqqqrrrrrrrssssssttttuuuuuuvvvvvwwwwxxxxxxyyyyyzzzzzzzzaabbbcccdeeefggggghhhhiijjjjkllnpqqqrrsssstuuvwyzz\n", "200\naaaabbbbabcaccaadbebfbbbfgbbggchhcccchhhcccicjdkkldldddldmdenoeeooffpppfqrfffuuufggguvgggvggwghhxhyyyhhhhzhiiiiiiijjjjjjjkkkllmmmnnnooooppppppppppppqqqqrssssttttttuuuvvvvwwwwwwwwxxxxxxxxyyyyzzzzzzzzzz\n"], "outputs": ["YES\n001010101\n", "YES\n00000011\n", "NO\n", "YES\n00000\n", "YES\n01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000\n", "YES\n00111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n", "YES\n00111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n", "YES\n00001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011\n", "YES\n00000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000\n", "YES\n00001011101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111\n", "YES\n00000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000\n", "YES\n00000000100110110101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111\n", "YES\n00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000\n", "YES\n00000001111100101011110111000000110100110110011000011101100110001110101110011101111001010101001011110101001011111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000\n", "YES\n00000000011110000001101000000011000000000000000000000110100000000111000000000101000001000000000110000000000000000000000000000000010110100111100111110000110001100110010110011010000000100001001100110000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111100\n", "YES\n00000000100100110101011100110010011110001110101000101110101100110011000100111000111100111011011101000111101111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000\n"]}, "test_in_outs": {"inputs": ["200\naaaabccdeffgghhijklllmnnnoopqrrrrssssssttuuvvvwxyyaaaabbbcccccddddddeeeeeeffffgggggghhhhiiiiiiiiiiijjjjjjjjjkkkkllmmmmmmmmnnoooooooooooppppppppppqqqqqqrrrsssstttttuuuuvvvvwwwwwwwxxxxxxxxxyyyyyyyyyyzzz\n", "200\naaaaaaabbbbbbcccccccccdddddddeeeeffffffggggghhhhhiiiiiiiijjjjkkkkkllllllllmmmmmmmmmnnnnnnnnnooooooooopppppppppqqqqqqqqrrrrrrrrrrrsssssssttttuuvvvvvvvvvvwwwwwwwxxxxxxyyyyyyzzzzzbceghhhijjjmmooqrrttvvwx\n", "200\naaaaaadeafgibbbbbbjbjlncpccccsdsdddtdtdtdeetuevwwezzefffffgggghhhhhhhiijjjjjjjjkkklllllllmmmmmmmmmmmmmnnnnnnnooooooooopppppppppppppqqqqrrrrrrsssssssttttttttttuuuuuuuuuvvvvvvvwwwwwwxxxxxyyyyyyyyyzzzzzz\n", "200\naadfgghjjjkmnpqqtuuwwxyzaaaaaaaabbbbbbbbcccccddddeeeeeeeeeffgggghhhhhhiiiiiiiijjjjjjjjkkkkklllllmmmmmmmmmmmnnnnnoooooppppppppqqqqqqqqrrrrrrrrrrrssssstttttttttuuuuuuuuvvvvvvvwwwwwwxxxxxxxyyyyyzzzzzzzzz\n", "200\naaaaaaaaaabbbbbbccccccddddddddddddeeeeeeeeeeffffffffggggghhhhhhiiijjjjjjkkkkkklllllllllllllmmmmmmmnnnnnooooooooooppppppppppqqqqqqqqqrrrrrrrrsssssstttttttttuuuuvvvvvvwwwwwwwwwwwxxxxxyyyyyyyyyyzzzzzzzzw\n", "200\naaabbsbbbbbbbbbbbbbcccccccccdddddddddddddeeeeeeeeffffffffgggggggggghhhhhhhhhhhhijjjjjjjjjjkkkkkkllllmmmmmnnnnnnoooooooppppppqqqqqqqqqqqqrrrrrsssssssssttttttuuuuuuvvvvvvvvvwwwwwwxxxxxxyyyyyyzzzzzzzzzzz\n", "200\njaaaabbbbbbccccccccccccdddddddddddeeeeeeffffffggggghhhhhhhiiiijjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmnnnooooppppppqqqqqqqqqqqqqqrrrrrrrrrrrrsssssttttttuuuuuuuvvvvvwwwwwwwwwwwwxxxxxxxyyyyyyyyzzzzzz\n", "200\nzywmerhahxlqsjekpqsdqxnjiduyjrytswiweohctztgpiorwimhjmdfofqynyggcrtzslbyvkuvqrsgwyacyvcuathplliwwshusluiqwuhutnzwvuchfedhwwfdzizltdxibtsaocpnqezstblgkfdcvfsjjyzwalkksumsaljqljmmkcyejwwdkolmcgmodoiclte\n", "200\ntoimpgygoklxroowdhpacrtrrwmkhcgcpidapeyxrjmiqgilveimnazyydvnujtqpenfkeqdbylfdinompxupfwvirxohaampqihjueasygkucweptgcowjibgnwyqetynykgoujeargnhjbmntfovwusqavpdwtpnpqpkcgaxbhgdxloyealksmgkxprtpfugixdyfn\n", "200\nndwpatpnvwldptairxlxqmzzysfvglpjkwbebtosqvfnoebfvxfpupvohcaazsjbdshoducigmfoqzltdgvmdmputqmoaqscilmtafqrxdunwnijhrtbwonpvpeouednmjswhauahmgyozmbiilxxflkkmwywvuojbrwwbkyhxtdywiktkfcsmozklhrwlwyajekejrx\n", "200\nftiqlgirbkmlpzkthoivcifhflyietxsfiwiojenqgxrnetzutdsyfuhrbfpedyksfzuvnqonbyydogbrwsfuuivboanufitbjngppagzfgqwyroaofcdgrwoxwfpvcgzdnkhnwtlavnoppdbddpfpcaaipdcqskcqtccrrspvjyqpvjwziexnmmnlqvacdpgnzzhude\n", "9\nbefblmbhg\n", "9\nabcabcabc\n", "4\ndcda\n", "37\nxxxxxxxxxxxxxaaaaaaaaaaaccccccccccacx\n", "1\na\n", "6\nqdlrhw\n", "3\nedc\n", "4\ncbca\n", "5\nadcbz\n", "5\ncbbda\n", "4\nhcha\n", "4\nzcza\n", "6\ncbaabc\n"], "outputs": ["YES\n00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111\n", "YES\n00000000100011111101000101111010111010101110010001001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000\n", "YES\n00000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000\n", "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n", "YES\n00000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000\n", "YES\n01111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n0\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}}, {"index": 4035, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nFind the price of a product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax levied on it is A yen and B yen, respectively. (Yen is the currency of Japan.)\nHere, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.\nIf multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print -1.\n\n-----Constraints-----\n - 1 \\leq A \\leq B \\leq 100\n - A and B are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf there is a price that satisfies the condition, print an integer representing the lowest such price; otherwise, print -1.\n\n-----Sample Input-----\n2 2\n\n-----Sample Output-----\n25\n\nIf the price of a product before tax is 25 yen, the amount of consumption tax levied on it is:\n - When the consumption tax rate is 8 percent: \\lfloor 25 \\times 0.08 \\rfloor = \\lfloor 2 \\rfloor = 2 yen.\n - When the consumption tax rate is 10 percent: \\lfloor 25 \\times 0.1 \\rfloor = \\lfloor 2.5 \\rfloor = 2 yen.\nThus, the price of 25 yen satisfies the condition. There are other possible prices, such as 26 yen, but print the minimum such price, 25.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["2 2\n", "8 10\n", "19 99\n", "68 85\n", "24 30\n", "25 32\n", "27 34\n", "56 71\n", "58 72\n", "34 43\n", "26 32\n", "65 82\n", "32 40\n", "78 98\n", "72 91\n", "79 99\n", "80 100\n", "35 44\n", "58 72\n", "52 66\n", "12 15\n", "1 1\n", "34 43\n", "12 15\n"], "outputs": ["25\n", "100\n", "-1\n", "850\n", "300\n", "320\n", "340\n", "710\n", "725\n", "430\n", "325\n", "820\n", "400\n", "980\n", "910\n", "990\n", "1000\n", "440\n", "725\n", "660\n", "150\n", "13\n", "430\n", "150\n"]}, "test_in_outs": {"inputs": ["12 15\n", "43 54\n", "10 13\n", "72 89\n", "63 81\n", "7 10\n", "37 45\n", "65 80\n", "71 90\n", "13 18\n", "57 70\n", "12 14\n", "64 79\n", "5 6\n", "72 90\n", "22 28\n", "3 3\n", "73 91\n", "2 63\n", "40 56\n", "18 43\n", "8 52\n", "72 80\n", "60 82\n"], "outputs": ["150\n", "540\n", "130\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "63\n", "900\n", "280\n", "38\n", "913\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n"]}}, {"index": 4036, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nPolycarp has to solve exactly $n$ problems to improve his programming skill before an important programming competition. But this competition will be held very soon, most precisely, it will start in $k$ days. It means that Polycarp has exactly $k$ days for training!\n\nPolycarp doesn't want to procrastinate, so he wants to solve at least one problem during each of $k$ days. He also doesn't want to overwork, so if he solves $x$ problems during some day, he should solve no more than $2x$ problems during the next day. And, at last, he wants to improve his skill, so if he solves $x$ problems during some day, he should solve at least $x+1$ problem during the next day.\n\nMore formally: let $[a_1, a_2, \\dots, a_k]$ be the array of numbers of problems solved by Polycarp. The $i$-th element of this array is the number of problems Polycarp solves during the $i$-th day of his training. Then the following conditions must be satisfied:   sum of all $a_i$ for $i$ from $1$ to $k$ should be $n$;  $a_i$ should be greater than zero for each $i$ from $1$ to $k$;  the condition $a_i < a_{i + 1} \\le 2 a_i$ should be satisfied for each $i$ from $1$ to $k-1$. \n\nYour problem is to find any array $a$ of length $k$ satisfying the conditions above or say that it is impossible to do it.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 10^9, 1 \\le k \\le 10^5$) \u2014 the number of problems Polycarp wants to solve and the number of days Polycarp wants to train.\n\n\n-----Output-----\n\nIf it is impossible to find any array $a$ of length $k$ satisfying Polycarp's rules of training, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line, then print $k$ integers $a_1, a_2, \\dots, a_k$ in the second line, where $a_i$ should be the number of problems Polycarp should solve during the $i$-th day. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n26 6\n\nOutput\nYES\n1 2 4 5 6 8 \n\nInput\n8 3\n\nOutput\nNO\n\nInput\n1 1\n\nOutput\nYES\n1 \n\nInput\n9 4\n\nOutput\nNO\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["26 6\n", "8 3\n", "1 1\n", "9 4\n", "7 2\n", "1000000000 100000\n", "999961559 44720\n", "800019998 40000\n", "813491792 78123\n", "4 2\n", "1 2\n", "1 3\n", "1 4\n", "2 1\n", "2 2\n", "2 3\n", "2 4\n", "3 1\n", "3 2\n", "3 3\n", "3 4\n", "4 1\n", "4 3\n"], "outputs": ["YES\n1 2 4 5 6 8 \n", "NO\n", "YES\n1 \n", "NO\n", "YES\n3 4 \n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n2 \n", "NO\n", "NO\n", "NO\n", "YES\n3 \n", "YES\n1 2 \n", "NO\n", "NO\n", "YES\n4 \n", "NO\n"]}, "test_in_outs": {"inputs": ["4 4\n", "1000000000 1\n", "1000000000 10\n", "1000000000 30\n", "1000000000 29\n", "1 88999\n", "3 8\n", "16 4\n", "13 4\n", "85300 2\n", "42180 2\n", "13736 3\n", "5 2\n", "849600011 46\n", "1000000000 3\n", "20492 2\n", "33989 18\n", "77792 2\n", "49725 4\n", "147268968 2\n", "140089944 2\n", "2333 3\n", "7 3\n"], "outputs": ["NO\n", "YES\n1000000000 \n", "YES\n99999995 99999996 99999997 99999998 99999999 100000001 100000002 100000003 100000004 100000005 \n", "YES\n33333318 33333319 33333320 33333321 33333322 33333324 33333325 33333326 33333327 33333328 33333329 33333330 33333331 33333332 33333333 33333334 33333335 33333336 33333337 33333338 33333339 33333340 33333341 33333342 33333343 33333344 33333345 33333346 33333347 33333348 \n", "YES\n34482744 34482745 34482746 34482747 34482748 34482749 34482750 34482751 34482752 34482753 34482754 34482756 34482757 34482758 34482759 34482760 34482761 34482762 34482763 34482764 34482765 34482766 34482767 34482768 34482769 34482770 34482771 34482772 34482773 \n", "NO\n", "NO\n", "YES\n2 3 5 6 \n", "YES\n1 2 4 6 \n", "YES\n42649 42651 \n", "YES\n21089 21091 \n", "YES\n4577 4579 4580 \n", "YES\n2 3 \n", "YES\n18469542 18469543 18469545 18469546 18469547 18469548 18469549 18469550 18469551 18469552 18469553 18469554 18469555 18469556 18469557 18469558 18469559 18469560 18469561 18469562 18469563 18469564 18469565 18469566 18469567 18469568 18469569 18469570 18469571 18469572 18469573 18469574 18469575 18469576 18469577 18469578 18469579 18469580 18469581 18469582 18469583 18469584 18469585 18469586 18469587 18469588 \n", "YES\n333333332 333333333 333333335 \n", "YES\n10245 10247 \n", "YES\n1879 1880 1881 1882 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 \n", "YES\n38895 38897 \n", "YES\n12429 12431 12432 12433 \n", "YES\n73634483 73634485 \n", "YES\n70044971 70044973 \n", "YES\n776 778 779 \n", "YES\n1 2 4 \n"]}}, {"index": 4037, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThe only difference between easy and hard versions is that you should complete all the projects in easy version but this is not necessary in hard version.\n\nPolycarp is a very famous freelancer. His current rating is $r$ units.\n\nSome very rich customers asked him to complete some projects for their companies. To complete the $i$-th project, Polycarp needs to have at least $a_i$ units of rating; after he completes this project, his rating will change by $b_i$ (his rating will increase or decrease by $b_i$) ($b_i$ can be positive or negative). Polycarp's rating should not fall below zero because then people won't trust such a low rated freelancer.\n\nPolycarp can choose the order in which he completes projects. Furthermore, he can even skip some projects altogether.\n\nTo gain more experience (and money, of course) Polycarp wants to choose the subset of projects having maximum possible size and the order in which he will complete them, so he has enough rating before starting each project, and has non-negative rating after completing each project.\n\nYour task is to calculate the maximum possible size of such subset of projects.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $r$ ($1 \\le n \\le 100, 1 \\le r \\le 30000$) \u2014 the number of projects and the initial rating of Polycarp, respectively.\n\nThe next $n$ lines contain projects, one per line. The $i$-th project is represented as a pair of integers $a_i$ and $b_i$ ($1 \\le a_i \\le 30000$, $-300 \\le b_i \\le 300$) \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\n\n\n-----Output-----\n\nPrint one integer \u2014 the size of the maximum possible subset (possibly, empty) of projects Polycarp can choose.\n\n\n-----Examples-----\nInput\n3 4\n4 6\n10 -2\n8 -1\n\nOutput\n3\n\nInput\n5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n\nOutput\n5\n\nInput\n3 2\n300 -300\n1 299\n1 123\n\nOutput\n3\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["3 4\n4 6\n10 -2\n8 -1\n", "5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\n", "3 2\n300 -300\n1 299\n1 123\n", "20 15000\n57 -299\n354 -298\n156 -298\n102 -298\n862 -300\n134 -300\n1446 -289\n23 -298\n1012 -298\n901 -300\n97 -300\n172 -297\n108 -265\n209 -294\n307 -300\n28 -295\n1021 -295\n666 -296\n83 -298\n469 -298\n", "20 1000\n37 -298\n112 -288\n29 -298\n27 -298\n334 -295\n723 -298\n139 -286\n375 -296\n19 -296\n319 -300\n323 -295\n44 -300\n237 -296\n100 -296\n370 -300\n285 -299\n359 -300\n71 -297\n459 -299\n745 -298\n", "20 30000\n129 -290\n86 -295\n540 -300\n814 -294\n705 -290\n194 -300\n332 -297\n670 -299\n64 -299\n32 -295\n507 -295\n302 -299\n493 -289\n175 -295\n312 -286\n337 -300\n200 -292\n274 -300\n86 -285\n559 -299\n", "20 15000\n61 65\n160 -175\n40 -283\n285 278\n58 -298\n3 20\n232 146\n226 -97\n349 37\n462 -37\n372 13\n1949 -122\n58 233\n306 -29\n327 -213\n306 134\n136 259\n398 101\n794 -90\n613 232\n", "20 1000\n176 -209\n12 -75\n355 -101\n407 -43\n574 78\n11 164\n40 44\n64 110\n83 132\n606 262\n958 -63\n791 -249\n93 -253\n704 218\n104 -289\n258 -1\n20 46\n332 -132\n454 -220\n390 159\n", "20 30000\n636 -231\n284 -28\n154 -175\n90 -127\n277 159\n272 -87\n136 -253\n233 181\n488 275\n56 -90\n280 132\n340 12\n151 117\n150 -232\n92 -284\n328 -113\n248 -53\n99 211\n609 166\n13 -35\n", "20 15000\n74 292\n68 300\n384 296\n1788 297\n58 292\n39 296\n160 278\n155 297\n106 299\n100 289\n137 295\n629 298\n387 284\n320 295\n252 300\n12 294\n103 300\n143 298\n247 296\n243 288\n", "20 1000\n543 293\n215 297\n472 294\n8 295\n74 295\n183 300\n205 296\n361 290\n129 300\n237 298\n494 299\n798 299\n324 297\n37 294\n195 287\n164 295\n90 292\n6 299\n1486 299\n533 291\n", "20 30000\n162 299\n302 297\n114 299\n263 287\n147 300\n754 296\n471 299\n156 297\n407 288\n11 291\n104 291\n196 298\n95 296\n163 282\n164 299\n155 285\n201 298\n200 296\n587 294\n208 296\n", "20 15000\n21696 -290\n24040 -298\n11031 -299\n16426 -294\n26726 -300\n8368 -289\n29904 -296\n17421 -288\n12459 -297\n22433 -300\n6511 -297\n21230 -295\n2628 -299\n3478 -296\n1050 -293\n12981 -294\n27731 -300\n28750 -295\n17774 -299\n21041 -293\n", "20 1000\n11767 -298\n7517 -297\n8012 -296\n17583 -299\n11054 -299\n16840 -286\n28570 -298\n27763 -295\n8165 -290\n20499 -300\n2898 -289\n11552 -299\n7625 -299\n21133 -295\n21327 -298\n28698 -300\n18854 -299\n16349 -300\n17969 -298\n2799 -296\n", "20 30000\n21211 -289\n17405 -277\n15448 -296\n24657 -299\n9058 -293\n24218 -299\n2418 -290\n25590 -289\n6026 -299\n13401 -296\n23863 -297\n6650 -297\n22253 -294\n19099 -300\n14879 -286\n3074 -299\n12613 -293\n21154 -297\n11003 -295\n6709 -294\n", "20 15000\n25338 11\n13574 158\n28567 -110\n4353 -225\n17875 198\n5269 -58\n17354 -275\n367 -176\n17344 65\n5940 57\n14439 -22\n23218 212\n4334 -195\n7842 -59\n22867 169\n13610 -263\n11528 190\n3151 -166\n17123 168\n647 272\n", "20 1000\n9691 -32\n1732 -46\n18638 155\n14421 -125\n14839 244\n2249 77\n13780 4\n2467 232\n1673 -239\n19626 202\n8133 251\n21885 25\n1555 -52\n2851 166\n24925 -222\n6767 36\n29642 -8\n29538 -153\n18088 106\n2075 -232\n", "20 30000\n18658 -168\n24791 -241\n28082 -195\n9979 -78\n25428 217\n3334 9\n18041 -80\n24291 -207\n23325 232\n1004 -113\n5221 151\n25733 -155\n59 83\n15477 -106\n16434 275\n23393 285\n2760 255\n20503 -294\n776 -234\n22836 -82\n", "20 15000\n20035 297\n29425 285\n22551 293\n27098 300\n26229 298\n11006 300\n22593 298\n7933 296\n15862 296\n10588 294\n17897 300\n21301 296\n8547 291\n29214 292\n2391 292\n15630 284\n23472 295\n9369 295\n9044 300\n12731 299\n", "20 1000\n27120 300\n9493 289\n5224 294\n17172 298\n24185 298\n24692 299\n26925 300\n28803 296\n20749 293\n3745 299\n5204 298\n22266 291\n14650 282\n11211 299\n7343 297\n20836 298\n10382 299\n848 300\n23155 298\n29281 293\n", "20 30000\n23518 297\n5050 298\n20780 288\n27784 296\n6581 300\n6070 296\n20219 282\n3658 293\n29433 296\n26723 276\n1985 294\n4954 296\n22409 295\n7859 293\n22800 287\n8468 289\n21913 298\n8355 299\n9086 295\n29422 300\n", "20 15000\n29965 -288\n29788 -295\n29752 -288\n29891 -286\n29802 -295\n29751 -299\n29603 -289\n29907 -296\n29940 -287\n29870 -296\n29757 -298\n29627 -295\n29789 -290\n29841 -279\n29563 -288\n29900 -298\n29901 -297\n29288 -295\n29773 -298\n29886 -288\n", "20 1000\n29609 -290\n29489 -279\n29700 -300\n29879 -300\n29776 -297\n29301 -290\n29493 -297\n29751 -287\n29921 -290\n29715 -300\n29999 -300\n29567 -296\n29826 -298\n29398 -300\n29663 -293\n29669 -298\n29914 -299\n29765 -297\n29027 -300\n29731 -291\n"], "outputs": ["3\n", "5\n", "3\n", "20\n", "3\n", "20\n", "20\n", "20\n", "20\n", "20\n", "20\n", "20\n", "8\n", "0\n", "20\n", "12\n", "0\n", "20\n", "11\n", "1\n", "20\n", "0\n", "0\n"]}, "test_in_outs": {"inputs": ["20 30000\n29889 -298\n29133 -283\n29949 -296\n29323 -297\n29642 -287\n29863 -299\n29962 -300\n29906 -297\n29705 -295\n29967 -296\n29804 -295\n29886 -295\n29984 -297\n29943 -298\n29711 -300\n29685 -295\n29805 -293\n29994 -292\n29472 -297\n29909 -296\n", "20 15000\n29875 -256\n29935 9\n29852 30\n29474 -175\n29880 -244\n29642 245\n29962 79\n29800 84\n29328 277\n29410 268\n29269 -86\n29280 -30\n29854 89\n29953 -190\n29987 194\n29747 -18\n29694 21\n29972 -268\n29923 288\n29782 187\n", "20 1000\n29531 141\n29892 277\n29544 141\n29825 -194\n29846 164\n29595 25\n28975 -249\n29926 -108\n29920 -99\n29232 -238\n29892 -284\n29757 270\n29828 122\n29925 256\n29656 -128\n29052 -165\n29648 -65\n29713 226\n29903 -110\n29893 117\n", "20 30000\n29872 -55\n29432 182\n29578 50\n29856 -210\n29238 -274\n29988 -110\n29834 252\n29821 220\n29644 230\n29838 -103\n29309 43\n29603 -124\n29464 -265\n29610 261\n29914 -35\n29963 -60\n29916 -121\n29175 264\n29746 293\n29817 105\n", "2 4\n2 -3\n4 -3\n", "3 1\n3 -4\n3 4\n3 4\n", "56 15\n2 -20\n9 14\n33 14\n18 -29\n36 -32\n13 -32\n19 26\n18 -4\n8 -32\n25 -32\n20 -9\n34 -14\n4 -1\n7 -12\n32 -36\n30 -30\n10 -35\n17 -18\n11 -32\n30 -7\n25 30\n1 -11\n13 -6\n15 -1\n38 29\n19 -23\n38 -2\n2 10\n36 23\n12 -28\n36 -38\n15 -33\n25 -34\n7 2\n38 -13\n16 -5\n5 -37\n1 -24\n15 -36\n6 -8\n23 22\n31 13\n37 29\n8 0\n14 28\n34 -30\n24 31\n20 -16\n1 -21\n12 24\n8 -15\n21 16\n4 12\n11 8\n7 -10\n17 -10\n", "11 12\n10 -10\n19 12\n19 -10\n5 -14\n18 -1\n8 -17\n4 -1\n19 0\n13 2\n8 2\n6 -3\n", "9 8\n6 -1\n6 -4\n7 -5\n1 -3\n6 -8\n6 -5\n1 3\n3 -1\n3 -2\n", "20 15000\n30000 288\n29729 296\n29760 292\n29654 300\n29735 293\n29987 297\n29800 299\n29638 300\n29928 300\n29543 290\n29934 281\n29326 299\n29975 296\n29992 300\n29855 293\n29369 298\n29991 300\n29625 300\n29822 298\n29908 295\n", "20 1000\n29965 300\n29944 297\n29787 298\n29608 292\n29944 296\n29917 299\n29762 292\n29106 297\n29861 292\n29414 286\n29486 294\n29780 294\n29720 299\n29375 298\n29896 297\n29832 297\n29805 295\n29690 290\n29858 294\n29901 300\n", "20 30000\n29682 295\n29376 294\n29917 298\n29992 296\n29841 298\n29984 297\n29986 298\n29728 293\n29986 285\n29862 300\n29533 300\n29685 291\n29217 292\n28980 295\n29941 295\n29854 298\n29937 294\n29907 295\n29978 300\n29927 295\n", "50 15000\n142 -300\n20 -298\n560 -300\n1815 -292\n282 -297\n92 -293\n34 -284\n555 -299\n408 -293\n504 -284\n278 -284\n139 -291\n64 -298\n311 -293\n130 -293\n89 -298\n129 -294\n385 -295\n136 -288\n41 -293\n112 -290\n416 -295\n178 -294\n154 -300\n110 -300\n346 -299\n209 -294\n1394 -295\n209 -299\n16 -297\n592 -298\n298 -299\n159 -298\n405 -297\n434 -300\n247 -299\n691 -299\n578 -300\n638 -294\n404 -288\n309 -284\n297 -299\n228 -299\n517 -300\n196 -297\n270 -299\n11 -291\n300 -294\n1617 -286\n253 -284\n", "50 1000\n520 -285\n84 -296\n186 -300\n333 -298\n396 -299\n125 -293\n26 -293\n42 -290\n163 -300\n85 -299\n232 -294\n152 -298\n231 -299\n326 -298\n30 -294\n459 -296\n40 -292\n57 -300\n327 -299\n132 -300\n894 -299\n350 -286\n153 -295\n465 -287\n904 -299\n638 -299\n43 -298\n128 -298\n215 -290\n378 -298\n332 -300\n36 -298\n124 -293\n146 -299\n141 -299\n208 -287\n102 -300\n122 -300\n93 -295\n423 -289\n114 -297\n25 -292\n443 -299\n625 -298\n177 -294\n17 -300\n570 -293\n64 -300\n153 -296\n321 -289\n", "50 30000\n241 -293\n284 -295\n99 -293\n307 -300\n254 -299\n143 -293\n457 -296\n332 -300\n1046 -296\n975 -296\n49 -296\n253 -296\n355 -299\n264 -294\n132 -296\n554 -290\n604 -290\n170 -299\n140 -296\n60 -294\n127 -298\n331 -298\n81 -300\n310 -297\n397 -299\n449 -290\n72 -292\n166 -294\n453 -300\n98 -299\n117 -277\n219 -297\n483 -299\n423 -296\n123 -299\n418 -295\n334 -294\n591 -296\n6 -292\n25 -300\n216 -292\n253 -289\n84 -290\n632 -300\n17 -299\n1017 -288\n107 -298\n748 -289\n130 -293\n122 -299\n", "50 15000\n744 -169\n42 -98\n36 -296\n163 -73\n284 96\n271 -61\n949 -226\n683 2\n268 -138\n205 297\n328 130\n281 -259\n912 -170\n79 -62\n275 -227\n601 95\n107 220\n387 263\n1260 53\n215 -188\n191 279\n459 5\n284 -246\n123 -242\n858 77\n162 78\n219 2\n52 230\n312 72\n114 -10\n179 25\n319 61\n11 28\n94 -271\n153 173\n212 -272\n3 -26\n115 172\n273 -292\n24 195\n42 291\n66 248\n27 -287\n478 -242\n17 130\n591 267\n55 -39\n287 156\n498 -119\n138 119\n", "50 1000\n48 74\n684 197\n134 237\n37 -20\n79 37\n197 -212\n370 54\n577 -195\n329 -50\n963 -81\n85 135\n365 93\n293 -178\n503 -31\n126 -136\n709 -52\n118 153\n19 -260\n305 -260\n619 -35\n72 29\n352 163\n366 -175\n1186 101\n147 268\n235 -225\n591 195\n317 57\n102 244\n255 -204\n135 -21\n9 296\n164 185\n310 -70\n168 -212\n712 24\n299 -224\n401 193\n98 117\n168 -217\n476 -76\n273 -135\n45 61\n55 -40\n1137 84\n278 -89\n120 184\n105 265\n414 152\n69 204\n", "50 30000\n287 135\n119 48\n148 -252\n20 123\n16 16\n63 -232\n452 -25\n716 280\n367 165\n623 244\n247 249\n105 -61\n59 251\n1201 -266\n67 -298\n666 -216\n206 -91\n95 -229\n768 -229\n338 146\n194 271\n52 -252\n442 -68\n203 80\n314 99\n375 -120\n190 -286\n177 269\n343 264\n98 172\n688 -51\n76 -138\n98 -114\n591 172\n9 -27\n1137 -195\n372 273\n623 -11\n190 -265\n1 -17\n132 159\n141 -38\n103 45\n291 -162\n175 85\n125 -143\n124 -87\n182 173\n3 -259\n320 -70\n", "50 15000\n796 297\n44 293\n32 298\n262 297\n81 298\n236 289\n40 291\n501 293\n318 291\n608 285\n85 294\n47 296\n377 295\n13 297\n890 294\n70 300\n370 293\n125 280\n175 296\n1662 295\n157 298\n23 300\n98 300\n110 299\n178 293\n400 287\n130 295\n44 295\n423 295\n248 291\n203 297\n327 296\n19 299\n522 294\n289 293\n106 289\n116 291\n124 300\n53 298\n495 298\n466 292\n15 284\n72 297\n288 299\n548 299\n251 300\n314 287\n374 289\n525 297\n63 275\n", "50 1000\n363 297\n207 294\n180 300\n191 300\n301 298\n17 290\n263 297\n319 283\n377 287\n182 300\n408 300\n106 295\n16 297\n55 296\n28 300\n37 298\n122 284\n39 295\n252 300\n81 285\n138 288\n121 288\n167 298\n7 296\n520 296\n587 298\n240 300\n243 287\n215 293\n454 299\n672 291\n185 298\n41 294\n252 283\n382 296\n53 296\n51 300\n20 289\n112 300\n392 286\n181 300\n662 299\n170 300\n35 297\n325 300\n15 286\n367 290\n25 297\n181 290\n798 286\n", "50 30000\n43 290\n252 300\n349 279\n59 288\n178 294\n128 288\n209 300\n505 293\n34 297\n290 288\n56 289\n407 295\n91 300\n479 291\n480 289\n255 299\n720 300\n178 300\n402 294\n833 299\n4 294\n12 282\n29 293\n159 292\n14 297\n73 298\n481 300\n353 281\n1090 281\n479 293\n331 299\n264 300\n106 300\n109 299\n105 300\n2 293\n280 299\n325 300\n518 293\n8 299\n811 295\n262 290\n26 289\n451 297\n375 298\n265 297\n132 300\n335 299\n70 300\n347 296\n", "14 560\n7020 -160\n9308 -105\n3488 -299\n5875 -244\n564 -22\n1658 -175\n1565 -294\n3371 -295\n365 -28\n9654 -251\n532 -229\n854 -142\n5100 -188\n937 -288\n", "10 10\n1 1\n9 -5\n9 -6\n10 -2\n2 0\n5 5\n2 8\n10 -9\n5 -2\n4 4\n"], "outputs": ["3\n", "0\n", "0\n", "20\n", "1\n", "0\n", "43\n", "5\n", "6\n", "0\n", "0\n", "20\n", "50\n", "3\n", "50\n", "50\n", "50\n", "50\n", "50\n", "50\n", "50\n", "2\n", "10\n"]}}, {"index": 4038, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nLet's call some square matrix with integer values in its cells palindromic if it doesn't change after the order of rows is reversed and it doesn't change after the order of columns is reversed.\n\nFor example, the following matrices are palindromic: $\\left[ \\begin{array}{l l l}{1} & {3} & {1} \\\\{3} & {1} & {3} \\\\{1} & {3} & {1} \\end{array} \\right] \\quad \\left[ \\begin{array}{l l l l}{1} & {2} & {2} & {1} \\\\{8} & {2} & {2} & {8} \\\\{8} & {2} & {2} & {8} \\\\{1} & {2} & {2} & {1} \\end{array} \\right]$ \n\nThe following matrices are not palindromic because they change after the order of rows is reversed: $\\left[ \\begin{array}{l l l}{1} & {3} & {1} \\\\{3} & {1} & {3} \\\\{2} & {3} & {2} \\end{array} \\right] \\rightarrow \\left[ \\begin{array}{l l l}{2} & {3} & {2} \\\\{3} & {1} & {3} \\\\{1} & {3} & {1} \\end{array} \\right] \\quad \\left[ \\begin{array}{l l l l}{1} & {8} & {8} & {9} \\\\{2} & {4} & {3} & {2} \\\\{1} & {3} & {4} & {1} \\\\{9} & {8} & {8} & {1} \\end{array} \\right] \\rightarrow \\left[ \\begin{array}{l l l l}{9} & {8} & {8} & {1} \\\\{1} & {3} & {4} & {1} \\\\{2} & {4} & {3} & {2} \\\\{1} & {8} & {8} & {9} \\end{array} \\right]$ \n\nThe following matrices are not palindromic because they change after the order of columns is reversed: $\\left[ \\begin{array}{l l l}{1} & {3} & {2} \\\\{3} & {1} & {3} \\\\{1} & {3} & {2} \\end{array} \\right] \\rightarrow \\left[ \\begin{array}{l l l}{2} & {3} & {1} \\\\{3} & {1} & {3} \\\\{2} & {3} & {1} \\end{array} \\right] \\quad \\left[ \\begin{array}{l l l l}{1} & {2} & {1} & {9} \\\\{8} & {4} & {3} & {8} \\\\{8} & {3} & {4} & {8} \\\\{9} & {2} & {1} & {1} \\end{array} \\right] \\rightarrow \\left[ \\begin{array}{l l l l}{9} & {1} & {2} & {1} \\\\{8} & {3} & {4} & {8} \\\\{8} & {4} & {3} & {8} \\\\{1} & {1} & {2} & {9} \\end{array} \\right]$ \n\nYou are given $n^2$ integers. Put them into a matrix of $n$ rows and $n$ columns so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic. If there are multiple answers, print any. If there is no solution, print \"NO\".\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 20$).\n\nThe second line contains $n^2$ integers $a_1, a_2, \\dots, a_{n^2}$ ($1 \\le a_i \\le 1000$) \u2014 the numbers to put into a matrix of $n$ rows and $n$ columns.\n\n\n-----Output-----\n\nIf it is possible to put all of the $n^2$ numbers into a matrix of $n$ rows and $n$ columns so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic, then print \"YES\". Then print $n$ lines with $n$ space-separated numbers \u2014 the resulting matrix.\n\nIf it's impossible to construct any matrix, then print \"NO\".\n\nYou can print each letter in any case (upper or lower). For example, \"YeS\", \"no\" and \"yES\" are all acceptable.\n\n\n-----Examples-----\nInput\n4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n\nOutput\nYES\n1 2 2 1\n8 2 2 8\n8 2 2 8\n1 2 2 1\n\nInput\n3\n1 1 1 1 1 3 3 3 3\n\nOutput\nYES\n1 3 1\n3 1 3\n1 3 1\n\nInput\n4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\n\nOutput\nNO\n\nInput\n1\n10\n\nOutput\nYES\n10 \n\n\n\n-----Note-----\n\nNote that there exist multiple answers for the first two examples.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n", "3\n1 1 1 1 1 3 3 3 3\n", "4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\n", "1\n10\n", "2\n3 3 3 3\n", "7\n5 9 5 4 1 9 8 4 5 1 4 10 7 7 8 4 2 4 4 5 4 4 10 3 4 6 8 1 9 9 5 6 8 7 1 8 6 6 7 5 3 1 1 4 7 2 3 3 8\n", "7\n1 8 9 6 4 7 4 3 5 5 4 2 1 8 10 7 7 7 8 8 1 10 1 4 6 2 2 1 6 9 6 1 6 4 8 10 4 4 7 3 4 7 10 2 2 9 4 3 3\n", "3\n1 1 2 2 3 3 4 4 5\n", "4\n1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n", "3\n1 1 2 2 3 3 4 4 4\n", "5\n4 4 3 5 1 1 2 3 2 2 1 3 3 2 2 5 3 4 3 3 2 2 4 1 3\n", "5\n1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 6 6 7 7 8 8 9\n", "2\n1000 1000 1000 1000\n", "3\n17 17 18 18 19 19 20 20 21\n", "3\n1 4 3 3 5 3 1 4 5\n", "3\n17 17 18 18 19 19 20 20 219\n", "3\n3 4 2 1 1 3 2 3 4\n", "3\n1 2 2 3 3 4 4 5 5\n", "3\n19 19 7 7 20 20 21 21 3\n", "3\n13 13 42 42 69 69 420 420 666\n", "3\n1 1 2 2 4 4 8 8 16\n", "5\n2 2 2 2 2 2 2 2 2 3 3 3 3 9 9 9 9 7 7 8 8 6 6 5 5\n"], "outputs": ["YES\n1 2 2 1 \n2 8 8 2 \n2 8 8 2 \n1 2 2 1 \n", "YES\n1 3 1 \n3 1 3 \n1 3 1 \n", "NO\n", "YES\n10 \n", "YES\n3 3 \n3 3 \n", "YES\n1 3 4 2 4 3 1 \n4 5 6 5 6 5 4 \n7 8 9 10 9 8 7 \n1 4 8 7 8 4 1 \n7 8 9 10 9 8 7 \n4 5 6 5 6 5 4 \n1 3 4 2 4 3 1 \n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 2 4 2 1 \n3 3 5 3 3 \n2 4 2 4 2 \n3 3 5 3 3 \n1 2 4 2 1 \n", "YES\n1 2 6 2 1 \n3 4 8 4 3 \n5 7 9 7 5 \n3 4 8 4 3 \n1 2 6 2 1 \n", "YES\n1000 1000 \n1000 1000 \n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n2 2 6 2 2 \n3 9 8 9 3 \n5 7 2 7 5 \n3 9 8 9 3 \n2 2 6 2 2 \n"]}, "test_in_outs": {"inputs": ["3\n2 2 4 4 8 8 16 16 32\n", "7\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3\n", "3\n1 1 1 1 2 3 3 4 4\n", "9\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5\n", "7\n1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 12 13\n", "3\n1 1 6 6 2 3 3 4 4\n", "5\n3 3 4 4 5 5 5 6 6 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2\n", "11\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 11\n", "3\n1 1 1 1 1 1 1 1 2\n", "13\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11\n", "13\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 15\n", "9\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 11\n", "9\n1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 12 13 13 13 13 14 14 14 14 15 15 15 15 16 16 16 16 17 17 17 17 18 18 18 18 19 19 19 19 20 20 20 20 21\n", "7\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 7\n", "9\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7\n", "13\n1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 12 13 13 13 13 14 14 14 14 15 15 15 15 16 16 16 16 17 17 17 17 18 18 18 18 19 19 19 19 20 20 20 20 21 21 21 21 22 22 22 22 23 23 23 23 24 24 24 24 25 25 25 25 26 26 26 26 27 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 32 32 32 32 33 33 33 33 34 34 34 34 35 35 35 35 36 36 36 36 37 37 37 37 38 38 38 38 39 39 39 39 40 40 40 40 41 41 41 41 42 42 42 42 43\n", "3\n1 1 1 1 2 3 3 3 3\n", "5\n1 3 6 3 1 2 4 7 4 2 5 8 9 8 5 2 4 7 4 2 1 3 6 3 1\n", "5\n1 1 1 1 2 2 7 7 3 3 3 3 3 3 4 4 4 4 4 4 4 5 5 6 6\n", "5\n1 1 1 1 2 2 2 2 3 3 3 3 100 11 11 9 9 8 8 7 7 6 6 5 5\n", "5\n2 2 2 2 5 5 6 6 7 9 9 1 1 8 8 1 1 1 1 1 1 1 1 1 1\n", "2\n1 1 1 2\n", "2\n1 1 1 3\n"], "outputs": ["NO\n", "YES\n1 1 1 2 1 1 1 \n1 1 2 3 2 1 1 \n2 2 2 3 2 2 2 \n2 3 3 3 3 3 2 \n2 2 2 3 2 2 2 \n1 1 2 3 2 1 1 \n1 1 1 2 1 1 1 \n", "YES\n1 4 1 \n3 2 3 \n1 4 1 \n", "YES\n1 1 1 1 4 1 1 1 1 \n1 2 2 2 4 2 2 2 1 \n2 2 3 3 4 3 3 2 2 \n3 3 3 4 4 4 3 3 3 \n4 4 4 4 5 4 4 4 4 \n3 3 3 4 4 4 3 3 3 \n2 2 3 3 4 3 3 2 2 \n1 2 2 2 4 2 2 2 1 \n1 1 1 1 4 1 1 1 1 \n", "YES\n1 2 3 10 3 2 1 \n4 5 6 11 6 5 4 \n7 8 9 12 9 8 7 \n10 11 12 13 12 11 10 \n7 8 9 12 9 8 7 \n4 5 6 11 6 5 4 \n1 2 3 10 3 2 1 \n", "NO\n", "YES\n1 1 4 1 1 \n1 2 6 2 1 \n3 5 5 5 3 \n1 2 6 2 1 \n1 1 4 1 1 \n", "YES\n1 1 1 2 2 9 2 2 1 1 1 \n2 3 3 3 4 9 4 3 3 3 2 \n4 4 5 5 5 10 5 5 5 4 4 \n6 6 6 7 7 10 7 7 6 6 6 \n7 8 8 8 9 10 9 8 8 8 7 \n9 9 10 10 10 11 10 10 10 9 9 \n7 8 8 8 9 10 9 8 8 8 7 \n6 6 6 7 7 10 7 7 6 6 6 \n4 4 5 5 5 10 5 5 5 4 4 \n2 3 3 3 4 9 4 3 3 3 2 \n1 1 1 2 2 9 2 2 1 1 1 \n", "YES\n1 1 1 \n1 2 1 \n1 1 1 \n", "YES\n1 1 1 1 2 2 10 2 2 1 1 1 1 \n2 2 3 3 3 3 10 3 3 3 3 2 2 \n4 4 4 4 5 5 10 5 5 4 4 4 4 \n5 5 6 6 6 6 10 6 6 6 6 5 5 \n7 7 7 7 8 8 11 8 8 7 7 7 7 \n8 8 9 9 9 9 11 9 9 9 9 8 8 \n10 10 10 10 11 11 11 11 11 10 10 10 10 \n8 8 9 9 9 9 11 9 9 9 9 8 8 \n7 7 7 7 8 8 11 8 8 7 7 7 7 \n5 5 6 6 6 6 10 6 6 6 6 5 5 \n4 4 4 4 5 5 10 5 5 4 4 4 4 \n2 2 3 3 3 3 10 3 3 3 3 2 2 \n1 1 1 1 2 2 10 2 2 1 1 1 1 \n", "YES\n1 1 1 2 2 2 13 2 2 2 1 1 1 \n3 3 3 4 4 4 13 4 4 4 3 3 3 \n5 5 5 6 6 6 13 6 6 6 5 5 5 \n7 7 7 8 8 8 14 8 8 8 7 7 7 \n9 9 9 10 10 10 14 10 10 10 9 9 9 \n11 11 11 12 12 12 14 12 12 12 11 11 11 \n13 13 13 14 14 14 15 14 14 14 13 13 13 \n11 11 11 12 12 12 14 12 12 12 11 11 11 \n9 9 9 10 10 10 14 10 10 10 9 9 9 \n7 7 7 8 8 8 14 8 8 8 7 7 7 \n5 5 5 6 6 6 13 6 6 6 5 5 5 \n3 3 3 4 4 4 13 4 4 4 3 3 3 \n1 1 1 2 2 2 13 2 2 2 1 1 1 \n", "YES\n1 1 2 2 9 2 2 1 1 \n3 3 4 4 9 4 4 3 3 \n5 5 6 6 10 6 6 5 5 \n7 7 8 8 10 8 8 7 7 \n9 9 10 10 11 10 10 9 9 \n7 7 8 8 10 8 8 7 7 \n5 5 6 6 10 6 6 5 5 \n3 3 4 4 9 4 4 3 3 \n1 1 2 2 9 2 2 1 1 \n", "YES\n1 2 3 4 17 4 3 2 1 \n5 6 7 8 18 8 7 6 5 \n9 10 11 12 19 12 11 10 9 \n13 14 15 16 20 16 15 14 13 \n17 18 19 20 21 20 19 18 17 \n13 14 15 16 20 16 15 14 13 \n9 10 11 12 19 12 11 10 9 \n5 6 7 8 18 8 7 6 5 \n1 2 3 4 17 4 3 2 1 \n", "YES\n1 1 2 5 2 1 1 \n2 3 3 6 3 3 2 \n4 4 5 6 5 4 4 \n5 6 6 7 6 6 5 \n4 4 5 6 5 4 4 \n2 3 3 6 3 3 2 \n1 1 2 5 2 1 1 \n", "YES\n1 1 1 2 6 2 1 1 1 \n2 2 3 3 6 3 3 2 2 \n3 4 4 4 7 4 4 4 3 \n5 5 5 6 7 6 5 5 5 \n6 6 7 7 7 7 7 6 6 \n5 5 5 6 7 6 5 5 5 \n3 4 4 4 7 4 4 4 3 \n2 2 3 3 6 3 3 2 2 \n1 1 1 2 6 2 1 1 1 \n", "YES\n1 2 3 4 5 6 37 6 5 4 3 2 1 \n7 8 9 10 11 12 38 12 11 10 9 8 7 \n13 14 15 16 17 18 39 18 17 16 15 14 13 \n19 20 21 22 23 24 40 24 23 22 21 20 19 \n25 26 27 28 29 30 41 30 29 28 27 26 25 \n31 32 33 34 35 36 42 36 35 34 33 32 31 \n37 38 39 40 41 42 43 42 41 40 39 38 37 \n31 32 33 34 35 36 42 36 35 34 33 32 31 \n25 26 27 28 29 30 41 30 29 28 27 26 25 \n19 20 21 22 23 24 40 24 23 22 21 20 19 \n13 14 15 16 17 18 39 18 17 16 15 14 13 \n7 8 9 10 11 12 38 12 11 10 9 8 7 \n1 2 3 4 5 6 37 6 5 4 3 2 1 \n", "YES\n1 3 1 \n3 2 3 \n1 3 1 \n", "YES\n1 2 6 2 1 \n3 4 8 4 3 \n5 7 9 7 5 \n3 4 8 4 3 \n1 2 6 2 1 \n", "NO\n", "NO\n", "YES\n1 1 6 1 1 \n1 2 9 2 1 \n5 8 7 8 5 \n1 2 9 2 1 \n1 1 6 1 1 \n", "NO\n", "NO\n"]}}, {"index": 4039, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThe only difference between easy and hard versions is that you should complete all the projects in easy version but this is not necessary in hard version.\n\nPolycarp is a very famous freelancer. His current rating is $r$ units.\n\nSome very rich customers asked him to complete some projects for their companies. To complete the $i$-th project, Polycarp needs to have at least $a_i$ units of rating; after he completes this project, his rating will change by $b_i$ (his rating will increase or decrease by $b_i$) ($b_i$ can be positive or negative). Polycarp's rating should not fall below zero because then people won't trust such a low rated freelancer.\n\nIs it possible to complete all the projects? Formally, write a program to check if such an order of the projects exists, that Polycarp has enough rating before starting each project, and he has non-negative rating after completing each project.\n\nIn other words, you have to check that there exists such an order of projects in which Polycarp will complete them, so he has enough rating before starting each project, and has non-negative rating after completing each project.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $r$ ($1 \\le n \\le 100, 1 \\le r \\le 30000$) \u2014 the number of projects and the initial rating of Polycarp, respectively.\n\nThe next $n$ lines contain projects, one per line. The $i$-th project is represented as a pair of integers $a_i$ and $b_i$ ($1 \\le a_i \\le 30000$, $-300 \\le b_i \\le 300$) \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\n\n\n-----Output-----\n\nPrint \"YES\" or \"NO\".\n\n\n-----Examples-----\nInput\n3 4\n4 6\n10 -2\n8 -1\n\nOutput\nYES\n\nInput\n3 5\n4 -5\n4 -2\n1 3\n\nOutput\nYES\n\nInput\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nYES\n\nInput\n3 10\n10 0\n10 -10\n30 0\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example, the possible order is: $1, 2, 3$.\n\nIn the second example, the possible order is: $2, 3, 1$.\n\nIn the third example, the possible order is: $3, 1, 4, 2$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["3 4\n4 6\n10 -2\n8 -1\n", "3 5\n4 -5\n4 -2\n1 3\n", "4 4\n5 2\n5 -3\n2 1\n4 -2\n", "3 10\n10 0\n10 -10\n30 0\n", "52 276\n303 6\n222 -6\n28 0\n93 6\n96 7\n223 0\n154 -4\n309 -7\n329 6\n94 3\n11 -3\n126 0\n210 2\n101 7\n154 4\n54 6\n33 5\n324 -4\n86 5\n220 -2\n137 -1\n49 -4\n109 6\n107 4\n270 2\n209 -2\n235 -5\n39 1\n110 5\n116 4\n155 1\n37 -1\n193 0\n356 -1\n320 -6\n261 -7\n316 6\n137 2\n165 2\n350 7\n224 6\n89 3\n149 7\n348 3\n271 3\n52 -5\n186 -5\n13 0\n173 -6\n285 2\n20 -5\n152 -5\n", "1 1\n1 0\n", "2 2\n1 2\n2 -2\n", "3 1\n1 0\n1 -1\n3 0\n", "4 1\n3 -1\n1 4\n2 -4\n4 2\n", "5 1\n4 5\n2 3\n4 5\n2 1\n5 3\n", "6 1\n4 6\n5 -6\n4 -3\n5 2\n2 4\n3 -5\n", "7 6\n2 3\n5 3\n7 2\n7 -1\n4 -4\n3 -4\n6 -6\n", "8 1\n2 8\n2 -6\n6 -5\n7 5\n6 8\n6 8\n2 5\n1 -2\n", "9 9\n9 -6\n1 -9\n5 -8\n7 -3\n4 1\n9 1\n1 -1\n1 -8\n7 8\n", "10 1\n7 -10\n2 -2\n7 5\n1 8\n10 -10\n5 6\n7 -9\n1 6\n6 4\n3 -2\n", "11 1\n6 -8\n4 11\n5 -10\n5 2\n8 7\n9 -1\n7 -10\n3 -10\n2 6\n3 4\n7 8\n", "12 10\n11 -12\n11 -5\n7 6\n2 1\n12 -2\n3 -12\n4 -12\n3 -11\n9 0\n9 4\n2 12\n5 -5\n", "13 11\n11 -7\n9 -11\n12 8\n12 4\n11 -12\n6 -4\n11 5\n5 -13\n5 -8\n10 2\n11 -8\n13 -11\n7 -10\n", "14 7\n4 -12\n5 -5\n4 -10\n14 3\n1 6\n4 -12\n6 -10\n4 -8\n5 -2\n2 -10\n9 -6\n1 6\n7 -4\n11 9\n", "15 11\n5 1\n1 -7\n14 6\n5 -7\n9 -3\n12 10\n9 -8\n8 -11\n8 12\n3 -1\n2 -1\n13 3\n13 -12\n3 12\n3 -5\n", "16 8\n16 -4\n12 15\n4 15\n13 10\n9 -4\n1 7\n16 -4\n1 -5\n13 8\n14 0\n8 -13\n10 11\n16 8\n10 6\n3 -5\n11 -8\n", "17 3\n12 -6\n7 -8\n14 -2\n4 -5\n8 0\n7 9\n17 -12\n10 -4\n2 -8\n16 -14\n4 1\n8 4\n14 -15\n3 13\n17 -1\n9 8\n11 -9\n"], "outputs": ["YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "NO\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n"]}, "test_in_outs": {"inputs": ["18 4\n3 15\n7 3\n15 16\n18 -1\n10 10\n4 3\n2 18\n5 -2\n9 -5\n15 12\n8 5\n16 -7\n16 -9\n16 0\n8 8\n14 2\n8 -4\n13 -15\n", "19 11\n12 -10\n17 -18\n8 15\n5 4\n16 -6\n11 9\n10 -2\n2 -6\n8 -10\n8 -8\n8 13\n3 -12\n18 -11\n3 19\n16 19\n12 8\n15 4\n8 -16\n18 -14\n", "20 10\n19 -20\n7 4\n19 6\n10 -10\n13 4\n4 4\n19 20\n9 -9\n19 8\n13 9\n5 -16\n12 -1\n9 -7\n15 7\n6 -20\n2 -11\n1 -14\n13 -18\n12 -19\n6 19\n", "58 168\n25 -3\n70 -3\n169 2\n182 -4\n183 2\n178 4\n14 2\n18 0\n167 3\n8 4\n215 -4\n146 -3\n229 1\n27 3\n88 3\n202 4\n208 3\n33 2\n161 -4\n87 -1\n115 0\n175 2\n220 -4\n119 3\n188 -4\n50 1\n71 -2\n118 4\n55 1\n55 -4\n144 0\n66 -3\n90 -2\n147 3\n83 0\n111 -2\n10 1\n106 4\n117 -1\n43 3\n36 0\n227 -4\n107 -2\n106 4\n164 -1\n26 3\n227 -4\n202 -3\n176 4\n84 -1\n161 -2\n199 2\n29 2\n13 -3\n194 2\n110 1\n191 2\n92 2\n", "4 2\n3 0\n2 -3\n2 -1\n2 2\n", "3 10\n7 6\n9 -13\n4 -3\n", "6 12\n15 15\n25 -26\n8 3\n11 -6\n26 -19\n26 23\n", "9 4\n3 3\n7 0\n2 0\n5 4\n7 -3\n7 -7\n7 -6\n6 5\n5 0\n", "1 100\n200 -100\n", "2 4\n2 -1\n4 -3\n", "10 10\n1 1\n9 -5\n9 -6\n10 -2\n2 0\n5 5\n2 8\n10 -9\n5 -2\n4 4\n", "2 1000\n900 -1\n1000 -101\n", "6 104\n100 -99\n99 -1\n98 -1\n97 -1\n96 -1\n95 -1\n", "3 110\n100 -25\n90 -10\n70 -10\n", "3 100\n98 -50\n50 -1\n50 -1\n", "20 30000\n29889 -298\n29133 -283\n29949 -296\n29323 -297\n29642 -287\n29863 -299\n29962 -300\n29906 -297\n29705 -295\n29967 -296\n29804 -295\n29886 -295\n29984 -297\n29943 -298\n29711 -300\n29685 -295\n29805 -293\n29994 -292\n29472 -297\n29909 -296\n", "2 1000\n1000 -101\n900 -1\n", "3 20\n7 -13\n5 -4\n4 -3\n", "2 10\n10 -1\n10 -1\n", "1 4\n5 -3\n", "3 100\n96 -50\n50 -2\n50 -2\n", "10 300\n300 -1\n299 -1\n298 -1\n297 -1\n296 -1\n295 -1\n294 -1\n293 -1\n292 -1\n291 -1\n", "3 20\n16 -6\n14 -1\n15 -3\n"], "outputs": ["YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "NO\n", "NO\n", "YES\n", "NO\n", "NO\n", "YES\n", "YES\n", "YES\n"]}}, {"index": 4040, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThere is a river of width $n$. The left bank of the river is cell $0$ and the right bank is cell $n + 1$ (more formally, the river can be represented as a sequence of $n + 2$ cells numbered from $0$ to $n + 1$). There are also $m$ wooden platforms on a river, the $i$-th platform has length $c_i$ (so the $i$-th platform takes $c_i$ consecutive cells of the river). It is guaranteed that the sum of lengths of platforms does not exceed $n$.\n\nYou are standing at $0$ and want to reach $n+1$ somehow. If you are standing at the position $x$, you can jump to any position in the range $[x + 1; x + d]$. However you don't really like the water so you can jump only to such cells that belong to some wooden platform. For example, if $d=1$, you can jump only to the next position (if it belongs to the wooden platform). You can assume that cells $0$ and $n+1$ belong to wooden platforms.\n\nYou want to know if it is possible to reach $n+1$ from $0$ if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms.\n\nNote that you should move platforms until you start jumping (in other words, you first move the platforms and then start jumping).\n\nFor example, if $n=7$, $m=3$, $d=2$ and $c = [1, 2, 1]$, then one of the ways to reach $8$ from $0$ is follow:\n\n [Image] The first example: $n=7$. \n\n\n-----Input-----\n\nThe first line of the input contains three integers $n$, $m$ and $d$ ($1 \\le n, m, d \\le 1000, m \\le n$) \u2014 the width of the river, the number of platforms and the maximum distance of your jump, correspondingly.\n\nThe second line of the input contains $m$ integers $c_1, c_2, \\dots, c_m$ ($1 \\le c_i \\le n, \\sum\\limits_{i=1}^{m} c_i \\le n$), where $c_i$ is the length of the $i$-th platform.\n\n\n-----Output-----\n\nIf it is impossible to reach $n+1$ from $0$, print NO in the first line. Otherwise, print YES in the first line and the array $a$ of length $n$ in the second line \u2014 the sequence of river cells (excluding cell $0$ and cell $n + 1$).\n\nIf the cell $i$ does not belong to any platform, $a_i$ should be $0$. Otherwise, it should be equal to the index of the platform ($1$-indexed, platforms are numbered from $1$ to $m$ in order of input) to which the cell $i$ belongs.\n\nNote that all $a_i$ equal to $1$ should form a contiguous subsegment of the array $a$ of length $c_1$, all $a_i$ equal to $2$ should form a contiguous subsegment of the array $a$ of length $c_2$, ..., all $a_i$ equal to $m$ should form a contiguous subsegment of the array $a$ of length $c_m$. The leftmost position of $2$ in $a$ should be greater than the rightmost position of $1$, the leftmost position of $3$ in $a$ should be greater than the rightmost position of $2$, ..., the leftmost position of $m$ in $a$ should be greater than the rightmost position of $m-1$.\n\nSee example outputs for better understanding.\n\n\n-----Examples-----\nInput\n7 3 2\n1 2 1\n\nOutput\nYES\n0 1 0 2 2 0 3 \n\nInput\n10 1 11\n1\n\nOutput\nYES\n0 0 0 0 0 0 0 0 0 1 \n\nInput\n10 1 5\n2\n\nOutput\nYES\n0 0 0 0 1 1 0 0 0 0 \n\n\n\n-----Note-----\n\nConsider the first example: the answer is $[0, 1, 0, 2, 2, 0, 3]$. The sequence of jumps you perform is $0 \\rightarrow 2 \\rightarrow 4 \\rightarrow 5 \\rightarrow 7 \\rightarrow 8$.\n\nConsider the second example: it does not matter how to place the platform because you always can jump from $0$ to $11$.\n\nConsider the third example: the answer is $[0, 0, 0, 0, 1, 1, 0, 0, 0, 0]$. The sequence of jumps you perform is $0 \\rightarrow 5 \\rightarrow 6 \\rightarrow 11$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["7 3 2\n1 2 1\n", "10 1 11\n1\n", "10 1 5\n2\n", "1000 3 9\n106 118 99\n", "1000 20 8\n3 6 3 4 3 5 3 5 5 5 3 1 3 8 2 4 4 5 3 2\n", "1000 16 2\n20 13 16 13 22 10 18 21 18 20 20 16 19 9 11 22\n", "5 1 2\n1\n", "1 1 1\n1\n", "2 1 1\n1\n", "4 1 2\n1\n", "15 2 5\n1 1\n", "10 10 1\n1 1 1 1 1 1 1 1 1 1\n", "5 2 1\n1 1\n", "7 1 1\n6\n", "2 2 1\n1 1\n", "100 1 49\n100\n", "10 9 1\n1 1 1 1 1 1 1 1 1\n", "50 4 7\n4 7 10 3\n", "10 1 5\n1\n", "8 1 4\n1\n", "100 1 49\n3\n", "6 3 1\n1 2 3\n"], "outputs": ["YES\n0 1 0 2 2 0 3 \n", "YES\n0 0 0 0 0 0 0 0 0 1 \n", "YES\n0 0 0 0 1 1 0 0 0 0 \n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 \n", "NO\n", "NO\n", "NO\n", "YES\n1 2 3 4 5 6 7 8 9 10 \n", "NO\n", "NO\n", "YES\n1 2 \n", "YES\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n", "NO\n", "YES\n0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 2 2 2 2 2 2 2 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 4 4 4 0 0 \n", "NO\n", "NO\n", "NO\n", "YES\n1 2 2 3 3 3 \n"]}, "test_in_outs": {"inputs": ["1000 11 33\n2 1 5 1 3 1 3 1 3 2 1\n", "1000 6 25\n24 19 21 18 28 16\n", "1000 77 3\n2 3 2 1 3 3 3 3 4 5 4 3 3 1 3 5 1 4 3 2 5 3 2 2 1 4 4 3 1 2 3 2 1 4 1 3 3 2 4 3 1 5 1 3 4 4 2 3 2 4 3 4 3 1 6 5 2 3 4 3 3 5 5 2 1 2 2 3 2 2 5 1 3 5 5 4 2\n", "6 1 2\n2\n", "7 1 2\n4\n", "93 66 2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 3 21\n", "8 4 1\n1 1 4 1\n", "12 3 2\n1 2 1\n", "3 1 1\n2\n", "5 1 2\n2\n", "5 4 1\n1 1 1 1\n", "4 4 1\n1 1 1 1\n", "8 3 2\n1 1 1\n", "12 1 4\n5\n", "9 3 2\n1 2 1\n", "4 2 1\n2 1\n", "11 1 5\n2\n", "10 1 4\n10\n", "8 2 2\n2 2\n", "20 20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "13 1 4\n6\n", "5 2 1\n2 3\n", "7 2 2\n1 2\n"], "outputs": ["NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 64 64 64 64 64 65 65 65 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 \n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 2 3 4 \n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 1 1 1 1 1 1 1 1 1 \n", "NO\n", "YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \n", "NO\n", "YES\n1 1 2 2 2 \n", "NO\n"]}}, {"index": 4041, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nThe only difference between easy and hard versions is the length of the string.\n\nYou are given a string $s$ and a string $t$, both consisting only of lowercase Latin letters. It is guaranteed that $t$ can be obtained from $s$ by removing some (possibly, zero) number of characters (not necessary contiguous) from $s$ without changing order of remaining characters (in other words, it is guaranteed that $t$ is a subsequence of $s$).\n\nFor example, the strings \"test\", \"tst\", \"tt\", \"et\" and \"\" are subsequences of the string \"test\". But the strings \"tset\", \"se\", \"contest\" are not subsequences of the string \"test\".\n\nYou want to remove some substring (contiguous subsequence) from $s$ of maximum possible length such that after removing this substring $t$ will remain a subsequence of $s$.\n\nIf you want to remove the substring $s[l;r]$ then the string $s$ will be transformed to $s_1 s_2 \\dots s_{l-1} s_{r+1} s_{r+2} \\dots s_{|s|-1} s_{|s|}$ (where $|s|$ is the length of $s$).\n\nYour task is to find the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.\n\n\n-----Input-----\n\nThe first line of the input contains one string $s$ consisting of at least $1$ and at most $200$ lowercase Latin letters.\n\nThe second line of the input contains one string $t$ consisting of at least $1$ and at most $200$ lowercase Latin letters.\n\nIt is guaranteed that $t$ is a subsequence of $s$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.\n\n\n-----Examples-----\nInput\nbbaba\nbb\n\nOutput\n3\n\nInput\nbaaba\nab\n\nOutput\n2\n\nInput\nabcde\nabcde\n\nOutput\n0\n\nInput\nasdfasdf\nfasd\n\nOutput\n3\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["bbaba\nbb\n", "baaba\nab\n", "abcde\nabcde\n", "asdfasdf\nfasd\n", "zywmerhahxlqsjekpqsdqxnjiduyjrytswiweohctztgpiorwimhjmdfofqynyggcrtzslbyvkuvqrsgwyacyvcuathplliwwshusluiqwuhutnzwvuchfedhwwfdzizltdxibtsaocpnqezstblgkfdcvfsjjyzwalkksumsaljqljmmkcyejwwdkolmcgmodoiclte\nzywmehahxlqjekqsdqjidytswwztgiowimhmffqygctzslbykurwacyvcuaplwshsluiqwuhutnwchfewwfdizttcpnqestgkfvsjylkksumaljmmkcjwwdkolmcgodcle\n", "nqlswpkupyawfzygzjfntqpivmudprpmtkhwjcoabkkxfemjekxvnjikbvtbzgrxyacflvausuwgqfxvfcgxphzeiwpitswykvcsyspvimmynlyeldkqjsogjhszcqtvteiefdcissquzeynmjdhazcygrypyzjhjhsntegsuryjgpknwvnjxplztmjszidqkihuxgzc\nnlwkupywfzgzftqpiudprmkhwcozenmjdhacygryjhhntgugpkwvnjxplztszikihgc\n", "mejfmlmclpqwopscpxxtkamtodhogweqtpigxgsbmsdvhcvyenqwsqpuxegugrgkopjwulnuqbqwqsarnymoursenotgeakbslepaacvwiydnqgnetsjaazblnriaqcmolxplvqtfdqtcmwduwrnmemtvlkgbbzkvaplprscuaqfvjlftkblwddcgwsqsfecoqibpncs\nm\n", "kbuwmzldbajqgbdyeqqyuvdwsdzvjicqgsadjgruebcsxuhgftlykvuevsldvapqoxkrwjbwjjqquogxkpradzauxxlhrayprgnwxwumabxdojztankeqmraeqbbggrltdvcpiozbrvwhxhjpurwachimqrxrplcavtpaqzemxhrvagbngyqhacuxfbpkwqxyixdfmrj\nkbmrxrplcavtpaqemxhagbghacuxbpkwqxidmj\n", "aplxwwvctglkkvfdyfpegleljcjtaxhdjnfonpedzeyvqprewgqwalqafebjvbjmpimoujgcfcnycugvdmgkjeaeggmnrspkydplacliklknqifoenxwxmtxsmakekewtkglligipuhpicngocrzhehelimoiocusgtuzkodlyqeetsiionfrphuoznnnobldhvjagmx\naplxwvctgdjfopdzevqpregwqafejvbjpmoujgccncumgkjeaeggnspdplclknifenxxmakekewgligiphingoczheheioiocustuzkodlyeesinfrpuonnobldvagmx\n", "toimpgygoklxroowdhpacrtrrwmkhcgcpidapeyxrjmiqgilveimnazyydvnujtqpenfkeqdbylfdinompxupfwvirxohaampqihjueasygkucweptgcowjibgnwyqetynykgoujeargnhjbmntfovwusqavpdwtpnpqpkcgaxbhgdxloyealksmgkxprtpfugixdyfn\npgygkxrowdpcrmkcgciapxjmiqgveimnazydvnujteqdblinmpxpvxoaampesygucweptgcignwytgurgnhjtfovwusqavdtnppcxgdxyalksgkxtid\n", "ziurxtzxixmsmewfuffsqdkpphssdcgybwtmzavkosqtmcntspzvftqybaldjllvgttblectspqinfdhhnpvkcbwjlqlquajueqsgymyekuswjctumsbnvvaiinxjlzcnyixfaykolkeogufvzvhnatqtelgjkqfvexghiznwubwihjkznkhepjzrnyzftmimqtlihpn\nzurzximmewfuffskppsdcybwmzavkosqtmctspvftybaljlgtltsqinfdhhpvkcwjlqlqymykusctumsbnvvainxjlcyxfykokeguvvhategjfxinuwihjznkhepjznzftmmqtlihpn\n", "sowebxtwfdqpqkirbgcwzgglhkochlvjydmcksbenikriedfgrutoaqbnfdfzhqzacppcvznjnwmdadlxhowejzderdglkskznacjqqdrgmbnfxhmvgktivxrczqeafsapcbnjpccrbccutaabzwdtvbdpqduhbpcmlfkakimayhdqxhqvajpcfodvkmomvlimooncqi\nso\n", "m\nm\n", "td\nt\n", "ipz\nz\n", "cel\nc\n", "xmxcpstetnnyxqbdbfsqhyjpdihhcpbxfugnmwhjadphwsialqafdvunwjqpifdqdwoxrkyetoyafjiyaosahwxfoxejwtvtousuailafdlukqfyealdakjxgfagdltxgteasiclclbdutzdxokclotgabcqbytryszetctfvfmxrfouepwyrmvnvvvhoppbcnlkdzio\npstnnyxqbfqhdipbxfgmaphialqdvunwjqpifdqdwoxketofjyaohxfoejwtousuaiaukqfyaldakjfgtxgeasiclcldtxokotgabqbrstcffxrfopyrmnvvhoppbcnlkdz\n", "pibvxshjediuehnmfyvprhjtghzadeavjgnlvjwaqzlbexrlrnijokvqirbgfpnwwgnuptzotcdoooorqyqipbfawdslkvqrscnguydrywwzazwohlufbverfvoblvygevornmproyvsnjdxscgyrjmcqsmamfaugfmluuidnkmxbrzfzvmchopukbrlkuinxgridioo\npdrwwzzwohlurfvoblvygeonmpoyvjdxscjmcqsmfauguikmxbzfzmchopukbrluidioo\n", "gecewmzjpvbpuvgtxiranywdxlneejahynrmfrpysxwqeymmwtotktkhncrtueulewaunbtcqnglwktiwkkkusjxhnfosjsoujaggwpuaceisnghxvgbdbeadwxshclpmocbyxqqrhthvwpedhorfeytuucbaaxrdrwvwayzadnqxfnhwkeevxzsdytxocjvpqvyxbch\nh\n", "eseflxqdffomkoxxhdicryombxleqlvckmqfxxpwipivffhoozteiinpelbaukuifsoygjwyxjlqtazufqrafadzulucrgbtqfsxlnrvauxpojwbpgyzwentjokrkvkepazivjvtxsepruqorgmhvjfnjintftbvnqfwmapmcuilsbkmjgdulgirtpfpywawfpjpbxhy\nfnntftvnqwmmulbkmdgifpywfpjpxhy\n", "ppneeasyjzorefvertisgxykuoqsugzppvfoubkybksuwtmmepnauteyemvtwwweftteccshepmnoxoglvpinlcduflxybdkvmjrwxcedsfjskiuxizwlckchsycmbwnlasriohmxwkkqdrpahmeuabdchfmyhbanluynzaaknssnjzbqwhudbupwhqfdvwdbhebykhg\nppnuqsppvfoubkybksuwtmmepnauteemvtwweftcsepmnooglvplcuxybdkvjrxcesfskiuzckchsycmwlaomxwkpahmabcmhanlknsnjzbwhudbupwdwdbhebyhg\n", "izoiweukqszkkhwapzxyotbaarpqxbybsjxilhylbbjbvoedrezyluaabsfzvtxxvncdwxrlfdtfvbfoqwlzqwneimwzpoygfdcldmxdhoxzensxlspituzocvzzrfomhggrwurdccgfoorvhyzsdkpjhwakuoxwdjhzaalanyzwuuqwlrtmvmdraleyusjqdyxuztvc\noukzkkhwazxbaarpbybsjxlylbbjbrezlasfzvtxvcdxrltffoqwlzqwneizpoygfdcmdxzesxlsitozzrfomhggrwrcfoorvhyzdpjhakuoxdjhzaalanzwqlrtmmraleyjyxutc\n"], "outputs": ["3\n", "2\n", "0\n", "3\n", "5\n", "101\n", "199\n", "150\n", "21\n", "6\n", "8\n", "198\n", "0\n", "1\n", "2\n", "2\n", "4\n", "101\n", "199\n", "150\n", "21\n", "4\n"]}, "test_in_outs": {"inputs": ["qmrzsrvfllfraflralrwlcfjxupnlomnbeuvipcyxxmksztljxqaoqnptwwemhgswpovpnvoqajaqzxpmtqarpgdrgwuuferbhjjowmljtaoiidzkrcaawzomruigpwzgsksgdkbdbrjwaszgdwreyztdctwacfmujdgxvjqoclueiwdgvjcfpfbpmbbmcufjiitndis\nqmrzsrflrrwlfjxupnlmevipcyxxmkstljaoqnptweswpovpnvoqajaxptarpgdgwufbhjjoljtiidcawzorugpwzgskgddbrazdwreyztdctcujgxvjqlewvjpfpmbbcjtndis\n", "trlypzzcpqrdgejwjolsefdtaceyixfdnwbphfwutzcweeqjsfqdcuftiscihqbflemognctgylfgtwqhcqjmutymwnxzoobfxopbsduyrvdaptgqecwjtliifaytgqdlbckulbyrpqfcbxmwxzboidqmzeghltlvbobpdidklzrurmfrigprxqowfjeiapiodipbhpt\npt\n", "dexradrxekhwsmctzdqyrqctyrduvazzfybzlwdrhjdxawojhilywadneuijwuuwjbnhdjitjekszqjmnhrxulxcwfrwfzjlkzagaygllqzbehxdyiaztrcpjtvrvtmzkhvgnopwdnssyvaagatdvxgwectdpelvjmsgovdxrdeffawhwcdkospyjziiyiwyoofgnxzq\ndexrdekhwczqrqtyduvzzyblwhdaojhilwanijuuwbnhjitjeksqjmnhrulxwfwflkgagllbhxyiaztcpjvrvmzkhvnnsaadvxwectdpevjsgodxdefwhwcdospyjziiwoogxz\n", "lyvutlpllxxqnttfihibqdntcxbmnzpyfcpfmcqiazztsesrumkfaksqieruntdgptwgzgsuwezxnzouiyducrcksnxjfnlhiekbnqxdakumkwgunlliwtnkdsletbyeqfxqeitljzgmnqqccuhasbcrarjozprcmxcqvxvjqvjfdljvhvjyrissqopfdcbsajaolxiy\nlvuplxntihiqdncbmpyfcfqazztsrumkfasqieuntgtgzguwxnzouiydccksnxjfhieb\n", "ynqvahidlgpkijhypxuxczcgmofasasypqwmloybyaxcjetnwupkkhbfakbkyispgcntzfzokejakhkyzdnndysopyhxivzgfgpqlevpfkyusruchbturvtkmqmmkwdrcnpeotelidokcydqjgmikqwbrulezdkxjrpcfzeblkcgyivijuxquvbeofjgpjlthbiqapdm\ny\n", "pofvbxtueyzxgzcrthooeacytrsysourmdvkfhebuqpoofbixkxrveqijcluhgaqbeljezhpeiffpeaejkvvuhbhrlhlwuwpkbmgejmrelsnzlrubrgmqowtfucbjzvqoqcbvrqqljzvlscrrulfahdijkzosggdocqmhpbszktbucsfnfurklmlnxcshtdjhrherwxr\npofvbxtuezgrtooacytrssoumdvkuobxr\n", "rycgapxwyctxltrpateousbjtijdfsrxxgexpbiwyijynvomwanlrqbzqbkoaikqyblojwamoqlgoxxtvqatcrmhulzcubrtaguxysvepnrvtppeuzgnncusougnuzcayncuedvadkezhtkqucmfvgtdzcyhlztdtdkaiocdmtmoawzvfojvkdfzlaudxxchpnbbgtkp\nrycgpxwytxltrpaeusbjijdxxgexpbiwyjynvoalrbzqaikqywamoloxxtvqrmhulcubtgxysvepnrpzgnunucncuedvequfgtcyhltdtdaiodtmazfov\n", "grkhejdykjmieztowpjdazxmjqlccvlwjjspiupkmhbpuvjfkncwoiastztyekhrpsfwkqwmtrznggbkfwzrtuwswbgowsemwpmssbkzorkmjauqzpsdylnhapjopgiswihierbluojvarvrakdslncrhinbjxyxptiojddnnvxsedklyjehbvsinezsppztbpqswutf\nrkhjdykjitopjdxmqlclwjspiupkmhbufknciatzterpsfkmtrznggbkfwzrtwswgowsempsbkzokmauzpsdynhapjpgswibljvaakslncnbjxtjddnnvxyevszspztbpqstf\n", "kxzkueqzheeolprfncwxyxgqqlocajzkusopvpwowdxubsvvtfvnrkyijoxqjawzkvfkainowbxdzcxbgrywttplukaorxvtimqxonumuvsqyfobzorqqsohazhjyvscjhtlgbmetpigfzhtcjipiorcrcsvvdofflgkqzymdxbeaozrgcjxrgtkxrzpshjesucdwhds\nkzkqeeolprcxyxgqqloazkuspwouvvvnkyoxjzvkinowxdzbrytluaorximxnmvfoboqqsozjvschtlgbetizhcjipirccvffgkzyxbeozgctkzpsheus\n", "yddetawddikawvqdrlzrupjncowrjegdlffvqomiuczkpezqtnbnuzcalfsvptfvxkwfualvarudertbhngudovyqfqfuccfspgevzqdcknlnxwphudqnbltuvvpojjxnndexpswqcwhadiyryctuychonrgfkxvemyulrelpsjvzdhfhnwugsbtkasxwchysaxervjz\nyd\n", "qwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfgqwertyuiopasdfg\nqwertyuiopasdfg\n", "tsypkoisgayandsuckedhisdadsdick\ntsypkoisgay\n", "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv\n", "rosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefranci\nrosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefrancirosefranci\n", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaa\n", "abcc\nacc\n", "kbuwmzldbajqgbdyeqqyuvdwsdzvjicqgsadjgruebcsxuhgftlykvuevsldvapqoxkrwjbwjjqquogxkpradzauxxlhrayprgnwxwumabxdojztankeqmraeqbbggrltdvcpiozbrvwhxhjpurwachimqrxrplcavtpaqzemxhrvagbngyqhacuxfbpkwqxyixdfmrj\nkbmrxrplcavtpaqemxhagbghacuxbpkwqxidmj\n", "aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "izoiweukqszkkhwapzxyotbaarpqxbybsjxilhylbbjbvoedrezyluaabsfzvtxxvncdwxrlfdtfvbfoqwlzqwneimwzpoygfdcldmxdhoxzensxlspituzocvzzrfomhggrwurdccgfoorvhyzsdkpjhwakuoxwdjhzaalanyzwuuqwlrtmvmdraleyusjqdyxuztvc\nizoiweukqszkkhwapzxyotbaarpqxbybsjxilhylbbjbvoedrezyluaabsfzvtxxvncdwxrlfdtfvbfoqwlzqwneimwzpoygfdcldmxdhoxzensxlspituzocvzzrfomhggrwurdccgfoorvhyzsdkpjhwakuoxwdjhzaalanyzwuuqwlrtmvmdraleyusjqdyxuztvc\n", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n"], "outputs": ["7\n", "198\n", "4\n", "100\n", "199\n", "151\n", "20\n", "5\n", "5\n", "198\n", "180\n", "20\n", "100\n", "100\n", "27\n", "1\n", "150\n", "99\n", "0\n", "100\n", "109\n", "111\n"]}}, {"index": 4042, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\n$\\text{A}$ \n\n\n-----Input-----\n\nThe input contains a single floating-point number x with exactly 6 decimal places (0 < x < 5).\n\n\n-----Output-----\n\nOutput two integers separated by a single space. Each integer should be between 1 and 10, inclusive. If several solutions exist, output any of them. Solution will exist for all tests.\n\n\n-----Examples-----\nInput\n1.200000\n\nOutput\n3 2\n\nInput\n2.572479\n\nOutput\n10 3\n\nInput\n4.024922\n\nOutput\n9 9\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["1.200000\n", "2.572479\n", "4.024922\n", "0.447214\n", "0.493197\n", "0.496139\n", "0.498273\n", "0.499026\n", "0.499230\n", "0.499376\n", "0.832050\n", "0.894427\n", "0.948683\n", "0.976187\n", "0.986394\n", "0.989949\n", "0.993884\n", "1.404494\n", "1.483405\n", "1.561738\n", "1.736486\n", "1.920553\n"], "outputs": ["3 2\n", "10 3\n", "9 9\n", "1 1\n", "1 3\n", "1 4\n", "1 6\n", "1 8\n", "1 9\n", "1 10\n", "3 1\n", "4 1\n", "6 1\n", "9 1\n", "2 6\n", "2 7\n", "2 9\n", "3 4\n", "3 10\n", "5 2\n", "7 2\n", "5 3\n"]}, "test_in_outs": {"inputs": ["1.923048\n", "1.940285\n", "2.121320\n", "2.277770\n", "2.307692\n", "2.408795\n", "2.683282\n", "2.757435\n", "2.828427\n", "2.867312\n", "2.989637\n", "3.123475\n", "3.130495\n", "3.262016\n", "3.303504\n", "3.472973\n", "3.577709\n", "3.655246\n", "3.922090\n", "4.068667\n", "4.239992\n", "4.472136\n"], "outputs": ["4 7\n", "4 8\n", "6 3\n", "7 3\n", "5 6\n", "5 9\n", "6 6\n", "6 7\n", "8 4\n", "7 5\n", "9 4\n", "10 4\n", "7 7\n", "7 9\n", "7 10\n", "8 7\n", "8 8\n", "8 9\n", "9 8\n", "10 7\n", "10 8\n", "10 10\n"]}}, {"index": 4043, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given three integers $n$, $d$ and $k$.\n\nYour task is to construct an undirected tree on $n$ vertices with diameter $d$ and degree of each vertex at most $k$, or say that it is impossible.\n\nAn undirected tree is a connected undirected graph with $n - 1$ edges.\n\nDiameter of a tree is the maximum length of a simple path (a path in which each vertex appears at most once) between all pairs of vertices of this tree.\n\nDegree of a vertex is the number of edges incident to this vertex (i.e. for a vertex $u$ it is the number of edges $(u, v)$ that belong to the tree, where $v$ is any other vertex of a tree).\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n$, $d$ and $k$ ($1 \\le n, d, k \\le 4 \\cdot 10^5$).\n\n\n-----Output-----\n\nIf there is no tree satisfying the conditions above, print only one word \"NO\" (without quotes).\n\nOtherwise in the first line print \"YES\" (without quotes), and then print $n - 1$ lines describing edges of a tree satisfying the conditions above. Vertices of the tree must be numbered from $1$ to $n$. You can print edges and vertices connected by an edge in any order. If there are multiple answers, print any of them.1\n\n\n-----Examples-----\nInput\n6 3 3\n\nOutput\nYES\n3 1\n4 1\n1 2\n5 2\n2 6\n\nInput\n6 2 3\n\nOutput\nNO\n\nInput\n10 4 3\n\nOutput\nYES\n2 9\n2 10\n10 3\n3 1\n6 10\n8 2\n4 3\n5 6\n6 7\n\nInput\n8 5 3\n\nOutput\nYES\n2 5\n7 2\n3 7\n3 1\n1 6\n8 7\n4 3\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["6 3 3\n", "6 2 3\n", "10 4 3\n", "8 5 3\n", "8 3 3\n", "5 4 2\n", "5 4 3\n", "5 5 2\n", "5 5 3\n", "6 4 2\n", "6 4 3\n", "6 5 2\n", "6 5 3\n", "7 4 2\n", "7 4 3\n", "7 5 2\n", "7 5 3\n", "1 1 1\n", "400000 400000 400000\n", "200000 100000 2\n", "400000 2 399998\n", "400000 3 199999\n", "20 6 3\n", "15 5 3\n"], "outputs": ["YES\n2 5\n4 2\n3 4\n2 1\n4 6\n", "NO\n", "YES\n2 9\n2 10\n10 3\n3 1\n6 10\n8 2\n4 3\n5 6\n6 7\n", "YES\n2 5\n7 2\n3 7\n3 1\n1 6\n8 7\n4 3\n", "NO\n", "YES\n5 2\n4 2\n3 4\n1 3\n", "YES\n5 2\n4 2\n3 4\n1 3\n", "NO\n", "NO\n", "NO\n", "YES\n2 5\n4 2\n3 4\n1 3\n4 6\n", "YES\n2 5\n4 2\n3 4\n1 3\n6 1\n", "YES\n2 5\n4 2\n3 4\n1 3\n6 1\n", "NO\n", "YES\n2 5\n7 2\n3 7\n1 3\n6 7\n4 2\n", "NO\n", "YES\n2 5\n7 2\n3 7\n1 3\n1 6\n4 7\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n2 13\n2 10\n3 10\n1 3\n1 12\n8 12\n3 20\n5 10\n1 16\n20 19\n6 20\n15 2\n12 14\n11 5\n5 17\n7 16\n16 4\n9 19\n18 19\n", "NO\n"]}, "test_in_outs": {"inputs": ["5 4 1\n", "2 1 1\n", "21 6 3\n", "3 2 1\n", "3 1 1\n", "22 6 3\n", "2 3 3\n", "2 1 3\n", "7 6 1\n", "14 5 3\n", "3 1 3\n", "4 3 1\n", "9 8 1\n", "26 5 4\n", "6 5 1\n", "2 1 15\n", "10 9 1\n", "2 1 4\n", "2 10 1\n", "2 2 1\n", "2 1 2\n", "2 3 1\n", "2 11 1\n", "4 543 7\n"], "outputs": ["NO\n", "YES\n1 2\n", "YES\n13 2\n10 2\n3 10\n3 1\n12 1\n8 12\n20 3\n10 5\n1 16\n19 20\n6 20\n2 15\n14 12\n5 11\n17 5\n16 7\n4 16\n21 19\n18 19\n6 9\n", "NO\n", "NO\n", "YES\n2 13\n10 2\n10 3\n1 3\n12 1\n12 8\n3 22\n10 5\n16 1\n19 22\n22 6\n15 2\n12 14\n11 5\n5 17\n7 16\n4 16\n21 19\n19 18\n9 6\n20 6\n", "NO\n", "YES\n1 2\n", "NO\n", "YES\n13 2\n2 10\n10 3\n3 1\n12 1\n8 10\n3 4\n5 2\n1 7\n8 9\n6 8\n4 11\n4 14\n", "NO\n", "NO\n", "NO\n", "YES\n2 13\n2 10\n25 10\n1 25\n1 12\n26 10\n10 22\n5 25\n25 16\n19 2\n2 6\n15 1\n14 1\n24 26\n26 17\n7 26\n4 22\n22 21\n18 22\n9 5\n5 20\n23 5\n11 16\n3 16\n16 8\n", "NO\n", "YES\n1 2\n", "NO\n", "YES\n1 2\n", "NO\n", "NO\n", "YES\n1 2\n", "NO\n", "NO\n", "NO\n"]}}, {"index": 4044, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given three integers $a$, $b$ and $x$. Your task is to construct a binary string $s$ of length $n = a + b$ such that there are exactly $a$ zeroes, exactly $b$ ones and exactly $x$ indices $i$ (where $1 \\le i < n$) such that $s_i \\ne s_{i + 1}$. It is guaranteed that the answer always exists.\n\nFor example, for the string \"01010\" there are four indices $i$ such that $1 \\le i < n$ and $s_i \\ne s_{i + 1}$ ($i = 1, 2, 3, 4$). For the string \"111001\" there are two such indices $i$ ($i = 3, 5$).\n\nRecall that binary string is a non-empty sequence of characters where each character is either 0 or 1.\n\n\n-----Input-----\n\nThe first line of the input contains three integers $a$, $b$ and $x$ ($1 \\le a, b \\le 100, 1 \\le x < a + b)$.\n\n\n-----Output-----\n\nPrint only one string $s$, where $s$ is any binary string satisfying conditions described above. It is guaranteed that the answer always exists.\n\n\n-----Examples-----\nInput\n2 2 1\n\nOutput\n1100\n\nInput\n3 3 3\n\nOutput\n101100\n\nInput\n5 3 6\n\nOutput\n01010100\n\n\n\n-----Note-----\n\nAll possible answers for the first example:   1100;  0011. \n\nAll possible answers for the second example:   110100;  101100;  110010;  100110;  011001;  001101;  010011;  001011.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["2 2 1\n", "3 3 3\n", "5 3 6\n", "100 1 2\n", "100 1 1\n", "1 100 1\n", "1 100 2\n", "7 8 7\n", "100 100 199\n", "50 47 18\n", "2 3 3\n", "100 100 100\n", "2 2 2\n", "3 4 6\n", "1 1 1\n", "5 6 2\n", "5 4 2\n", "2 3 4\n", "3 3 2\n", "100 99 100\n", "3 2 1\n"], "outputs": ["1100\n", "101100\n", "01010100\n", "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n", "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110\n", "10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "101010111110000\n", "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\n", "0101010101010101011111111111111111111111111111111111111100000000000000000000000000000000000000000\n", "10110\n", "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111\n", "1001\n", "1010101\n", "10\n", "10000011111\n", "011110000\n", "10101\n", "100011\n", "0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000\n", "00011\n"]}, "test_in_outs": {"inputs": ["12 74 22\n", "6 84 12\n", "3 2 4\n", "66 11 22\n", "83 83 83\n", "9 89 18\n", "2 1 2\n", "52 12 17\n", "55 56 110\n", "67 81 40\n", "15 26 24\n", "7 99 14\n", "99 41 17\n", "91 87 11\n", "73 61 122\n", "10 40 1\n", "10 6 10\n", "78 67 117\n", "3 5 6\n", "30 34 44\n", "2 15 4\n", "4 9 6\n"], "outputs": ["10101010101010101010100111111111111111111111111111111111111111111111111111111111111111\n", "101010101010111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "01010\n", "01010101010101010101010000000000000000000000000000000000000000000000000000000\n", "1010101010101010101010101010101010101010101010101010101010101010101010101010101010111111111111111111111111111111111111111111000000000000000000000000000000000000000000\n", "10101010101010101011111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "010\n", "0101010101010101000000000000000000000000000000000000000000001111\n", "101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\n", "1010101010101010101010101010101010101010000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111\n", "10101010101010101010101000011111111111111\n", "1010101010101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "01010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111\n", "0101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000000000000\n", "11111111111111111111111111111111111111110000000000\n", "0101010101100000\n", "0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000111111111\n", "10101011\n", "1010101010101010101010101010101010101010101000000000111111111111\n", "10101111111111111\n", "1010100111111\n"]}}, {"index": 4045, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given two strings $s$ and $t$ both of length $2$ and both consisting only of characters 'a', 'b' and 'c'.\n\nPossible examples of strings $s$ and $t$: \"ab\", \"ca\", \"bb\".\n\nYou have to find a string $res$ consisting of $3n$ characters, $n$ characters should be 'a', $n$ characters should be 'b' and $n$ characters should be 'c' and $s$ and $t$ should not occur in $res$ as substrings.\n\nA substring of a string is a contiguous subsequence of that string. So, the strings \"ab\", \"ac\" and \"cc\" are substrings of the string \"abacc\", but the strings \"bc\", \"aa\" and \"cb\" are not substrings of the string \"abacc\".\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of characters 'a', 'b' and 'c' in the resulting string.\n\nThe second line of the input contains one string $s$ of length $2$ consisting of characters 'a', 'b' and 'c'.\n\nThe third line of the input contains one string $t$ of length $2$ consisting of characters 'a', 'b' and 'c'.\n\n\n-----Output-----\n\nIf it is impossible to find the suitable string, print \"NO\" on the first line. \n\nOtherwise print \"YES\" on the first line and string $res$ on the second line. $res$ should consist of $3n$ characters, $n$ characters should be 'a', $n$ characters should be 'b' and $n$ characters should be 'c' and $s$ and $t$ should not occur in $res$ as substrings.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n2\nab\nbc\n\nOutput\nYES\nacbbac\n\nInput\n3\naa\nbc\n\nOutput\nYES\ncacbacbab\n\nInput\n1\ncb\nac\n\nOutput\nYES\nabc\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["2\nab\nbc\n", "3\naa\nbc\n", "1\ncb\nac\n", "1\nab\ncb\n", "3\nbb\ncb\n", "4\naa\nbb\n", "4\naa\nbc\n", "4\nbc\nca\n", "10\naa\naa\n", "10\nac\nab\n", "10\nbb\nbc\n", "20\nca\nab\n", "20\ncc\nac\n", "20\nab\nbb\n", "100\nab\nac\n", "100\naa\nba\n", "100\nbc\nbb\n", "1\nca\nba\n", "2\nbc\nca\n", "1\nab\nbb\n", "2\ncb\nab\n"], "outputs": ["YES\nacbacb\n", "YES\nacbacbacb\n", "YES\nabc\n", "YES\nbac\n", "YES\nabcabcabc\n", "YES\nabcabcabcabc\n", "YES\nacbacbacbacb\n", "YES\nacbacbacbacb\n", "YES\nabcabcabcabcabcabcabcabcabcabc\n", "YES\nbbbbbbbbbbccccccccccaaaaaaaaaa\n", "YES\nacbacbacbacbacbacbacbacbacbacb\n", "YES\nacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n", "YES\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n", "YES\nacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n", "YES\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "YES\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n", "YES\nacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n", "YES\nabc\n", "YES\nacbacb\n", "YES\nacb\n", "YES\nbbaacc\n"]}, "test_in_outs": {"inputs": ["1\nba\ncc\n", "2\naa\nca\n", "1\nba\nba\n", "2\nac\naa\n", "1\ncc\ncb\n", "2\nbb\nab\n", "1\nac\ncc\n", "2\ncb\naa\n", "1\nbb\nab\n", "2\nca\nbb\n", "1\nbc\nac\n", "2\naa\nbc\n", "1\ncc\nac\n", "2\nbb\nca\n", "1\nca\nca\n", "2\nba\ncb\n", "3\nac\nbc\n", "10\nac\nca\n", "5\nac\nca\n", "90\nbc\nba\n", "3\nab\nba\n"], "outputs": ["YES\nabc\n", "YES\nacbacb\n", "YES\nabc\n", "YES\nabcabc\n", "YES\nabc\n", "YES\nacbacb\n", "YES\nabc\n", "YES\nabcabc\n", "YES\nacb\n", "YES\nacbacb\n", "YES\ncab\n", "YES\nacbacb\n", "YES\nabc\n", "YES\nacbacb\n", "YES\nabc\n", "YES\nabcabc\n", "YES\ncccaaabbb\n", "YES\naaaaaaaaaabbbbbbbbbbcccccccccc\n", "YES\naaaaabbbbbccccc\n", "YES\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n", "YES\naaacccbbb\n"]}}, {"index": 4046, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nAn array of integers $p_1, p_2, \\dots, p_n$ is called a permutation if it contains each number from $1$ to $n$ exactly once. For example, the following arrays are permutations: $[3, 1, 2]$, $[1]$, $[1, 2, 3, 4, 5]$ and $[4, 3, 1, 2]$. The following arrays are not permutations: $[2]$, $[1, 1]$, $[2, 3, 4]$.\n\nPolycarp invented a really cool permutation $p_1, p_2, \\dots, p_n$ of length $n$. It is very disappointing, but he forgot this permutation. He only remembers the array $q_1, q_2, \\dots, q_{n-1}$ of length $n-1$, where $q_i=p_{i+1}-p_i$.\n\nGiven $n$ and $q=q_1, q_2, \\dots, q_{n-1}$, help Polycarp restore the invented permutation.\n\n\n-----Input-----\n\nThe first line contains the integer $n$ ($2 \\le n \\le 2\\cdot10^5$) \u2014 the length of the permutation to restore. The second line contains $n-1$ integers $q_1, q_2, \\dots, q_{n-1}$ ($-n < q_i < n$).\n\n\n-----Output-----\n\nPrint the integer -1 if there is no such permutation of length $n$ which corresponds to the given array $q$. Otherwise, if it exists, print $p_1, p_2, \\dots, p_n$. Print any such permutation if there are many of them.\n\n\n-----Examples-----\nInput\n3\n-2 1\n\nOutput\n3 1 2 \nInput\n5\n1 1 1 1\n\nOutput\n1 2 3 4 5 \nInput\n4\n-1 2 2\n\nOutput\n-1\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["3\n-2 1\n", "5\n1 1 1 1\n", "4\n-1 2 2\n", "3\n-1 1\n", "3\n2 1\n", "3\n1 0\n", "3\n1 -1\n", "3\n-1 -2\n", "3\n-2 2\n", "4\n2 -3 -3\n", "4\n1 3 -3\n", "4\n-3 1 -2\n", "4\n0 3 0\n", "4\n-1 -1 1\n", "4\n2 1 1\n", "5\n-2 1 4 -2\n", "5\n-3 1 0 0\n", "5\n1 2 -3 -3\n", "5\n0 2 -3 -1\n", "5\n4 2 2 2\n", "5\n-2 -3 -1 3\n"], "outputs": ["3 1 2 ", "1 2 3 4 5 ", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n"]}, "test_in_outs": {"inputs": ["2\n-1\n", "2\n0\n", "2\n1\n", "3\n-1 -1\n", "3\n2 -1\n", "3\n2 -1\n", "3\n1 1\n", "4\n-1 3 -1\n", "4\n-2 3 -2\n", "4\n2 -3 2\n", "4\n-1 -2 1\n", "5\n-1 2 -3 -1\n", "5\n3 -2 1 -3\n", "5\n-4 1 2 -1\n", "5\n1 1 -3 4\n", "7\n-1 3 -1 2 -1 -1\n", "5\n-3 4 1 1\n", "3\n2 2\n", "7\n1 5 -5 1 3 1\n", "7\n6 6 6 6 6 6\n", "5\n2 1 -1 1\n"], "outputs": ["2 1 ", "-1\n", "1 2 ", "3 2 1 ", "1 3 2 ", "1 3 2 ", "1 2 3 ", "2 1 4 3 ", "3 1 4 2 ", "2 4 1 3 ", "4 3 1 2 ", "4 3 5 2 1 ", "2 5 3 4 1 ", "5 1 2 4 3 ", "2 3 4 1 5 ", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n"]}}, {"index": 4047, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nYou are given $n$ chips on a number line. The $i$-th chip is placed at the integer coordinate $x_i$. Some chips can have equal coordinates.\n\nYou can perform each of the two following types of moves any (possibly, zero) number of times on any chip:\n\n  Move the chip $i$ by $2$ to the left or $2$ to the right for free (i.e. replace the current coordinate $x_i$ with $x_i - 2$ or with $x_i + 2$);  move the chip $i$ by $1$ to the left or $1$ to the right and pay one coin for this move (i.e. replace the current coordinate $x_i$ with $x_i - 1$ or with $x_i + 1$). \n\nNote that it's allowed to move chips to any integer coordinate, including negative and zero.\n\nYour task is to find the minimum total number of coins required to move all $n$ chips to the same coordinate (i.e. all $x_i$ should be equal after some sequence of moves).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of chips.\n\nThe second line of the input contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^9$), where $x_i$ is the coordinate of the $i$-th chip.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum total number of coins required to move all $n$ chips to the same coordinate.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n1\n\nInput\n5\n2 2 2 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example you need to move the first chip by $2$ to the right and the second chip by $1$ to the right or move the third chip by $2$ to the left and the second chip by $1$ to the left so the answer is $1$.\n\nIn the second example you need to move two chips with coordinate $3$ by $1$ to the left so the answer is $2$.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["3\n1 2 3\n", "5\n2 2 2 3 3\n", "3\n2 3 3\n", "3\n1 2 2\n", "30\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n", "1\n11\n", "5\n3 3 1 2 2\n", "1\n1\n", "5\n1 2 2 2 2\n", "10\n10 3 3 1 6 2 1 10 6 6\n", "10\n6 4 7 8 2 10 2 7 9 7\n", "1\n1000000000\n", "10\n5 3 6 4 7 10 4 4 5 5\n", "10\n1 3 5 3 7 2 10 1 2 2\n", "10\n4 3 9 5 7 4 9 5 10 2\n", "8\n1 1 3 4 4 4 5 5\n", "6\n1 1 3 2 2 4\n", "10\n3 5 3 2 9 5 7 7 9 10\n", "1\n5\n", "10\n4 3 9 1 10 8 10 4 4 5\n"], "outputs": ["1\n", "2\n", "1\n", "1\n", "15\n", "0\n", "2\n", "0\n", "1\n", "4\n", "4\n", "0\n", "5\n", "4\n", "4\n", "3\n", "3\n", "2\n", "0\n", "4\n"]}, "test_in_outs": {"inputs": ["7\n2 2 2 2 2 2 2\n", "7\n2 2 2 2 2 1 1\n", "24\n237531404 337946240 368396518 580132092 598284356 980126300 288588969 882864616 953826728 432441781 190431218 307028298 780298896 105187973 572137068 28148927 321443861 159804462 974759362 862879627 798856599 608157684 797758503 97033491\n", "5\n2 2 1 1 1\n", "8\n2 2 2 2 2 2 1 1\n", "66\n17474 17509 20550 10873 31311 10156 24680 28012 29609 8266 18126 20151 648 2722 13599 9467 8289 17005 1 31436 21443 265 21543 32682 11647 30228 15498 1331 8459 20026 24054 23702 15400 7243 3017 10315 451 22673 6648 30210 27673 27232 4178 13529 23071 28654 8969 23505 27681 14437 5230 21635 5033 9271 25596 32271 23202 24498 28312 23638 9661 11220 25623 18281 30228 10592\n", "1\n2\n", "2\n2 2\n", "2\n3 3\n", "2\n3 2\n", "2\n2 1\n", "1\n643\n", "1\n436\n", "1\n6436\n", "2\n1 1\n", "1\n43643\n", "1\n64366\n", "1\n6043\n", "1\n4306\n", "2\n6043 4306\n", "53\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"], "outputs": ["0\n", "2\n", "9\n", "2\n", "2\n", "31\n", "0\n", "0\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n"]}}, {"index": 4048, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nTakahashi is standing on a multiplication table with infinitely many rows and columns.\nThe square (i,j) contains the integer i \\times j. Initially, Takahashi is standing at (1,1).\nIn one move, he can move from (i,j) to either (i+1,j) or (i,j+1).\nGiven an integer N, find the minimum number of moves needed to reach a square that contains N.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^{12}\n - N is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the minimum number of moves needed to reach a square that contains the integer N.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n5\n\n(2,5) can be reached in five moves. We cannot reach a square that contains 10 in less than five moves.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["10\n", "50\n", "10000000019\n", "1000000000000\n", "2\n", "999999999999\n", "549755813888\n", "200560490130\n", "963761198400\n", "999966000289\n", "999999999711\n", "926260863806\n", "723195876530\n", "684960362090\n", "562620598226\n", "828717795332\n", "673818094825\n", "650444965792\n", "949419762981\n", "613921846801\n"], "outputs": ["5\n", "13\n", "10000000018\n", "1999998\n", "1\n", "1999998\n", "1572862\n", "895679\n", "1963426\n", "1999964\n", "1999998\n", "3067089253\n", "3964051\n", "1657771\n", "2275153\n", "1852066\n", "1655828\n", "2973815\n", "110624888\n", "613921846800\n"]}, "test_in_outs": {"inputs": ["550310490859\n", "571704556531\n", "850749994685\n", "472249589291\n", "216754905542\n", "266467186542\n", "40368799134\n", "310812811094\n", "364621852751\n", "944128792089\n", "260522\n", "914575\n", "436426\n", "979445\n", "648772\n", "690081\n", "933447\n", "190629\n", "523968956449\n", "145329450841\n", "953519049289\n"], "outputs": ["550310490858\n", "571704556530\n", "3203776\n", "472249589290\n", "57559501\n", "4321005\n", "415079\n", "155406405547\n", "1476202078\n", "2014564\n", "130261\n", "36606\n", "218213\n", "2644\n", "1635\n", "2288\n", "7710\n", "888\n", "1447712\n", "762440\n", "1952964\n"]}}, {"index": 4049, "code_type": "standard_input", "method_name": null, "prompt": "\nQUESTION:\nAlice and Bob have decided to play the game \"Rock, Paper, Scissors\". \n\nThe game consists of several rounds, each round is independent of each other. In each round, both players show one of the following things at the same time: rock, paper or scissors. If both players showed the same things then the round outcome is a draw. Otherwise, the following rules applied:\n\n  if one player showed rock and the other one showed scissors, then the player who showed rock is considered the winner and the other one is considered the loser;  if one player showed scissors and the other one showed paper, then the player who showed scissors is considered the winner and the other one is considered the loser;  if one player showed paper and the other one showed rock, then the player who showed paper is considered the winner and the other one is considered the loser. \n\nAlice and Bob decided to play exactly $n$ rounds of the game described above. Alice decided to show rock $a_1$ times, show scissors $a_2$ times and show paper $a_3$ times. Bob decided to show rock $b_1$ times, show scissors $b_2$ times and show paper $b_3$ times. Though, both Alice and Bob did not choose the sequence in which they show things. It is guaranteed that $a_1 + a_2 + a_3 = n$ and $b_1 + b_2 + b_3 = n$.\n\nYour task is to find two numbers:\n\n  the minimum number of round Alice can win;  the maximum number of rounds Alice can win. \n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 10^{9}$) \u2014 the number of rounds.\n\nThe second line of the input contains three integers $a_1, a_2, a_3$ ($0 \\le a_i \\le n$) \u2014 the number of times Alice will show rock, scissors and paper, respectively. It is guaranteed that $a_1 + a_2 + a_3 = n$.\n\nThe third line of the input contains three integers $b_1, b_2, b_3$ ($0 \\le b_j \\le n$) \u2014 the number of times Bob will show rock, scissors and paper, respectively. It is guaranteed that $b_1 + b_2 + b_3 = n$.\n\n\n-----Output-----\n\nPrint two integers: the minimum and the maximum number of rounds Alice can win.\n\n\n-----Examples-----\nInput\n2\n0 1 1\n1 1 0\n\nOutput\n0 1\n\nInput\n15\n5 5 5\n5 5 5\n\nOutput\n0 15\n\nInput\n3\n0 0 3\n3 0 0\n\nOutput\n3 3\n\nInput\n686\n479 178 29\n11 145 530\n\nOutput\n22 334\n\nInput\n319\n10 53 256\n182 103 34\n\nOutput\n119 226\n\n\n\n-----Note-----\n\nIn the first example, Alice will not win any rounds if she shows scissors and then paper and Bob shows rock and then scissors. In the best outcome, Alice will win one round if she shows paper and then scissors, and Bob shows rock and then scissors.\n\nIn the second example, Alice will not win any rounds if Bob shows the same things as Alice each round.\n\nIn the third example, Alice always shows paper and Bob always shows rock so Alice will win all three rounds anyway.\nUse Standard Input format\nANSWER:\n", "train_in_outs": {"inputs": ["2\n0 1 1\n1 1 0\n", "15\n5 5 5\n5 5 5\n", "3\n0 0 3\n3 0 0\n", "686\n479 178 29\n11 145 530\n", "319\n10 53 256\n182 103 34\n", "47\n14 21 12\n30 9 8\n", "94317\n66277 24448 3592\n3499 24653 66165\n", "37184\n3965 12513 20706\n436 6945 29803\n", "1000000000\n1000000000 0 0\n0 1000000000 0\n", "1000000000\n0 1000000000 0\n0 0 1000000000\n", "1000000000\n0 0 1000000000\n1000000000 0 0\n", "1000000000\n0 1000000000 0\n1 1 999999998\n", "29912\n24063 5489 360\n10100 9805 10007\n", "57836\n19314 19091 19431\n40680 14990 2166\n", "36\n18 12 6\n21 14 1\n", "364\n293 64 7\n115 122 127\n", "1000000000\n89297275 846134561 64568164\n663031642 222246870 114721488\n", "961732220\n361581771 179093036 421057413\n184611622 34898801 742221797\n", "205079872\n12699844 177323781 15056247\n56986814 62976260 85116798\n", "931934723\n512340462 202375672 217218589\n24862054 655510760 251561909\n"], "outputs": ["0 1\n", "0 15\n", "3 3\n", "22 334\n", "119 226\n", "0 29\n", "0 52600\n", "5132 16914\n", "1000000000 1000000000\n", "1000000000 1000000000\n", "1000000000 1000000000\n", "999999998 999999998\n", "3956 15654\n", "2275 36587\n", "0 21\n", "51 193\n", "0 268586927\n", "0 398603459\n", "57360707 112872889\n", "235916499 739578188\n"]}, "test_in_outs": {"inputs": ["973380539\n83033196 192609087 697738256\n24124463 193317122 755938954\n", "611719383\n414247349 142086484 55385550\n24922319 472027283 114769781\n", "992526155\n514620001 200095684 277810470\n589233536 389331163 13961456\n", "752809980\n85459976 476485751 190864253\n4588621 108831435 639389924\n", "1000000000\n156489182 145117627 698393191\n584283682 217785715 197930603\n", "664021061\n425727725 96184317 142109019\n463569859 164060143 36391059\n", "296306745\n111213479 36570381 148522885\n728762 22073176 273504807\n", "211951290\n5585468 170363369 36002453\n12947451 176703278 22300561\n", "549443692\n382737848 16796163 149909681\n81990150 441109182 26344360\n", "883777408\n404639975 309590423 169547010\n24150042 840092059 19535307\n", "492014327\n28667608 206260838 257085881\n403185309 83153498 5675520\n", "130891927\n10581814 13979481 106330632\n73152071 41478868 16260988\n", "1000000000\n669793172 146615543 183591285\n12476313 9942391 977581296\n", "719072390\n55824972 654496367 8751051\n136903854 477745400 104423136\n", "812921941\n215642936 426179427 171099578\n6655875 797933401 8332665\n", "897080525\n48313410 325560013 523207102\n26603375 25593102 844884048\n", "435492892\n15292602 16025347 404174943\n262685515 5562121 167245256\n", "801879784\n285055113 483389014 33435657\n196515621 548035465 57328698\n", "337749994\n88786600 10360072 238603322\n126215625 187556752 23977617\n", "835152660\n4019491 8720352 822412817\n95025620 238071137 502055903\n"], "outputs": ["0 299766746\n", "274555249 553939449\n", "0 681103089\n", "363065695 566534348\n", "282676873 885890491\n", "0 342560221\n", "13768443 59372319\n", "0 40833480\n", "274403338 481524161\n", "360954626 448325324\n", "168256863 291429009\n", "48590776 97713366\n", "124196839 169034247\n", "39847113 168999159\n", "200654396 230631476\n", "273363536 377756490\n", "231367566 284272983\n", "31210794 375819468\n", "27068953 225362297\n", "82285777 107765463\n"]}}]